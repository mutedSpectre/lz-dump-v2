{
  "address": "0x9d1B1669c73b033DFe47ae5a0164Ab96df25B944",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum StargateFeeLibraryV05.PriceDeviationState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELTA_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELTA_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EQ_REWARD_CAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EQ_REWARD_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FIFTY_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LAMBDA_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LAMBDA_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP_FEE_WITH_EQ_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_BPS_PRICE_CHANGE_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_DEPEG_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_DRIFT_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_SHARED_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_FEE_FOR_SAME_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_FEE_WITH_EQ_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_SUBSIDY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIXTY_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEN_BPS_PRICE_CHANGE_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "defaultAdapterParams",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        }
      ],
      "name": "getDriftFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        }
      ],
      "name": "getEqReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eqReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "amountSD",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "whitelisted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "hasEqReward",
          "type": "bool"
        }
      ],
      "name": "getEquilibriumFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkbRemove",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.SwapObj",
          "name": "s",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolSubsidy",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_hasEqReward",
          "type": "bool"
        }
      ],
      "name": "getProtocolAndLpFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getRemoteChainIds",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolId2",
          "type": "uint256"
        }
      ],
      "name": "isSameToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "isTokenPriceChanged",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum StargateFeeLibraryV05.PriceDeviationState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolIdToLpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolIdToPrice",
      "outputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "basePriceSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPriceSD",
          "type": "uint256"
        },
        {
          "internalType": "enum StargateFeeLibraryV05.PriceDeviationState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "quoteFeeForPriceUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sameToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "setDefaultAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpId",
          "type": "uint256"
        }
      ],
      "name": "setPoolToLpId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolId2",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSame",
          "type": "bool"
        }
      ],
      "name": "setSameToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpStaking",
          "type": "address"
        }
      ],
      "name": "setStargatePoolIdToLPStakingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basePriceSD",
          "type": "uint256"
        }
      ],
      "name": "setTokenBasePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "uint16[]",
          "name": "_remoteChainIds",
          "type": "uint16[]"
        }
      ],
      "name": "setTokenPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stargatePoolIdToLPStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "updateTokenPrice",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whiteListed",
          "type": "bool"
        }
      ],
      "name": "whiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5b6c76f30bf625740bdeb9d6292609e8f8e1c29632edbaf6de18292a55d00113",
  "receipt": {
    "to": null,
    "from": "0x1D7C6783328C145393e84fb47a7f7C548f5Ee28d",
    "contractAddress": "0x9d1B1669c73b033DFe47ae5a0164Ab96df25B944",
    "transactionIndex": 0,
    "gasUsed": "3909334",
    "logsBloom": "0x
    "blockHash": "0xc1874def50cedc148952afbf4edecff14629b483d48a001d4b798d2a89586891",
    "transactionHash": "0x5b6c76f30bf625740bdeb9d6292609e8f8e1c29632edbaf6de18292a55d00113",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4320865,
        "transactionHash": "0x5b6c76f30bf625740bdeb9d6292609e8f8e1c29632edbaf6de18292a55d00113",
        "address": "0x9d1B1669c73b033DFe47ae5a0164Ab96df25B944",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001d7c6783328c145393e84fb47a7f7c548f5ee28d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc1874def50cedc148952afbf4edecff14629b483d48a001d4b798d2a89586891"
      }
    ],
    "blockNumber": 4320865,
    "cumulativeGasUsed": "3909334",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAF54BE5B6eEc24d6BFACf1cce4eaF680A8239398",
    "0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4"
  ],
  "numDeployments": 1,
  "solcInputHash": "bf60e87fc9260a3c8810516d5a1cf7a0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum StargateFeeLibraryV05.PriceDeviationState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELTA_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELTA_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQ_REWARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQ_REWARD_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIFTY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAMBDA_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAMBDA_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_FEE_WITH_EQ_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_BPS_PRICE_CHANGE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_DEPEG_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_DRIFT_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_SHARED_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE_FOR_SAME_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE_WITH_EQ_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_SUBSIDY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIXTY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEN_BPS_PRICE_CHANGE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"defaultAdapterParams\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"getDriftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"getEqReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eqReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amountSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasEqReward\",\"type\":\"bool\"}],\"name\":\"getEquilibriumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkbRemove\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.SwapObj\",\"name\":\"s\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolSubsidy\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_hasEqReward\",\"type\":\"bool\"}],\"name\":\"getProtocolAndLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getRemoteChainIds\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId2\",\"type\":\"uint256\"}],\"name\":\"isSameToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"isTokenPriceChanged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum StargateFeeLibraryV05.PriceDeviationState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIdToLpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIdToPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basePriceSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPriceSD\",\"type\":\"uint256\"},{\"internalType\":\"enum StargateFeeLibraryV05.PriceDeviationState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"quoteFeeForPriceUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sameToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"setDefaultAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpId\",\"type\":\"uint256\"}],\"name\":\"setPoolToLpId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSame\",\"type\":\"bool\"}],\"name\":\"setSameToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpStaking\",\"type\":\"address\"}],\"name\":\"setStargatePoolIdToLPStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePriceSD\",\"type\":\"uint256\"}],\"name\":\"setTokenBasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_remoteChainIds\",\"type\":\"uint16[]\"}],\"name\":\"setTokenPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stargatePoolIdToLPStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whiteListed\",\"type\":\"bool\"}],\"name\":\"whiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/StargateFeeLibraryV05.sol\":\"StargateFeeLibraryV05\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xbc2e0022d4d53d136830aa90037be2ed7a0966f5fd1b409bf5986185984c495f\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xd1617e455d90d41556bba636bc440627d301ec481de16ff04fbd520333c3c6f3\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Factory is Ownable {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    mapping(uint256 => Pool) public getPool; // poolId -> PoolInfo\\n    address[] public allPools;\\n    address public immutable router;\\n    address public defaultFeeLibrary; // address for retrieving fee params for swaps\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: caller must be Router.\\\");\\n        _;\\n    }\\n\\n    constructor(address _router) {\\n        require(_router != address(0x0), \\\"Stargate: _router cant be 0x0\\\"); // 1 time only\\n        router = _router;\\n    }\\n\\n    function setDefaultFeeLibrary(address _defaultFeeLibrary) external onlyOwner {\\n        require(_defaultFeeLibrary != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        defaultFeeLibrary = _defaultFeeLibrary;\\n    }\\n\\n    function allPoolsLength() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    function createPool(\\n        uint256 _poolId,\\n        address _token,\\n        uint8 _sharedDecimals,\\n        uint8 _localDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) public onlyRouter returns (address poolAddress) {\\n        require(address(getPool[_poolId]) == address(0x0), \\\"Stargate: Pool already created\\\");\\n\\n        Pool pool = new Pool(_poolId, router, _token, _sharedDecimals, _localDecimals, defaultFeeLibrary, _name, _symbol);\\n        getPool[_poolId] = pool;\\n        poolAddress = address(pool);\\n        allPools.push(poolAddress);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x90afcaeaf0f8e3e44d25a4596705f792a03f15524e400d0c1c131b291e01c4e9\",\"license\":\"BUSL-1.1\"},\"contracts/LPTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LPTokenERC20 {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    string public name;\\n    string public symbol;\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // set in constructor\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    uint256 public decimals;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Bridge: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Bridge: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xd0ac7dd3767cd0223a26075c43d10bd3866c226f3a43ebc5f5c4b8bc3d21a77e\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./LPTokenERC20.sol\\\";\\nimport \\\"./interfaces/IStargateFeeLibrary.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// Pool contracts on other chains and managed by the Stargate protocol.\\ncontract Pool is LPTokenERC20, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    uint256 public constant BP_DENOMINATOR = 10000;\\n\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct ChainPath {\\n        bool ready; // indicate if the counter chainPath has been created.\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        uint256 weight;\\n        uint256 balance;\\n        uint256 lkb;\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    struct SwapObj {\\n        uint256 amount;\\n        uint256 eqFee;\\n        uint256 eqReward;\\n        uint256 lpFee;\\n        uint256 protocolFee;\\n        uint256 lkbRemove;\\n    }\\n\\n    struct CreditObj {\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // chainPath\\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\\n    mapping(uint16 => mapping(uint256 => uint256)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\\n\\n    // metadata\\n    uint256 public immutable poolId; // shared id between chains to represent same pool\\n    uint256 public sharedDecimals; // the shared decimals (lowest common decimals between chains)\\n    uint256 public localDecimals; // the decimals for the token\\n    uint256 public immutable convertRate; // the decimals for the token\\n    address public immutable token; // the token for the pool\\n    address public immutable router; // the token for the pool\\n\\n    bool public stopSwap; // flag to stop swapping in extreme cases\\n\\n    // Fee and Liquidity\\n    uint256 public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\\n    uint256 public totalWeight; // total weight for pool percentages\\n    uint256 public mintFeeBP; // fee basis points for the mint/deposit\\n    uint256 public protocolFeeBalance; // fee balance created from dao fee\\n    uint256 public mintFeeBalance; // fee balance created from mint fee\\n    uint256 public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\\n    address public feeLibrary; // address for retrieving fee params for swaps\\n\\n    // Delta related\\n    uint256 public deltaCredit; // credits accumulated from txn\\n    bool public batched; // flag to indicate if we want batch processing.\\n    bool public defaultSwapMode; // flag for the default mode for swap\\n    bool public defaultLPMode; // flag for the default mode for lp\\n    uint256 public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\\n    uint256 public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Mint(address to, uint256 amountLP, uint256 amountSD, uint256 mintFeeAmountSD);\\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocalCallback(address _to, uint256 _amountSD, uint256 _amountToMintSD);\\n    event Swap(\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        address from,\\n        uint256 amountSD,\\n        uint256 eqReward,\\n        uint256 eqFee,\\n        uint256 protocolFee,\\n        uint256 lpFee\\n    );\\n    event SendCredits(uint16 dstChainId, uint256 dstPoolId, uint256 credits, uint256 idealBalance);\\n    event RedeemRemote(uint16 chainId, uint256 dstPoolId, address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, bytes to);\\n    event InstantRedeemLocal(address from, uint256 amountLP, uint256 amountSD, address to);\\n    event CreditChainPath(uint16 chainId, uint256 srcPoolId, uint256 amountSD, uint256 idealBalance);\\n    event SwapRemote(address to, uint256 amountSD, uint256 protocolFee, uint256 dstFee);\\n    event WithdrawRemote(uint16 srcChainId, uint256 srcPoolId, uint256 swapAmount, uint256 mintAmount);\\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\\n    event FeesUpdated(uint256 mintFeeBP);\\n    event FeeLibraryUpdated(address feeLibraryAddr);\\n    event StopSwapUpdated(bool swapStop);\\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\\n    event DeltaParamUpdated(bool batched, uint256 swapDeltaBP, uint256 lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: only the router can call this method\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _poolId,\\n        address _router,\\n        address _token,\\n        uint256 _sharedDecimals,\\n        uint256 _localDecimals,\\n        address _feeLibrary,\\n        string memory _name,\\n        string memory _symbol\\n    ) LPTokenERC20(_name, _symbol) {\\n        require(_token != address(0x0), \\\"Stargate: _token cannot be 0x0\\\");\\n        require(_router != address(0x0), \\\"Stargate: _router cannot be 0x0\\\");\\n        poolId = _poolId;\\n        router = _router;\\n        token = _token;\\n        sharedDecimals = _sharedDecimals;\\n        decimals = uint8(_sharedDecimals);\\n        localDecimals = _localDecimals;\\n        convertRate = 10**(uint256(localDecimals).sub(sharedDecimals));\\n        totalWeight = 0;\\n        feeLibrary = _feeLibrary;\\n\\n        //delta algo related\\n        batched = false;\\n        defaultSwapMode = true;\\n        defaultLPMode = true;\\n    }\\n\\n    function getChainPathsLength() public view returns (uint256) {\\n        return chainPaths.length;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n\\n    function mint(address _to, uint256 _amountLD) external nonReentrant onlyRouter returns (uint256) {\\n        return _mintLocal(_to, _amountLD, true, true);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        bool newLiquidity\\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\\n        require(!stopSwap, \\\"Stargate: swap func stopped\\\");\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n\\n        uint256 amountSD = amountLDtoSD(_amountLD);\\n        uint256 minAmountSD = amountLDtoSD(_minAmountLD);\\n\\n        // request fee params from library\\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\\n\\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\\n        eqFeePool = eqFeePool.sub(s.eqReward);\\n        // update the new amount the user gets minus the fees\\n        s.amount = amountSD.sub(s.eqFee).sub(s.protocolFee).sub(s.lpFee);\\n        // users will also get the eqReward\\n        require(s.amount.add(s.eqReward) >= minAmountSD, \\\"Stargate: slippage too high\\\");\\n\\n        // behaviours\\n        //     - protocolFee: booked, stayed and withdrawn at remote.\\n        //     - eqFee: booked, stayed and withdrawn at remote.\\n        //     - lpFee: booked and stayed at remote, can be withdrawn anywhere\\n\\n        s.lkbRemove = amountSD.sub(s.lpFee).add(s.eqReward);\\n        // check for transfer solvency.\\n        require(cp.balance >= s.lkbRemove, \\\"Stargate: dst balance too low\\\");\\n        cp.balance = cp.balance.sub(s.lkbRemove);\\n\\n        if (newLiquidity) {\\n            deltaCredit = deltaCredit.add(amountSD).add(s.eqReward);\\n        } else if (s.eqReward > 0) {\\n            deltaCredit = deltaCredit.add(s.eqReward);\\n        }\\n\\n        // distribute credits on condition.\\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultSwapMode);\\n        }\\n\\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\\n        return s;\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function sendCredits(uint16 _dstChainId, uint256 _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        cp.lkb = cp.lkb.add(cp.credits);\\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\\n        c.credits = cp.credits;\\n        cp.credits = 0;\\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemRemote   ->                        swapRemote\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLP\\n    ) external nonReentrant onlyRouter {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 amountSD = _burnLocal(_from, _amountLP);\\n        //run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountLD);\\n    }\\n\\n    function instantRedeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        address _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 _deltaCredit = deltaCredit; // sload optimization.\\n        uint256 _capAmountLP = _amountSDtoLP(_deltaCredit);\\n\\n        if (_amountLP > _capAmountLP) _amountLP = _capAmountLP;\\n\\n        amountSD = _burnLocal(_from, _amountLP);\\n        deltaCredit = _deltaCredit.sub(amountSD);\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit InstantRedeemLocal(_from, _amountLP, amountSD, _to);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        bytes calldata _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n\\n        // safeguard.\\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        amountSD = _burnLocal(_from, _amountLP);\\n\\n        // run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(false);\\n        }\\n        emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // REMOTE CHAIN FUNCTIONS\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function creditChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        CreditObj memory _c\\n    ) external nonReentrant onlyRouter {\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        cp.balance = cp.balance.add(_c.credits);\\n        if (cp.idealBalance != _c.idealBalance) {\\n            cp.idealBalance = _c.idealBalance;\\n        }\\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swapRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        SwapObj memory _s\\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\\n        // booking lpFee\\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\\n        // booking eqFee\\n        eqFeePool = eqFeePool.add(_s.eqFee);\\n        // booking stargateFee\\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\\n\\n        // update LKB\\n        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\\n\\n        // user receives the amount + the srcReward\\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\\n        _safeTransfer(token, _to, amountLD);\\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCallback(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _amountToMintSD\\n    ) external nonReentrant onlyRouter {\\n        if (_amountToMintSD > 0) {\\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\\n        }\\n\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        cp.lkb = cp.lkb.sub(_amountSD);\\n\\n        uint256 amountLD = amountSDtoLD(_amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCheckOnRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _amountSD\\n    ) external nonReentrant onlyRouter returns (uint256 swapAmount, uint256 mintAmount) {\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        if (_amountSD > cp.balance) {\\n            mintAmount = _amountSD - cp.balance;\\n            swapAmount = cp.balance;\\n            cp.balance = 0;\\n        } else {\\n            cp.balance = cp.balance.sub(_amountSD);\\n            swapAmount = _amountSD;\\n            mintAmount = 0;\\n        }\\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // DAO Calls\\n    function createChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _weight\\n    ) external onlyRouter {\\n        for (uint256 i = 0; i < chainPaths.length; ++i) {\\n            ChainPath memory cp = chainPaths[i];\\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\\n            require(!exists, \\\"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\\\");\\n        }\\n        totalWeight = totalWeight.add(_weight);\\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\\n        chainPaths.push(ChainPath(false, _dstChainId, _dstPoolId, _weight, 0, 0, 0, 0));\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setWeightForChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint16 _weight\\n    ) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\\n        cp.weight = _weight;\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setFee(uint256 _mintFeeBP) external onlyRouter {\\n        require(_mintFeeBP <= BP_DENOMINATOR, \\\"Bridge: cum fees > 100%\\\");\\n        mintFeeBP = _mintFeeBP;\\n        emit FeesUpdated(mintFeeBP);\\n    }\\n\\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\\n        require(_feeLibraryAddr != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        feeLibrary = _feeLibraryAddr;\\n        emit FeeLibraryUpdated(_feeLibraryAddr);\\n    }\\n\\n    function setSwapStop(bool _swapStop) external onlyRouter {\\n        stopSwap = _swapStop;\\n        emit StopSwapUpdated(_swapStop);\\n    }\\n\\n    function setDeltaParam(\\n        bool _batched,\\n        uint256 _swapDeltaBP,\\n        uint256 _lpDeltaBP,\\n        bool _defaultSwapMode,\\n        bool _defaultLPMode\\n    ) external onlyRouter {\\n        require(_swapDeltaBP <= BP_DENOMINATOR && _lpDeltaBP <= BP_DENOMINATOR, \\\"Stargate: wrong Delta param\\\");\\n        batched = _batched;\\n        swapDeltaBP = _swapDeltaBP;\\n        lpDeltaBP = _lpDeltaBP;\\n        defaultSwapMode = _defaultSwapMode;\\n        defaultLPMode = _defaultLPMode;\\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\\n    }\\n\\n    function callDelta(bool _fullMode) external onlyRouter {\\n        _delta(_fullMode);\\n    }\\n\\n    function activateChainPath(uint16 _dstChainId, uint256 _dstPoolId) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == false, \\\"Stargate: chainPath is already active\\\");\\n        // this func will only be called once\\n        cp.ready = true;\\n    }\\n\\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\\n        if (protocolFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(protocolFeeBalance);\\n            protocolFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\\n        if (mintFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(mintFeeBalance);\\n            mintFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL\\n    // Conversion Helpers\\n    //---------------------------------------------------------------------------\\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256) {\\n        return amountSDtoLD(_amountLPtoSD(_amountLP));\\n    }\\n\\n    function _amountLPtoSD(uint256 _amountLP) internal view returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant convert LPtoSD when totalSupply == 0\\\");\\n        return _amountLP.mul(totalLiquidity).div(totalSupply);\\n    }\\n\\n    function _amountSDtoLP(uint256 _amountSD) internal view returns (uint256) {\\n        require(totalLiquidity > 0, \\\"Stargate: cant convert SDtoLP when totalLiq == 0\\\");\\n        return _amountSD.mul(totalSupply).div(totalLiquidity);\\n    }\\n\\n    function amountSDtoLD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(convertRate);\\n    }\\n\\n    function amountLDtoSD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.div(convertRate);\\n    }\\n\\n    function getAndCheckCP(uint16 _dstChainId, uint256 _dstPoolId) internal view returns (ChainPath storage) {\\n        require(chainPaths.length > 0, \\\"Stargate: no chainpaths exist\\\");\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function getChainPath(uint16 _dstChainId, uint256 _dstPoolId) external view returns (ChainPath memory) {\\n        ChainPath memory cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function _burnLocal(address _from, uint256 _amountLP) internal returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant burn when totalSupply == 0\\\");\\n        uint256 amountOfLPTokens = balanceOf[_from];\\n        require(amountOfLPTokens >= _amountLP, \\\"Stargate: not enough LP tokens to burn\\\");\\n\\n        uint256 amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\\n        //subtract totalLiquidity accordingly\\n        totalLiquidity = totalLiquidity.sub(amountSD);\\n\\n        _burn(_from, _amountLP);\\n        emit Burn(_from, _amountLP, amountSD);\\n        return amountSD;\\n    }\\n\\n    function _delta(bool fullMode) internal {\\n        if (deltaCredit > 0 && totalWeight > 0) {\\n            uint256 cpLength = chainPaths.length;\\n            uint256[] memory deficit = new uint256[](cpLength);\\n            uint256 totalDeficit = 0;\\n\\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\\n            for (uint256 i = 0; i < cpLength; ++i) {\\n                ChainPath storage cp = chainPaths[i];\\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\\n                uint256 balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\\n                uint256 currLiq = cp.lkb.add(cp.credits);\\n                if (balLiq > currLiq) {\\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\\n                    deficit[i] = balLiq - currLiq;\\n                    totalDeficit = totalDeficit.add(deficit[i]);\\n                }\\n            }\\n\\n            // indicates how much delta credit is distributed\\n            uint256 spent;\\n\\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\\n            // run full Delta, allocate all credits\\n            if (totalDeficit == 0) {\\n                // only fullMode delta will allocate excess credits\\n                if (fullMode && deltaCredit > 0) {\\n                    // credit ChainPath by weights\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\\n                        uint256 amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\\n                        spent = spent.add(amtToCredit);\\n                        cp.credits = cp.credits.add(amtToCredit);\\n                    }\\n                } // else do nth\\n            } else if (totalDeficit <= deltaCredit) {\\n                if (fullMode) {\\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\\n                    uint256 excessCredit = deltaCredit - totalDeficit;\\n                    // algorithm steps 14-16: calculate credits\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            // credits = credits + deficit + remaining allocation based on weight\\n                            uint256 amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                } else {\\n                    // totalDeficit <= deltaCredit but not running fullMode\\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            uint256 amtToCredit = deficit[i];\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\\n                for (uint256 i = 0; i < cpLength; ++i) {\\n                    if (deficit[i] > 0) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        uint256 proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\\n                        spent = spent.add(proportionalDeficit);\\n                        cp.credits = cp.credits.add(proportionalDeficit);\\n                    }\\n                }\\n            }\\n\\n            // deduct the amount of credit sent\\n            deltaCredit = deltaCredit.sub(spent);\\n        }\\n    }\\n\\n    function _mintLocal(\\n        address _to,\\n        uint256 _amountLD,\\n        bool _feesEnabled,\\n        bool _creditDelta\\n    ) internal returns (uint256 amountSD) {\\n        require(totalWeight > 0, \\\"Stargate: No ChainPaths exist\\\");\\n        amountSD = amountLDtoSD(_amountLD);\\n\\n        uint256 mintFeeSD = 0;\\n        if (_feesEnabled) {\\n            mintFeeSD = amountSD.mul(mintFeeBP).div(BP_DENOMINATOR);\\n            amountSD = amountSD.sub(mintFeeSD);\\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\\n        }\\n\\n        if (_creditDelta) {\\n            deltaCredit = deltaCredit.add(amountSD);\\n        }\\n\\n        uint256 amountLPTokens = amountSD;\\n        if (totalSupply != 0) {\\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\\n        }\\n        totalLiquidity = totalLiquidity.add(amountSD);\\n\\n        _mint(_to, amountLPTokens);\\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\\n\\n        // add to credits and call delta. short circuit to save gas\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n    }\\n\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) private {\\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Stargate: TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xff0ac7ffc5a5813fb1bce42222d7199f05546fb4b12f55fc3791b6607533f820\",\"license\":\"BUSL-1.1\"},\"contracts/chainlink/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\",\"keccak256\":\"0xa33d12bfca286c3f0dbd77b1451cb14a74db8524d55966a8793223a3717aba56\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateFeeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\nimport \\\"../Pool.sol\\\";\\n\\ninterface IStargateFeeLibrary {\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external returns (Pool.SwapObj memory s);\\n\\n    function getVersion() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x712bc424a034519d61c5a1bbbf3f19fd34dfa51908421775c613f0a44e612d63\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateLPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateLPStaking {\\n    function poolInfo(uint256 _poolIndex)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xeaaf38252f13a03d33073c4cacdb0891eaf145a11ca146f6ba0b1808e25add43\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/StargateFeeLibraryV05.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IStargateFeeLibrary.sol\\\";\\nimport \\\"../Pool.sol\\\";\\nimport \\\"../Factory.sol\\\";\\nimport \\\"../interfaces/IStargateLPStaking.sol\\\";\\nimport \\\"../chainlink/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../lzApp/LzApp.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StargateFeeLibraryV05 is LzApp, IStargateFeeLibrary {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\\n    uint256 public constant DENOMINATOR = 1e18;\\n    uint256 public constant DELTA_1 = 6000 * 1e14;\\n    uint256 public constant DELTA_2 = 500 * 1e14;\\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\\n\\n    // fee/reward bps\\n    uint256 public constant LP_FEE = 1 * 1e14;\\n    uint256 public constant LP_FEE_WITH_EQ_REWARD = 34 * 1e12;\\n    uint256 public constant PROTOCOL_FEE = 9 * 1e14;\\n    uint256 public constant PROTOCOL_FEE_FOR_SAME_TOKEN = 5 * 1e14;\\n    uint256 public constant PROTOCOL_FEE_WITH_EQ_REWARD = 166 * 1e12;\\n    uint256 public constant EQ_REWARD_CAP = 25 * 1e14;\\n    uint256 public constant EQ_REWARD_THRESHOLD = 6 * 1e14;\\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\\n\\n    uint256 public constant FIFTY_PERCENT = 5 * 1e17;\\n    uint256 public constant SIXTY_PERCENT = 6 * 1e17;\\n\\n    // price and state thresholds, may be configurable in the future\\n    uint8 public constant PRICE_SHARED_DECIMALS = 8; // for price normalization\\n    uint256 public constant ONE_BPS_PRICE_CHANGE_THRESHOLD = 1 * 1e14;\\n    uint256 public constant TEN_BPS_PRICE_CHANGE_THRESHOLD = 10 * 1e14;\\n    uint256 public constant PRICE_DRIFT_THRESHOLD = 10 * 1e14; // 10 bps\\n    uint256 public constant PRICE_DEPEG_THRESHOLD = 150 * 1e14; // 150 bps\\n\\n    mapping(address => bool) public whitelist;\\n    mapping(uint256 => uint256) public poolIdToLpId; // poolId -> index of the pool in the lpStaking contract\\n\\n    Factory public immutable factory;\\n\\n    mapping(uint256 => Price) public poolIdToPrice;\\n    mapping(uint256 => mapping(uint256 => bool)) public sameToken; // only for protocol fee, poolId -> poolId -> bool\\n    mapping(uint16 => bytes) public defaultAdapterParams; // for price sync, chainId -> params\\n    mapping(uint256 => address) public stargatePoolIdToLPStaking;\\n\\n    enum PriceDeviationState {\\n        Normal,\\n        Drift,\\n        Depeg\\n    }\\n\\n    struct Price {\\n        address priceFeedAddress;\\n        uint256 basePriceSD; // e.g. $1 for USD token\\n        uint256 currentPriceSD; // price of the pool's token in USD\\n        PriceDeviationState state; // default is Normal\\n        uint16[] remoteChainIds; // chainIds of the pools that are connected to the pool\\n    }\\n\\n    event PriceUpdated(uint256 indexed poolId, uint256 priceSD, PriceDeviationState state);\\n\\n    modifier notDepeg(uint256 _srcPoolId, uint256 _dstPoolId) {\\n        if (_srcPoolId != _dstPoolId) {\\n            require(poolIdToPrice[_srcPoolId].state != PriceDeviationState.Depeg, \\\"FeeLibrary: _srcPoolId depeg\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address _factory,\\n        address _endpoint\\n    ) LzApp(_endpoint) {\\n        require(_factory != address(0x0), \\\"FeeLibrary: Factory cannot be 0x0\\\");\\n        require(_endpoint != address(0x0), \\\"FeeLibrary: Endpoint cannot be 0x0\\\");\\n\\n        factory = Factory(_factory);\\n    }\\n\\n    // --------------------- ONLY OWNER ---------------------\\n    function whiteList(address _from, bool _whiteListed) external onlyOwner {\\n        whitelist[_from] = _whiteListed;\\n    }\\n\\n    function setPoolToLpId(uint256 _poolId, uint256 _lpId) external onlyOwner {\\n        poolIdToLpId[_poolId] = _lpId;\\n    }\\n\\n    // for those chains where to get the price from oracle and sync to other chains\\n    function setTokenPriceFeed(\\n        uint256 _poolId,\\n        address _priceFeedAddress,\\n        uint16[] calldata _remoteChainIds\\n    ) external onlyOwner {\\n        poolIdToPrice[_poolId].priceFeedAddress = _priceFeedAddress;\\n        poolIdToPrice[_poolId].remoteChainIds = _remoteChainIds;\\n    }\\n\\n    function setStargatePoolIdToLPStakingAddress(uint256 _poolId, address _lpStaking) external onlyOwner {\\n        stargatePoolIdToLPStaking[_poolId] = _lpStaking;\\n    }\\n\\n    function setTokenBasePrice(uint256 _poolId, uint256 _basePriceSD) external onlyOwner {\\n        require(_basePriceSD > 0, \\\"FeeLibrary: _basePriceSD cannot be 0\\\");\\n        poolIdToPrice[_poolId].basePriceSD = _basePriceSD;\\n        poolIdToPrice[_poolId].currentPriceSD = _basePriceSD; // reset current price and state\\n        poolIdToPrice[_poolId].state = PriceDeviationState.Normal;\\n    }\\n\\n    function setSameToken(uint256 _poolId1, uint256 _poolId2, bool _isSame) external onlyOwner {\\n        require(_poolId1 != _poolId2, \\\"FeeLibrary: _poolId1 cannot be the same as _poolId2\\\");\\n        if (_poolId1 < _poolId2) {\\n            sameToken[_poolId1][_poolId2] = _isSame;\\n        } else {\\n            sameToken[_poolId2][_poolId1] = _isSame;\\n        }\\n    }\\n\\n    function setDefaultAdapterParams(uint16 _remoteChainId, bytes calldata _adapterParams) external onlyOwner {\\n        defaultAdapterParams[_remoteChainId] = _adapterParams;\\n    }\\n\\n    // Override the renounce ownership inherited by zeppelin ownable\\n    function renounceOwnership() public override onlyOwner {}\\n\\n    // --------------------- PUBLIC FUNCTIONS ---------------------\\n    // anyone can update and sync price at any time even though the price is not changed\\n    function updateTokenPrice(uint256 _poolId) external payable {\\n        Price storage priceObj = poolIdToPrice[_poolId];\\n        (uint256 newPriceSD, PriceDeviationState newState) = _getLatestPriceSDFromPriceFeed(priceObj);\\n\\n        // update price and state\\n        _updatePrice(_poolId, newPriceSD, newState);\\n\\n        // sync the price to remote pools\\n        uint16[] memory remoteChainIds = priceObj.remoteChainIds;\\n        bytes memory payload = abi.encode(_poolId, newPriceSD, newState);\\n        for (uint256 i = 0; i < remoteChainIds.length; i++) {\\n            uint16 remoteChainId = remoteChainIds[i];\\n            address refundAddress = i == remoteChainIds.length - 1? msg.sender : address(this); // refund to msg.sender only for the last call\\n            _lzSend(remoteChainId, payload, payable(refundAddress), address(0), defaultAdapterParams[remoteChainId], address(this).balance);\\n        }\\n    }\\n\\n    // --------------------- VIEW FUNCTIONS ---------------------\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external view override notDepeg(_srcPoolId, _dstPoolId) returns (Pool.SwapObj memory s) {\\n        // calculate the equilibrium reward\\n        bool whitelisted = whitelist[_from];\\n        (s.eqReward, s.protocolFee) = getEqReward(_srcPoolId, _amountSD, whitelisted); // protocol fee is 0 if whitelisted\\n\\n        // calculate the equilibrium fee\\n        bool hasEqReward = s.eqReward > 0;\\n        uint256 protocolSubsidy;\\n        (s.eqFee, protocolSubsidy) = getEquilibriumFee(_srcPoolId, _dstPoolId, _dstChainId, _amountSD, whitelisted, hasEqReward);\\n\\n        // calculate protocol and lp fee\\n        (uint256 protocolFee, uint256 lpFee) = getProtocolAndLpFee(_srcPoolId, _dstPoolId, _dstChainId, _amountSD, protocolSubsidy, whitelisted, hasEqReward);\\n        s.protocolFee = s.protocolFee.add(protocolFee);\\n        s.lpFee = lpFee;\\n\\n        // calculate drift fee\\n        uint256 driftFee = getDriftFee(_srcPoolId, _dstPoolId, _amountSD, whitelisted);\\n        s.protocolFee = s.protocolFee.add(driftFee);\\n\\n        if (_amountSD < s.lpFee.add(s.eqFee).add(s.protocolFee)) {\\n            s.protocolFee = _amountSD.sub(s.lpFee).sub(s.eqFee);\\n        }\\n\\n        return s;\\n    }\\n\\n    // quote fee for price update and sync to remote chains\\n    function quoteFeeForPriceUpdate(uint256 _poolId) external view returns (uint256) {\\n        uint256 total = 0;\\n        uint16[] memory remoteChainIds = poolIdToPrice[_poolId].remoteChainIds;\\n        bytes memory payload = abi.encode(_poolId, uint256(0), PriceDeviationState.Normal); // mock the payload\\n        for (uint256 i = 0; i < remoteChainIds.length; i++) {\\n            uint16 remoteChainId = remoteChainIds[i];\\n            (uint256 fee, ) = lzEndpoint.estimateFees(remoteChainId, address(this), payload, false, defaultAdapterParams[remoteChainId]);\\n            total = total.add(fee);\\n        }\\n        return total;\\n    }\\n\\n    // check if the token price is changed and return the new price and state\\n    function isTokenPriceChanged(uint256 _poolId) external view returns (bool, uint256, PriceDeviationState) {\\n        Price storage priceObj = poolIdToPrice[_poolId];\\n        (uint256 newPriceSD, PriceDeviationState newState) = _getLatestPriceSDFromPriceFeed(priceObj);\\n\\n        // compare two prices and check if the price and sate are changed or not\\n        bool isChanged = _isPriceChanged(priceObj, newPriceSD, newState);\\n\\n        uint256 rtnPrice = isChanged? newPriceSD : priceObj.currentPriceSD;\\n        return (isChanged, rtnPrice, newState);\\n    }\\n\\n    function getEqReward(\\n        uint256 _srcPoolId,\\n        uint256 _amountSD,\\n        bool _whitelisted\\n    ) public view returns (uint256 eqReward, uint256 protocolFee) {\\n        Pool pool = factory.getPool(_srcPoolId);\\n        uint256 currentAssetSD = _getPoolBalanceSD(pool);\\n        uint256 lpAsset = pool.totalLiquidity();\\n        uint256 rewardPoolSize = pool.eqFeePool();\\n\\n        if (lpAsset <= currentAssetSD) {\\n            return (0, 0);\\n        }\\n\\n        uint256 poolDeficit = lpAsset.sub(currentAssetSD);\\n        uint256 rate = rewardPoolSize.mul(DENOMINATOR).div(poolDeficit);\\n\\n        if (rate <= EQ_REWARD_THRESHOLD && !_whitelisted) {\\n            return (0, 0);\\n        }\\n\\n        eqReward = _amountSD.mul(rate).div(DENOMINATOR);\\n        eqReward = eqReward > rewardPoolSize ? rewardPoolSize : eqReward;\\n\\n        if (_whitelisted) {\\n            return (eqReward, 0);\\n        }\\n\\n        uint256 rewardBps = eqReward.mul(DENOMINATOR).div(_amountSD);\\n        if (rewardBps > EQ_REWARD_CAP) {\\n            uint256 cap = _amountSD.mul(EQ_REWARD_CAP).div(DENOMINATOR);\\n            protocolFee = eqReward.sub(cap);\\n        } else {\\n            protocolFee = 0;\\n        }\\n    }\\n\\n    function getEquilibriumFee(\\n        uint256 srcPoolId,\\n        uint256 dstPoolId,\\n        uint16 dstChainId,\\n        uint256 amountSD,\\n        bool whitelisted,\\n        bool hasEqReward\\n    ) public view returns (uint256, uint256) {\\n        if (whitelisted) {\\n            return (0, 0);\\n        }\\n\\n        Pool.ChainPath memory chainPath = factory.getPool(srcPoolId).getChainPath(dstChainId, dstPoolId);\\n        uint256 idealBalance = chainPath.idealBalance;\\n        uint256 beforeBalance = chainPath.balance;\\n\\n        require(beforeBalance >= amountSD, \\\"FeeLibrary: not enough balance\\\");\\n        uint256 afterBalance = beforeBalance.sub(amountSD);\\n\\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\\n\\n        uint256 eqFee = 0;\\n        uint256 protocolSubsidy = 0;\\n        uint256 amountSD_ = amountSD; // stack too deep\\n\\n        if (afterBalance >= safeZoneMax) {\\n            // no fee zone, protocol subsidize it.\\n            eqFee = amountSD_.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\\n            // no subsidy if has eqReward\\n            if (!hasEqReward) {\\n                protocolSubsidy = eqFee;\\n            }\\n        } else if (afterBalance >= safeZoneMin) {\\n            // safe zone\\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\\n        } else {\\n            // danger zone\\n            if (beforeBalance >= safeZoneMin) {\\n                // across 2 or 3 zones\\n                // part 1\\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\\n                // part 2\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\\n            } else {\\n                // only in danger zone\\n                // part 2 only\\n                uint256 beforeBalance_ = beforeBalance; // Stack too deep\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance_, afterBalance));\\n            }\\n        }\\n        return (eqFee, protocolSubsidy);\\n    }\\n\\n    function getProtocolAndLpFee(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16, // _dstChainId\\n        uint256 _amountSD,\\n        uint256 _protocolSubsidy,\\n        bool _whitelisted,\\n        bool _hasEqReward\\n    ) public view returns (uint256, uint256) {\\n        if (_whitelisted) {\\n            return (0, 0);\\n        }\\n\\n        uint256 protocolFeeBps = _hasEqReward ? PROTOCOL_FEE_WITH_EQ_REWARD :\\n            isSameToken(_srcPoolId, _dstPoolId) ? PROTOCOL_FEE_FOR_SAME_TOKEN : PROTOCOL_FEE;\\n        uint256 lpFeeBps = _hasEqReward ? LP_FEE_WITH_EQ_REWARD : LP_FEE;\\n\\n        uint256 amountSD = _amountSD; // Stack too deep\\n        uint256 srcPoolId = _srcPoolId;\\n\\n        uint256 protocolFee = amountSD.mul(protocolFeeBps).div(DENOMINATOR).sub(_protocolSubsidy);\\n        uint256 lpFee = amountSD.mul(lpFeeBps).div(DENOMINATOR);\\n\\n        // when there are active emissions, give the lp fee to the protocol\\n        // lookup LPStaking[Time] address. If it\\n        address lpStakingAddr = stargatePoolIdToLPStaking[srcPoolId];\\n        if(lpStakingAddr != address(0x0)){\\n            IStargateLPStaking lpStaking = IStargateLPStaking(lpStakingAddr);\\n            (, uint256 allocPoint, , ) = lpStaking.poolInfo(poolIdToLpId[srcPoolId]);\\n            if (allocPoint > 0) {\\n                protocolFee = protocolFee.add(lpFee);\\n                lpFee = 0;\\n            }\\n        }\\n\\n\\n        return (protocolFee, lpFee);\\n    }\\n\\n    function getDriftFee(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint256 _amountSD,\\n        bool _whitelisted\\n    ) public view returns (uint256) {\\n        if (_srcPoolId == _dstPoolId || _whitelisted) {\\n            return 0;\\n        }\\n\\n        uint256 srcPriceSD = _getTokenPriceSD(_srcPoolId);\\n        uint256 dstPriceSD = _getTokenPriceSD(_dstPoolId);\\n        if (srcPriceSD >= dstPriceSD) {\\n            return 0;\\n        }\\n\\n        uint256 amountSDAfterFee = _amountSD.mul(srcPriceSD).div(dstPriceSD);\\n        return _amountSD.sub(amountSDAfterFee);\\n    }\\n\\n    function isSameToken(uint256 _poolId1, uint256 _poolId2) public view returns (bool) {\\n        if (_poolId1 == _poolId2) {\\n            return true;\\n        }\\n        return _poolId1 < _poolId2 ? sameToken[_poolId1][_poolId2] : sameToken[_poolId2][_poolId1];\\n    }\\n\\n    function getRemoteChainIds(uint256 _poolId) external view returns (uint16[] memory) {\\n        return poolIdToPrice[_poolId].remoteChainIds;\\n    }\\n\\n    function getVersion() external pure override returns (string memory) {\\n        return \\\"5.0.0\\\";\\n    }\\n\\n    // --------------------- INTERNAL FUNCTIONS ---------------------\\n    function _getTrapezoidArea(\\n        uint256 lambda,\\n        uint256 yOffset,\\n        uint256 xUpperBound,\\n        uint256 xLowerBound,\\n        uint256 xStart,\\n        uint256 xEnd\\n    ) internal pure returns (uint256) {\\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \\\"FeeLibrary: balance out of bound\\\");\\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\\n\\n        // xStartDrift = xUpperBound.sub(xStart);\\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\\n\\n        // xEndDrift = xUpperBound.sub(xEnd)\\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\\n\\n        // compute the area\\n        uint256 deltaX = xStart.sub(xEnd);\\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\\n    }\\n\\n    function _blockingLzReceive(uint16, bytes memory, uint64, bytes memory _payload) internal override {\\n        (uint256 poolId, uint256 amount, PriceDeviationState state) = abi.decode(_payload, (uint16, uint256, PriceDeviationState));\\n        _updatePrice(poolId, amount, state);\\n    }\\n\\n    function _getLatestPriceSDFromPriceFeed(Price storage _priceObj) internal view returns (uint256, PriceDeviationState) {\\n        // get the latest price from the oracle\\n        address priceFeedAddress = _priceObj.priceFeedAddress;\\n        require(priceFeedAddress != address(0x0), \\\"FeeLibrary: price feed not set\\\");\\n        uint8 decimals = AggregatorV3Interface(priceFeedAddress).decimals();\\n        (, int256 price, , , ) = AggregatorV3Interface(priceFeedAddress).latestRoundData();\\n        require(price >= 0, \\\"FeeLibrary: price is negative\\\");\\n\\n        // normalize the price\\n        uint256 newPriceSD = _scalePrice(uint256(price), decimals);\\n        uint256 basePriceSD = _safeGetBasePriceSD(_priceObj);\\n        newPriceSD = newPriceSD > basePriceSD? basePriceSD : newPriceSD;\\n\\n        // get the new state\\n        PriceDeviationState newState = _getPriceDeviationState(newPriceSD, basePriceSD);\\n\\n        return (newPriceSD, newState);\\n    }\\n\\n    function _isPriceChanged(Price storage _priceObj, uint256 _newPriceSD, PriceDeviationState _newState) internal view returns (bool) {\\n        if (_newState != _priceObj.state) {\\n            return true;\\n        }\\n\\n        uint256 threshold = _newState == PriceDeviationState.Drift? ONE_BPS_PRICE_CHANGE_THRESHOLD : TEN_BPS_PRICE_CHANGE_THRESHOLD;\\n        uint256 currentPriceSD = _priceObj.currentPriceSD;\\n        uint256 diff = _newPriceSD > currentPriceSD ? _newPriceSD.sub(currentPriceSD) : currentPriceSD.sub(_newPriceSD);\\n        return currentPriceSD == 0 ? diff > 0 : diff.mul(DENOMINATOR).div(currentPriceSD) >= threshold;\\n    }\\n\\n    function _getTokenPriceSD(uint256 _poolId) internal view returns (uint256) {\\n        Price storage priceObj = poolIdToPrice[_poolId];\\n        return priceObj.state == PriceDeviationState.Normal? _safeGetBasePriceSD(priceObj) : priceObj.currentPriceSD;\\n    }\\n\\n    function _updatePrice(uint256 _poolId, uint256 _priceSD, PriceDeviationState _state) internal {\\n        Price storage priceObj = poolIdToPrice[_poolId];\\n        priceObj.currentPriceSD = _priceSD;\\n\\n        // update state\\n        if (_state != priceObj.state) {\\n            priceObj.state = _state;\\n        }\\n        emit PriceUpdated(_poolId, _priceSD, _state);\\n    }\\n\\n    function _getPriceDeviationState(uint256 _currentPriceSD, uint256 _basePriceSD) internal pure returns (PriceDeviationState) {\\n        uint256 diff = _basePriceSD.sub(_currentPriceSD).mul(DENOMINATOR).div(_basePriceSD);\\n        if (diff <= PRICE_DRIFT_THRESHOLD) {\\n            return PriceDeviationState.Normal;\\n        } else if (diff >= PRICE_DEPEG_THRESHOLD) {\\n            return PriceDeviationState.Depeg;\\n        } else {\\n            return PriceDeviationState.Drift;\\n        }\\n    }\\n\\n    function _scalePrice(uint256 _price, uint8 _decimals) internal pure returns (uint256) {\\n        if (_decimals == PRICE_SHARED_DECIMALS) {\\n            return _price;\\n        }\\n\\n        uint256 rate = _scaleRate(_decimals, PRICE_SHARED_DECIMALS);\\n        return _decimals < PRICE_SHARED_DECIMALS ? _price.mul(rate) : _price.div(rate);\\n    }\\n\\n    function _scaleRate(uint8 _decimals, uint8 _sharedDecimals) internal pure returns (uint256) {\\n        uint256 diff = _decimals > _sharedDecimals? _decimals - _sharedDecimals : _sharedDecimals - _decimals;\\n        require(diff <= 20, \\\"FeeLibrary: diff of decimals is too large\\\");\\n        return 10 ** diff;\\n    }\\n\\n    function _getPoolBalanceSD(Pool _pool) internal view returns (uint256) {\\n        return IERC20(_pool.token()).balanceOf(address(_pool)).div(_pool.convertRate());\\n    }\\n\\n    function _safeGetBasePriceSD(Price storage _priceObj) internal view returns (uint256 priceSD) {\\n        priceSD = _priceObj.basePriceSD;\\n        require(priceSD > 0, \\\"FeeLibrary: base price not set\\\");\\n    }\\n\\n    receive() external payable {} // receive ETH from lz endpoint\\n}\\n\",\"keccak256\":\"0xe7382b36698a78d642a502d0e1aa2da6e57b51db73e3492283d19420eb5c99ba\",\"license\":\"BUSL-1.1\"},\"contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x41fdec97327305b21d03272c6e1e4ab9ab96c57c8ea09f7d6bc8e471d9f5df02\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17066,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 17072,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 17074,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "precrime",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15295,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "whitelist",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15299,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "poolIdToLpId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 15305,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "poolIdToPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Price)15335_storage)"
      },
      {
        "astId": 15311,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "sameToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 15315,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "defaultAdapterParams",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 15319,
        "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
        "label": "stargatePoolIdToLPStaking",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(PriceDeviationState)15323": {
        "encoding": "inplace",
        "label": "enum StargateFeeLibraryV05.PriceDeviationState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Price)15335_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StargateFeeLibraryV05.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)15335_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Price)15335_storage": {
        "encoding": "inplace",
        "label": "struct StargateFeeLibraryV05.Price",
        "members": [
          {
            "astId": 15325,
            "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
            "label": "priceFeedAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15327,
            "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
            "label": "basePriceSD",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15329,
            "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
            "label": "currentPriceSD",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15331,
            "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
            "label": "state",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(PriceDeviationState)15323"
          },
          {
            "astId": 15334,
            "contract": "contracts/libraries/StargateFeeLibraryV05.sol:StargateFeeLibraryV05",
            "label": "remoteChainIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint16)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}