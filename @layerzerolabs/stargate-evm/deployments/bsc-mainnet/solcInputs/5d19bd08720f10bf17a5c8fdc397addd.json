{
  "language": "Solidity",
  "sources": {
    "contracts/Auction.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./interfaces/IERC20Metadata.sol\";\n\ncontract Auction is ERC20 {\n    using SafeERC20 for IERC20Metadata;\n\n    uint public constant AUCTION_CAP = 25_000_000;\n    uint public constant STARGATE_FOR_AUCTION = 100_000_000;\n    uint public constant STARGATE_FOR_LP = 50_000_000;\n\n    uint public constant AUCTION_DURATION = 2 days;\n    uint public constant LOCK_DURATION = 52 weeks;\n    uint public constant VEST_DURATION = 26 weeks;\n\n    address public immutable stargateTreasury;\n    uint8 public immutable astgDecimals;\n\n    IERC20Metadata public immutable stableCoin;\n    IERC20Metadata public immutable stargate;\n\n    //auction constants\n    uint public auctionStartTime;\n    uint public auctionEndTime;\n    uint public immutable auctionCap;\n    uint public auctionedAmount;\n\n    //vesting constants\n    uint public immutable vestStartTime;\n    mapping(address => uint) public redeemedShares;\n\n    uint public immutable stgAuctionAmount;\n\n    event Auctioned(address _sender, uint _astgAmount);\n    event Redeemed(address _sender, uint _astgAmount, uint _stgAmount);\n\n    // ============================ Constructor ====================================\n\n    constructor(\n        address payable _stargateTreasury,\n        IERC20Metadata _stargate,\n        IERC20Metadata _stableCoin,\n        uint _auctionStartTime\n    ) ERC20(\"aSTG\", \"aSTG\") {\n        stargateTreasury = _stargateTreasury;\n\n        stargate = _stargate;\n        stableCoin = _stableCoin;\n        astgDecimals = _stableCoin.decimals();\n\n        auctionCap = AUCTION_CAP * (10**_stableCoin.decimals());\n        stgAuctionAmount = STARGATE_FOR_AUCTION * (10**_stargate.decimals());\n\n        auctionStartTime = _auctionStartTime;\n        auctionEndTime = auctionStartTime + AUCTION_DURATION;\n        vestStartTime = auctionEndTime + LOCK_DURATION;\n    }\n\n    // ============================ Override =======================================\n\n    // this is non-transferable\n    function _beforeTokenTransfer(\n        address _from,\n        address,\n        uint\n    ) internal virtual override {\n        require(_from == address(0), \"non-transferable\");\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return astgDecimals;\n    }\n\n    // ============================ External =======================================\n\n    function enter(uint _amount) external {\n        require(block.timestamp >= auctionStartTime, \"auction not started\");\n        require(block.timestamp < auctionEndTime && auctionedAmount < auctionCap, \"auction finished\");\n        require(_amount > 0, \"amount too small\");\n\n        uint amount = _amount;\n        uint quota = auctionCap - auctionedAmount;\n        if (amount > quota) {\n            amount = quota;\n        }\n\n        stableCoin.safeTransferFrom(msg.sender, stargateTreasury, amount);\n        auctionedAmount += amount;\n        _mint(msg.sender, amount);\n\n        emit Auctioned(msg.sender, amount);\n    }\n\n    function redeem() external {\n        require(block.timestamp >= vestStartTime, \"vesting not started\");\n\n        uint vestSinceStart = block.timestamp - vestStartTime;\n        if (vestSinceStart > VEST_DURATION) {\n            vestSinceStart = VEST_DURATION;\n        }\n\n        uint totalRedeemableShares = (balanceOf(msg.sender) * vestSinceStart) / VEST_DURATION;\n        uint redeemed = redeemedShares[msg.sender];\n        require(totalRedeemableShares > redeemed, \"nothing to redeem\");\n\n        uint newSharesToRedeem = totalRedeemableShares - redeemed;\n        redeemedShares[msg.sender] = redeemed + newSharesToRedeem;\n\n        uint stargateAmount = (stgAuctionAmount * newSharesToRedeem) / totalSupply();\n        stargate.safeTransfer(msg.sender, stargateAmount);\n\n        emit Redeemed(msg.sender, newSharesToRedeem, stargateAmount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/BondingCurve.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"./interfaces/IERC20Metadata.sol\";\n\ncontract BondingCurve is Ownable {\n    using SafeERC20 for IERC20Metadata;\n\n    IERC20Metadata public immutable stargate;\n    IERC20Metadata public immutable stableCoin;\n\n    uint256 public constant DURATION = 3 days;\n    uint256 public slopeNumerator;\n    uint256 public slopeDenominator;\n    uint256 public endTime;\n    uint256 public convertRate;\n    uint256 public initialPrice; //stargate decimals, cast once\n    uint256 public immutable totalStargateForBonding; //stargate decimals\n    uint256 public totalStargateBonded; //stargate decimals\n\n    address public immutable stargateTreasury;\n\n    event Started(uint endTime);\n    event Bonded(address user, uint bondQuantity, uint stableQty);\n    event Withdrawn(address coin, address to, uint tokenQty);\n\n    constructor(\n        address payable _stargateTreasury,\n        IERC20Metadata _stargate,\n        IERC20Metadata _stableCoin,\n        uint256 _totalStargateForBonding //stargate decimals\n    ) {\n        require(_stableCoin.decimals() <= _stargate.decimals(), \"stable coin not supported\");\n\n        stargateTreasury = _stargateTreasury;\n        convertRate = 10**(_stargate.decimals() - _stableCoin.decimals());\n        stargate = _stargate;\n        stableCoin = _stableCoin;\n        totalStargateForBonding = _totalStargateForBonding;\n    }\n\n    modifier notEnded() {\n        require(endTime != 0, \"bonding not started\");\n        require(block.timestamp < endTime, \"bonding ended\");\n        _;\n    }\n\n    // ============================ External =======================================\n\n    function bond(\n        uint256 _targetBondQuantity, // stargate decimals\n        uint256 _maxAmountToPay // stableCoin decimals\n    ) external notEnded {\n        (uint256 amountToPay, uint256 bondQuantity) = _getCostFromQuantity(_targetBondQuantity);\n        require(amountToPay <= _maxAmountToPay, \"exceeds user max amount\");\n\n        _executeBonding(amountToPay, bondQuantity);\n    }\n\n    function bondWithCost(\n        uint256 _totalBondCost, // stableCoin decimals\n        uint256 _minAmountToBuy // stargateCoin decimals\n    ) external notEnded {\n        (uint256 amountToPay, uint256 bondQuantity) = _getQuantityFromCost(_totalBondCost);\n        require(bondQuantity >= _minAmountToBuy, \"under user min amount\");\n\n        _executeBonding(amountToPay, bondQuantity);\n    }\n\n    // ============================ OnlyOwner =====================================\n\n    function start(\n        uint256 _initialPrice,\n        uint256 _slopeNumerator,\n        uint256 _slopeDenominator\n    ) external onlyOwner {\n        require(endTime == 0, \"Bonding already started\");\n        require(stargate.balanceOf(address(this)) == totalStargateForBonding, \"please provision stargate before start\");\n        initialPrice = _toStargateDecimals(_initialPrice);\n        slopeNumerator = _slopeNumerator;\n        slopeDenominator = _slopeDenominator;\n        endTime = block.timestamp + DURATION;\n        emit Started(endTime);\n    }\n\n    function withdrawStargate(address _to, uint _amount) external onlyOwner {\n        require(endTime != 0, \"bonding not started\");\n        require(block.timestamp >= endTime, \"bonding in progress\");\n        stargate.safeTransfer(_to, _amount);\n        emit Withdrawn(address(stargate), _to, _amount);\n    }\n\n    // ============================ Internal =======================================\n\n    function _executeBonding(uint amountToPay, uint bondQuantity) internal {\n        stableCoin.safeTransferFrom(msg.sender, stargateTreasury, amountToPay);\n        stargate.safeTransfer(msg.sender, bondQuantity);\n\n        totalStargateBonded += bondQuantity;\n\n        emit Bonded(msg.sender, bondQuantity, amountToPay);\n    }\n\n    function _getCostFromQuantity(uint _targetQuantity) internal view returns (uint, uint) {\n        uint targetQuantity = _targetQuantity; //stargate decimals\n        uint quota = totalStargateForBonding - totalStargateBonded;\n        if (targetQuantity > quota) {\n            targetQuantity = quota;\n        }\n        require(targetQuantity > 0, \"BondingCurve: There are no remaining tokens to bond\");\n\n        // Linear price curve, S = K*T + I\n        // U = (S + (S + kt))/2 * t\n        uint startPrice = initialPrice + ((totalStargateBonded * slopeNumerator) / slopeDenominator); // in stargate decimals\n        uint endPrice = startPrice + ((targetQuantity * slopeNumerator) / slopeDenominator); // in stargate decimals\n        uint avgPrice = (startPrice + endPrice) / 2; // in stargate decimals\n\n        // totalStargateBonded and targetQuantity are in stargate decimals\n        uint cost = _toStableCoinDecimals((avgPrice * targetQuantity) / (10**stargate.decimals())); //stableCoin decimals\n\n        return (cost, targetQuantity);\n    }\n\n    function _getQuantityFromCost(uint _totalCost) internal view returns (uint, uint) {\n        uint totalCost = _toStargateDecimals(_totalCost); // in stargate decimals\n        uint startPrice = initialPrice + ((totalStargateBonded * slopeNumerator) / slopeDenominator); // in stargate decimals\n\n        uint val = (startPrice**2) + ((2 * totalCost * 10**stargate.decimals() * slopeNumerator) / slopeDenominator);\n        uint quantity = ((_sqrt(val * 10**18) / 10**9 - startPrice) * slopeDenominator) / slopeNumerator;\n\n        uint quota = totalStargateForBonding - totalStargateBonded;\n        if (quantity > quota) {\n            return _getCostFromQuantity(quota);\n        }\n\n        return (_totalCost, quantity);\n    }\n\n    function _toStargateDecimals(uint _amount) internal view returns (uint) {\n        return _amount * convertRate;\n    }\n\n    function _toStableCoinDecimals(uint _amount) internal view returns (uint) {\n        return _amount / convertRate;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function _sqrt(uint256 y) internal pure returns (uint256) {\n        y = y * 10**18;\n        uint256 z;\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        return z / 10**9;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/MerkleDropV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MerkleDropV2 is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    bytes32 public root;\n    address immutable public token;\n    mapping(address => uint256) public claimed;\n\n    event FeesClaimed(address account, uint amount);\n\n    constructor(bytes32 _merkleroot, address _token) {\n        root = _merkleroot;\n        token = _token;\n    }\n\n    function withdrawFees(address _account, uint256 _amount) external onlyOwner {\n        IERC20(token).safeTransfer(_account, _amount);\n    }\n\n    function updateMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        root = _merkleRoot;\n    }\n\n    function redeemFees(address _account, uint256 _amount, bytes32[] calldata _proof) external nonReentrant {\n        bytes32 leaf = _leafEncode(_account, _amount);\n        require(_verify(leaf, _proof), \"MerkleDrop: Invalid merkle proof\");\n\n        uint256 amountToClaim = _amount.sub(claimed[_account]);\n        require(amountToClaim > 0, \"MerkleDrop: No fees to claim\");\n\n        claimed[_account] = _amount;\n\n        IERC20(token).safeTransfer(_account, amountToClaim);\n\n        emit FeesClaimed(_account, amountToClaim);\n    }\n\n    function _leafEncode(address _account, uint256 _amount) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_account, _amount));\n    }\n\n    function _verify(bytes32 _leaf, bytes32[] memory _proof) internal view returns (bool) {\n        return MerkleProof.verify(_proof, root, _leaf);\n    }\n}\n"
    },
    "@openzeppelin/contracts/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/StargateEthVault.sol": {
      "content": "// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./interfaces/IStargateEthVault.sol\";\n\n// This contract always UNWRAPS the erc20 for native gas token on transfer + transferFrom.\n// If you wish to disable the transfer auto-unwrap, you can specify _to addresses with `setNoUnwrapTo`\ncontract StargateEthVault is IStargateEthVault, Ownable, ReentrancyGuard {\n    string public constant name = \"Stargate Ether Vault\";\n    string public constant symbol = \"SGETH\";\n    uint8 public constant decimals = 18;\n\n    uint256 public totalSupply;\n\n    event Approval(address indexed src, address indexed guy, uint wad);\n    event Transfer(address indexed src, address indexed dst, uint wad);\n    event Deposit(address indexed dst, uint wad);\n    event Withdrawal(address indexed src, uint wad);\n    event TransferNative(address indexed src, address indexed dst, uint wad);\n\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n    mapping(address => bool) public noUnwrapTo;\n\n    // if you do NOT wish to unwrap eth on transfers TO certain addresses\n    function setNoUnwrapTo(address _addr) external onlyOwner {\n        noUnwrapTo[_addr] = true;\n    }\n\n    function deposit() public payable override {\n        balanceOf[msg.sender] += msg.value;\n        totalSupply += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint wad) external override {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        totalSupply -= wad;\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function approve(address guy, uint wad) external override returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) external override returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint wad\n    ) public override nonReentrant returns (bool) {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        // always decrement the src (payer) address\n        balanceOf[src] -= wad;\n\n        if (noUnwrapTo[dst]) {\n            // we do *not* unwrap\n            balanceOf[dst] += wad;\n            emit Transfer(src, dst, wad);\n        } else {\n            // unwrap and send native gas token\n            totalSupply -= wad; // if its getting unwrapped, decrement the totalSupply\n            (bool success, ) = dst.call{value: wad}(\"\");\n            require(success, \"SGETH: failed to transfer\");\n            emit TransferNative(src, dst, wad);\n        }\n\n        return true;\n    }\n\n    function renounceOwnership() public override onlyOwner {}\n\n    receive() external payable {\n        deposit();\n    }\n}\n"
    },
    "contracts/interfaces/IStargateEthVault.sol": {
      "content": "pragma solidity 0.7.6;\n\ninterface IStargateEthVault {\n    function deposit() external payable;\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function withdraw(uint) external;\n\n    function approve(address guy, uint wad) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint wad\n    ) external returns (bool);\n}\n"
    },
    "contracts/RouterETH.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"./interfaces/IStargateRouter.sol\";\nimport \"./interfaces/IStargateEthVault.sol\";\n\ncontract RouterETH {\n    address public immutable stargateEthVault;\n    IStargateRouter public immutable stargateRouter;\n    uint16 public immutable poolId;\n\n    constructor(\n        address _stargateEthVault,\n        address _stargateRouter,\n        uint16 _poolId\n    ) {\n        require(_stargateEthVault != address(0x0), \"RouterETH: _stargateEthVault cant be 0x0\");\n        require(_stargateRouter != address(0x0), \"RouterETH: _stargateRouter cant be 0x0\");\n        stargateEthVault = _stargateEthVault;\n        stargateRouter = IStargateRouter(_stargateRouter);\n        poolId = _poolId;\n    }\n\n    function addLiquidityETH() external payable {\n        require(msg.value > 0, \"Stargate: msg.value is 0\");\n\n        uint256 amountLD = msg.value;\n\n        // wrap the ETH into WETH\n        IStargateEthVault(stargateEthVault).deposit{value: amountLD}();\n        IStargateEthVault(stargateEthVault).approve(address(stargateRouter), amountLD);\n\n        // addLiquidity using the WETH that was just wrapped,\n        // and mint the LP token to the msg.sender\n        stargateRouter.addLiquidity(poolId, amountLD, msg.sender);\n    }\n\n    // compose stargate to swap ETH on the source to ETH on the destination\n    function swapETH(\n        uint16 _dstChainId, // destination Stargate chainId\n        address payable _refundAddress, // refund additional messageFee to this address\n        bytes calldata _toAddress, // the receiver of the destination ETH\n        uint256 _amountLD, // the amount, in Local Decimals, to be swapped\n        uint256 _minAmountLD // the minimum amount accepted out on destination\n    ) external payable {\n        require(msg.value > _amountLD, \"Stargate: msg.value must be > _amountLD\");\n\n        // wrap the ETH into WETH\n        IStargateEthVault(stargateEthVault).deposit{value: _amountLD}();\n        IStargateEthVault(stargateEthVault).approve(address(stargateRouter), _amountLD);\n\n        // messageFee is the remainder of the msg.value after wrap\n        uint256 messageFee = msg.value - _amountLD;\n\n        // compose a stargate swap() using the WETH that was just wrapped\n        stargateRouter.swap{value: messageFee}(\n            _dstChainId, // destination Stargate chainId\n            poolId, // WETH Stargate poolId on source\n            poolId, // WETH Stargate poolId on destination\n            _refundAddress, // message refund address if overpaid\n            _amountLD, // the amount in Local Decimals to swap()\n            _minAmountLD, // the minimum amount swap()er would allow to get out (ie: slippage)\n            IStargateRouter.lzTxObj(0, 0, \"0x\"),\n            _toAddress, // address on destination to send to\n            bytes(\"\") // empty payload, since sending to EOA\n        );\n    }\n\n    // this contract needs to accept ETH\n    receive() external payable {}\n}\n"
    },
    "contracts/interfaces/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\ninterface IStargateRouter {\n    struct lzTxObj {\n        uint256 dstGasForCall;\n        uint256 dstNativeAmount;\n        bytes dstNativeAddr;\n    }\n\n    function addLiquidity(\n        uint256 _poolId,\n        uint256 _amountLD,\n        address _to\n    ) external;\n\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable;\n\n    function redeemRemote(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLP,\n        uint256 _minAmountLD,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable;\n\n    function instantRedeemLocal(\n        uint16 _srcPoolId,\n        uint256 _amountLP,\n        address _to\n    ) external returns (uint256);\n\n    function redeemLocal(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLP,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable;\n\n    function sendCredits(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress\n    ) external payable;\n\n    function quoteLayerZeroFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        lzTxObj memory _lzTxParams\n    ) external view returns (uint256, uint256);\n}\n"
    },
    "contracts/mocks/SwapETHMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IStargateRouter.sol\";\nimport \"../interfaces/IStargateReceiver.sol\";\n\ninterface IStargateEthVault {\n    function deposit() external payable;\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function withdraw(uint) external;\n\n    function approve(address guy, uint wad) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint wad\n    ) external returns (bool);\n}\n\ncontract SwapETHMock is IStargateReceiver {\n    address public immutable stargateEthVault;\n    IStargateRouter public immutable stargateRouter;\n    uint16 public immutable poolId;\n\n    constructor(\n        address _stargateEthVault,\n        address _stargateRouter,\n        uint16 _poolId\n    ) {\n        stargateEthVault = _stargateEthVault;\n        stargateRouter = IStargateRouter(_stargateRouter);\n        poolId = _poolId;\n    }\n\n    function addLiquidityETH() external payable {\n        require(msg.value > 0, \"Stargate: msg.value is 0\");\n\n        uint256 amountLD = msg.value;\n\n        // wrap the ETH into WETH\n        IStargateEthVault(stargateEthVault).deposit{value: amountLD}();\n        IStargateEthVault(stargateEthVault).approve(address(stargateRouter), amountLD);\n\n        // addLiquidity using the WETH that was just wrapped,\n        // and mint the LP token to the msg.sender\n        stargateRouter.addLiquidity(poolId, amountLD, msg.sender);\n    }\n\n    // compose stargate to swap ETH on the source to ETH on the destination\n    function swapETH(\n        uint16 _dstChainId, // destination Stargate chainId\n        address payable _refundAddress, // refund additional messageFee to this address\n        bytes calldata _toAddress, // the receiver of the destination ETH\n        uint256 _amountLD, // the amount, in Local Decimals, to be swapped\n        uint256 _minAmountLD, // the minimum amount accepted out on destination\n        address _destinationEOA\n    ) external payable {\n        require(msg.value > _amountLD, \"Stargate: msg.value must be > _amountLD\");\n\n        // wrap the ETH into WETH\n        IStargateEthVault(stargateEthVault).deposit{value: _amountLD}();\n        IStargateEthVault(stargateEthVault).approve(address(stargateRouter), _amountLD);\n\n        bytes memory _payload;\n        {\n            _payload = abi.encode(_destinationEOA);\n        }\n\n        // compose a stargate swap() using the WETH that was just wrapped\n        stargateRouter.swap{value: msg.value - _amountLD}(\n            _dstChainId, // destination Stargate chainId\n            poolId, // WETH Stargate poolId on source\n            poolId, // WETH Stargate poolId on destination\n            _refundAddress, // message refund address if overpaid\n            _amountLD, // the amount in Local Decimals to swap()\n            _minAmountLD, // the minimum amount swap()er would allow to get out (ie: slippage)\n            IStargateRouter.lzTxObj(200000, 0, \"0x\"),\n            _toAddress, // address on destination to send to\n            _payload\n        );\n    }\n\n    //-----------------------------------------------------------------------------------------------------------------------\n    // sgReceive() - the destination contract must implement this function to receive the tokens and payload\n    function sgReceive(\n        uint16, /*_chainId*/\n        bytes memory, /*_srcAddress*/\n        uint, /*_nonce*/\n        address, /*_token*/\n        uint amountLD,\n        bytes memory _payload\n    ) external override {\n        require(msg.sender == address(stargateRouter), \"Stargate: only Router can call sgReceive()\");\n\n        // this contract should hold ETH now\n        address toAddr = abi.decode(_payload, (address));\n\n        // call() the native to the estination EOA\n        (bool success, ) = toAddr.call{value: amountLD}(\"\");\n        require(success, \"SwapETHMock: failed to transfer native ether\");\n    }\n\n    // this contract needs to accept ETH\n    receive() external payable {}\n}\n"
    },
    "contracts/interfaces/IStargateReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\n\ninterface IStargateReceiver {\n    function sgReceive(\n        uint16 _chainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        address _token,\n        uint256 amountLD,\n        bytes memory payload\n    ) external;\n}\n"
    },
    "contracts/mocks/LoopBackMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"../interfaces/IStargateReceiver.sol\";\nimport \"../interfaces/IStargateRouter.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract LoopBackMock is IStargateReceiver {\n    IStargateRouter public immutable router;\n\n    event LoopBack(bytes srcAddress, uint256 srcPoolId, uint256 dstPoolId, uint256 amount);\n\n    constructor(address _router) {\n        router = IStargateRouter(_router);\n    }\n\n    bool paused;\n\n    function sgReceive(\n        uint16 _chainId,\n        bytes memory _srcAddress,\n        uint256, /*_nonce*/\n        address _token,\n        uint256 amountLD,\n        bytes memory payload\n    ) external override {\n        require(!paused, \"Failed sgReceive due to pause\");\n\n        require(msg.sender == address(router), \"only router\");\n        uint256 halfAmount = amountLD / 2;\n        bytes memory srcAddress = _srcAddress;\n\n        // approve the router to spend the halfAmount;\n        IERC20(_token).approve(address(router), halfAmount);\n        IStargateRouter.lzTxObj memory txObj = IStargateRouter.lzTxObj(500000, 0, \"\");\n        (uint256 srcPoolId, uint256 dstPoolId) = abi.decode(payload, (uint256, uint256));\n\n        (uint256 nativeFee, ) = router.quoteLayerZeroFee(_chainId, 1, srcAddress, \"\", txObj);\n        router.swap{value: nativeFee}(_chainId, srcPoolId, dstPoolId, address(this), halfAmount, 0, txObj, srcAddress, bytes(\"0x\"));\n\n        emit LoopBack(srcAddress, srcPoolId, dstPoolId, halfAmount);\n    }\n\n    function pause(bool _paused) external {\n        paused = _paused;\n    }\n\n    // be able to receive ether\n    fallback() external payable {}\n\n    receive() external payable {}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/mocks/LPStakingMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\n// interfaces\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract LPStakingMock {\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. STGs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that STGs distribution occurs.\n        uint256 accStargatePerShare; // Accumulated STGs per share, times 1e12. See below.\n    }\n\n    function poolInfo(\n        uint256 /*_srcPoolId*/\n    ) public pure returns (PoolInfo memory) {\n        return PoolInfo(IERC20(0x0), 0, 0, 0);\n    }\n}\n"
    },
    "contracts/MerkleDrop.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MerkleDrop is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    bytes32 immutable public root;\n    address immutable public token;\n    mapping(bytes32 => bool) public claimed;\n\n    event FeesClaimed(address account, uint amount);\n\n    constructor(bytes32 _merkleroot, address _token) {\n        root = _merkleroot;\n        token = _token;\n    }\n\n    function withdrawFees(address _account, uint256 _amount) external onlyOwner {\n        IERC20(token).safeTransfer(_account, _amount);\n    }\n\n    function redeemFees(address _account, uint256 _amount, bytes32[] calldata _proof) external nonReentrant {\n        bytes32 leaf = _leafEncode(_account, _amount);\n        require(_verify(leaf, _proof), \"MerkleDrop: Invalid merkle proof\");\n\n        require(!claimed[leaf], \"MerkleDrop: Already Claimed\");\n        claimed[leaf] = true;\n\n        IERC20(token).safeTransfer(_account, _amount);\n\n        emit FeesClaimed(_account, _amount);\n    }\n\n    function _leafEncode(address _account, uint256 _amount) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_account, _amount));\n    }\n\n    function _verify(bytes32 _leaf, bytes32[] memory _proof) internal view returns (bool) {\n        return MerkleProof.verify(_proof, root, _leaf);\n    }\n}\n\n\n"
    },
    "contracts/Router.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\n// imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./Factory.sol\";\nimport \"./Pool.sol\";\nimport \"./Bridge.sol\";\n\n// interfaces\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IStargateRouter.sol\";\nimport \"./interfaces/IStargateReceiver.sol\";\n\n// libraries\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Router is IStargateRouter, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // CONSTANTS\n    uint8 internal constant TYPE_REDEEM_LOCAL_RESPONSE = 1;\n    uint8 internal constant TYPE_REDEEM_LOCAL_CALLBACK_RETRY = 2;\n    uint8 internal constant TYPE_SWAP_REMOTE_RETRY = 3;\n\n    //---------------------------------------------------------------------------\n    // STRUCTS\n    struct CachedSwap {\n        address token;\n        uint256 amountLD;\n        address to;\n        bytes payload;\n    }\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    Factory public factory; // used for creating pools\n    address public protocolFeeOwner; // can call methods to pull Stargate fees collected in pools\n    address public mintFeeOwner; // can call methods to pull mint fees collected in pools\n    Bridge public bridge;\n    mapping(uint16 => mapping(bytes => mapping(uint256 => bytes))) public revertLookup; //[chainId][srcAddress][nonce]\n    mapping(uint16 => mapping(bytes => mapping(uint256 => CachedSwap))) public cachedSwapLookup; //[chainId][srcAddress][nonce]\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event Revert(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce);\n    event CachedSwapSaved(\n        uint16 chainId,\n        bytes srcAddress,\n        uint256 nonce,\n        address token,\n        uint256 amountLD,\n        address to,\n        bytes payload,\n        bytes reason\n    );\n    event RevertRedeemLocal(\n        uint16 srcChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        bytes to,\n        uint256 redeemAmountSD,\n        uint256 mintAmountSD,\n        uint256 indexed nonce,\n        bytes indexed srcAddress\n    );\n    event RedeemLocalCallback(\n        uint16 srcChainId,\n        bytes indexed srcAddress,\n        uint256 indexed nonce,\n        uint256 srcPoolId,\n        uint256 dstPoolId,\n        address to,\n        uint256 amountSD,\n        uint256 mintAmountSD\n    );\n\n    //---------------------------------------------------------------------------\n    // MODIFIERS\n    modifier onlyBridge() {\n        require(msg.sender == address(bridge), \"Bridge: caller must be Bridge.\");\n        _;\n    }\n\n    constructor() {}\n\n    function setBridgeAndFactory(Bridge _bridge, Factory _factory) external onlyOwner {\n        require(address(bridge) == address(0x0) && address(factory) == address(0x0), \"Stargate: bridge and factory already initialized\"); // 1 time only\n        require(address(_bridge) != address(0x0), \"Stargate: bridge cant be 0x0\");\n        require(address(_factory) != address(0x0), \"Stargate: factory cant be 0x0\");\n\n        bridge = _bridge;\n        factory = _factory;\n    }\n\n    //---------------------------------------------------------------------------\n    // VIEWS\n    function _getPool(uint256 _poolId) internal view returns (Pool pool) {\n        pool = factory.getPool(_poolId);\n        require(address(pool) != address(0x0), \"Stargate: Pool does not exist\");\n    }\n\n    //---------------------------------------------------------------------------\n    // INTERNAL\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) private {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"Stargate: TRANSFER_FROM_FAILED\");\n    }\n\n    //---------------------------------------------------------------------------\n    // LOCAL CHAIN FUNCTIONS\n    function addLiquidity(\n        uint256 _poolId,\n        uint256 _amountLD,\n        address _to\n    ) external override nonReentrant {\n        Pool pool = _getPool(_poolId);\n        uint256 convertRate = pool.convertRate();\n        _amountLD = _amountLD.div(convertRate).mul(convertRate);\n        _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\n        pool.mint(_to, _amountLD);\n    }\n\n    function swap(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable override nonReentrant {\n        require(_amountLD > 0, \"Stargate: cannot swap 0\");\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        Pool.SwapObj memory s;\n        Pool.CreditObj memory c;\n        {\n            Pool pool = _getPool(_srcPoolId);\n            {\n                uint256 convertRate = pool.convertRate();\n                _amountLD = _amountLD.div(convertRate).mul(convertRate);\n            }\n\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, _amountLD, _minAmountLD, true);\n            _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\n        }\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, _payload);\n    }\n\n    function redeemRemote(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLP,\n        uint256 _minAmountLD,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable override nonReentrant {\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        require(_amountLP > 0, \"Stargate: not enough lp to redeemRemote\");\n        Pool.SwapObj memory s;\n        Pool.CreditObj memory c;\n        {\n            Pool pool = _getPool(_srcPoolId);\n            uint256 amountLD = pool.amountLPtoLD(_amountLP);\n            // perform a swap with no liquidity\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, amountLD, _minAmountLD, false);\n            pool.redeemRemote(_dstChainId, _dstPoolId, msg.sender, _amountLP);\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\n        }\n        // equal to a swap, with no payload (\"0x\") no dstGasForCall 0\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, \"\");\n    }\n\n    function instantRedeemLocal(\n        uint16 _srcPoolId,\n        uint256 _amountLP,\n        address _to\n    ) external override nonReentrant returns (uint256 amountSD) {\n        require(_amountLP > 0, \"Stargate: not enough lp to redeem\");\n        Pool pool = _getPool(_srcPoolId);\n        amountSD = pool.instantRedeemLocal(msg.sender, _amountLP, _to);\n    }\n\n    function redeemLocal(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        uint256 _amountLP,\n        bytes calldata _to,\n        lzTxObj memory _lzTxParams\n    ) external payable override nonReentrant {\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        Pool pool = _getPool(_srcPoolId);\n        require(_amountLP > 0, \"Stargate: not enough lp to redeem\");\n        uint256 amountSD = pool.redeemLocal(msg.sender, _amountLP, _dstChainId, _dstPoolId, _to);\n        require(amountSD > 0, \"Stargate: not enough lp to redeem with amountSD\");\n\n        Pool.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\n        bridge.redeemLocal{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, amountSD, _to, _lzTxParams);\n    }\n\n    function sendCredits(\n        uint16 _dstChainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress\n    ) external payable override nonReentrant {\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        Pool pool = _getPool(_srcPoolId);\n        Pool.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\n        bridge.sendCredits{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c);\n    }\n\n    function quoteLayerZeroFee(\n        uint16 _dstChainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        Router.lzTxObj memory _lzTxParams\n    ) external view override returns (uint256, uint256) {\n        return bridge.quoteLayerZeroFee(_dstChainId, _functionType, _toAddress, _transferAndCallPayload, _lzTxParams);\n    }\n\n    function revertRedeemLocal(\n        uint16 _dstChainId,\n        bytes calldata _srcAddress,\n        uint256 _nonce,\n        address payable _refundAddress,\n        lzTxObj memory _lzTxParams\n    ) external payable {\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\n        bytes memory payload = revertLookup[_dstChainId][_srcAddress][_nonce];\n        require(payload.length > 0, \"Stargate: no retry revert\");\n        {\n            uint8 functionType;\n            assembly {\n                functionType := mload(add(payload, 32))\n            }\n            require(functionType == TYPE_REDEEM_LOCAL_RESPONSE, \"Stargate: invalid function type\");\n        }\n\n        // empty it\n        revertLookup[_dstChainId][_srcAddress][_nonce] = \"\";\n\n        uint256 srcPoolId;\n        uint256 dstPoolId;\n        assembly {\n            srcPoolId := mload(add(payload, 64))\n            dstPoolId := mload(add(payload, 96))\n        }\n\n        Pool.CreditObj memory c;\n        {\n            Pool pool = _getPool(dstPoolId);\n            c = pool.sendCredits(_dstChainId, srcPoolId);\n        }\n\n        bridge.redeemLocalCallback{value: msg.value}(_dstChainId, _refundAddress, c, _lzTxParams, payload);\n    }\n\n    function retryRevert(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint256 _nonce\n    ) external payable {\n        bytes memory payload = revertLookup[_srcChainId][_srcAddress][_nonce];\n        require(payload.length > 0, \"Stargate: no retry revert\");\n\n        // empty it\n        revertLookup[_srcChainId][_srcAddress][_nonce] = \"\";\n\n        uint8 functionType;\n        assembly {\n            functionType := mload(add(payload, 32))\n        }\n\n        if (functionType == TYPE_REDEEM_LOCAL_CALLBACK_RETRY) {\n            (, uint256 srcPoolId, uint256 dstPoolId, address to, uint256 amountSD, uint256 mintAmountSD) = abi.decode(\n                payload,\n                (uint8, uint256, uint256, address, uint256, uint256)\n            );\n            _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, to, amountSD, mintAmountSD);\n        }\n        // for retrying the swapRemote. if it fails again, retry\n        else if (functionType == TYPE_SWAP_REMOTE_RETRY) {\n            (, uint256 srcPoolId, uint256 dstPoolId, uint256 dstGasForCall, address to, Pool.SwapObj memory s, bytes memory p) = abi.decode(\n                payload,\n                (uint8, uint256, uint256, uint256, address, Pool.SwapObj, bytes)\n            );\n            _swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, to, s, p);\n        } else {\n            revert(\"Stargate: invalid function type\");\n        }\n    }\n\n    function clearCachedSwap(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint256 _nonce\n    ) external {\n        CachedSwap memory cs = cachedSwapLookup[_srcChainId][_srcAddress][_nonce];\n        require(cs.to != address(0x0), \"Stargate: cache already cleared\");\n        // clear the data\n        cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(address(0x0), 0, address(0x0), \"\");\n        IStargateReceiver(cs.to).sgReceive(_srcChainId, _srcAddress, _nonce, cs.token, cs.amountLD, cs.payload);\n    }\n\n    function creditChainPath(\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        uint256 _srcPoolId,\n        Pool.CreditObj memory _c\n    ) external onlyBridge {\n        Pool pool = _getPool(_srcPoolId);\n        pool.creditChainPath(_dstChainId, _dstPoolId, _c);\n    }\n\n    //---------------------------------------------------------------------------\n    // REMOTE CHAIN FUNCTIONS\n    function redeemLocalCheckOnRemote(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        uint256 _amountSD,\n        bytes calldata _to\n    ) external onlyBridge {\n        Pool pool = _getPool(_dstPoolId);\n        try pool.redeemLocalCheckOnRemote(_srcChainId, _srcPoolId, _amountSD) returns (uint256 redeemAmountSD, uint256 mintAmountSD) {\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\n                TYPE_REDEEM_LOCAL_RESPONSE,\n                _srcPoolId,\n                _dstPoolId,\n                redeemAmountSD,\n                mintAmountSD,\n                _to\n            );\n            emit RevertRedeemLocal(_srcChainId, _srcPoolId, _dstPoolId, _to, redeemAmountSD, mintAmountSD, _nonce, _srcAddress);\n        } catch {\n            // if the func fail, return [swapAmount: 0, mintAMount: _amountSD]\n            // swapAmount represents the amount of chainPath balance deducted on the remote side, which because the above tx failed, should be 0\n            // mintAmount is the full amount of tokens the user attempted to redeem on the src side, which gets converted back into the lp amount\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REDEEM_LOCAL_RESPONSE, _srcPoolId, _dstPoolId, 0, _amountSD, _to);\n            emit Revert(TYPE_REDEEM_LOCAL_RESPONSE, _srcChainId, _srcAddress, _nonce);\n        }\n    }\n\n    function redeemLocalCallback(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address _to,\n        uint256 _amountSD,\n        uint256 _mintAmountSD\n    ) external onlyBridge {\n        _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\n    }\n\n    function _redeemLocalCallback(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address _to,\n        uint256 _amountSD,\n        uint256 _mintAmountSD\n    ) internal {\n        Pool pool = _getPool(_dstPoolId);\n        try pool.redeemLocalCallback(_srcChainId, _srcPoolId, _to, _amountSD, _mintAmountSD) {} catch {\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\n                TYPE_REDEEM_LOCAL_CALLBACK_RETRY,\n                _srcPoolId,\n                _dstPoolId,\n                _to,\n                _amountSD,\n                _mintAmountSD\n            );\n            emit Revert(TYPE_REDEEM_LOCAL_CALLBACK_RETRY, _srcChainId, _srcAddress, _nonce);\n        }\n        emit RedeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\n    }\n\n    function swapRemote(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        uint256 _dstGasForCall,\n        address _to,\n        Pool.SwapObj memory _s,\n        bytes memory _payload\n    ) external onlyBridge {\n        _swapRemote(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _dstGasForCall, _to, _s, _payload);\n    }\n\n    function _swapRemote(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint256 _nonce,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        uint256 _dstGasForCall,\n        address _to,\n        Pool.SwapObj memory _s,\n        bytes memory _payload\n    ) internal {\n        Pool pool = _getPool(_dstPoolId);\n        // first try catch the swap remote\n        try pool.swapRemote(_srcChainId, _srcPoolId, _to, _s) returns (uint256 amountLD) {\n            if (_payload.length > 0) {\n                // then try catch the external contract call\n                try IStargateReceiver(_to).sgReceive{gas: _dstGasForCall}(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _payload) {\n                    // do nothing\n                } catch (bytes memory reason) {\n                    cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(pool.token(), amountLD, _to, _payload);\n                    emit CachedSwapSaved(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _to, _payload, reason);\n                }\n            }\n        } catch {\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\n                TYPE_SWAP_REMOTE_RETRY,\n                _srcPoolId,\n                _dstPoolId,\n                _dstGasForCall,\n                _to,\n                _s,\n                _payload\n            );\n            emit Revert(TYPE_SWAP_REMOTE_RETRY, _srcChainId, _srcAddress, _nonce);\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // DAO Calls\n    function createPool(\n        uint256 _poolId,\n        address _token,\n        uint8 _sharedDecimals,\n        uint8 _localDecimals,\n        string memory _name,\n        string memory _symbol\n    ) external onlyOwner returns (address) {\n        require(_token != address(0x0), \"Stargate: _token cannot be 0x0\");\n        return factory.createPool(_poolId, _token, _sharedDecimals, _localDecimals, _name, _symbol);\n    }\n\n    function createChainPath(\n        uint256 _poolId,\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        uint256 _weight\n    ) external onlyOwner {\n        Pool pool = _getPool(_poolId);\n        pool.createChainPath(_dstChainId, _dstPoolId, _weight);\n    }\n\n    function activateChainPath(\n        uint256 _poolId,\n        uint16 _dstChainId,\n        uint256 _dstPoolId\n    ) external onlyOwner {\n        Pool pool = _getPool(_poolId);\n        pool.activateChainPath(_dstChainId, _dstPoolId);\n    }\n\n    function setWeightForChainPath(\n        uint256 _poolId,\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        uint16 _weight\n    ) external onlyOwner {\n        Pool pool = _getPool(_poolId);\n        pool.setWeightForChainPath(_dstChainId, _dstPoolId, _weight);\n    }\n\n    function setProtocolFeeOwner(address _owner) external onlyOwner {\n        require(_owner != address(0x0), \"Stargate: _owner cannot be 0x0\");\n        protocolFeeOwner = _owner;\n    }\n\n    function setMintFeeOwner(address _owner) external onlyOwner {\n        require(_owner != address(0x0), \"Stargate: _owner cannot be 0x0\");\n        mintFeeOwner = _owner;\n    }\n\n    function setFees(uint256 _poolId, uint256 _mintFeeBP) external onlyOwner {\n        Pool pool = _getPool(_poolId);\n        pool.setFee(_mintFeeBP);\n    }\n\n    function setFeeLibrary(uint256 _poolId, address _feeLibraryAddr) external onlyOwner {\n        Pool pool = _getPool(_poolId);\n        pool.setFeeLibrary(_feeLibraryAddr);\n    }\n\n    function setSwapStop(uint256 _poolId, bool _swapStop) external onlyOwner {\n        Pool pool = _getPool(_poolId);\n        pool.setSwapStop(_swapStop);\n    }\n\n    function setDeltaParam(\n        uint256 _poolId,\n        bool _batched,\n        uint256 _swapDeltaBP,\n        uint256 _lpDeltaBP,\n        bool _defaultSwapMode,\n        bool _defaultLPMode\n    ) external onlyOwner {\n        Pool pool = _getPool(_poolId);\n        pool.setDeltaParam(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\n    }\n\n    function callDelta(uint256 _poolId, bool _fullMode) external {\n        Pool pool = _getPool(_poolId);\n        pool.callDelta(_fullMode);\n    }\n\n    function withdrawMintFee(uint256 _poolId, address _to) external {\n        require(mintFeeOwner == msg.sender, \"Stargate: only mintFeeOwner\");\n        Pool pool = _getPool(_poolId);\n        pool.withdrawMintFeeBalance(_to);\n    }\n\n    function withdrawProtocolFee(uint256 _poolId, address _to) external {\n        require(protocolFeeOwner == msg.sender, \"Stargate: only protocolFeeOwner\");\n        Pool pool = _getPool(_poolId);\n        pool.withdrawProtocolFeeBalance(_to);\n    }\n}\n"
    },
    "contracts/Factory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Pool.sol\";\n\ncontract Factory is Ownable {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    mapping(uint256 => Pool) public getPool; // poolId -> PoolInfo\n    address[] public allPools;\n    address public immutable router;\n    address public defaultFeeLibrary; // address for retrieving fee params for swaps\n\n    //---------------------------------------------------------------------------\n    // MODIFIERS\n    modifier onlyRouter() {\n        require(msg.sender == router, \"Stargate: caller must be Router.\");\n        _;\n    }\n\n    constructor(address _router) {\n        require(_router != address(0x0), \"Stargate: _router cant be 0x0\"); // 1 time only\n        router = _router;\n    }\n\n    function setDefaultFeeLibrary(address _defaultFeeLibrary) external onlyOwner {\n        require(_defaultFeeLibrary != address(0x0), \"Stargate: fee library cant be 0x0\");\n        defaultFeeLibrary = _defaultFeeLibrary;\n    }\n\n    function allPoolsLength() external view returns (uint256) {\n        return allPools.length;\n    }\n\n    function createPool(\n        uint256 _poolId,\n        address _token,\n        uint8 _sharedDecimals,\n        uint8 _localDecimals,\n        string memory _name,\n        string memory _symbol\n    ) public onlyRouter returns (address poolAddress) {\n        require(address(getPool[_poolId]) == address(0x0), \"Stargate: Pool already created\");\n\n        Pool pool = new Pool(_poolId, router, _token, _sharedDecimals, _localDecimals, defaultFeeLibrary, _name, _symbol);\n        getPool[_poolId] = pool;\n        poolAddress = address(pool);\n        allPools.push(poolAddress);\n    }\n\n    function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\n// imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./LPTokenERC20.sol\";\nimport \"./interfaces/IStargateFeeLibrary.sol\";\n\n// libraries\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/// Pool contracts on other chains and managed by the Stargate protocol.\ncontract Pool is LPTokenERC20, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // CONSTANTS\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    uint256 public constant BP_DENOMINATOR = 10000;\n\n    //---------------------------------------------------------------------------\n    // STRUCTS\n    struct ChainPath {\n        bool ready; // indicate if the counter chainPath has been created.\n        uint16 dstChainId;\n        uint256 dstPoolId;\n        uint256 weight;\n        uint256 balance;\n        uint256 lkb;\n        uint256 credits;\n        uint256 idealBalance;\n    }\n\n    struct SwapObj {\n        uint256 amount;\n        uint256 eqFee;\n        uint256 eqReward;\n        uint256 lpFee;\n        uint256 protocolFee;\n        uint256 lkbRemove;\n    }\n\n    struct CreditObj {\n        uint256 credits;\n        uint256 idealBalance;\n    }\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n\n    // chainPath\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\n    mapping(uint16 => mapping(uint256 => uint256)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\n\n    // metadata\n    uint256 public immutable poolId; // shared id between chains to represent same pool\n    uint256 public sharedDecimals; // the shared decimals (lowest common decimals between chains)\n    uint256 public localDecimals; // the decimals for the token\n    uint256 public immutable convertRate; // the decimals for the token\n    address public immutable token; // the token for the pool\n    address public immutable router; // the token for the pool\n\n    bool public stopSwap; // flag to stop swapping in extreme cases\n\n    // Fee and Liquidity\n    uint256 public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\n    uint256 public totalWeight; // total weight for pool percentages\n    uint256 public mintFeeBP; // fee basis points for the mint/deposit\n    uint256 public protocolFeeBalance; // fee balance created from dao fee\n    uint256 public mintFeeBalance; // fee balance created from mint fee\n    uint256 public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\n    address public feeLibrary; // address for retrieving fee params for swaps\n\n    // Delta related\n    uint256 public deltaCredit; // credits accumulated from txn\n    bool public batched; // flag to indicate if we want batch processing.\n    bool public defaultSwapMode; // flag for the default mode for swap\n    bool public defaultLPMode; // flag for the default mode for lp\n    uint256 public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\n    uint256 public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event Mint(address to, uint256 amountLP, uint256 amountSD, uint256 mintFeeAmountSD);\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\n    event RedeemLocalCallback(address _to, uint256 _amountSD, uint256 _amountToMintSD);\n    event Swap(\n        uint16 chainId,\n        uint256 dstPoolId,\n        address from,\n        uint256 amountSD,\n        uint256 eqReward,\n        uint256 eqFee,\n        uint256 protocolFee,\n        uint256 lpFee\n    );\n    event SendCredits(uint16 dstChainId, uint256 dstPoolId, uint256 credits, uint256 idealBalance);\n    event RedeemRemote(uint16 chainId, uint256 dstPoolId, address from, uint256 amountLP, uint256 amountSD);\n    event RedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, bytes to);\n    event InstantRedeemLocal(address from, uint256 amountLP, uint256 amountSD, address to);\n    event CreditChainPath(uint16 chainId, uint256 srcPoolId, uint256 amountSD, uint256 idealBalance);\n    event SwapRemote(address to, uint256 amountSD, uint256 protocolFee, uint256 dstFee);\n    event WithdrawRemote(uint16 srcChainId, uint256 srcPoolId, uint256 swapAmount, uint256 mintAmount);\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\n    event FeesUpdated(uint256 mintFeeBP);\n    event FeeLibraryUpdated(address feeLibraryAddr);\n    event StopSwapUpdated(bool swapStop);\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\n    event DeltaParamUpdated(bool batched, uint256 swapDeltaBP, uint256 lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\n\n    //---------------------------------------------------------------------------\n    // MODIFIERS\n    modifier onlyRouter() {\n        require(msg.sender == router, \"Stargate: only the router can call this method\");\n        _;\n    }\n\n    constructor(\n        uint256 _poolId,\n        address _router,\n        address _token,\n        uint256 _sharedDecimals,\n        uint256 _localDecimals,\n        address _feeLibrary,\n        string memory _name,\n        string memory _symbol\n    ) LPTokenERC20(_name, _symbol) {\n        require(_token != address(0x0), \"Stargate: _token cannot be 0x0\");\n        require(_router != address(0x0), \"Stargate: _router cannot be 0x0\");\n        poolId = _poolId;\n        router = _router;\n        token = _token;\n        sharedDecimals = _sharedDecimals;\n        decimals = uint8(_sharedDecimals);\n        localDecimals = _localDecimals;\n        convertRate = 10**(uint256(localDecimals).sub(sharedDecimals));\n        totalWeight = 0;\n        feeLibrary = _feeLibrary;\n\n        //delta algo related\n        batched = false;\n        defaultSwapMode = true;\n        defaultLPMode = true;\n    }\n\n    function getChainPathsLength() public view returns (uint256) {\n        return chainPaths.length;\n    }\n\n    //---------------------------------------------------------------------------\n    // LOCAL CHAIN FUNCTIONS\n\n    function mint(address _to, uint256 _amountLD) external nonReentrant onlyRouter returns (uint256) {\n        return _mintLocal(_to, _amountLD, true, true);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // swap             ->                      swapRemote\n    function swap(\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        address _from,\n        uint256 _amountLD,\n        uint256 _minAmountLD,\n        bool newLiquidity\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\n        require(!stopSwap, \"Stargate: swap func stopped\");\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\n        require(cp.ready == true, \"Stargate: counter chainPath is not ready\");\n\n        uint256 amountSD = amountLDtoSD(_amountLD);\n        uint256 minAmountSD = amountLDtoSD(_minAmountLD);\n\n        // request fee params from library\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\n\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\n        eqFeePool = eqFeePool.sub(s.eqReward);\n        // update the new amount the user gets minus the fees\n        s.amount = amountSD.sub(s.eqFee).sub(s.protocolFee).sub(s.lpFee);\n        // users will also get the eqReward\n        require(s.amount.add(s.eqReward) >= minAmountSD, \"Stargate: slippage too high\");\n\n        // behaviours\n        //     - protocolFee: booked, stayed and withdrawn at remote.\n        //     - eqFee: booked, stayed and withdrawn at remote.\n        //     - lpFee: booked and stayed at remote, can be withdrawn anywhere\n\n        s.lkbRemove = amountSD.sub(s.lpFee).add(s.eqReward);\n        // check for transfer solvency.\n        require(cp.balance >= s.lkbRemove, \"Stargate: dst balance too low\");\n        cp.balance = cp.balance.sub(s.lkbRemove);\n\n        if (newLiquidity) {\n            deltaCredit = deltaCredit.add(amountSD).add(s.eqReward);\n        } else if (s.eqReward > 0) {\n            deltaCredit = deltaCredit.add(s.eqReward);\n        }\n\n        // distribute credits on condition.\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(BP_DENOMINATOR)) {\n            _delta(defaultSwapMode);\n        }\n\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\n        return s;\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // sendCredits      ->                      creditChainPath\n    function sendCredits(uint16 _dstChainId, uint256 _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\n        require(cp.ready == true, \"Stargate: counter chainPath is not ready\");\n        cp.lkb = cp.lkb.add(cp.credits);\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\n        c.credits = cp.credits;\n        cp.credits = 0;\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // redeemRemote   ->                        swapRemote\n    function redeemRemote(\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        address _from,\n        uint256 _amountLP\n    ) external nonReentrant onlyRouter {\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\n        uint256 amountSD = _burnLocal(_from, _amountLP);\n        //run Delta\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\n            _delta(defaultLPMode);\n        }\n        uint256 amountLD = amountSDtoLD(amountSD);\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountLD);\n    }\n\n    function instantRedeemLocal(\n        address _from,\n        uint256 _amountLP,\n        address _to\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\n        uint256 _deltaCredit = deltaCredit; // sload optimization.\n        uint256 _capAmountLP = _amountSDtoLP(_deltaCredit);\n\n        if (_amountLP > _capAmountLP) _amountLP = _capAmountLP;\n\n        amountSD = _burnLocal(_from, _amountLP);\n        deltaCredit = _deltaCredit.sub(amountSD);\n        uint256 amountLD = amountSDtoLD(amountSD);\n        _safeTransfer(token, _to, amountLD);\n        emit InstantRedeemLocal(_from, _amountLP, amountSD, _to);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\n    // redeemLocalCallback             <-\n    function redeemLocal(\n        address _from,\n        uint256 _amountLP,\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        bytes calldata _to\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\n\n        // safeguard.\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \"Stargate: counter chainPath is not ready\");\n        amountSD = _burnLocal(_from, _amountLP);\n\n        // run Delta\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\n            _delta(false);\n        }\n        emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\n    }\n\n    //---------------------------------------------------------------------------\n    // REMOTE CHAIN FUNCTIONS\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // sendCredits      ->                      creditChainPath\n    function creditChainPath(\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        CreditObj memory _c\n    ) external nonReentrant onlyRouter {\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\n        cp.balance = cp.balance.add(_c.credits);\n        if (cp.idealBalance != _c.idealBalance) {\n            cp.idealBalance = _c.idealBalance;\n        }\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // swap             ->                      swapRemote\n    function swapRemote(\n        uint16 _srcChainId,\n        uint256 _srcPoolId,\n        address _to,\n        SwapObj memory _s\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\n        // booking lpFee\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\n        // booking eqFee\n        eqFeePool = eqFeePool.add(_s.eqFee);\n        // booking stargateFee\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\n\n        // update LKB\n        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\n\n        // user receives the amount + the srcReward\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\n        _safeTransfer(token, _to, amountLD);\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\n    // redeemLocalCallback             <-\n    function redeemLocalCallback(\n        uint16 _srcChainId,\n        uint256 _srcPoolId,\n        address _to,\n        uint256 _amountSD,\n        uint256 _amountToMintSD\n    ) external nonReentrant onlyRouter {\n        if (_amountToMintSD > 0) {\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\n        }\n\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\n        cp.lkb = cp.lkb.sub(_amountSD);\n\n        uint256 amountLD = amountSDtoLD(_amountSD);\n        _safeTransfer(token, _to, amountLD);\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\n    }\n\n    // Local                                    Remote\n    // -------                                  ---------\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\n    // redeemLocalCallback             <-\n    function redeemLocalCheckOnRemote(\n        uint16 _srcChainId,\n        uint256 _srcPoolId,\n        uint256 _amountSD\n    ) external nonReentrant onlyRouter returns (uint256 swapAmount, uint256 mintAmount) {\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\n        if (_amountSD > cp.balance) {\n            mintAmount = _amountSD - cp.balance;\n            swapAmount = cp.balance;\n            cp.balance = 0;\n        } else {\n            cp.balance = cp.balance.sub(_amountSD);\n            swapAmount = _amountSD;\n            mintAmount = 0;\n        }\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\n    }\n\n    //---------------------------------------------------------------------------\n    // DAO Calls\n    function createChainPath(\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        uint256 _weight\n    ) external onlyRouter {\n        for (uint256 i = 0; i < chainPaths.length; ++i) {\n            ChainPath memory cp = chainPaths[i];\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\n            require(!exists, \"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\");\n        }\n        totalWeight = totalWeight.add(_weight);\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\n        chainPaths.push(ChainPath(false, _dstChainId, _dstPoolId, _weight, 0, 0, 0, 0));\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\n    }\n\n    function setWeightForChainPath(\n        uint16 _dstChainId,\n        uint256 _dstPoolId,\n        uint16 _weight\n    ) external onlyRouter {\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\n        cp.weight = _weight;\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\n    }\n\n    function setFee(uint256 _mintFeeBP) external onlyRouter {\n        require(_mintFeeBP <= BP_DENOMINATOR, \"Bridge: cum fees > 100%\");\n        mintFeeBP = _mintFeeBP;\n        emit FeesUpdated(mintFeeBP);\n    }\n\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\n        require(_feeLibraryAddr != address(0x0), \"Stargate: fee library cant be 0x0\");\n        feeLibrary = _feeLibraryAddr;\n        emit FeeLibraryUpdated(_feeLibraryAddr);\n    }\n\n    function setSwapStop(bool _swapStop) external onlyRouter {\n        stopSwap = _swapStop;\n        emit StopSwapUpdated(_swapStop);\n    }\n\n    function setDeltaParam(\n        bool _batched,\n        uint256 _swapDeltaBP,\n        uint256 _lpDeltaBP,\n        bool _defaultSwapMode,\n        bool _defaultLPMode\n    ) external onlyRouter {\n        require(_swapDeltaBP <= BP_DENOMINATOR && _lpDeltaBP <= BP_DENOMINATOR, \"Stargate: wrong Delta param\");\n        batched = _batched;\n        swapDeltaBP = _swapDeltaBP;\n        lpDeltaBP = _lpDeltaBP;\n        defaultSwapMode = _defaultSwapMode;\n        defaultLPMode = _defaultLPMode;\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\n    }\n\n    function callDelta(bool _fullMode) external onlyRouter {\n        _delta(_fullMode);\n    }\n\n    function activateChainPath(uint16 _dstChainId, uint256 _dstPoolId) external onlyRouter {\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\n        require(cp.ready == false, \"Stargate: chainPath is already active\");\n        // this func will only be called once\n        cp.ready = true;\n    }\n\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\n        if (protocolFeeBalance > 0) {\n            uint256 amountOfLD = amountSDtoLD(protocolFeeBalance);\n            protocolFeeBalance = 0;\n            _safeTransfer(token, _to, amountOfLD);\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\n        }\n    }\n\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\n        if (mintFeeBalance > 0) {\n            uint256 amountOfLD = amountSDtoLD(mintFeeBalance);\n            mintFeeBalance = 0;\n            _safeTransfer(token, _to, amountOfLD);\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // INTERNAL\n    // Conversion Helpers\n    //---------------------------------------------------------------------------\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256) {\n        return amountSDtoLD(_amountLPtoSD(_amountLP));\n    }\n\n    function _amountLPtoSD(uint256 _amountLP) internal view returns (uint256) {\n        require(totalSupply > 0, \"Stargate: cant convert LPtoSD when totalSupply == 0\");\n        return _amountLP.mul(totalLiquidity).div(totalSupply);\n    }\n\n    function _amountSDtoLP(uint256 _amountSD) internal view returns (uint256) {\n        require(totalLiquidity > 0, \"Stargate: cant convert SDtoLP when totalLiq == 0\");\n        return _amountSD.mul(totalSupply).div(totalLiquidity);\n    }\n\n    function amountSDtoLD(uint256 _amount) internal view returns (uint256) {\n        return _amount.mul(convertRate);\n    }\n\n    function amountLDtoSD(uint256 _amount) internal view returns (uint256) {\n        return _amount.div(convertRate);\n    }\n\n    function getAndCheckCP(uint16 _dstChainId, uint256 _dstPoolId) internal view returns (ChainPath storage) {\n        require(chainPaths.length > 0, \"Stargate: no chainpaths exist\");\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \"Stargate: local chainPath does not exist\");\n        return cp;\n    }\n\n    function getChainPath(uint16 _dstChainId, uint256 _dstPoolId) external view returns (ChainPath memory) {\n        ChainPath memory cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \"Stargate: local chainPath does not exist\");\n        return cp;\n    }\n\n    function _burnLocal(address _from, uint256 _amountLP) internal returns (uint256) {\n        require(totalSupply > 0, \"Stargate: cant burn when totalSupply == 0\");\n        uint256 amountOfLPTokens = balanceOf[_from];\n        require(amountOfLPTokens >= _amountLP, \"Stargate: not enough LP tokens to burn\");\n\n        uint256 amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\n        //subtract totalLiquidity accordingly\n        totalLiquidity = totalLiquidity.sub(amountSD);\n\n        _burn(_from, _amountLP);\n        emit Burn(_from, _amountLP, amountSD);\n        return amountSD;\n    }\n\n    function _delta(bool fullMode) internal {\n        if (deltaCredit > 0 && totalWeight > 0) {\n            uint256 cpLength = chainPaths.length;\n            uint256[] memory deficit = new uint256[](cpLength);\n            uint256 totalDeficit = 0;\n\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\n            for (uint256 i = 0; i < cpLength; ++i) {\n                ChainPath storage cp = chainPaths[i];\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\n                uint256 balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\n                uint256 currLiq = cp.lkb.add(cp.credits);\n                if (balLiq > currLiq) {\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\n                    deficit[i] = balLiq - currLiq;\n                    totalDeficit = totalDeficit.add(deficit[i]);\n                }\n            }\n\n            // indicates how much delta credit is distributed\n            uint256 spent;\n\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\n            // run full Delta, allocate all credits\n            if (totalDeficit == 0) {\n                // only fullMode delta will allocate excess credits\n                if (fullMode && deltaCredit > 0) {\n                    // credit ChainPath by weights\n                    for (uint256 i = 0; i < cpLength; ++i) {\n                        ChainPath storage cp = chainPaths[i];\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\n                        uint256 amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\n                        spent = spent.add(amtToCredit);\n                        cp.credits = cp.credits.add(amtToCredit);\n                    }\n                } // else do nth\n            } else if (totalDeficit <= deltaCredit) {\n                if (fullMode) {\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\n                    uint256 excessCredit = deltaCredit - totalDeficit;\n                    // algorithm steps 14-16: calculate credits\n                    for (uint256 i = 0; i < cpLength; ++i) {\n                        if (deficit[i] > 0) {\n                            ChainPath storage cp = chainPaths[i];\n                            // credits = credits + deficit + remaining allocation based on weight\n                            uint256 amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\n                            spent = spent.add(amtToCredit);\n                            cp.credits = cp.credits.add(amtToCredit);\n                        }\n                    }\n                } else {\n                    // totalDeficit <= deltaCredit but not running fullMode\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\n                    for (uint256 i = 0; i < cpLength; ++i) {\n                        if (deficit[i] > 0) {\n                            ChainPath storage cp = chainPaths[i];\n                            uint256 amtToCredit = deficit[i];\n                            spent = spent.add(amtToCredit);\n                            cp.credits = cp.credits.add(amtToCredit);\n                        }\n                    }\n                }\n            } else {\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\n                for (uint256 i = 0; i < cpLength; ++i) {\n                    if (deficit[i] > 0) {\n                        ChainPath storage cp = chainPaths[i];\n                        uint256 proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\n                        spent = spent.add(proportionalDeficit);\n                        cp.credits = cp.credits.add(proportionalDeficit);\n                    }\n                }\n            }\n\n            // deduct the amount of credit sent\n            deltaCredit = deltaCredit.sub(spent);\n        }\n    }\n\n    function _mintLocal(\n        address _to,\n        uint256 _amountLD,\n        bool _feesEnabled,\n        bool _creditDelta\n    ) internal returns (uint256 amountSD) {\n        require(totalWeight > 0, \"Stargate: No ChainPaths exist\");\n        amountSD = amountLDtoSD(_amountLD);\n\n        uint256 mintFeeSD = 0;\n        if (_feesEnabled) {\n            mintFeeSD = amountSD.mul(mintFeeBP).div(BP_DENOMINATOR);\n            amountSD = amountSD.sub(mintFeeSD);\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\n        }\n\n        if (_creditDelta) {\n            deltaCredit = deltaCredit.add(amountSD);\n        }\n\n        uint256 amountLPTokens = amountSD;\n        if (totalSupply != 0) {\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\n        }\n        totalLiquidity = totalLiquidity.add(amountSD);\n\n        _mint(_to, amountLPTokens);\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\n\n        // add to credits and call delta. short circuit to save gas\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\n            _delta(defaultLPMode);\n        }\n    }\n\n    function _safeTransfer(\n        address _token,\n        address _to,\n        uint256 _value\n    ) private {\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"Stargate: TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/Bridge.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\n// imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Pool.sol\";\nimport \"./Router.sol\";\n// interfaces\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroReceiver.sol\";\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroEndpoint.sol\";\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\";\n\n// libraries\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Bridge is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // CONSTANTS\n    uint8 internal constant TYPE_SWAP_REMOTE = 1;\n    uint8 internal constant TYPE_ADD_LIQUIDITY = 2;\n    uint8 internal constant TYPE_REDEEM_LOCAL_CALL_BACK = 3;\n    uint8 internal constant TYPE_WITHDRAW_REMOTE = 4;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    ILayerZeroEndpoint public immutable layerZeroEndpoint;\n    mapping(uint16 => bytes) public bridgeLookup;\n    mapping(uint16 => mapping(uint8 => uint256)) public gasLookup;\n    Router public immutable router;\n    bool public useLayerZeroToken;\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event SendMsg(uint8 msgType, uint64 nonce);\n\n    //---------------------------------------------------------------------------\n    // MODIFIERS\n    modifier onlyRouter() {\n        require(msg.sender == address(router), \"Stargate: caller must be Router.\");\n        _;\n    }\n\n    constructor(address _layerZeroEndpoint, address _router) {\n        require(_layerZeroEndpoint != address(0x0), \"Stargate: _layerZeroEndpoint cannot be 0x0\");\n        require(_router != address(0x0), \"Stargate: _router cannot be 0x0\");\n        layerZeroEndpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\n        router = Router(_router);\n    }\n\n    //---------------------------------------------------------------------------\n    // EXTERNAL functions\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) external override {\n        require(msg.sender == address(layerZeroEndpoint), \"Stargate: only LayerZero endpoint can call lzReceive\");\n        require(\n            _srcAddress.length == bridgeLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(bridgeLookup[_srcChainId]),\n            \"Stargate: bridge does not match\"\n        );\n\n        uint8 functionType;\n        assembly {\n            functionType := mload(add(_payload, 32))\n        }\n\n        if (functionType == TYPE_SWAP_REMOTE) {\n            (\n                ,\n                uint256 srcPoolId,\n                uint256 dstPoolId,\n                uint256 dstGasForCall,\n                Pool.CreditObj memory c,\n                Pool.SwapObj memory s,\n                bytes memory to,\n                bytes memory payload\n            ) = abi.decode(_payload, (uint8, uint256, uint256, uint256, Pool.CreditObj, Pool.SwapObj, bytes, bytes));\n            address toAddress;\n            assembly {\n                toAddress := mload(add(to, 20))\n            }\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\n            router.swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, toAddress, s, payload);\n        } else if (functionType == TYPE_ADD_LIQUIDITY) {\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c) = abi.decode(_payload, (uint8, uint256, uint256, Pool.CreditObj));\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\n        } else if (functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c, uint256 amountSD, uint256 mintAmountSD, bytes memory to) = abi\n                .decode(_payload, (uint8, uint256, uint256, Pool.CreditObj, uint256, uint256, bytes));\n            address toAddress;\n            assembly {\n                toAddress := mload(add(to, 20))\n            }\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\n            router.redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, toAddress, amountSD, mintAmountSD);\n        } else if (functionType == TYPE_WITHDRAW_REMOTE) {\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c, uint256 amountSD, bytes memory to) = abi.decode(\n                _payload,\n                (uint8, uint256, uint256, Pool.CreditObj, uint256, bytes)\n            );\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\n            router.redeemLocalCheckOnRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, amountSD, to);\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // LOCAL CHAIN FUNCTIONS\n    function swap(\n        uint16 _chainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        Pool.CreditObj memory _c,\n        Pool.SwapObj memory _s,\n        IStargateRouter.lzTxObj memory _lzTxParams,\n        bytes calldata _to,\n        bytes calldata _payload\n    ) external payable onlyRouter {\n        bytes memory payload = abi.encode(TYPE_SWAP_REMOTE, _srcPoolId, _dstPoolId, _lzTxParams.dstGasForCall, _c, _s, _to, _payload);\n        _call(_chainId, TYPE_SWAP_REMOTE, _refundAddress, _lzTxParams, payload);\n    }\n\n    function redeemLocalCallback(\n        uint16 _chainId,\n        address payable _refundAddress,\n        Pool.CreditObj memory _c,\n        IStargateRouter.lzTxObj memory _lzTxParams,\n        bytes memory _payload\n    ) external payable onlyRouter {\n        bytes memory payload;\n\n        {\n            (, uint256 srcPoolId, uint256 dstPoolId, uint256 amountSD, uint256 mintAmountSD, bytes memory to) = abi.decode(\n                _payload,\n                (uint8, uint256, uint256, uint256, uint256, bytes)\n            );\n\n            // swap dst and src because we are headed back\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, dstPoolId, srcPoolId, _c, amountSD, mintAmountSD, to);\n        }\n\n        _call(_chainId, TYPE_REDEEM_LOCAL_CALL_BACK, _refundAddress, _lzTxParams, payload);\n    }\n\n    function redeemLocal(\n        uint16 _chainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        Pool.CreditObj memory _c,\n        uint256 _amountSD,\n        bytes calldata _to,\n        IStargateRouter.lzTxObj memory _lzTxParams\n    ) external payable onlyRouter {\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_REMOTE, _srcPoolId, _dstPoolId, _c, _amountSD, _to);\n        _call(_chainId, TYPE_WITHDRAW_REMOTE, _refundAddress, _lzTxParams, payload);\n    }\n\n    function sendCredits(\n        uint16 _chainId,\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        address payable _refundAddress,\n        Pool.CreditObj memory _c\n    ) external payable onlyRouter {\n        bytes memory payload = abi.encode(TYPE_ADD_LIQUIDITY, _srcPoolId, _dstPoolId, _c);\n        IStargateRouter.lzTxObj memory lzTxObj = IStargateRouter.lzTxObj(0, 0, \"0x\");\n        _call(_chainId, TYPE_ADD_LIQUIDITY, _refundAddress, lzTxObj, payload);\n    }\n\n    function quoteLayerZeroFee(\n        uint16 _chainId,\n        uint8 _functionType,\n        bytes calldata _toAddress,\n        bytes calldata _transferAndCallPayload,\n        IStargateRouter.lzTxObj memory _lzTxParams\n    ) external view returns (uint256, uint256) {\n        bytes memory payload = \"\";\n        Pool.CreditObj memory c = Pool.CreditObj(1, 1);\n        if (_functionType == TYPE_SWAP_REMOTE) {\n            Pool.SwapObj memory s = Pool.SwapObj(1, 1, 1, 1, 1, 1);\n            payload = abi.encode(TYPE_SWAP_REMOTE, 0, 0, 0, c, s, _toAddress, _transferAndCallPayload);\n        } else if (_functionType == TYPE_ADD_LIQUIDITY) {\n            payload = abi.encode(TYPE_ADD_LIQUIDITY, 0, 0, c);\n        } else if (_functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, 0, 0, c, 0, 0, _toAddress);\n        } else if (_functionType == TYPE_WITHDRAW_REMOTE) {\n            payload = abi.encode(TYPE_WITHDRAW_REMOTE, 0, 0, c, 0, _toAddress);\n        } else {\n            revert(\"Stargate: unsupported function type\");\n        }\n\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _functionType, _lzTxParams);\n        return layerZeroEndpoint.estimateFees(_chainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\n    }\n\n    //---------------------------------------------------------------------------\n    // dao functions\n    function setBridge(uint16 _chainId, bytes calldata _bridgeAddress) external onlyOwner {\n        require(bridgeLookup[_chainId].length == 0, \"Stargate: Bridge already set!\");\n        bridgeLookup[_chainId] = _bridgeAddress;\n    }\n\n    function setGasAmount(\n        uint16 _chainId,\n        uint8 _functionType,\n        uint256 _gasAmount\n    ) external onlyOwner {\n        require(_functionType >= 1 && _functionType <= 4, \"Stargate: invalid _functionType\");\n        gasLookup[_chainId][_functionType] = _gasAmount;\n    }\n\n    function approveTokenSpender(\n        address token,\n        address spender,\n        uint256 amount\n    ) external onlyOwner {\n        IERC20(token).approve(spender, amount);\n    }\n\n    function setUseLayerZeroToken(bool enable) external onlyOwner {\n        useLayerZeroToken = enable;\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        layerZeroEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    //---------------------------------------------------------------------------\n    // generic config for user Application\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint256 _configType,\n        bytes calldata _config\n    ) external override onlyOwner {\n        layerZeroEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 version) external override onlyOwner {\n        layerZeroEndpoint.setSendVersion(version);\n    }\n\n    function setReceiveVersion(uint16 version) external override onlyOwner {\n        layerZeroEndpoint.setReceiveVersion(version);\n    }\n\n    //---------------------------------------------------------------------------\n    // INTERNAL functions\n    function txParamBuilderType1(uint256 _gasAmount) internal pure returns (bytes memory) {\n        uint16 txType = 1;\n        return abi.encodePacked(txType, _gasAmount);\n    }\n\n    function txParamBuilderType2(\n        uint256 _gasAmount,\n        uint256 _dstNativeAmount,\n        bytes memory _dstNativeAddr\n    ) internal pure returns (bytes memory) {\n        uint16 txType = 2;\n        return abi.encodePacked(txType, _gasAmount, _dstNativeAmount, _dstNativeAddr);\n    }\n\n    function _txParamBuilder(\n        uint16 _chainId,\n        uint8 _type,\n        IStargateRouter.lzTxObj memory _lzTxParams\n    ) internal view returns (bytes memory) {\n        bytes memory lzTxParam;\n        address dstNativeAddr;\n        {\n            bytes memory dstNativeAddrBytes = _lzTxParams.dstNativeAddr;\n            assembly {\n                dstNativeAddr := mload(add(dstNativeAddrBytes, 20))\n            }\n        }\n\n        uint256 totalGas = gasLookup[_chainId][_type].add(_lzTxParams.dstGasForCall);\n        if (_lzTxParams.dstNativeAmount > 0 && dstNativeAddr != address(0x0)) {\n            lzTxParam = txParamBuilderType2(totalGas, _lzTxParams.dstNativeAmount, _lzTxParams.dstNativeAddr);\n        } else {\n            lzTxParam = txParamBuilderType1(totalGas);\n        }\n\n        return lzTxParam;\n    }\n\n    function _call(\n        uint16 _chainId,\n        uint8 _type,\n        address payable _refundAddress,\n        IStargateRouter.lzTxObj memory _lzTxParams,\n        bytes memory _payload\n    ) internal {\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _type, _lzTxParams);\n        uint64 nextNonce = layerZeroEndpoint.getOutboundNonce(_chainId, address(this)) + 1;\n        layerZeroEndpoint.send{value: msg.value}(_chainId, bridgeLookup[_chainId], _payload, _refundAddress, address(this), lzTxParamBuilt);\n        emit SendMsg(_type, nextNonce);\n    }\n\n    function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "contracts/LPTokenERC20.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\n\n// libraries\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract LPTokenERC20 {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // CONSTANTS\n    string public name;\n    string public symbol;\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    // set in constructor\n    bytes32 public DOMAIN_SEPARATOR;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    uint256 public decimals;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    mapping(address => uint256) public nonces;\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint256 value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint256 value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 value\n    ) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint256 value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool) {\n        if (allowance[from][msg.sender] != uint256(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, \"Bridge: EXPIRED\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"Bridge: INVALID_SIGNATURE\");\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/interfaces/IStargateFeeLibrary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.7.6;\npragma abicoder v2;\nimport \"../Pool.sol\";\n\ninterface IStargateFeeLibrary {\n    function getFees(\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        uint16 _dstChainId,\n        address _from,\n        uint256 _amountSD\n    ) external returns (Pool.SwapObj memory s);\n\n    function getVersion() external view returns (string memory);\n}\n"
    },
    "@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n"
    },
    "@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\n\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "contracts/LPStakingTime.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\n\n// imports\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// interfaces\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// libraries\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\ncontract LPStakingTime is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of STGs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accEmissionPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accEmissionPerShare` (and `lastRewardTime`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool, to distribute per block.\n        uint256 lastRewardTime; // Last time that distribution occurs.\n        uint256 accEmissionPerShare; // Accumulated Emissions per share, times 1e12. See below.\n    }\n    // Emissions token\n    IERC20 public eToken;\n    // Block time when bonus period ends.\n    uint256 public bonusEndTime;\n    // Tokens earned per second.\n    uint256 public eTokenPerSecond;\n    // Bonus multiplier for early makers.\n    uint256 public constant BONUS_MULTIPLIER = 1;\n    // Track which tokens have been added.\n    mapping(address => bool) private addedLPTokens;\n\n    mapping(uint256 => uint256) public lpBalances;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The time when mining starts.\n    uint256 public startTime;\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event Add(uint256 allocPoint, address indexed lpToken);\n    event Set(uint256 indexed pid, uint256 allocPoint);\n    event TokensPerSec(uint256 eTokenPerSecond);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        address _eToken,\n        uint256 _eTokenPerSecond,\n        uint256 _startTime,\n        uint256 _bonusEndTime\n    ) {\n        require(_startTime >= block.timestamp, \"LPStaking: _startTime must be >= current block.timestamp\");\n        require(_bonusEndTime >= _startTime, \"LPStaking: _bonusEndTime must be > than _startTime\");\n        require(_eToken != address(0x0), \"LPStaking: _eToken cannot be 0x0\");\n        eToken = IERC20(_eToken);\n        eTokenPerSecond = _eTokenPerSecond;\n        startTime = _startTime;\n        bonusEndTime = _bonusEndTime;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    /// @notice handles adding a new LP token (Can only be called by the owner)\n    /// @param _allocPoint The alloc point is used as the weight of the pool against all other alloc points added.\n    /// @param _lpToken The lp token address\n    function add(uint256 _allocPoint, IERC20 _lpToken) external onlyOwner {\n        massUpdatePools();\n        require(address(_lpToken) != address(0x0), \"LPStaking: _lpToken cant be 0x0\");\n        require(addedLPTokens[address(_lpToken)] == false, \"LPStaking: _lpToken already exists\");\n        addedLPTokens[address(_lpToken)] = true;\n        uint256 lastRewardTime = block.timestamp > startTime ? block.timestamp : startTime;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardTime: lastRewardTime, accEmissionPerShare: 0}));\n\n        emit Add(_allocPoint, address(_lpToken));\n    }\n\n    function set(uint256 _pid, uint256 _allocPoint) external onlyOwner {\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n\n        emit Set(_pid, _allocPoint);\n    }\n\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        if (_to <= bonusEndTime) {\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n        } else if (_from >= bonusEndTime) {\n            return _to.sub(_from);\n        } else {\n            return bonusEndTime.sub(_from).mul(BONUS_MULTIPLIER).add(_to.sub(bonusEndTime));\n        }\n    }\n\n    function pendingEmissionToken(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accEmissionPerShare = pool.accEmissionPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0 && totalAllocPoint > 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\n            uint256 tokenReward = multiplier.mul(eTokenPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\n            accEmissionPerShare = accEmissionPerShare.add(tokenReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accEmissionPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.timestamp <= pool.lastRewardTime) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0 || totalAllocPoint == 0) {\n            pool.lastRewardTime = block.timestamp;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\n        uint256 tokenReward = multiplier.mul(eTokenPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\n\n        pool.accEmissionPerShare = pool.accEmissionPerShare.add(tokenReward.mul(1e12).div(lpSupply));\n        pool.lastRewardTime = block.timestamp;\n    }\n\n    function deposit(uint256 _pid, uint256 _amount) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accEmissionPerShare).div(1e12).sub(user.rewardDebt);\n            safeTokenTransfer(msg.sender, pending);\n        }\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accEmissionPerShare).div(1e12);\n        lpBalances[_pid] = lpBalances[_pid].add(_amount);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function withdraw(uint256 _pid, uint256 _amount) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"LPStaking: withdraw _amount is too large\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accEmissionPerShare).div(1e12).sub(user.rewardDebt);\n        safeTokenTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accEmissionPerShare).div(1e12);\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        lpBalances[_pid] = lpBalances[_pid].sub(_amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw without caring about rewards.\n    /// @param _pid The pid specifies the pool\n    function emergencyWithdraw(uint256 _pid) external {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 userAmount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.lpToken.safeTransfer(address(msg.sender), userAmount);\n        lpBalances[_pid] = lpBalances[_pid].sub(userAmount);\n        emit EmergencyWithdraw(msg.sender, _pid, userAmount);\n    }\n\n    /// @notice Safe transfer function, just in case if rounding error causes pool to not have enough eToken.\n    /// @param _to The address to transfer tokens to\n    /// @param _amount The quantity to transfer\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\n        uint256 eTokenBal = eToken.balanceOf(address(this));\n        require(eTokenBal >= _amount, \"LPStakingTime: eTokenBal must be >= _amount\");\n        eToken.safeTransfer(_to, _amount);\n    }\n\n    function setETokenPerSecond(uint256 _eTokenPerSecond) external onlyOwner {\n        massUpdatePools();\n        eTokenPerSecond = _eTokenPerSecond;\n\n        emit TokensPerSec(_eTokenPerSecond);\n    }\n\n    // Override the renounce ownership inherited by zeppelin ownable\n    function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/LPStaking.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\n\n// imports\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./StargateToken.sol\";\n\n// interfaces\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// libraries\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\ncontract LPStaking is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of STGs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accStargatePerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accStargatePerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. STGs to distribute per block.\n        uint256 lastRewardBlock; // Last block number that STGs distribution occurs.\n        uint256 accStargatePerShare; // Accumulated STGs per share, times 1e12. See below.\n    }\n    // The STG TOKEN!\n    StargateToken public stargate;\n    // Block number when bonus STG period ends.\n    uint256 public bonusEndBlock;\n    // STG tokens earned per block.\n    uint256 public stargatePerBlock;\n    // Bonus multiplier for early stargate makers.\n    uint256 public constant BONUS_MULTIPLIER = 1;\n    // Track which tokens have been added.\n    mapping(address => bool) private addedLPTokens;\n\n    mapping(uint256 => uint256) public lpBalances;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n    // The block number when STG mining starts.\n    uint256 public startBlock;\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    constructor(\n        StargateToken _stargate,\n        uint256 _stargatePerBlock,\n        uint256 _startBlock,\n        uint256 _bonusEndBlock\n    ) {\n        require(_startBlock >= block.number, \"LPStaking: _startBlock must be >= current block\");\n        require(_bonusEndBlock >= _startBlock, \"LPStaking: _bonusEndBlock must be > than _startBlock\");\n        require(address(_stargate) != address(0x0), \"Stargate: _stargate cannot be 0x0\");\n        stargate = _stargate;\n        stargatePerBlock = _stargatePerBlock;\n        startBlock = _startBlock;\n        bonusEndBlock = _bonusEndBlock;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    /// @notice handles adding a new LP token (Can only be called by the owner)\n    /// @param _allocPoint The alloc point is used as the weight of the pool against all other alloc points added.\n    /// @param _lpToken The lp token address\n    function add(uint256 _allocPoint, IERC20 _lpToken) public onlyOwner {\n        massUpdatePools();\n        require(address(_lpToken) != address(0x0), \"StarGate: lpToken cant be 0x0\");\n        require(addedLPTokens[address(_lpToken)] == false, \"StarGate: _lpToken already exists\");\n        addedLPTokens[address(_lpToken)] = true;\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({lpToken: _lpToken, allocPoint: _allocPoint, lastRewardBlock: lastRewardBlock, accStargatePerShare: 0}));\n    }\n\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        if (_to <= bonusEndBlock) {\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n        } else if (_from >= bonusEndBlock) {\n            return _to.sub(_from);\n        } else {\n            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(_to.sub(bonusEndBlock));\n        }\n    }\n\n    function pendingStargate(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accStargatePerShare = pool.accStargatePerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint > 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 stargateReward = multiplier.mul(stargatePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accStargatePerShare = accStargatePerShare.add(stargateReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accStargatePerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0 || totalAllocPoint == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 stargateReward = multiplier.mul(stargatePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n\n        pool.accStargatePerShare = pool.accStargatePerShare.add(stargateReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    function deposit(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accStargatePerShare).div(1e12).sub(user.rewardDebt);\n            safeStargateTransfer(msg.sender, pending);\n        }\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n        user.amount = user.amount.add(_amount);\n        user.rewardDebt = user.amount.mul(pool.accStargatePerShare).div(1e12);\n        lpBalances[_pid] = lpBalances[_pid].add(_amount);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: _amount is too large\");\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accStargatePerShare).div(1e12).sub(user.rewardDebt);\n        safeStargateTransfer(msg.sender, pending);\n        user.amount = user.amount.sub(_amount);\n        user.rewardDebt = user.amount.mul(pool.accStargatePerShare).div(1e12);\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        lpBalances[_pid] = lpBalances[_pid].sub(_amount);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw without caring about rewards.\n    /// @param _pid The pid specifies the pool\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 userAmount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.lpToken.safeTransfer(address(msg.sender), userAmount);\n        lpBalances[_pid] = lpBalances[_pid].sub(userAmount);\n        emit EmergencyWithdraw(msg.sender, _pid, userAmount);\n    }\n\n    /// @notice Safe transfer function, just in case if rounding error causes pool to not have enough STGs.\n    /// @param _to The address to transfer tokens to\n    /// @param _amount The quantity to transfer\n    function safeStargateTransfer(address _to, uint256 _amount) internal {\n        uint256 stargateBal = stargate.balanceOf(address(this));\n        require(stargateBal >= _amount, \"LPStaking: stargateBal must be >= _amount\");\n        IERC20(stargate).safeTransfer(_to, _amount);\n    }\n\n    function setStargatePerBlock(uint256 _stargatePerBlock) external onlyOwner {\n        massUpdatePools();\n        stargatePerBlock = _stargatePerBlock;\n    }\n\n    // Override the renounce ownership inherited by zeppelin ownable\n    function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "contracts/StargateToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\n\nimport \"./OmnichainFungibleToken.sol\";\n\ncontract StargateToken is OmnichainFungibleToken {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _endpoint,\n        uint16 _mainEndpointId,\n        uint256 _initialSupplyOnMainEndpoint\n    ) OmnichainFungibleToken(_name, _symbol, _endpoint, _mainEndpointId, _initialSupplyOnMainEndpoint) {}\n}\n"
    },
    "contracts/OmnichainFungibleToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroEndpoint.sol\";\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroReceiver.sol\";\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\";\n\ncontract OmnichainFungibleToken is ERC20, Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\n    // the only endpointId these tokens will ever be minted on\n    // required: the LayerZero endpoint which is passed in the constructor\n    ILayerZeroEndpoint public immutable endpoint;\n    // a map of our connected contracts\n    mapping(uint16 => bytes) public dstContractLookup;\n    // pause the sendTokens()\n    bool public paused;\n    bool public isMain;\n\n    event Paused(bool isPaused);\n    event SendToChain(uint16 dstChainId, bytes to, uint256 qty);\n    event ReceiveFromChain(uint16 srcChainId, uint64 nonce, uint256 qty);\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _endpoint,\n        uint16 _mainChainId,\n        uint256 initialSupplyOnMainEndpoint\n    ) ERC20(_name, _symbol) {\n        if (ILayerZeroEndpoint(_endpoint).getChainId() == _mainChainId) {\n            _mint(msg.sender, initialSupplyOnMainEndpoint);\n            isMain = true;\n        }\n        // set the LayerZero endpoint\n        endpoint = ILayerZeroEndpoint(_endpoint);\n    }\n\n    function pauseSendTokens(bool _pause) external onlyOwner {\n        paused = _pause;\n        emit Paused(_pause);\n    }\n\n    function setDestination(uint16 _dstChainId, bytes calldata _destinationContractAddress) public onlyOwner {\n        dstContractLookup[_dstChainId] = _destinationContractAddress;\n    }\n\n    function chainId() external view returns (uint16) {\n        return endpoint.getChainId();\n    }\n\n    function sendTokens(\n        uint16 _dstChainId, // send tokens to this chainId\n        bytes calldata _to, // where to deliver the tokens on the destination chain\n        uint256 _qty, // how many tokens to send\n        address zroPaymentAddress, // ZRO payment address\n        bytes calldata adapterParam // txParameters\n    ) public payable {\n        require(!paused, \"OFT: sendTokens() is currently paused\");\n\n        // lock if leaving the safe chain, otherwise burn\n        if (isMain) {\n            // ... transferFrom the tokens to this contract for locking purposes\n            _transfer(msg.sender, address(this), _qty);\n        } else {\n            _burn(msg.sender, _qty);\n        }\n\n        // abi.encode() the payload with the values to send\n        bytes memory payload = abi.encode(_to, _qty);\n\n        // send LayerZero message\n        endpoint.send{value: msg.value}(\n            _dstChainId, // destination chainId\n            dstContractLookup[_dstChainId], // destination UA address\n            payload, // abi.encode()'ed bytes\n            msg.sender, // refund address (LayerZero will refund any extra gas back to caller of send()\n            zroPaymentAddress, // 'zroPaymentAddress' unused for this mock/example\n            adapterParam // 'adapterParameters' unused for this mock/example\n        );\n        emit SendToChain(_dstChainId, _to, _qty);\n    }\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes memory _fromAddress,\n        uint64 nonce,\n        bytes memory _payload\n    ) external override {\n        require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security\n        require(\n            _fromAddress.length == dstContractLookup[_srcChainId].length && keccak256(_fromAddress) == keccak256(dstContractLookup[_srcChainId]),\n            \"OFT: invalid source sending contract\"\n        );\n\n        // decode\n        (bytes memory _to, uint256 _qty) = abi.decode(_payload, (bytes, uint256));\n        address toAddress;\n        // load the toAddress from the bytes\n        assembly {\n            toAddress := mload(add(_to, 20))\n        }\n\n        // mint the tokens back into existence, to the receiving address\n        if (isMain) {\n            _transfer(address(this), toAddress, _qty);\n        } else {\n            _mint(toAddress, _qty);\n        }\n\n        emit ReceiveFromChain(_srcChainId, nonce, _qty);\n    }\n\n    function estimateSendTokensFee(\n        uint16 _dstChainId,\n        bool _useZro,\n        bytes calldata txParameters\n    ) external view returns (uint256 nativeFee, uint256 zroFee) {\n        return endpoint.estimateFees(_dstChainId, address(this), bytes(\"\"), _useZro, txParameters);\n    }\n\n    //---------------------------DAO CALL----------------------------------------\n    // generic config for user Application\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint256 _configType,\n        bytes calldata _config\n    ) external override onlyOwner {\n        endpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 version) external override onlyOwner {\n        endpoint.setSendVersion(version);\n    }\n\n    function setReceiveVersion(uint16 version) external override onlyOwner {\n        endpoint.setReceiveVersion(version);\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        endpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "contracts/mocks/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroReceiver.sol\";\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroEndpoint.sol\";\nimport \"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\";\n\n/*\nmocking multi endpoint connection.\n- send() will short circuit to lzReceive() directly\n- no reentrancy guard. the real LayerZero endpoint on main net has a send and receive guard, respectively.\nif we run a ping-pong-like application, the recursive call might use all gas limit in the block.\n- not using any messaging library, hence all messaging library func, e.g. estimateFees, version, will not work\n*/\ncontract LZEndpointMock is ILayerZeroEndpoint {\n    mapping(address => address) public lzEndpointLookup;\n\n    uint16 public mockChainId;\n    address payable public mockOracle;\n    address payable public mockRelayer;\n    uint256 public mockBlockConfirmations;\n    uint16 public mockLibraryVersion;\n    uint256 public mockStaticNativeFee;\n    uint16 public mockLayerZeroVersion;\n    uint16 public mockReceiveVersion;\n    uint16 public mockSendVersion;\n\n    // inboundNonce = [srcChainId][srcAddress].\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\n    // outboundNonce = [dstChainId][srcAddress].\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\n\n    event SetConfig(uint16 version, uint16 chainId, uint256 configType, bytes config);\n    event ForceResumeReceive(uint16 srcChainId, bytes srcAddress);\n\n    constructor(uint16 _chainId) {\n        mockStaticNativeFee = 42;\n        mockLayerZeroVersion = 1;\n        mockChainId = _chainId;\n    }\n\n    function getChainId() external view override returns (uint16) {\n        return mockChainId;\n    }\n\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\n    }\n\n    function send(\n        uint16 _chainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable, /*_refundAddress*/\n        address, /*_zroPaymentAddress*/\n        bytes memory dstGas\n    ) external payable override {\n        address destAddr = packedBytesToAddr(_destination);\n        address lzEndpoint = lzEndpointLookup[destAddr];\n\n        require(lzEndpoint != address(0), \"LayerZeroMock: destination LayerZero Endpoint not found\");\n\n        uint64 nonce;\n        {\n            nonce = ++outboundNonce[_chainId][msg.sender];\n        }\n\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\n        {\n            uint256 dstNative;\n            address dstNativeAddr;\n            assembly {\n                dstNative := mload(add(dstGas, 66))\n                dstNativeAddr := mload(add(dstGas, 86))\n            }\n\n            if (dstNativeAddr == 0x0000000000000000000000000000000000000001) {\n                require(dstNative == 453, \"Gas incorrect\");\n                require(1 != 1, \"NativeGasParams check\");\n            }\n\n            // Doesnt actually transfer the native amount to the other side\n        }\n\n        bytes memory bytesSourceUserApplicationAddr = addrToPackedBytes(address(msg.sender)); // cast this address to bytes\n\n        inboundNonce[_chainId][abi.encodePacked(msg.sender)] = nonce;\n        LZEndpointMock(lzEndpoint).receiveAndForward(destAddr, mockChainId, bytesSourceUserApplicationAddr, nonce, _payload);\n    }\n\n    function receiveAndForward(\n        address _destAddr,\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) external {\n        ILayerZeroReceiver(_destAddr).lzReceive(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\n    }\n\n    // override from ILayerZeroEndpoint\n    function estimateFees(\n        uint16,\n        address,\n        bytes calldata,\n        bool,\n        bytes calldata\n    ) external view override returns (uint256, uint256) {\n        return (mockStaticNativeFee, 0); // just a mock\n    }\n\n    // give 20 bytes, return the decoded address\n    function packedBytesToAddr(bytes calldata _b) public pure returns (address) {\n        address addr;\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, sub(_b.offset, 2), add(_b.length, 2))\n            addr := mload(sub(ptr, 10))\n        }\n        return addr;\n    }\n\n    // given an address, return the 20 bytes\n    function addrToPackedBytes(address _a) public pure returns (bytes memory) {\n        bytes memory data = abi.encodePacked(_a);\n        return data;\n    }\n\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint256 _configType,\n        bytes memory _config\n    ) external override {\n        emit SetConfig(_version, _chainId, _configType, _config);\n    }\n\n    function getConfig(\n        uint16, /*_version*/\n        uint16, /*_chainId*/\n        address, /*_ua*/\n        uint256 /*_configType*/\n    ) external pure override returns (bytes memory) {\n        return \"\";\n    }\n\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint256 _gasLimit,\n        bytes calldata _payload\n    ) external override {}\n\n    function setSendVersion(uint16 _version) external override {\n        mockSendVersion = _version;\n    }\n\n    function setReceiveVersion(uint16 _version) external override {\n        mockReceiveVersion = _version;\n    }\n\n    function getSendVersion(\n        address /*_userApplication*/\n    ) external pure override returns (uint16) {\n        return 1;\n    }\n\n    function getReceiveVersion(\n        address /*_userApplication*/\n    ) external pure override returns (uint16) {\n        return 1;\n    }\n\n    function getInboundNonce(uint16 _chainID, bytes calldata _srcAddress) external view override returns (uint64) {\n        return inboundNonce[_chainID][_srcAddress];\n    }\n\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\n        return outboundNonce[_chainID][_srcAddress];\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override {\n        emit ForceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        bytes calldata _payload\n    ) external pure override {}\n\n    function hasStoredPayload(\n        uint16, /*_srcChainId*/\n        bytes calldata /*_srcAddress*/\n    ) external pure override returns (bool) {\n        return true;\n    }\n\n    function isSendingPayload() external pure override returns (bool) {\n        return false;\n    }\n\n    function isReceivingPayload() external pure override returns (bool) {\n        return false;\n    }\n\n    function getSendLibraryAddress(\n        address /*_userApplication*/\n    ) external view override returns (address) {\n        return address(this);\n    }\n\n    function getReceiveLibraryAddress(\n        address /*_userApplication*/\n    ) external view override returns (address) {\n        return address(this);\n    }\n}\n"
    },
    "contracts/libraries/StargateFeeLibraryV04.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"../interfaces/IStargateFeeLibrary.sol\";\nimport \"../Pool.sol\";\nimport \"../Factory.sol\";\nimport \"../interfaces/IStargateLPStaking.sol\";\nimport \"../chainlink/interfaces/AggregatorV3Interface.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract StargateFeeLibraryV04 is IStargateFeeLibrary, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\n    uint256 public constant DENOMINATOR = 1e18;\n    uint256 public constant DELTA_1 = 6000 * 1e14;\n    uint256 public constant DELTA_2 = 500 * 1e14;\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\n    uint256 public constant LP_FEE = 10 * 1e13;\n    uint256 public constant PROTOCOL_FEE = 50 * 1e13;\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\n\n    uint256 public constant FIFTY_PERCENT = 5 * 1e17;\n    uint256 public constant SIXTY_PERCENT = 6 * 1e17;\n\n    int256 public depegThreshold; // threshold for considering an asset depegged\n\n    mapping(address => bool) public whitelist;\n    mapping(uint256 => uint256) public poolIdToLpId; // poolId -> index of the pool in the lpStaking contract\n    mapping(uint256 => address) public poolIdToPriceFeed; // maps the poolId to Chainlink priceFeedAddress\n\n    Factory public immutable factory;\n    IStargateLPStaking public immutable lpStaking;\n\n    modifier notDepegged(uint256 _srcPoolId, uint256 _dstPoolId) {\n        address priceFeedAddress = poolIdToPriceFeed[_srcPoolId];\n        if (_srcPoolId != _dstPoolId && priceFeedAddress != address(0x0)) {\n            (, int256 price, , , ) = AggregatorV3Interface(priceFeedAddress).latestRoundData();\n            require(price >= depegThreshold, \"FeeLibrary: _srcPoolId is depegged\");\n        }\n        _;\n    }\n\n    constructor(\n        address _factory,\n        address _lpStakingContract,\n        int256 _depegThreshold\n    ) {\n        require(_factory != address(0x0), \"FeeLibrary: Factory cannot be 0x0\");\n        require(_lpStakingContract != address(0x0), \"FeeLibrary: LPStaking cannot be 0x0\");\n        require(_depegThreshold > 0, \"FeeLibrary: _depegThreshold must be > 0\");\n\n        factory = Factory(_factory);\n        lpStaking = IStargateLPStaking(_lpStakingContract);\n        depegThreshold = _depegThreshold;\n    }\n\n    function whiteList(address _from, bool _whiteListed) public onlyOwner {\n        whitelist[_from] = _whiteListed;\n    }\n\n    function setPoolToLpId(uint256 _poolId, uint256 _lpId) public onlyOwner {\n        poolIdToLpId[_poolId] = _lpId;\n    }\n\n    function setPoolIdToPriceFeedAddress(uint256 _poolId, address _priceFeedAddress) public onlyOwner {\n        poolIdToPriceFeed[_poolId] = _priceFeedAddress;\n    }\n\n    function setDepegThreshold(int256 _depegThreshold) public onlyOwner {\n        require(_depegThreshold > 0, \"FeeLibrary: _depegThreshold must be > 0\");\n        depegThreshold = _depegThreshold;\n    }\n\n    function getFees(\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        uint16 _dstChainId,\n        address _from,\n        uint256 _amountSD\n    ) external view override notDepegged(_srcPoolId, _dstPoolId) returns (Pool.SwapObj memory s) {\n        uint256 srcPoolId = _srcPoolId; // stack too deep\n\n        Pool pool = factory.getPool(srcPoolId);\n        Pool.ChainPath memory chainPath = pool.getChainPath(_dstChainId, _dstPoolId);\n        address tokenAddress = pool.token();\n        uint256 currentAssetSD = IERC20(tokenAddress).balanceOf(address(pool)).div(pool.convertRate());\n        uint256 lpAsset = pool.totalLiquidity();\n\n        // calculate the equilibrium reward\n        s.eqReward = _getEqReward(_amountSD, currentAssetSD, lpAsset, pool.eqFeePool());\n\n        // calculate the equilibrium fee\n        uint256 protocolSubsidy;\n        (s.eqFee, protocolSubsidy) = _getEquilibriumFee(chainPath.idealBalance, chainPath.balance, _amountSD);\n\n        // return no protocol/lp fees for addresses in this mapping\n        if (whitelist[_from]) {\n            return s;\n        }\n\n        // calculate protocol and lp fee\n        (s.protocolFee, s.lpFee) = _getProtocolAndLpFee(_amountSD, currentAssetSD, lpAsset, protocolSubsidy, srcPoolId, chainPath);\n\n        return s;\n    }\n\n    function getEqReward(\n        uint256 _amountSD,\n        uint256 _currentAssetSD,\n        uint256 _lpAsset,\n        uint256 _rewardPoolSize\n    ) external pure returns (uint256 eqReward) {\n        return _getEqReward(_amountSD, _currentAssetSD, _lpAsset, _rewardPoolSize);\n    }\n\n    function getEquilibriumFee(\n        uint256 idealBalance,\n        uint256 beforeBalance,\n        uint256 amountSD\n    ) external pure returns (uint256, uint256) {\n        return _getEquilibriumFee(idealBalance, beforeBalance, amountSD);\n    }\n\n    function getProtocolAndLpFee(\n        uint256 _amountSD,\n        uint256 _currentAssetSD,\n        uint256 _lpAsset,\n        uint256 _protocolSubsidy,\n        uint256 _srcPoolId,\n        Pool.ChainPath memory _chainPath\n    ) external view returns (uint256 protocolFee, uint256 lpFee) {\n        return _getProtocolAndLpFee(_amountSD, _currentAssetSD, _lpAsset, _protocolSubsidy, _srcPoolId, _chainPath);\n    }\n\n    function getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) external pure returns (uint256) {\n        return _getTrapezoidArea(lambda, yOffset, xUpperBound, xLowerBound, xStart, xEnd);\n    }\n\n    function _getEqReward(\n        uint256 _amountSD,\n        uint256 _currentAssetSD,\n        uint256 _lpAsset,\n        uint256 _rewardPoolSize\n    ) internal pure returns (uint256 eqReward) {\n        if (_lpAsset <= _currentAssetSD) {\n            return 0;\n        }\n\n        uint256 poolDeficit = _lpAsset.sub(_currentAssetSD);\n        // assets in pool are < 75% of liquidity provided & amount transferred > 2% of pool deficit\n        if (_currentAssetSD.mul(100).div(_lpAsset) < 75 && _amountSD.mul(100) > poolDeficit.mul(2)) {\n            // reward capped at rewardPoolSize\n            eqReward = _rewardPoolSize.mul(_amountSD).div(poolDeficit);\n            if (eqReward > _rewardPoolSize) {\n                eqReward = _rewardPoolSize;\n            }\n        } else {\n            eqReward = 0;\n        }\n    }\n\n    function _getEquilibriumFee(\n        uint256 idealBalance,\n        uint256 beforeBalance,\n        uint256 amountSD\n    ) internal pure returns (uint256, uint256) {\n        require(beforeBalance >= amountSD, \"Stargate: not enough balance\");\n        uint256 afterBalance = beforeBalance.sub(amountSD);\n\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\n\n        uint256 eqFee = 0;\n        uint256 protocolSubsidy = 0;\n\n        if (afterBalance >= safeZoneMax) {\n            // no fee zone, protocol subsidize it.\n            eqFee = amountSD.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\n            protocolSubsidy = eqFee;\n        } else if (afterBalance >= safeZoneMin) {\n            // safe zone\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\n        } else {\n            // danger zone\n            if (beforeBalance >= safeZoneMin) {\n                // across 2 or 3 zones\n                // part 1\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\n                // part 2\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\n            } else {\n                // only in danger zone\n                // part 2 only\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance, afterBalance));\n            }\n        }\n        return (eqFee, protocolSubsidy);\n    }\n\n    function _getProtocolAndLpFee(\n        uint256 _amountSD,\n        uint256 _currentAssetSD,\n        uint256 _lpAsset,\n        uint256 _protocolSubsidy,\n        uint256 _srcPoolId,\n        Pool.ChainPath memory _chainPath\n    ) internal view returns (uint256 protocolFee, uint256 lpFee) {\n        protocolFee = _amountSD.mul(PROTOCOL_FEE).div(DENOMINATOR).sub(_protocolSubsidy);\n        lpFee = _amountSD.mul(LP_FEE).div(DENOMINATOR);\n\n        // when there are active emissions, give the lp fee to the protocol\n        (, uint256 allocPoint, , ) = lpStaking.poolInfo(poolIdToLpId[_srcPoolId]);\n        if (allocPoint > 0) {\n            protocolFee = protocolFee.add(lpFee);\n            lpFee = 0;\n        }\n\n        if (_lpAsset == 0) {\n            return (protocolFee, lpFee);\n        }\n\n        bool isAboveIdeal = _chainPath.balance.sub(_amountSD) > _chainPath.idealBalance.mul(SIXTY_PERCENT).div(DENOMINATOR);\n        uint256 currentAssetNumerated = _currentAssetSD.mul(DENOMINATOR).div(_lpAsset);\n        if (currentAssetNumerated <= FIFTY_PERCENT && isAboveIdeal) {\n            // x <= 50% => no fees\n            protocolFee = 0;\n            lpFee = 0;\n        } else if (currentAssetNumerated < SIXTY_PERCENT && isAboveIdeal) {\n            // 50% > x < 60% => scaled fees &&\n            // the resulting transfer does not drain the pathway below 60% o`f the ideal balance,\n\n            // reduce the protocol and lp fee linearly\n            // Examples:\n            // currentAsset == 101, lpAsset == 200 -> haircut == 5%\n            // currentAsset == 115, lpAsset == 200 -> haircut == 75%\n            // currentAsset == 119, lpAsset == 200 -> haircut == 95%\n            uint256 haircut = currentAssetNumerated.sub(FIFTY_PERCENT).mul(10); // scale the percentage by 10\n            protocolFee = protocolFee.mul(haircut).div(DENOMINATOR);\n            lpFee = lpFee.mul(haircut).div(DENOMINATOR);\n        }\n\n        // x > 60% => full fees\n    }\n\n    function _getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) internal pure returns (uint256) {\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \"Stargate: balance out of bound\");\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\n\n        // xStartDrift = xUpperBound.sub(xStart);\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // xEndDrift = xUpperBound.sub(xEnd)\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // compute the area\n        uint256 deltaX = xStart.sub(xEnd);\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\n    }\n\n    function getVersion() external pure override returns (string memory) {\n        return \"4.0.0\";\n    }\n\n    // Override the renounce ownership inherited by zeppelin ownable\n    function renounceOwnership() public override onlyOwner {}\n}\n"
    },
    "contracts/interfaces/IStargateLPStaking.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.7.6;\npragma abicoder v2;\n\ninterface IStargateLPStaking {\n    function poolInfo(uint256 _poolIndex)\n        external\n        view\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"
    },
    "contracts/chainlink/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n\n    function latestRoundData()\n    external\n    view\n    returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n}"
    },
    "contracts/chainlink/contracts/PriceConsumerV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"../interfaces/AggregatorV3Interface.sol\";\n\ncontract PriceConsumerV3 {\n\n    AggregatorV3Interface internal priceFeed;\n\n    /**\n     * Network: Kovan\n     * Aggregator: ETH/USD\n     * Address: 0x9326BFA02ADD2366b30bacB125260Af641031331\n     */\n    constructor() {\n        priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);\n    }\n\n    /**\n     * Returns the latest price\n     */\n    function getLatestPrice() public view returns (int) {\n        (\n        /*uint80 roundID*/,\n        int price,\n        /*uint startedAt*/,\n        /*uint timeStamp*/,\n        /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return price;\n    }\n}"
    },
    "contracts/libraries/StargateFeeLibraryV03L.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"../interfaces/IStargateFeeLibrary.sol\";\nimport \"../Pool.sol\";\nimport \"../Factory.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract StargateFeeLibraryV03L is IStargateFeeLibrary, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\n    uint256 public constant DENOMINATOR = 1e18;\n    uint256 public constant DELTA_1 = 6000 * 1e14;\n    uint256 public constant DELTA_2 = 500 * 1e14;\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\n    uint256 public constant LP_FEE = 10 * 1e13;\n    uint256 public constant PROTOCOL_FEE = 50 * 1e13;\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\n\n    Factory public immutable factory;\n    uint16 public immutable localChainId;\n\n    constructor(address _factory, uint16 _localChainId) {\n        require(_factory != address(0x0), \"FeeLibrary: Factory cannot be 0x0\");\n        factory = Factory(_factory);\n        localChainId = _localChainId;\n    }\n\n    function getFees(\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        uint16 _dstChainId,\n        address, /*_from*/\n        uint256 _amountSD\n    ) external view override returns (Pool.SwapObj memory s) {\n        // calculate the protocol fee\n        if (_dstChainId == localChainId) {\n            // if its ethereum, were on loopback because this contract only deployed to Ethereum\n            s.protocolFee = 0;\n        } else {\n            s.protocolFee = _amountSD.mul(PROTOCOL_FEE).div(DENOMINATOR);\n        }\n\n        // calculate the equilibrium Fee\n        Pool pool = factory.getPool(_srcPoolId);\n        Pool.ChainPath memory chainPath = pool.getChainPath(_dstChainId, _dstPoolId);\n\n        // calculate the equilibrium fee\n        if (_dstChainId == localChainId) {\n            // if its ethereum, were on loopback because this contract only deployed to Ethereum\n            s.eqFee = 0;\n            s.protocolFee = 0;\n        } else {\n            (uint256 eqFee, uint256 protocolSubsidy) = _getEquilibriumFee(chainPath.idealBalance, chainPath.balance, _amountSD);\n            s.eqFee = eqFee;\n            s.protocolFee = s.protocolFee.sub(protocolSubsidy);\n        }\n\n        // calculate the equilibrium reward\n        address tokenAddress = pool.token();\n        uint256 currentAssetSD = IERC20(tokenAddress).balanceOf(address(pool)).div(pool.convertRate());\n        uint256 lpAsset = pool.totalLiquidity();\n        if (lpAsset > currentAssetSD) {\n            // in deficit\n            uint256 poolDeficit = lpAsset.sub(currentAssetSD);\n            uint256 rewardPoolSize = pool.eqFeePool();\n            // reward capped at rewardPoolSize\n            uint256 eqRewards = rewardPoolSize.mul(_amountSD).div(poolDeficit);\n            if (eqRewards > rewardPoolSize) {\n                eqRewards = rewardPoolSize;\n            }\n            s.eqReward = eqRewards;\n        }\n\n        // calculate the LP fee.\n        if (_dstChainId == localChainId) {\n            s.lpFee = 0;\n        } else {\n            s.lpFee = _amountSD.mul(LP_FEE).div(DENOMINATOR);\n        }\n\n        return s;\n    }\n\n    function getEquilibriumFee(\n        uint256 idealBalance,\n        uint256 beforeBalance,\n        uint256 amountSD\n    ) external pure returns (uint256, uint256) {\n        return _getEquilibriumFee(idealBalance, beforeBalance, amountSD);\n    }\n\n    function getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) external pure returns (uint256) {\n        return _getTrapezoidArea(lambda, yOffset, xUpperBound, xLowerBound, xStart, xEnd);\n    }\n\n    function _getEquilibriumFee(\n        uint256 idealBalance,\n        uint256 beforeBalance,\n        uint256 amountSD\n    ) internal pure returns (uint256, uint256) {\n        require(beforeBalance >= amountSD, \"Stargate: not enough balance\");\n        uint256 afterBalance = beforeBalance.sub(amountSD);\n\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\n\n        uint256 eqFee = 0;\n        uint256 protocolSubsidy = 0;\n\n        if (afterBalance >= safeZoneMax) {\n            // no fee zone, protocol subsidize it.\n            eqFee = amountSD.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\n            protocolSubsidy = eqFee;\n        } else if (afterBalance >= safeZoneMin) {\n            // safe zone\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\n        } else {\n            // danger zone\n            if (beforeBalance >= safeZoneMin) {\n                // across 2 or 3 zones\n                // part 1\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\n                // part 2\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\n            } else {\n                // only in danger zone\n                // part 2 only\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance, afterBalance));\n            }\n        }\n        return (eqFee, protocolSubsidy);\n    }\n\n    function _getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) internal pure returns (uint256) {\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \"Stargate: balance out of bound\");\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\n\n        // xStartDrift = xUpperBound.sub(xStart);\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // xEndDrift = xUpperBound.sub(xEnd)\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // compute the area\n        uint256 deltaX = xStart.sub(xEnd);\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\n    }\n\n    function getVersion() external pure override returns (string memory) {\n        return \"3.0.0\";\n    }\n}\n"
    },
    "contracts/libraries/StargateFeeLibraryV03.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"../interfaces/IStargateFeeLibrary.sol\";\nimport \"../Pool.sol\";\nimport \"../Factory.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract StargateFeeLibraryV03 is IStargateFeeLibrary, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\n    uint256 public constant DENOMINATOR = 1e18;\n    uint256 public constant DELTA_1 = 6000 * 1e14;\n    uint256 public constant DELTA_2 = 500 * 1e14;\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\n    uint256 public constant LP_FEE = 10 * 1e13;\n    uint256 public constant PROTOCOL_FEE = 50 * 1e13;\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\n\n    Factory public immutable factory;\n\n    constructor(address _factory) {\n        require(_factory != address(0x0), \"FeeLibrary: Factory cannot be 0x0\");\n        factory = Factory(_factory);\n    }\n\n    function getFees(\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        uint16 _dstChainId,\n        address, /*_from*/\n        uint256 _amountSD\n    ) external view override returns (Pool.SwapObj memory s) {\n        // calculate the protocol fee\n        s.protocolFee = _amountSD.mul(PROTOCOL_FEE).div(DENOMINATOR);\n\n        // calculate the equilibrium Fee\n        Pool pool = factory.getPool(_srcPoolId);\n        Pool.ChainPath memory chainPath = pool.getChainPath(_dstChainId, _dstPoolId);\n\n        // calculate the equilibrium fee\n        (uint256 eqFee, uint256 protocolSubsidy) = _getEquilibriumFee(chainPath.idealBalance, chainPath.balance, _amountSD);\n        s.eqFee = eqFee;\n        s.protocolFee = s.protocolFee.sub(protocolSubsidy);\n\n        // calculate the equilibrium reward\n        address tokenAddress = pool.token();\n        uint256 currentAssetSD = IERC20(tokenAddress).balanceOf(address(pool)).div(pool.convertRate());\n        uint256 lpAsset = pool.totalLiquidity();\n        if (lpAsset > currentAssetSD) {\n            // in deficit\n            uint256 poolDeficit = lpAsset.sub(currentAssetSD);\n            uint256 rewardPoolSize = pool.eqFeePool();\n            // reward capped at rewardPoolSize\n            uint256 eqRewards = rewardPoolSize.mul(_amountSD).div(poolDeficit);\n            if (eqRewards > rewardPoolSize) {\n                eqRewards = rewardPoolSize;\n            }\n            s.eqReward = eqRewards;\n        }\n\n        // calculate the LP fee.\n        s.lpFee = _amountSD.mul(LP_FEE).div(DENOMINATOR);\n\n        return s;\n    }\n\n    function getEquilibriumFee(\n        uint256 idealBalance,\n        uint256 beforeBalance,\n        uint256 amountSD\n    ) external pure returns (uint256, uint256) {\n        return _getEquilibriumFee(idealBalance, beforeBalance, amountSD);\n    }\n\n    function getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) external pure returns (uint256) {\n        return _getTrapezoidArea(lambda, yOffset, xUpperBound, xLowerBound, xStart, xEnd);\n    }\n\n    function _getEquilibriumFee(\n        uint256 idealBalance,\n        uint256 beforeBalance,\n        uint256 amountSD\n    ) internal pure returns (uint256, uint256) {\n        require(beforeBalance >= amountSD, \"Stargate: not enough balance\");\n        uint256 afterBalance = beforeBalance.sub(amountSD);\n\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\n\n        uint256 eqFee = 0;\n        uint256 protocolSubsidy = 0;\n\n        if (afterBalance >= safeZoneMax) {\n            // no fee zone, protocol subsidize it.\n            eqFee = amountSD.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\n            protocolSubsidy = eqFee;\n        } else if (afterBalance >= safeZoneMin) {\n            // safe zone\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\n        } else {\n            // danger zone\n            if (beforeBalance >= safeZoneMin) {\n                // across 2 or 3 zones\n                // part 1\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\n                // part 2\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\n            } else {\n                // only in danger zone\n                // part 2 only\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance, afterBalance));\n            }\n        }\n        return (eqFee, protocolSubsidy);\n    }\n\n    function _getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) internal pure returns (uint256) {\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \"Stargate: balance out of bound\");\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\n\n        // xStartDrift = xUpperBound.sub(xStart);\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // xEndDrift = xUpperBound.sub(xEnd)\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // compute the area\n        uint256 deltaX = xStart.sub(xEnd);\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\n    }\n\n    function getVersion() external pure override returns (string memory) {\n        return \"3.0.0\";\n    }\n}\n"
    },
    "contracts/libraries/StargateFeeLibraryV02.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"../interfaces/IStargateFeeLibrary.sol\";\nimport \"../Pool.sol\";\nimport \"../Factory.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract StargateFeeLibraryV02 is IStargateFeeLibrary, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\n    uint256 public constant DENOMINATOR = 1e18;\n    uint256 public constant DELTA_1 = 6000 * 1e14;\n    uint256 public constant DELTA_2 = 500 * 1e14;\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\n    uint256 public constant LP_FEE = 45 * 1e13;\n    uint256 public constant PROTOCOL_FEE = 15 * 1e13;\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\n\n    Factory public immutable factory;\n\n    constructor(address _factory) {\n        require(_factory != address(0x0), \"FeeLibrary: Factory cannot be 0x0\");\n        factory = Factory(_factory);\n    }\n\n    function getFees(\n        uint256 _srcPoolId,\n        uint256 _dstPoolId,\n        uint16 _dstChainId,\n        address, /*_from*/\n        uint256 _amountSD\n    ) external view override returns (Pool.SwapObj memory s) {\n        // calculate the protocol fee\n        s.protocolFee = _amountSD.mul(PROTOCOL_FEE).div(DENOMINATOR);\n\n        // calculate the equilibrium Fee\n        Pool pool = factory.getPool(_srcPoolId);\n        Pool.ChainPath memory chainPath = pool.getChainPath(_dstChainId, _dstPoolId);\n\n        // calculate the equilibrium fee\n        (uint256 eqFee, uint256 protocolSubsidy) = _getEquilibriumFee(chainPath.idealBalance, chainPath.balance, _amountSD);\n        s.eqFee = eqFee;\n        s.protocolFee = s.protocolFee.sub(protocolSubsidy);\n\n        // calculate the equilibrium reward\n        address tokenAddress = pool.token();\n        uint256 currentAssetSD = IERC20(tokenAddress).balanceOf(address(pool)).div(pool.convertRate());\n        uint256 lpAsset = pool.totalLiquidity();\n        if (lpAsset > currentAssetSD) {\n            // in deficit\n            uint256 poolDeficit = lpAsset.sub(currentAssetSD);\n            uint256 rewardPoolSize = pool.eqFeePool();\n            // reward capped at rewardPoolSize\n            uint256 eqRewards = rewardPoolSize.mul(_amountSD).div(poolDeficit);\n            if (eqRewards > rewardPoolSize) {\n                eqRewards = rewardPoolSize;\n            }\n            s.eqReward = eqRewards;\n        }\n\n        // calculate the LP fee.\n        s.lpFee = _amountSD.mul(LP_FEE).div(DENOMINATOR);\n\n        return s;\n    }\n\n    function getEquilibriumFee(\n        uint256 idealBalance,\n        uint256 beforeBalance,\n        uint256 amountSD\n    ) external pure returns (uint256, uint256) {\n        return _getEquilibriumFee(idealBalance, beforeBalance, amountSD);\n    }\n\n    function getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) external pure returns (uint256) {\n        return _getTrapezoidArea(lambda, yOffset, xUpperBound, xLowerBound, xStart, xEnd);\n    }\n\n    function _getEquilibriumFee(\n        uint256 idealBalance,\n        uint256 beforeBalance,\n        uint256 amountSD\n    ) internal pure returns (uint256, uint256) {\n        require(beforeBalance >= amountSD, \"Stargate: not enough balance\");\n        uint256 afterBalance = beforeBalance.sub(amountSD);\n\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\n\n        uint256 eqFee = 0;\n        uint256 protocolSubsidy = 0;\n\n        if (afterBalance >= safeZoneMax) {\n            // no fee zone, protocol subsidize it.\n            eqFee = amountSD.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\n            protocolSubsidy = eqFee;\n        } else if (afterBalance >= safeZoneMin) {\n            // safe zone\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\n        } else {\n            // danger zone\n            if (beforeBalance >= safeZoneMin) {\n                // across 2 or 3 zones\n                // part 1\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\n                // part 2\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\n            } else {\n                // only in danger zone\n                // part 2 only\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance, afterBalance));\n            }\n        }\n        return (eqFee, protocolSubsidy);\n    }\n\n    function _getTrapezoidArea(\n        uint256 lambda,\n        uint256 yOffset,\n        uint256 xUpperBound,\n        uint256 xLowerBound,\n        uint256 xStart,\n        uint256 xEnd\n    ) internal pure returns (uint256) {\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \"Stargate: balance out of bound\");\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\n\n        // xStartDrift = xUpperBound.sub(xStart);\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // xEndDrift = xUpperBound.sub(xEnd)\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\n\n        // compute the area\n        uint256 deltaX = xStart.sub(xEnd);\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\n    }\n\n    function getVersion() external pure override returns (string memory) {\n        return \"2.0.0\";\n    }\n}\n"
    },
    "contracts/libraries/StargateFeeLibraryV01.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"../interfaces/IStargateFeeLibrary.sol\";\nimport \"../Pool.sol\";\nimport \"../Factory.sol\";\n// libraries\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract StargateFeeLibraryV01 is IStargateFeeLibrary, Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    uint256 public constant BP_DENOMINATOR = 10000;\n\n    constructor(address _factory) {\n        require(_factory != address(0x0), \"FeeLibrary: Factory cannot be 0x0\");\n        factory = Factory(_factory);\n    }\n\n    //---------------------------------------------------------------------------\n    // VARIABLES\n    Factory public factory;\n\n    uint256 public lpFeeBP; // fee basis points for lp holders\n    uint256 public protocolFeeBP; // fee basis points for xStargate\n    uint256 public eqFeeBP; // fee basis points for eqFeeBP\n    uint256 public eqRewardBP; // fee basis points for eqRewardBP\n\n    //---------------------------------------------------------------------------\n    // EVENTS\n    event FeesUpdated(uint256 lpFeeBP, uint256 protocolFeeBP);\n\n    function getFees(\n        uint256, /*_srcPoolId*/\n        uint256, /*_dstPoolId*/\n        uint16, /*_dstChainId*/\n        address, /*_from*/\n        uint256 _amountSD\n    ) external view override returns (Pool.SwapObj memory s) {\n        // calculate the xStargate Fee.\n        s.protocolFee = _amountSD.mul(protocolFeeBP).div(BP_DENOMINATOR);\n        // calculate the LP fee. booked at remote\n        s.lpFee = _amountSD.mul(lpFeeBP).div(BP_DENOMINATOR);\n        // calculate the equilibrium Fee and reward\n        s.eqFee = _amountSD.mul(eqFeeBP).div(BP_DENOMINATOR);\n        s.eqReward = _amountSD.mul(eqRewardBP).div(BP_DENOMINATOR);\n        return s;\n    }\n\n    function setFees(\n        uint256 _lpFeeBP,\n        uint256 _protocolFeeBP,\n        uint256 _eqFeeBP,\n        uint256 _eqRewardBP\n    ) external onlyOwner {\n        require(_lpFeeBP.add(_protocolFeeBP).add(_eqFeeBP).add(_eqRewardBP) <= BP_DENOMINATOR, \"FeeLibrary: sum fees > 100%\");\n        require(eqRewardBP <= eqFeeBP, \"FeeLibrary: eq fee param incorrect\");\n        lpFeeBP = _lpFeeBP;\n        protocolFeeBP = _protocolFeeBP;\n        eqFeeBP = _eqFeeBP;\n        eqRewardBP = _eqRewardBP;\n        emit FeesUpdated(lpFeeBP, protocolFeeBP);\n    }\n\n    function getVersion() external pure override returns (string memory) {\n        return \"1.0.0\";\n    }\n}\n"
    },
    "contracts/mocks/MockToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockToken is ERC20 {\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) ERC20(name_, symbol_) {\n        _setupDecimals(decimals_);\n        _mint(msg.sender, 1000000000 * (10**decimals_));\n    }\n\n    bool paused;\n\n    function mint(address _to, uint256 _amount) public {\n        _mint(_to, _amount);\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        // need to mock some failed transfer events\n        require(!paused, \"Failed transfer due to pause\");\n\n        return super.transfer(recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        // need to mock some failed transfer events\n        require(!paused, \"Failed transfer due to pause\");\n        return super.transferFrom(sender, recipient, amount);\n    }\n\n    function pauseTransfers(bool _paused) external {\n        paused = _paused;\n    }\n\n    // mocked for usdt\n    function issue(uint amount) public {}\n}\n"
    },
    "contracts/mock/MockStableCoin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// MOCK with mint for testing\ncontract MockStableCoin is ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n        _mint(msg.sender, 100_000_000_000 * 10**6);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mocks/SetString.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract SetString is Ownable {\n    string public s;\n\n    function setString(string memory _s) external onlyOwner {\n        s = _s;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}