{
  "address": "0xB30300c11FF54f8F674a9AA0777D8D5e9fefd652",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_sharedDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_localDecimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeLibrary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultFeeLibrary",
          "type": "address"
        }
      ],
      "name": "setDefaultFeeLibrary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d064989a001c45ecd8acf433de8d0bd896e5053afe6116d4fd086f04e019007",
  "receipt": {
    "to": null,
    "from": "0x3626f14e310c42d01E66dEF77E15Ec62e622c9fC",
    "contractAddress": "0xB30300c11FF54f8F674a9AA0777D8D5e9fefd652",
    "transactionIndex": 31,
    "gasUsed": "4735407",
    "logsBloom": "0x
    "blockHash": "0xe3b0b0f2cfb6fa8a2ebedb44319b696aa8a87dca211d30b3de43051b81b6287e",
    "transactionHash": "0x8d064989a001c45ecd8acf433de8d0bd896e5053afe6116d4fd086f04e019007",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 7828521,
        "transactionHash": "0x8d064989a001c45ecd8acf433de8d0bd896e5053afe6116d4fd086f04e019007",
        "address": "0xB30300c11FF54f8F674a9AA0777D8D5e9fefd652",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003626f14e310c42d01e66def77e15ec62e622c9fc"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0xe3b0b0f2cfb6fa8a2ebedb44319b696aa8a87dca211d30b3de43051b81b6287e"
      }
    ],
    "blockNumber": 7828521,
    "cumulativeGasUsed": "13075537",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7612aE2a34E5A363E137De748801FB4c86499152"
  ],
  "numDeployments": 1,
  "solcInputHash": "77dc0a461aa289ada2299af7d9288435",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_sharedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_localDecimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeLibrary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultFeeLibrary\",\"type\":\"address\"}],\"name\":\"setDefaultFeeLibrary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Factory is Ownable {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    mapping(uint256 => Pool) public getPool; // poolId -> PoolInfo\\n    address[] public allPools;\\n    address public immutable router;\\n    address public defaultFeeLibrary; // address for retrieving fee params for swaps\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: caller must be Router.\\\");\\n        _;\\n    }\\n\\n    constructor(address _router) {\\n        require(_router != address(0x0), \\\"Stargate: _router cant be 0x0\\\"); // 1 time only\\n        router = _router;\\n    }\\n\\n    function setDefaultFeeLibrary(address _defaultFeeLibrary) external onlyOwner {\\n        require(_defaultFeeLibrary != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        defaultFeeLibrary = _defaultFeeLibrary;\\n    }\\n\\n    function allPoolsLength() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    function createPool(\\n        uint256 _poolId,\\n        address _token,\\n        uint8 _sharedDecimals,\\n        uint8 _localDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) public onlyRouter returns (address poolAddress) {\\n        require(address(getPool[_poolId]) == address(0x0), \\\"Stargate: Pool already created\\\");\\n\\n        Pool pool = new Pool(_poolId, router, _token, _sharedDecimals, _localDecimals, defaultFeeLibrary, _name, _symbol);\\n        getPool[_poolId] = pool;\\n        poolAddress = address(pool);\\n        allPools.push(poolAddress);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x90afcaeaf0f8e3e44d25a4596705f792a03f15524e400d0c1c131b291e01c4e9\",\"license\":\"BUSL-1.1\"},\"contracts/LPTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LPTokenERC20 {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    string public name;\\n    string public symbol;\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // set in constructor\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    uint256 public decimals;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Bridge: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Bridge: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xd0ac7dd3767cd0223a26075c43d10bd3866c226f3a43ebc5f5c4b8bc3d21a77e\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./LPTokenERC20.sol\\\";\\nimport \\\"./interfaces/IStargateFeeLibrary.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// Pool contracts on other chains and managed by the Stargate protocol.\\ncontract Pool is LPTokenERC20, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    uint256 public constant BP_DENOMINATOR = 10000;\\n\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct ChainPath {\\n        bool ready; // indicate if the counter chainPath has been created.\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        uint256 weight;\\n        uint256 balance;\\n        uint256 lkb;\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    struct SwapObj {\\n        uint256 amount;\\n        uint256 eqFee;\\n        uint256 eqReward;\\n        uint256 lpFee;\\n        uint256 protocolFee;\\n        uint256 lkbRemove;\\n    }\\n\\n    struct CreditObj {\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // chainPath\\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\\n    mapping(uint16 => mapping(uint256 => uint256)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\\n\\n    // metadata\\n    uint256 public immutable poolId; // shared id between chains to represent same pool\\n    uint256 public sharedDecimals; // the shared decimals (lowest common decimals between chains)\\n    uint256 public localDecimals; // the decimals for the token\\n    uint256 public immutable convertRate; // the decimals for the token\\n    address public immutable token; // the token for the pool\\n    address public immutable router; // the token for the pool\\n\\n    bool public stopSwap; // flag to stop swapping in extreme cases\\n\\n    // Fee and Liquidity\\n    uint256 public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\\n    uint256 public totalWeight; // total weight for pool percentages\\n    uint256 public mintFeeBP; // fee basis points for the mint/deposit\\n    uint256 public protocolFeeBalance; // fee balance created from dao fee\\n    uint256 public mintFeeBalance; // fee balance created from mint fee\\n    uint256 public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\\n    address public feeLibrary; // address for retrieving fee params for swaps\\n\\n    // Delta related\\n    uint256 public deltaCredit; // credits accumulated from txn\\n    bool public batched; // flag to indicate if we want batch processing.\\n    bool public defaultSwapMode; // flag for the default mode for swap\\n    bool public defaultLPMode; // flag for the default mode for lp\\n    uint256 public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\\n    uint256 public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Mint(address to, uint256 amountLP, uint256 amountSD, uint256 mintFeeAmountSD);\\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocalCallback(address _to, uint256 _amountSD, uint256 _amountToMintSD);\\n    event Swap(\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        address from,\\n        uint256 amountSD,\\n        uint256 eqReward,\\n        uint256 eqFee,\\n        uint256 protocolFee,\\n        uint256 lpFee\\n    );\\n    event SendCredits(uint16 dstChainId, uint256 dstPoolId, uint256 credits, uint256 idealBalance);\\n    event RedeemRemote(uint16 chainId, uint256 dstPoolId, address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, bytes to);\\n    event InstantRedeemLocal(address from, uint256 amountLP, uint256 amountSD, address to);\\n    event CreditChainPath(uint16 chainId, uint256 srcPoolId, uint256 amountSD, uint256 idealBalance);\\n    event SwapRemote(address to, uint256 amountSD, uint256 protocolFee, uint256 dstFee);\\n    event WithdrawRemote(uint16 srcChainId, uint256 srcPoolId, uint256 swapAmount, uint256 mintAmount);\\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\\n    event FeesUpdated(uint256 mintFeeBP);\\n    event FeeLibraryUpdated(address feeLibraryAddr);\\n    event StopSwapUpdated(bool swapStop);\\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\\n    event DeltaParamUpdated(bool batched, uint256 swapDeltaBP, uint256 lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: only the router can call this method\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _poolId,\\n        address _router,\\n        address _token,\\n        uint256 _sharedDecimals,\\n        uint256 _localDecimals,\\n        address _feeLibrary,\\n        string memory _name,\\n        string memory _symbol\\n    ) LPTokenERC20(_name, _symbol) {\\n        require(_token != address(0x0), \\\"Stargate: _token cannot be 0x0\\\");\\n        require(_router != address(0x0), \\\"Stargate: _router cannot be 0x0\\\");\\n        poolId = _poolId;\\n        router = _router;\\n        token = _token;\\n        sharedDecimals = _sharedDecimals;\\n        decimals = uint8(_sharedDecimals);\\n        localDecimals = _localDecimals;\\n        convertRate = 10**(uint256(localDecimals).sub(sharedDecimals));\\n        totalWeight = 0;\\n        feeLibrary = _feeLibrary;\\n\\n        //delta algo related\\n        batched = false;\\n        defaultSwapMode = true;\\n        defaultLPMode = true;\\n    }\\n\\n    function getChainPathsLength() public view returns (uint256) {\\n        return chainPaths.length;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n\\n    function mint(address _to, uint256 _amountLD) external nonReentrant onlyRouter returns (uint256) {\\n        return _mintLocal(_to, _amountLD, true, true);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        bool newLiquidity\\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\\n        require(!stopSwap, \\\"Stargate: swap func stopped\\\");\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n\\n        uint256 amountSD = amountLDtoSD(_amountLD);\\n        uint256 minAmountSD = amountLDtoSD(_minAmountLD);\\n\\n        // request fee params from library\\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\\n\\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\\n        eqFeePool = eqFeePool.sub(s.eqReward);\\n        // update the new amount the user gets minus the fees\\n        s.amount = amountSD.sub(s.eqFee).sub(s.protocolFee).sub(s.lpFee);\\n        // users will also get the eqReward\\n        require(s.amount.add(s.eqReward) >= minAmountSD, \\\"Stargate: slippage too high\\\");\\n\\n        // behaviours\\n        //     - protocolFee: booked, stayed and withdrawn at remote.\\n        //     - eqFee: booked, stayed and withdrawn at remote.\\n        //     - lpFee: booked and stayed at remote, can be withdrawn anywhere\\n\\n        s.lkbRemove = amountSD.sub(s.lpFee).add(s.eqReward);\\n        // check for transfer solvency.\\n        require(cp.balance >= s.lkbRemove, \\\"Stargate: dst balance too low\\\");\\n        cp.balance = cp.balance.sub(s.lkbRemove);\\n\\n        if (newLiquidity) {\\n            deltaCredit = deltaCredit.add(amountSD).add(s.eqReward);\\n        } else if (s.eqReward > 0) {\\n            deltaCredit = deltaCredit.add(s.eqReward);\\n        }\\n\\n        // distribute credits on condition.\\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultSwapMode);\\n        }\\n\\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\\n        return s;\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function sendCredits(uint16 _dstChainId, uint256 _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        cp.lkb = cp.lkb.add(cp.credits);\\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\\n        c.credits = cp.credits;\\n        cp.credits = 0;\\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemRemote   ->                        swapRemote\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLP\\n    ) external nonReentrant onlyRouter {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 amountSD = _burnLocal(_from, _amountLP);\\n        //run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountLD);\\n    }\\n\\n    function instantRedeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        address _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 _deltaCredit = deltaCredit; // sload optimization.\\n        uint256 _capAmountLP = _amountSDtoLP(_deltaCredit);\\n\\n        if (_amountLP > _capAmountLP) _amountLP = _capAmountLP;\\n\\n        amountSD = _burnLocal(_from, _amountLP);\\n        deltaCredit = _deltaCredit.sub(amountSD);\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit InstantRedeemLocal(_from, _amountLP, amountSD, _to);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        bytes calldata _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n\\n        // safeguard.\\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        amountSD = _burnLocal(_from, _amountLP);\\n\\n        // run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(false);\\n        }\\n        emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // REMOTE CHAIN FUNCTIONS\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function creditChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        CreditObj memory _c\\n    ) external nonReentrant onlyRouter {\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        cp.balance = cp.balance.add(_c.credits);\\n        if (cp.idealBalance != _c.idealBalance) {\\n            cp.idealBalance = _c.idealBalance;\\n        }\\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swapRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        SwapObj memory _s\\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\\n        // booking lpFee\\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\\n        // booking eqFee\\n        eqFeePool = eqFeePool.add(_s.eqFee);\\n        // booking stargateFee\\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\\n\\n        // update LKB\\n        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\\n\\n        // user receives the amount + the srcReward\\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\\n        _safeTransfer(token, _to, amountLD);\\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCallback(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _amountToMintSD\\n    ) external nonReentrant onlyRouter {\\n        if (_amountToMintSD > 0) {\\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\\n        }\\n\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        cp.lkb = cp.lkb.sub(_amountSD);\\n\\n        uint256 amountLD = amountSDtoLD(_amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCheckOnRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _amountSD\\n    ) external nonReentrant onlyRouter returns (uint256 swapAmount, uint256 mintAmount) {\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        if (_amountSD > cp.balance) {\\n            mintAmount = _amountSD - cp.balance;\\n            swapAmount = cp.balance;\\n            cp.balance = 0;\\n        } else {\\n            cp.balance = cp.balance.sub(_amountSD);\\n            swapAmount = _amountSD;\\n            mintAmount = 0;\\n        }\\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // DAO Calls\\n    function createChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _weight\\n    ) external onlyRouter {\\n        for (uint256 i = 0; i < chainPaths.length; ++i) {\\n            ChainPath memory cp = chainPaths[i];\\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\\n            require(!exists, \\\"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\\\");\\n        }\\n        totalWeight = totalWeight.add(_weight);\\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\\n        chainPaths.push(ChainPath(false, _dstChainId, _dstPoolId, _weight, 0, 0, 0, 0));\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setWeightForChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint16 _weight\\n    ) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\\n        cp.weight = _weight;\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setFee(uint256 _mintFeeBP) external onlyRouter {\\n        require(_mintFeeBP <= BP_DENOMINATOR, \\\"Bridge: cum fees > 100%\\\");\\n        mintFeeBP = _mintFeeBP;\\n        emit FeesUpdated(mintFeeBP);\\n    }\\n\\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\\n        require(_feeLibraryAddr != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        feeLibrary = _feeLibraryAddr;\\n        emit FeeLibraryUpdated(_feeLibraryAddr);\\n    }\\n\\n    function setSwapStop(bool _swapStop) external onlyRouter {\\n        stopSwap = _swapStop;\\n        emit StopSwapUpdated(_swapStop);\\n    }\\n\\n    function setDeltaParam(\\n        bool _batched,\\n        uint256 _swapDeltaBP,\\n        uint256 _lpDeltaBP,\\n        bool _defaultSwapMode,\\n        bool _defaultLPMode\\n    ) external onlyRouter {\\n        require(_swapDeltaBP <= BP_DENOMINATOR && _lpDeltaBP <= BP_DENOMINATOR, \\\"Stargate: wrong Delta param\\\");\\n        batched = _batched;\\n        swapDeltaBP = _swapDeltaBP;\\n        lpDeltaBP = _lpDeltaBP;\\n        defaultSwapMode = _defaultSwapMode;\\n        defaultLPMode = _defaultLPMode;\\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\\n    }\\n\\n    function callDelta(bool _fullMode) external onlyRouter {\\n        _delta(_fullMode);\\n    }\\n\\n    function activateChainPath(uint16 _dstChainId, uint256 _dstPoolId) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == false, \\\"Stargate: chainPath is already active\\\");\\n        // this func will only be called once\\n        cp.ready = true;\\n    }\\n\\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\\n        if (protocolFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(protocolFeeBalance);\\n            protocolFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\\n        if (mintFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(mintFeeBalance);\\n            mintFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL\\n    // Conversion Helpers\\n    //---------------------------------------------------------------------------\\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256) {\\n        return amountSDtoLD(_amountLPtoSD(_amountLP));\\n    }\\n\\n    function _amountLPtoSD(uint256 _amountLP) internal view returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant convert LPtoSD when totalSupply == 0\\\");\\n        return _amountLP.mul(totalLiquidity).div(totalSupply);\\n    }\\n\\n    function _amountSDtoLP(uint256 _amountSD) internal view returns (uint256) {\\n        require(totalLiquidity > 0, \\\"Stargate: cant convert SDtoLP when totalLiq == 0\\\");\\n        return _amountSD.mul(totalSupply).div(totalLiquidity);\\n    }\\n\\n    function amountSDtoLD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(convertRate);\\n    }\\n\\n    function amountLDtoSD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.div(convertRate);\\n    }\\n\\n    function getAndCheckCP(uint16 _dstChainId, uint256 _dstPoolId) internal view returns (ChainPath storage) {\\n        require(chainPaths.length > 0, \\\"Stargate: no chainpaths exist\\\");\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function getChainPath(uint16 _dstChainId, uint256 _dstPoolId) external view returns (ChainPath memory) {\\n        ChainPath memory cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function _burnLocal(address _from, uint256 _amountLP) internal returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant burn when totalSupply == 0\\\");\\n        uint256 amountOfLPTokens = balanceOf[_from];\\n        require(amountOfLPTokens >= _amountLP, \\\"Stargate: not enough LP tokens to burn\\\");\\n\\n        uint256 amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\\n        //subtract totalLiquidity accordingly\\n        totalLiquidity = totalLiquidity.sub(amountSD);\\n\\n        _burn(_from, _amountLP);\\n        emit Burn(_from, _amountLP, amountSD);\\n        return amountSD;\\n    }\\n\\n    function _delta(bool fullMode) internal {\\n        if (deltaCredit > 0 && totalWeight > 0) {\\n            uint256 cpLength = chainPaths.length;\\n            uint256[] memory deficit = new uint256[](cpLength);\\n            uint256 totalDeficit = 0;\\n\\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\\n            for (uint256 i = 0; i < cpLength; ++i) {\\n                ChainPath storage cp = chainPaths[i];\\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\\n                uint256 balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\\n                uint256 currLiq = cp.lkb.add(cp.credits);\\n                if (balLiq > currLiq) {\\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\\n                    deficit[i] = balLiq - currLiq;\\n                    totalDeficit = totalDeficit.add(deficit[i]);\\n                }\\n            }\\n\\n            // indicates how much delta credit is distributed\\n            uint256 spent;\\n\\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\\n            // run full Delta, allocate all credits\\n            if (totalDeficit == 0) {\\n                // only fullMode delta will allocate excess credits\\n                if (fullMode && deltaCredit > 0) {\\n                    // credit ChainPath by weights\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\\n                        uint256 amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\\n                        spent = spent.add(amtToCredit);\\n                        cp.credits = cp.credits.add(amtToCredit);\\n                    }\\n                } // else do nth\\n            } else if (totalDeficit <= deltaCredit) {\\n                if (fullMode) {\\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\\n                    uint256 excessCredit = deltaCredit - totalDeficit;\\n                    // algorithm steps 14-16: calculate credits\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            // credits = credits + deficit + remaining allocation based on weight\\n                            uint256 amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                } else {\\n                    // totalDeficit <= deltaCredit but not running fullMode\\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            uint256 amtToCredit = deficit[i];\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\\n                for (uint256 i = 0; i < cpLength; ++i) {\\n                    if (deficit[i] > 0) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        uint256 proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\\n                        spent = spent.add(proportionalDeficit);\\n                        cp.credits = cp.credits.add(proportionalDeficit);\\n                    }\\n                }\\n            }\\n\\n            // deduct the amount of credit sent\\n            deltaCredit = deltaCredit.sub(spent);\\n        }\\n    }\\n\\n    function _mintLocal(\\n        address _to,\\n        uint256 _amountLD,\\n        bool _feesEnabled,\\n        bool _creditDelta\\n    ) internal returns (uint256 amountSD) {\\n        require(totalWeight > 0, \\\"Stargate: No ChainPaths exist\\\");\\n        amountSD = amountLDtoSD(_amountLD);\\n\\n        uint256 mintFeeSD = 0;\\n        if (_feesEnabled) {\\n            mintFeeSD = amountSD.mul(mintFeeBP).div(BP_DENOMINATOR);\\n            amountSD = amountSD.sub(mintFeeSD);\\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\\n        }\\n\\n        if (_creditDelta) {\\n            deltaCredit = deltaCredit.add(amountSD);\\n        }\\n\\n        uint256 amountLPTokens = amountSD;\\n        if (totalSupply != 0) {\\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\\n        }\\n        totalLiquidity = totalLiquidity.add(amountSD);\\n\\n        _mint(_to, amountLPTokens);\\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\\n\\n        // add to credits and call delta. short circuit to save gas\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n    }\\n\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) private {\\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Stargate: TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xff0ac7ffc5a5813fb1bce42222d7199f05546fb4b12f55fc3791b6607533f820\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateFeeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\nimport \\\"../Pool.sol\\\";\\n\\ninterface IStargateFeeLibrary {\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external returns (Pool.SwapObj memory s);\\n\\n    function getVersion() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x712bc424a034519d61c5a1bbbf3f19fd34dfa51908421775c613f0a44e612d63\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ac5760003560e01c8063be5a3c00116200006f578063be5a3c001462000124578063c63f57aa146200012e578063efde4e641462000145578063f2fde38b146200015e578063f887ea40146200017557620000ac565b8063068bcd8d14620000b157806341d1de9714620000e0578063715018a614620000f75780637af935a114620001035780638da5cb5b146200011a575b600080fd5b620000c8620000c2366004620006c3565b6200017f565b604051620000d79190620007d2565b60405180910390f35b620000c8620000f1366004620006c3565b6200019a565b62000101620001c5565b005b620000c862000114366004620006dc565b62000240565b620000c8620003be565b620000c8620003cd565b620001016200013f3660046200069f565b620003dc565b6200014f620004a0565b604051620000d7919062000893565b620001016200016f3660046200069f565b620004a6565b620000c8620005c1565b6001602052600090815260409020546001600160a01b031681565b60028181548110620001ab57600080fd5b6000918252602090912001546001600160a01b0316905081565b620001cf620005e5565b6001600160a01b0316620001e2620003be565b6001600160a01b0316146200023e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620002965760405162461bcd60e51b81526004016200028d906200085e565b60405180910390fd5b6000878152600160205260409020546001600160a01b031615620002ce5760405162461bcd60e51b81526004016200028d9062000827565b6000877f0000000000000000000000000000000000000000000000000000000000000000888888600360009054906101000a90046001600160a01b031689896040516200031b90620005e9565b6200032e9897969594939291906200089c565b604051809103906000f0801580156200034b573d6000803e3d6000fd5b5060009889526001602081905260408a2080546001600160a01b0384166001600160a01b03199182168117909255600280549384018155909b527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054909a161790985550959695505050505050565b6000546001600160a01b031690565b6003546001600160a01b031681565b620003e6620005e5565b6001600160a01b0316620003f9620003be565b6001600160a01b03161462000455576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166200047e5760405162461bcd60e51b81526004016200028d90620007e6565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60025490565b620004b0620005e5565b6001600160a01b0316620004c3620003be565b6001600160a01b0316146200051f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116620005665760405162461bcd60e51b8152600401808060200182810382526026815260200180620054126026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b3390565b614b02806200091083390190565b80356001600160a01b03811681146200060f57600080fd5b919050565b600082601f83011262000625578081fd5b813567ffffffffffffffff808211156200063b57fe5b604051601f8301601f1916810160200182811182821017156200065a57fe5b60405282815284830160200186101562000672578384fd5b82602086016020830137918201602001929092529392505050565b803560ff811681146200060f57600080fd5b600060208284031215620006b1578081fd5b620006bc82620005f7565b9392505050565b600060208284031215620006d5578081fd5b5035919050565b60008060008060008060c08789031215620006f5578182fd5b863595506200070760208801620005f7565b945062000717604088016200068d565b935062000727606088016200068d565b9250608087013567ffffffffffffffff8082111562000744578384fd5b620007528a838b0162000614565b935060a089013591508082111562000768578283fd5b506200077789828a0162000614565b9150509295509295509295565b60008151808452815b81811015620007ab576020818501810151868301820152016200078d565b81811115620007bd5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60208082526021908201527f53746172676174653a20666565206c6962726172792063616e742062652030786040820152600360fc1b606082015260800190565b6020808252601e908201527f53746172676174653a20506f6f6c20616c726561647920637265617465640000604082015260600190565b6020808252818101527f53746172676174653a2063616c6c6572206d75737420626520526f757465722e604082015260600190565b90815260200190565b8881526001600160a01b038881166020830152878116604083015260ff878116606084015286166080830152841660a082015261010060c08201819052600090620008ea8382018662000784565b905082810360e084015262000900818562000784565b9b9a505050505050505050505056fe6101006040523480156200001257600080fd5b5060405162004b0238038062004b02833981016040819052620000359162000435565b8151829082906200004e906000906020850190620002d1565b50805162000064906001906020840190620002d1565b5060004690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040518082805460018160011615610100020316600290048015620000ec5780601f10620000c9576101008083540402835291820191620000ec565b820191906000526020600020905b815481529060010190602001808311620000d7575b50506040805191829003822082820182526001808452603160f81b602094850152825180850197909752868301919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606087015260808601969096523060a0808701919091528151808703909101815260c090950190528351930192909220600255505060085550506001600160a01b038616620001aa5760405162461bcd60e51b8152600401620001a190620004f2565b60405180910390fd5b6001600160a01b038716620001d35760405162461bcd60e51b8152600401620001a19062000529565b6080889052606087811b6001600160601b031990811660e0529087901b1660c052600b85905560ff8516600355600c8490556200021d848662000273602090811b620027f617901c565b600a0a60a05250506000600f55601480546001600160a01b039092166001600160a01b031990921691909117905550506016805462ff00001961ffff199091166101001716620100001790555062000560915050565b600082821115620002cb576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928262000309576000855562000354565b82601f106200032457805160ff191683800117855562000354565b8280016001018555821562000354579182015b828111156200035457825182559160200191906001019062000337565b506200036292915062000366565b5090565b5b8082111562000362576000815560010162000367565b80516001600160a01b03811681146200039557600080fd5b919050565b600082601f830112620003ab578081fd5b81516001600160401b0380821115620003c057fe5b6040516020601f8401601f1916820181018381118382101715620003e057fe5b6040528382528584018101871015620003f7578485fd5b8492505b838310156200041a5785830181015182840182015291820191620003fb565b838311156200042b57848185840101525b5095945050505050565b600080600080600080600080610100898b03121562000452578384fd5b885197506200046460208a016200037d565b96506200047460408a016200037d565b955060608901519450608089015193506200049260a08a016200037d565b60c08a01519093506001600160401b0380821115620004af578384fd5b620004bd8c838d016200039a565b935060e08b0151915080821115620004d3578283fd5b50620004e28b828c016200039a565b9150509295985092959890939650565b6020808252601e908201527f53746172676174653a205f746f6b656e2063616e6e6f74206265203078300000604082015260600190565b6020808252601f908201527f53746172676174653a205f726f757465722063616e6e6f742062652030783000604082015260600190565b60805160a05160c05160601c60e05160601c6144da62000628600039806108895280610a075280610c7a5280610fd3528061146752806114c85280611595528061167c528061177852806118a9528061190052806119d55280611cab5280611d775280611e4a52806120035280612160528061226e528061255052806126975280612786525080610ab152806115265280611ae8528061209252806122cc52806127b05250806127d45280612b8b5280612cfb525080610d5152806113ed52506144da6000f3fe608060405234801561001057600080fd5b50600436106103ae5760003560e01c80637ecebe00116101f4578063b0fab0bc1161011a578063e065608b116100ad578063f887ea401161007c578063f887ea401461076e578063faa24f0714610776578063fc0c546a1461077e578063feb56b1514610786576103ae565b8063e065608b1461071f578063e46e705814610732578063ea89e2aa1461073a578063f6cd35ee1461075b576103ae565b8063be310294116100e9578063be310294146106de578063cdfed0ab146106f1578063d505accf146106f9578063dd62ed3e1461070c576103ae565b8063b0fab0bc1461069d578063b30daeac146106b0578063b633b364146106c3578063b6addec7146106cb576103ae565b806399a22d6811610192578063a9059cbb11610161578063a9059cbb1461065c578063a985565f1461066f578063abe685cd14610682578063ac2cc36b1461068a576103ae565b806399a22d68146106125780639bb811191461061a578063a138ed6b14610622578063a457c2d714610649576103ae565b80638bd86d0a116101ce5780638bd86d0a146105dc578063902b8ab7146105ef57806395d89b411461060257806396c82e571461060a576103ae565b80637ecebe00146105ae5780637fb65265146105c1578063857749b0146105d4576103ae565b806328f079c2116102d957806340c10f191161027757806365152f2b1161024657806365152f2b1461056d57806369fe0e2d1461057557806370a08231146105885780637298a5dc1461059b576103ae565b806340c10f1914610521578063476efe40146105345780634b5cacbc1461054757806364c5f02d1461055a576103ae565b806336448777116102b357806336448777146104f65780633644e515146104fe57806339509351146105065780633e0dc34e14610519576103ae565b806328f079c2146104de57806330adf81f146104e6578063313ce567146104ee576103ae565b8063159f6add116103515780631e8e51da116103205780631e8e51da146104a657806320d6bc75146104ae57806323b872dd146104c357806327f92376146104d6576103ae565b8063159f6add14610456578063163ef4901461047657806318160ddd1461047e5780631b7319b614610486576103ae565b8063095ea7b31161038d578063095ea7b3146104065780630986b61a146104265780630a22d68c1461044657806315770f921461044e576103ae565b80621edfab146103b357806306fdde03146103d157806308e9d8c2146103e6575b600080fd5b6103bb61078e565b6040516103c89190613b9e565b60405180910390f35b6103d961079d565b6040516103c89190613d14565b6103f96103f43660046138d4565b61082b565b6040516103c89190614295565b6104196104143660046136c6565b610998565b6040516103c89190613c9b565b6104396104343660046136ef565b6109af565b6040516103c89190613d0b565b610439610b23565b610439610b29565b6104696104643660046138d4565b610b2f565b6040516103c89190614236565b610439610c10565b610439610c16565b610499610494366004613a31565b610c1c565b6040516103c891906142ac565b610439610fc2565b6104c16104bc366004613b38565b610fc8565b005b6104196104d136600461361a565b6112ce565b610419611362565b61041961136b565b61043961137a565b61043961139e565b6104396113a4565b6104396113aa565b6104196105143660046136c6565b6113b0565b6104396113eb565b61043961052f3660046136c6565b61140f565b6104c16105423660046135ce565b6114bd565b6104c16105553660046135ce565b61158a565b6104396105683660046138d4565b61164e565b61043961166b565b6104c1610583366004613b6a565b611671565b6104396105963660046135ce565b611710565b6104c16105a93660046139a1565b611722565b6104396105bc3660046135ce565b61188c565b6104c16105cf3660046137cb565b61189e565b6104396118ef565b6104c16105ea3660046138d4565b6118f5565b6104396105fd3660046138ef565b61197d565b6103d9611b72565b610439611bcc565b610419611bd2565b610439611be0565b610635610630366004613b6a565b611be6565b6040516103c8989796959493929190613ca6565b6104196106573660046136c6565b611c44565b61041961066a3660046136c6565b611c93565b6104c161067d366004613b06565b611ca0565b610439611d66565b6104c16106983660046137cb565b611d6c565b6104396106ab36600461372a565b611df2565b6104c16106be3660046139e4565b611fad565b610419612101565b6104c16106d9366004613a93565b61210a565b6104c16106ec3660046135ce565b612263565b610439612323565b6104c1610707366004613655565b612329565b61043961071a3660046135e8565b612528565b6104c161072d366004613803565b612545565b610439612638565b61074d610748366004613b38565b61263e565b6040516103c89291906143c2565b610439610769366004613b6a565b61276e565b6103bb612784565b6104396127a8565b6103bb6127ae565b6104396127d2565b6014546001600160a01b031681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108235780601f106107f857610100808354040283529160200191610823565b820191906000526020600020905b81548152906001019060200180831161080657829003601f168201915b505050505081565b61083361350a565b60026008541415610879576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108cf5760405162461bcd60e51b81526004016108c6906140c6565b60405180910390fd5b60006108db8484612853565b805490915060ff1615156001146109045760405162461bcd60e51b81526004016108c690613fc1565b60058101546004820154610917916128f0565b6004820155600f546002820154600e5461093c9291610936919061294a565b906129a3565b6020830181905260058201805480855260009091556040517f6939f93e3f21cf1362eb17155b740277de5687dae9a83a85909fd71da95944e7926109849288928892906143a1565b60405180910390a150600160085592915050565b60006109a5338484612a0a565b5060015b92915050565b6000600260085414156109f7576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a445760405162461bcd60e51b81526004016108c6906140c6565b6001600160a01b038416610a6a5760405162461bcd60e51b81526004016108c690613f8a565b6015546000610a7882612a6c565b905080851115610a86578094505b610a908686612aaa565b9250610a9c82846127f6565b6015556000610aaa84612b83565b9050610ad77f00000000000000000000000000000000000000000000000000000000000000008683612baf565b7f2125a70154569bd1686edd3cf981bb23dea7c1fa1637909dbb3c9a967cb0c2f287878688604051610b0c9493929190613bec565b60405180910390a150506001600855509392505050565b60115481565b600e5481565b610b37613524565b61ffff83166000908152600a60209081526040808320858452909152812054600980549091908110610b6557fe5b60009182526020918290206040805161010080820183526007909402909201805460ff81161515845261ffff94900484169483018590526001810154918301919091526002810154606083015260038101546080830152600481015460a0830152600581015460c08301526006015460e082015292508516148015610bed5750828160400151145b610c095760405162461bcd60e51b81526004016108c690613d97565b9392505050565b60095490565b60045481565b610c2461356f565b60026008541415610c6a576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cb75760405162461bcd60e51b81526004016108c6906140c6565b600d5460ff1615610cda5760405162461bcd60e51b81526004016108c6906141ff565b6000610ce68888612853565b805490915060ff161515600114610d0f5760405162461bcd60e51b81526004016108c690613fc1565b6000610d1a86612cf3565b90506000610d2786612cf3565b90506000601460009054906101000a90046001600160a01b03166001600160a01b0316631ab624307f00000000000000000000000000000000000000000000000000000000000000008c8e8d886040518663ffffffff1660e01b8152600401610d949594939291906143d0565b60c060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de69190613861565b9050610e0181604001516013546127f690919063ffffffff16565b601355606081015160808201516020830151610e2b9291610e2591829088906127f6565b906127f6565b80825260408201518391610e3e916128f0565b1015610e5c5760405162461bcd60e51b81526004016108c690614182565b610e818160400151610e7b8360600151866127f690919063ffffffff16565b906128f0565b60a0820181905260038501541015610eab5760405162461bcd60e51b81526004016108c69061414b565b60a08101516003850154610ebe916127f6565b60038501558515610eee57610ee68160400151610e7b856015546128f090919063ffffffff16565b601555610f0d565b604081015115610f0d576040810151601554610f09916128f0565b6015555b60165460ff161580610f3d5750610f37612710610936601754600e5461294a90919063ffffffff16565b60155410155b15610f5657601654610f5690610100900460ff16612d1f565b7f34660fc8af304464529f48a778e03d03e4d34bcd5f9b6f0cfbf3cd238c642f7f8b8b8b84600001518560400151866020015187608001518860600151604051610fa7989796959493929190614322565b60405180910390a160016008559a9950505050505050505050565b60155481565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110105760405162461bcd60e51b81526004016108c6906140c6565b60005b6009548110156110de5760006009828154811061102c57fe5b600091825260208083206040805161010080820183526007909502909201805460ff81161515845261ffff95900485169383018490526001810154918301919091526002810154606083015260038101546080830152600481015460a0830152600581015460c08301526006015460e082015293509087161480156110b45750848260400151145b905080156110d45760405162461bcd60e51b81526004016108c69061405c565b5050600101611013565b50600f546110ec90826128f0565b600f556009805461ffff8581166000818152600a602090815260408083208984528252808320869055805161010080820183528482529281019485528082018a8152606082018a81526080830186815260a0840187815260c0850188815260e0860189815260018d018e559c90985293517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af6007909b029a8b018054995160ff19909a169115159190911762ffff001916989099169095029690961790965594517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b087015592517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b1860155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b285015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b384015590517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b483015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b590910155517f8fb3b21a941c2361df46475f9ae2f7b5dac5de7bd085fa22415ec0bb30c77e22906112c190859085908590614385565b60405180910390a1505050565b6001600160a01b03831660009081526006602090815260408083203384529091528120546000191461134d576001600160a01b038416600090815260066020908152604080832033845290915290205461132890836127f6565b6001600160a01b03851660009081526006602090815260408083203384529091529020555b611358848484613111565b5060019392505050565b60165460ff1681565b60165462010000900460ff1681565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60035481565b60185481565b60025481565b3360008181526006602090815260408083206001600160a01b038716845290915281205490916109a59185906113e690866128f0565b612a0a565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060026008541415611457576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114a45760405162461bcd60e51b81526004016108c6906140c6565b6114b183836001806131bf565b60016008559392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115055760405162461bcd60e51b81526004016108c6906140c6565b6012541561158757600061151a601254612b83565b6000601255905061154c7f00000000000000000000000000000000000000000000000000000000000000008383612baf565b7f87b3b2749102aa96f2d08396e34cd47673e57148af9cfff965d99bc0378a87dc828260405161157d929190613bb2565b60405180910390a1505b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115d25760405162461bcd60e51b81526004016108c6906140c6565b6001600160a01b0381166115f85760405162461bcd60e51b81526004016108c690613f49565b601480546001600160a01b0319166001600160a01b0383161790556040517f5138b884a20454b6db937b9e11c8534e02e708750e0c465df6cd9701622952ce90611643908390613b9e565b60405180910390a150565b600a60209081526000928352604080842090915290825290205481565b60125481565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116b95760405162461bcd60e51b81526004016108c6906140c6565b6127108111156116db5760405162461bcd60e51b81526004016108c690613edb565b60108190556040517f9fe6eeb0f0541c644a56c67efeb872dbadd803a60b909d7dde1b35a3fe230b0e90611643908390613d0b565b60056020526000908152604090205481565b60026008541415611768576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146117b55760405162461bcd60e51b81526004016108c6906140c6565b6001600160a01b0382166117db5760405162461bcd60e51b81526004016108c690613f8a565b60006117e78383612aaa565b60165490915060ff1615806118195750611814612710610936601854600e5461294a90919063ffffffff16565b601554115b15611833576016546118339062010000900460ff16612d1f565b600061183e82612b83565b90507fa33f5c0b76f00f6737b1780a8a7f18e19c3fe8fe9ee01a6c1b8ce1eae5ed54f986868686856040516118779594939291906142f0565b60405180910390a15050600160085550505050565b60076020526000908152604090205481565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118e65760405162461bcd60e51b81526004016108c6906140c6565b61158781612d1f565b600b5481565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461193d5760405162461bcd60e51b81526004016108c6906140c6565b60006119498383612853565b805490915060ff161561196e5760405162461bcd60e51b81526004016108c690613e28565b805460ff191660011790555050565b6000600260085414156119c5576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a125760405162461bcd60e51b81526004016108c6906140c6565b6060820151600e54611a23916128f0565b600e556020820151601354611a37916128f0565b6013556080820151601154611a4b916128f0565b60115561ffff85166000908152600a6020908152604080832087845290915290205460a083015160098054611aa692919084908110611a8657fe5b9060005260206000209060070201600401546127f690919063ffffffff16565b60098281548110611ab357fe5b600091825260209091206004600790920201015560408301518351611ae191611adc91906128f0565b612b83565b9150611b0e7f00000000000000000000000000000000000000000000000000000000000000008584612baf565b604083015183517ffb2b592367452f1c437675bed47f5e1e6c25188c17d7ba01a12eb030bc41ccef918691611b42916128f0565b85608001518660200151604051611b5c9493929190613c75565b60405180910390a1506001600855949350505050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108235780601f106107f857610100808354040283529160200191610823565b600f5481565b601654610100900460ff1681565b60135481565b60098181548110611bf657600080fd5b6000918252602090912060079091020180546001820154600283015460038401546004850154600586015460069096015460ff8616975061010090950461ffff169593949293919290919088565b60006109a533846113e685604051806060016040528060258152602001614480602591393360009081526006602090815260408083206001600160a01b038d1684529091529020549190613319565b60006109a5338484613111565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ce85760405162461bcd60e51b81526004016108c6906140c6565b6000611cf48484612853565b9050611d178261ffff16610e7b8360020154600f546127f690919063ffffffff16565b600f5561ffff821660028201556040517f8fb3b21a941c2361df46475f9ae2f7b5dac5de7bd085fa22415ec0bb30c77e2290611d5890869086908690614367565b60405180910390a150505050565b61271081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611db45760405162461bcd60e51b81526004016108c6906140c6565b600d805460ff19168215151790556040517f59a9350977452c5240699f57f18b5915cd0440a56f08820a38b9f2432a82ba3e90611643908390613c9b565b600060026008541415611e3a576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611e875760405162461bcd60e51b81526004016108c6906140c6565b6001600160a01b038716611ead5760405162461bcd60e51b81526004016108c690613f8a565b61ffff85166000908152600a60209081526040808320878452909152902054600980549091908110611edb57fe5b600091825260209091206007909102015460ff161515600114611f105760405162461bcd60e51b81526004016108c690613fc1565b611f1a8787612aaa565b60165490915060ff161580611f4c5750611f47612710610936601854600e5461294a90919063ffffffff16565b601554115b15611f5b57611f5b6000612d1f565b7f53c03ee0722b52efeb42444f48d90173854501b3de3c590fcb445743377115c287878388888888604051611f969796959493929190613c17565b60405180910390a160016008559695505050505050565b60026008541415611ff3576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146120405760405162461bcd60e51b81526004016108c6906140c6565b801561205d5761205b8361205383612b83565b6000806131bf565b505b60006120698686612853565b600481015490915061207b90846127f6565b6004820155600061208b84612b83565b90506120b87f00000000000000000000000000000000000000000000000000000000000000008683612baf565b7fa97166013ecf5305dd9a58d6d867f05e646d4275f52d2bd52a5c7f00a690ad1b8585856040516120eb93929190613bcb565b60405180910390a1505060016008555050505050565b600d5460ff1681565b60026008541415612150576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461219d5760405162461bcd60e51b81526004016108c6906140c6565b61ffff83166000908152600a602090815260408083208584529091528120546009805490919081106121cb57fe5b906000526020600020906007020190506121f6826000015182600301546128f090919063ffffffff16565b6003820155602082015160068201541461221557602082015160068201555b815160208301516040517fdbdd25248751feb2f3b66721dfdd11662a68bc155af3771e661aabec92fba81492612250928892889291906143a1565b60405180910390a1505060016008555050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146122ab5760405162461bcd60e51b81526004016108c6906140c6565b601154156115875760006122c0601154612b83565b600060115590506122f27f00000000000000000000000000000000000000000000000000000000000000008383612baf565b7f70dc5a44816033bea80f836440f4b1fe1b3bb06b568c8dc2301901f03bf237c7828260405161157d929190613bb2565b60175481565b42841015612370576040805162461bcd60e51b815260206004820152600f60248201526e109c9a5919d94e8811561412549151608a1b604482015290519081900360640190fd5b6002546001600160a01b0380891660008181526007602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa15801561248b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906124c15750886001600160a01b0316816001600160a01b0316145b612512576040805162461bcd60e51b815260206004820152601960248201527f4272696467653a20494e56414c49445f5349474e415455524500000000000000604482015290519081900360640190fd5b61251d898989612a0a565b505050505050505050565b600660209081526000928352604080842090915290825290205481565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461258d5760405162461bcd60e51b81526004016108c6906140c6565b61271084111580156125a157506127108311155b6125bd5760405162461bcd60e51b81526004016108c690613f12565b601680546017869055601885905560ff19168615151761ff001916610100841515021762ff0000191662010000831515021790556040517f7cc11124872dc29ed41dd447ee7ab07d9eee5d8ebb55f65dd92bce19bb20224a906126299087908790879087908790613ce2565b60405180910390a15050505050565b600c5481565b60008060026008541415612687576040805162461bcd60e51b815260206004820152601f602482015260008051602061443f833981519152604482015290519081900360640190fd5b6002600855336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146126d45760405162461bcd60e51b81526004016108c6906140c6565b60006126e08686612853565b9050806003015484111561270557600381018054600090915592508284039150612721565b600381015461271490856127f6565b6003820155839250600091505b7f44d3575fd94f9e0a41d7ebbc7e952f9b615c3f8d1faf924e1e9e98c0edf0d3808686858560405161275694939291906143a1565b60405180910390a15060016008559094909350915050565b600061277c611adc836133b0565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60105481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008282111561284d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6009546000906128755760405162461bcd60e51b81526004016108c690613ea4565b61ffff83166000908152600a602090815260408083208584529091528120546009805490919081106128a357fe5b60009182526020909120600790910201805490915061ffff85811661010090920416148015610bed575082816001015414610c095760405162461bcd60e51b81526004016108c690613d97565b600082820183811015610c09576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082612959575060006109a9565b8282028284828161296657fe5b0414610c095760405162461bcd60e51b815260040180806020018281038252602181526020018061445f6021913960400191505060405180910390fd5b60008082116129f9576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612a0257fe5b049392505050565b6001600160a01b03808416600081815260066020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600080600e5411612a8f5760405162461bcd60e51b81526004016108c690613d47565b61277c600e546109366004548561294a90919063ffffffff16565b60008060045411612acd5760405162461bcd60e51b81526004016108c690613ddf565b6001600160a01b03831660009081526005602052604090205482811015612b065760405162461bcd60e51b81526004016108c6906141b9565b6000612b23600454610936600e548761294a90919063ffffffff16565b600e54909150612b3390826127f6565b600e55612b4085856133ee565b7f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a858583604051612b7393929190613bcb565b60405180910390a1949350505050565b600061277c827f000000000000000000000000000000000000000000000000000000000000000061294a565b604080518082018252601981527f7472616e7366657228616464726573732c75696e7432353629000000000000006020909101525160009081906001600160a01b038616907fa9059cbb2ab09eb219583f4a59a5d0623ade346d962bcd4e46b11da047c9049b90612c269087908790602401613bb2565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612c649190613b82565b6000604051808303816000865af19150503d8060008114612ca1576040519150601f19603f3d011682016040523d82523d6000602084013e612ca6565b606091505b5091509150818015612cd0575080511580612cd0575080806020019051810190612cd091906137e7565b612cec5760405162461bcd60e51b81526004016108c690613e6d565b5050505050565b600061277c827f00000000000000000000000000000000000000000000000000000000000000006129a3565b6000601554118015612d3357506000600f54115b156115875760095460008167ffffffffffffffff81118015612d5457600080fd5b50604051908082528060200260200182016040528015612d7e578160200160208202803683370190505b5090506000805b83811015612e4857600060098281548110612d9c57fe5b906000526020600020906007020190506000612dcd600f546109368460020154600e5461294a90919063ffffffff16565b90506000612dec836005015484600401546128f090919063ffffffff16565b905080821115612e3a57808203868581518110612e0557fe5b602002602001018181525050612e37868581518110612e2057fe5b6020026020010151866128f090919063ffffffff16565b94505b505050806001019050612d85565b50600081612ee657848015612e5f57506000601554115b15612ee15760005b84811015612edf57600060098281548110612e7e57fe5b906000526020600020906007020190506000612eaf600f54610936846002015460155461294a90919063ffffffff16565b9050612ebb84826128f0565b6005830154909450612ecd90826128f0565b60059092019190915550600101612e67565b505b6130fa565b6015548211613053578415612fbd5760155482900360005b85811015612fb6576000858281518110612f1457fe5b60200260200101511115612fae57600060098281548110612f3157fe5b906000526020600020906007020190506000612f85612f63600f5461093685600201548861294a90919063ffffffff16565b888581518110612f6f57fe5b60200260200101516128f090919063ffffffff16565b9050612f9185826128f0565b6005830154909550612fa390826128f0565b826005018190555050505b600101612efe565b5050612ee1565b60005b84811015612edf576000848281518110612fd657fe5b6020026020010151111561304b57600060098281548110612ff357fe5b90600052602060002090600702019050600085838151811061301157fe5b6020026020010151905061302e81856128f090919063ffffffff16565b600583015490945061304090826128f0565b826005018190555050505b600101612fc0565b60005b848110156130f857600084828151811061306c57fe5b602002602001015111156130f05760006009828154811061308957fe5b9060005260206000209060070201905060006130c7856109366015548987815181106130b157fe5b602002602001015161294a90919063ffffffff16565b90506130d384826128f0565b60058301549094506130e590826128f0565b826005018190555050505b600101613056565b505b60155461310790826127f6565b6015555050505050565b6001600160a01b03831660009081526005602052604090205461313490826127f6565b6001600160a01b03808516600090815260056020526040808220939093559084168152205461316390826128f0565b6001600160a01b0380841660008181526005602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600080600f54116131e25760405162461bcd60e51b81526004016108c690614114565b6131eb84612cf3565b905060008315613230576132106127106109366010548561294a90919063ffffffff16565b905061321c82826127f6565b60125490925061322c90826128f0565b6012555b82156132475760155461324390836128f0565b6015555b60045482901561326f5761326c600e546109366004548661294a90919063ffffffff16565b90505b600e5461327c90846128f0565b600e55613289878261347f565b7fb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb878285856040516132be9493929190613c75565b60405180910390a160165460ff1615806132f557506132f0612710610936601854600e5461294a90919063ffffffff16565b601554115b1561330f5760165461330f9062010000900460ff16612d1f565b5050949350505050565b600081848411156133a85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561336d578181015183820152602001613355565b50505050905090810190601f16801561339a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600080600454116133d35760405162461bcd60e51b81526004016108c690614009565b61277c600454610936600e548561294a90919063ffffffff16565b6001600160a01b03821660009081526005602052604090205461341190826127f6565b6001600160a01b03831660009081526005602052604090205560045461343790826127f6565b6004556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60045461348c90826128f0565b6004556001600160a01b0382166000908152600560205260409020546134b290826128f0565b6001600160a01b03831660008181526005602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b604051806040016040528060008152602001600081525090565b604051806101000160405280600015158152602001600061ffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461277f57600080fd5b803561ffff8116811461277f57600080fd5b6000602082840312156135df578081fd5b610c09826135a5565b600080604083850312156135fa578081fd5b613603836135a5565b9150613611602084016135a5565b90509250929050565b60008060006060848603121561362e578081fd5b613637846135a5565b9250613645602085016135a5565b9150604084013590509250925092565b600080600080600080600060e0888a03121561366f578283fd5b613678886135a5565b9650613686602089016135a5565b95506040880135945060608801359350608088013560ff811681146136a9578384fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156136d8578182fd5b6136e1836135a5565b946020939093013593505050565b600080600060608486031215613703578283fd5b61370c846135a5565b925060208401359150613721604085016135a5565b90509250925092565b60008060008060008060a08789031215613742578182fd5b61374b876135a5565b955060208701359450613760604088016135bc565b935060608701359250608087013567ffffffffffffffff80821115613783578384fd5b818901915089601f830112613796578384fd5b8135818111156137a4578485fd5b8a60208285010111156137b5578485fd5b6020830194508093505050509295509295509295565b6000602082840312156137dc578081fd5b8135610c0981614430565b6000602082840312156137f8578081fd5b8151610c0981614430565b600080600080600060a0868803121561381a578283fd5b853561382581614430565b94506020860135935060408601359250606086013561384381614430565b9150608086013561385381614430565b809150509295509295909350565b600060c08284031215613872578081fd5b60405160c0810181811067ffffffffffffffff8211171561388f57fe5b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b600080604083850312156138e6578182fd5b6136e1836135bc565b600080600080848603610120811215613906578283fd5b61390f866135bc565b945060208601359350613924604087016135a5565b925060c0605f1982011215613937578182fd5b5060405160c0810181811067ffffffffffffffff8211171561395557fe5b8060405250606086013581526080860135602082015260a0860135604082015260c0860135606082015260e0860135608082015261010086013560a08201528091505092959194509250565b600080600080608085870312156139b6578182fd5b6139bf856135bc565b9350602085013592506139d4604086016135a5565b9396929550929360600135925050565b600080600080600060a086880312156139fb578283fd5b613a04866135bc565b945060208601359350613a19604087016135a5565b94979396509394606081013594506080013592915050565b60008060008060008060c08789031215613a49578384fd5b613a52876135bc565b955060208701359450613a67604088016135a5565b9350606087013592506080870135915060a0870135613a8581614430565b809150509295509295509295565b60008060008385036080811215613aa8578182fd5b613ab1856135bc565b9350602085013592506040603f1982011215613acb578182fd5b506040516040810181811067ffffffffffffffff82111715613ae957fe5b604090815285013581526060909401356020850152509093909250565b600080600060608486031215613b1a578081fd5b613b23846135bc565b925060208401359150613721604085016135bc565b600080600060608486031215613b4c578081fd5b613b55846135bc565b95602085013595506040909401359392505050565b600060208284031215613b7b578081fd5b5035919050565b60008251613b94818460208701614400565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b03948516815260208101939093526040830191909152909116606082015260800190565b600060018060a01b038916825287602083015286604083015261ffff8616606083015284608083015260c060a08301528260c0830152828460e084013781830160e090810191909152601f909201601f191601019695505050505050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b901515815260200190565b971515885261ffff96909616602088015260408701949094526060860192909252608085015260a084015260c083015260e08201526101000190565b941515855260208501939093526040840191909152151560608301521515608082015260a00190565b90815260200190565b6000602082528251806020840152613d33816040850160208701614400565b601f01601f19169190910160400192915050565b60208082526030908201527f53746172676174653a2063616e7420636f6e76657274205344746f4c5020776860408201526f0656e20746f74616c4c6971203d3d20360841b606082015260800190565b60208082526028908201527f53746172676174653a206c6f63616c20636861696e5061746820646f6573206e6040820152671bdd08195e1a5cdd60c21b606082015260800190565b60208082526029908201527f53746172676174653a2063616e74206275726e207768656e20746f74616c5375604082015268070706c79203d3d20360bc1b606082015260800190565b60208082526025908201527f53746172676174653a20636861696e5061746820697320616c72656164792061604082015264637469766560d81b606082015260800190565b60208082526019908201527f53746172676174653a205452414e534645525f4641494c454400000000000000604082015260600190565b6020808252601d908201527f53746172676174653a206e6f20636861696e7061746873206578697374000000604082015260600190565b60208082526017908201527f4272696467653a2063756d2066656573203e2031303025000000000000000000604082015260600190565b6020808252601b908201527f53746172676174653a2077726f6e672044656c746120706172616d0000000000604082015260600190565b60208082526021908201527f53746172676174653a20666565206c6962726172792063616e742062652030786040820152600360fc1b606082015260800190565b6020808252601d908201527f53746172676174653a205f66726f6d2063616e6e6f7420626520307830000000604082015260600190565b60208082526028908201527f53746172676174653a20636f756e74657220636861696e50617468206973206e6040820152676f7420726561647960c01b606082015260800190565b60208082526033908201527f53746172676174653a2063616e7420636f6e76657274204c50746f53442077686040820152720656e20746f74616c537570706c79203d3d203606c1b606082015260800190565b60208082526044908201527f53746172676174653a2063616e7420637265617465436861696e50617468206f60408201527f66206578697374696e6720647374436861696e496420616e64205f647374506f6060820152631bdb125960e21b608082015260a00190565b6020808252602e908201527f53746172676174653a206f6e6c792074686520726f757465722063616e20636160408201526d1b1b081d1a1a5cc81b595d1a1bd960921b606082015260800190565b6020808252601d908201527f53746172676174653a204e6f20436861696e5061746873206578697374000000604082015260600190565b6020808252601d908201527f53746172676174653a206473742062616c616e636520746f6f206c6f77000000604082015260600190565b6020808252601b908201527f53746172676174653a20736c69707061676520746f6f20686967680000000000604082015260600190565b60208082526026908201527f53746172676174653a206e6f7420656e6f756768204c5020746f6b656e7320746040820152653790313ab93760d11b606082015260800190565b6020808252601b908201527f53746172676174653a20737761702066756e632073746f707065640000000000604082015260600190565b60006101008201905082511515825261ffff602084015116602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b815181526020918201519181019190915260400190565b600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b61ffff95909516855260208501939093526001600160a01b039190911660408401526060830152608082015260a00190565b61ffff98909816885260208801969096526001600160a01b039490941660408701526060860192909252608085015260a084015260c083015260e08201526101000190565b61ffff93841681526020810192909252909116604082015260600190565b61ffff9390931683526020830191909152604082015260600190565b61ffff94909416845260208401929092526040830152606082015260800190565b918252602082015260400190565b948552602085019390935261ffff9190911660408401526001600160a01b03166060830152608082015260a00190565b60005b8381101561441b578181015183820152602001614403565b8381111561442a576000848401525b50505050565b801515811461158757600080fdfe5265656e7472616e637947756172643a207265656e7472616e742063616c6c00536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212207aaedc0ccd2d34f140152446b43279f2d93751be1b5b4321d4ba3041dfdc231164736f6c634300070600334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a264697066735822122073e31c0626accb4d4c1029d08f9cfcdcf83c4601b0ab50ac410976e7496d2aa464736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/Factory.sol:Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4308,
        "contract": "contracts/Factory.sol:Factory",
        "label": "getPool",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(Pool)9409)"
      },
      {
        "astId": 4311,
        "contract": "contracts/Factory.sol:Factory",
        "label": "allPools",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4315,
        "contract": "contracts/Factory.sol:Factory",
        "label": "defaultFeeLibrary",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(Pool)9409": {
        "encoding": "inplace",
        "label": "contract Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(Pool)9409)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Pool)",
        "numberOfBytes": "32",
        "value": "t_contract(Pool)9409"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}