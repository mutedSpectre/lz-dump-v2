{
  "address": "0xF188017f50512a959B2b85ca75Bdc1C329D38209",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpStakingContract",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_depegThreshold",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELTA_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELTA_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FIFTY_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LAMBDA_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LAMBDA_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROTOCOL_SUBSIDY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIXTY_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depegThreshold",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentAssetSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPoolSize",
          "type": "uint256"
        }
      ],
      "name": "getEqReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eqReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idealBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beforeBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountSD",
          "type": "uint256"
        }
      ],
      "name": "getEquilibriumFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkbRemove",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.SwapObj",
          "name": "s",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentAssetSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolSubsidy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "ready",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.ChainPath",
          "name": "_chainPath",
          "type": "tuple"
        }
      ],
      "name": "getProtocolAndLpFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lambda",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xUpperBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xLowerBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xEnd",
          "type": "uint256"
        }
      ],
      "name": "getTrapezoidArea",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpStaking",
      "outputs": [
        {
          "internalType": "contract IStargateLPStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolIdToLpId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolIdToPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_depegThreshold",
          "type": "int256"
        }
      ],
      "name": "setDepegThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "setPoolIdToPriceFeedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpId",
          "type": "uint256"
        }
      ],
      "name": "setPoolToLpId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whiteListed",
          "type": "bool"
        }
      ],
      "name": "whiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7a849362d27f3726c8aa0939713da11aca2cfe23e60f7bd49779edc983788ab",
  "receipt": {
    "to": null,
    "from": "0x3626f14e310c42d01E66dEF77E15Ec62e622c9fC",
    "contractAddress": "0xF188017f50512a959B2b85ca75Bdc1C329D38209",
    "transactionIndex": 24,
    "gasUsed": "1615458",
    "logsBloom": "0x
    "blockHash": "0xd06039897f892e9bc8ed338f2f43fa348a00494c3c0cef1f6840d54c532648dd",
    "transactionHash": "0xb7a849362d27f3726c8aa0939713da11aca2cfe23e60f7bd49779edc983788ab",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 7828571,
        "transactionHash": "0xb7a849362d27f3726c8aa0939713da11aca2cfe23e60f7bd49779edc983788ab",
        "address": "0xF188017f50512a959B2b85ca75Bdc1C329D38209",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003626f14e310c42d01e66def77e15ec62e622c9fc"
        ],
        "data": "0x",
        "logIndex": 113,
        "blockHash": "0xd06039897f892e9bc8ed338f2f43fa348a00494c3c0cef1f6840d54c532648dd"
      }
    ],
    "blockNumber": 7828571,
    "cumulativeGasUsed": "16517981",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB30300c11FF54f8F674a9AA0777D8D5e9fefd652",
    "0x0000000000000000000000000000000000000001",
    98000000
  ],
  "numDeployments": 1,
  "solcInputHash": "77dc0a461aa289ada2299af7d9288435",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpStakingContract\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_depegThreshold\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELTA_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELTA_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIFTY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAMBDA_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAMBDA_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_SUBSIDY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIXTY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depegThreshold\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentAssetSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPoolSize\",\"type\":\"uint256\"}],\"name\":\"getEqReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eqReward\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beforeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountSD\",\"type\":\"uint256\"}],\"name\":\"getEquilibriumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkbRemove\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.SwapObj\",\"name\":\"s\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentAssetSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolSubsidy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"ready\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.ChainPath\",\"name\":\"_chainPath\",\"type\":\"tuple\"}],\"name\":\"getProtocolAndLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lambda\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xUpperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xLowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xEnd\",\"type\":\"uint256\"}],\"name\":\"getTrapezoidArea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStaking\",\"outputs\":[{\"internalType\":\"contract IStargateLPStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIdToLpId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIdToPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_depegThreshold\",\"type\":\"int256\"}],\"name\":\"setDepegThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"setPoolIdToPriceFeedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpId\",\"type\":\"uint256\"}],\"name\":\"setPoolToLpId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whiteListed\",\"type\":\"bool\"}],\"name\":\"whiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/StargateFeeLibraryV04.sol\":\"StargateFeeLibraryV04\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Factory is Ownable {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    mapping(uint256 => Pool) public getPool; // poolId -> PoolInfo\\n    address[] public allPools;\\n    address public immutable router;\\n    address public defaultFeeLibrary; // address for retrieving fee params for swaps\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: caller must be Router.\\\");\\n        _;\\n    }\\n\\n    constructor(address _router) {\\n        require(_router != address(0x0), \\\"Stargate: _router cant be 0x0\\\"); // 1 time only\\n        router = _router;\\n    }\\n\\n    function setDefaultFeeLibrary(address _defaultFeeLibrary) external onlyOwner {\\n        require(_defaultFeeLibrary != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        defaultFeeLibrary = _defaultFeeLibrary;\\n    }\\n\\n    function allPoolsLength() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    function createPool(\\n        uint256 _poolId,\\n        address _token,\\n        uint8 _sharedDecimals,\\n        uint8 _localDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) public onlyRouter returns (address poolAddress) {\\n        require(address(getPool[_poolId]) == address(0x0), \\\"Stargate: Pool already created\\\");\\n\\n        Pool pool = new Pool(_poolId, router, _token, _sharedDecimals, _localDecimals, defaultFeeLibrary, _name, _symbol);\\n        getPool[_poolId] = pool;\\n        poolAddress = address(pool);\\n        allPools.push(poolAddress);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x90afcaeaf0f8e3e44d25a4596705f792a03f15524e400d0c1c131b291e01c4e9\",\"license\":\"BUSL-1.1\"},\"contracts/LPTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LPTokenERC20 {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    string public name;\\n    string public symbol;\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // set in constructor\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    uint256 public decimals;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Bridge: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Bridge: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xd0ac7dd3767cd0223a26075c43d10bd3866c226f3a43ebc5f5c4b8bc3d21a77e\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./LPTokenERC20.sol\\\";\\nimport \\\"./interfaces/IStargateFeeLibrary.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// Pool contracts on other chains and managed by the Stargate protocol.\\ncontract Pool is LPTokenERC20, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    uint256 public constant BP_DENOMINATOR = 10000;\\n\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct ChainPath {\\n        bool ready; // indicate if the counter chainPath has been created.\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        uint256 weight;\\n        uint256 balance;\\n        uint256 lkb;\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    struct SwapObj {\\n        uint256 amount;\\n        uint256 eqFee;\\n        uint256 eqReward;\\n        uint256 lpFee;\\n        uint256 protocolFee;\\n        uint256 lkbRemove;\\n    }\\n\\n    struct CreditObj {\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // chainPath\\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\\n    mapping(uint16 => mapping(uint256 => uint256)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\\n\\n    // metadata\\n    uint256 public immutable poolId; // shared id between chains to represent same pool\\n    uint256 public sharedDecimals; // the shared decimals (lowest common decimals between chains)\\n    uint256 public localDecimals; // the decimals for the token\\n    uint256 public immutable convertRate; // the decimals for the token\\n    address public immutable token; // the token for the pool\\n    address public immutable router; // the token for the pool\\n\\n    bool public stopSwap; // flag to stop swapping in extreme cases\\n\\n    // Fee and Liquidity\\n    uint256 public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\\n    uint256 public totalWeight; // total weight for pool percentages\\n    uint256 public mintFeeBP; // fee basis points for the mint/deposit\\n    uint256 public protocolFeeBalance; // fee balance created from dao fee\\n    uint256 public mintFeeBalance; // fee balance created from mint fee\\n    uint256 public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\\n    address public feeLibrary; // address for retrieving fee params for swaps\\n\\n    // Delta related\\n    uint256 public deltaCredit; // credits accumulated from txn\\n    bool public batched; // flag to indicate if we want batch processing.\\n    bool public defaultSwapMode; // flag for the default mode for swap\\n    bool public defaultLPMode; // flag for the default mode for lp\\n    uint256 public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\\n    uint256 public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Mint(address to, uint256 amountLP, uint256 amountSD, uint256 mintFeeAmountSD);\\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocalCallback(address _to, uint256 _amountSD, uint256 _amountToMintSD);\\n    event Swap(\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        address from,\\n        uint256 amountSD,\\n        uint256 eqReward,\\n        uint256 eqFee,\\n        uint256 protocolFee,\\n        uint256 lpFee\\n    );\\n    event SendCredits(uint16 dstChainId, uint256 dstPoolId, uint256 credits, uint256 idealBalance);\\n    event RedeemRemote(uint16 chainId, uint256 dstPoolId, address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, bytes to);\\n    event InstantRedeemLocal(address from, uint256 amountLP, uint256 amountSD, address to);\\n    event CreditChainPath(uint16 chainId, uint256 srcPoolId, uint256 amountSD, uint256 idealBalance);\\n    event SwapRemote(address to, uint256 amountSD, uint256 protocolFee, uint256 dstFee);\\n    event WithdrawRemote(uint16 srcChainId, uint256 srcPoolId, uint256 swapAmount, uint256 mintAmount);\\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\\n    event FeesUpdated(uint256 mintFeeBP);\\n    event FeeLibraryUpdated(address feeLibraryAddr);\\n    event StopSwapUpdated(bool swapStop);\\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\\n    event DeltaParamUpdated(bool batched, uint256 swapDeltaBP, uint256 lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: only the router can call this method\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _poolId,\\n        address _router,\\n        address _token,\\n        uint256 _sharedDecimals,\\n        uint256 _localDecimals,\\n        address _feeLibrary,\\n        string memory _name,\\n        string memory _symbol\\n    ) LPTokenERC20(_name, _symbol) {\\n        require(_token != address(0x0), \\\"Stargate: _token cannot be 0x0\\\");\\n        require(_router != address(0x0), \\\"Stargate: _router cannot be 0x0\\\");\\n        poolId = _poolId;\\n        router = _router;\\n        token = _token;\\n        sharedDecimals = _sharedDecimals;\\n        decimals = uint8(_sharedDecimals);\\n        localDecimals = _localDecimals;\\n        convertRate = 10**(uint256(localDecimals).sub(sharedDecimals));\\n        totalWeight = 0;\\n        feeLibrary = _feeLibrary;\\n\\n        //delta algo related\\n        batched = false;\\n        defaultSwapMode = true;\\n        defaultLPMode = true;\\n    }\\n\\n    function getChainPathsLength() public view returns (uint256) {\\n        return chainPaths.length;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n\\n    function mint(address _to, uint256 _amountLD) external nonReentrant onlyRouter returns (uint256) {\\n        return _mintLocal(_to, _amountLD, true, true);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        bool newLiquidity\\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\\n        require(!stopSwap, \\\"Stargate: swap func stopped\\\");\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n\\n        uint256 amountSD = amountLDtoSD(_amountLD);\\n        uint256 minAmountSD = amountLDtoSD(_minAmountLD);\\n\\n        // request fee params from library\\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\\n\\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\\n        eqFeePool = eqFeePool.sub(s.eqReward);\\n        // update the new amount the user gets minus the fees\\n        s.amount = amountSD.sub(s.eqFee).sub(s.protocolFee).sub(s.lpFee);\\n        // users will also get the eqReward\\n        require(s.amount.add(s.eqReward) >= minAmountSD, \\\"Stargate: slippage too high\\\");\\n\\n        // behaviours\\n        //     - protocolFee: booked, stayed and withdrawn at remote.\\n        //     - eqFee: booked, stayed and withdrawn at remote.\\n        //     - lpFee: booked and stayed at remote, can be withdrawn anywhere\\n\\n        s.lkbRemove = amountSD.sub(s.lpFee).add(s.eqReward);\\n        // check for transfer solvency.\\n        require(cp.balance >= s.lkbRemove, \\\"Stargate: dst balance too low\\\");\\n        cp.balance = cp.balance.sub(s.lkbRemove);\\n\\n        if (newLiquidity) {\\n            deltaCredit = deltaCredit.add(amountSD).add(s.eqReward);\\n        } else if (s.eqReward > 0) {\\n            deltaCredit = deltaCredit.add(s.eqReward);\\n        }\\n\\n        // distribute credits on condition.\\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultSwapMode);\\n        }\\n\\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\\n        return s;\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function sendCredits(uint16 _dstChainId, uint256 _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        cp.lkb = cp.lkb.add(cp.credits);\\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\\n        c.credits = cp.credits;\\n        cp.credits = 0;\\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemRemote   ->                        swapRemote\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLP\\n    ) external nonReentrant onlyRouter {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 amountSD = _burnLocal(_from, _amountLP);\\n        //run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountLD);\\n    }\\n\\n    function instantRedeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        address _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 _deltaCredit = deltaCredit; // sload optimization.\\n        uint256 _capAmountLP = _amountSDtoLP(_deltaCredit);\\n\\n        if (_amountLP > _capAmountLP) _amountLP = _capAmountLP;\\n\\n        amountSD = _burnLocal(_from, _amountLP);\\n        deltaCredit = _deltaCredit.sub(amountSD);\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit InstantRedeemLocal(_from, _amountLP, amountSD, _to);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        bytes calldata _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n\\n        // safeguard.\\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        amountSD = _burnLocal(_from, _amountLP);\\n\\n        // run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(false);\\n        }\\n        emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // REMOTE CHAIN FUNCTIONS\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function creditChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        CreditObj memory _c\\n    ) external nonReentrant onlyRouter {\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        cp.balance = cp.balance.add(_c.credits);\\n        if (cp.idealBalance != _c.idealBalance) {\\n            cp.idealBalance = _c.idealBalance;\\n        }\\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swapRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        SwapObj memory _s\\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\\n        // booking lpFee\\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\\n        // booking eqFee\\n        eqFeePool = eqFeePool.add(_s.eqFee);\\n        // booking stargateFee\\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\\n\\n        // update LKB\\n        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\\n\\n        // user receives the amount + the srcReward\\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\\n        _safeTransfer(token, _to, amountLD);\\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCallback(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _amountToMintSD\\n    ) external nonReentrant onlyRouter {\\n        if (_amountToMintSD > 0) {\\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\\n        }\\n\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        cp.lkb = cp.lkb.sub(_amountSD);\\n\\n        uint256 amountLD = amountSDtoLD(_amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCheckOnRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _amountSD\\n    ) external nonReentrant onlyRouter returns (uint256 swapAmount, uint256 mintAmount) {\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        if (_amountSD > cp.balance) {\\n            mintAmount = _amountSD - cp.balance;\\n            swapAmount = cp.balance;\\n            cp.balance = 0;\\n        } else {\\n            cp.balance = cp.balance.sub(_amountSD);\\n            swapAmount = _amountSD;\\n            mintAmount = 0;\\n        }\\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // DAO Calls\\n    function createChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _weight\\n    ) external onlyRouter {\\n        for (uint256 i = 0; i < chainPaths.length; ++i) {\\n            ChainPath memory cp = chainPaths[i];\\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\\n            require(!exists, \\\"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\\\");\\n        }\\n        totalWeight = totalWeight.add(_weight);\\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\\n        chainPaths.push(ChainPath(false, _dstChainId, _dstPoolId, _weight, 0, 0, 0, 0));\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setWeightForChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint16 _weight\\n    ) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\\n        cp.weight = _weight;\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setFee(uint256 _mintFeeBP) external onlyRouter {\\n        require(_mintFeeBP <= BP_DENOMINATOR, \\\"Bridge: cum fees > 100%\\\");\\n        mintFeeBP = _mintFeeBP;\\n        emit FeesUpdated(mintFeeBP);\\n    }\\n\\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\\n        require(_feeLibraryAddr != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        feeLibrary = _feeLibraryAddr;\\n        emit FeeLibraryUpdated(_feeLibraryAddr);\\n    }\\n\\n    function setSwapStop(bool _swapStop) external onlyRouter {\\n        stopSwap = _swapStop;\\n        emit StopSwapUpdated(_swapStop);\\n    }\\n\\n    function setDeltaParam(\\n        bool _batched,\\n        uint256 _swapDeltaBP,\\n        uint256 _lpDeltaBP,\\n        bool _defaultSwapMode,\\n        bool _defaultLPMode\\n    ) external onlyRouter {\\n        require(_swapDeltaBP <= BP_DENOMINATOR && _lpDeltaBP <= BP_DENOMINATOR, \\\"Stargate: wrong Delta param\\\");\\n        batched = _batched;\\n        swapDeltaBP = _swapDeltaBP;\\n        lpDeltaBP = _lpDeltaBP;\\n        defaultSwapMode = _defaultSwapMode;\\n        defaultLPMode = _defaultLPMode;\\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\\n    }\\n\\n    function callDelta(bool _fullMode) external onlyRouter {\\n        _delta(_fullMode);\\n    }\\n\\n    function activateChainPath(uint16 _dstChainId, uint256 _dstPoolId) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == false, \\\"Stargate: chainPath is already active\\\");\\n        // this func will only be called once\\n        cp.ready = true;\\n    }\\n\\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\\n        if (protocolFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(protocolFeeBalance);\\n            protocolFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\\n        if (mintFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(mintFeeBalance);\\n            mintFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL\\n    // Conversion Helpers\\n    //---------------------------------------------------------------------------\\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256) {\\n        return amountSDtoLD(_amountLPtoSD(_amountLP));\\n    }\\n\\n    function _amountLPtoSD(uint256 _amountLP) internal view returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant convert LPtoSD when totalSupply == 0\\\");\\n        return _amountLP.mul(totalLiquidity).div(totalSupply);\\n    }\\n\\n    function _amountSDtoLP(uint256 _amountSD) internal view returns (uint256) {\\n        require(totalLiquidity > 0, \\\"Stargate: cant convert SDtoLP when totalLiq == 0\\\");\\n        return _amountSD.mul(totalSupply).div(totalLiquidity);\\n    }\\n\\n    function amountSDtoLD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(convertRate);\\n    }\\n\\n    function amountLDtoSD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.div(convertRate);\\n    }\\n\\n    function getAndCheckCP(uint16 _dstChainId, uint256 _dstPoolId) internal view returns (ChainPath storage) {\\n        require(chainPaths.length > 0, \\\"Stargate: no chainpaths exist\\\");\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function getChainPath(uint16 _dstChainId, uint256 _dstPoolId) external view returns (ChainPath memory) {\\n        ChainPath memory cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function _burnLocal(address _from, uint256 _amountLP) internal returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant burn when totalSupply == 0\\\");\\n        uint256 amountOfLPTokens = balanceOf[_from];\\n        require(amountOfLPTokens >= _amountLP, \\\"Stargate: not enough LP tokens to burn\\\");\\n\\n        uint256 amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\\n        //subtract totalLiquidity accordingly\\n        totalLiquidity = totalLiquidity.sub(amountSD);\\n\\n        _burn(_from, _amountLP);\\n        emit Burn(_from, _amountLP, amountSD);\\n        return amountSD;\\n    }\\n\\n    function _delta(bool fullMode) internal {\\n        if (deltaCredit > 0 && totalWeight > 0) {\\n            uint256 cpLength = chainPaths.length;\\n            uint256[] memory deficit = new uint256[](cpLength);\\n            uint256 totalDeficit = 0;\\n\\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\\n            for (uint256 i = 0; i < cpLength; ++i) {\\n                ChainPath storage cp = chainPaths[i];\\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\\n                uint256 balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\\n                uint256 currLiq = cp.lkb.add(cp.credits);\\n                if (balLiq > currLiq) {\\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\\n                    deficit[i] = balLiq - currLiq;\\n                    totalDeficit = totalDeficit.add(deficit[i]);\\n                }\\n            }\\n\\n            // indicates how much delta credit is distributed\\n            uint256 spent;\\n\\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\\n            // run full Delta, allocate all credits\\n            if (totalDeficit == 0) {\\n                // only fullMode delta will allocate excess credits\\n                if (fullMode && deltaCredit > 0) {\\n                    // credit ChainPath by weights\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\\n                        uint256 amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\\n                        spent = spent.add(amtToCredit);\\n                        cp.credits = cp.credits.add(amtToCredit);\\n                    }\\n                } // else do nth\\n            } else if (totalDeficit <= deltaCredit) {\\n                if (fullMode) {\\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\\n                    uint256 excessCredit = deltaCredit - totalDeficit;\\n                    // algorithm steps 14-16: calculate credits\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            // credits = credits + deficit + remaining allocation based on weight\\n                            uint256 amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                } else {\\n                    // totalDeficit <= deltaCredit but not running fullMode\\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            uint256 amtToCredit = deficit[i];\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\\n                for (uint256 i = 0; i < cpLength; ++i) {\\n                    if (deficit[i] > 0) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        uint256 proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\\n                        spent = spent.add(proportionalDeficit);\\n                        cp.credits = cp.credits.add(proportionalDeficit);\\n                    }\\n                }\\n            }\\n\\n            // deduct the amount of credit sent\\n            deltaCredit = deltaCredit.sub(spent);\\n        }\\n    }\\n\\n    function _mintLocal(\\n        address _to,\\n        uint256 _amountLD,\\n        bool _feesEnabled,\\n        bool _creditDelta\\n    ) internal returns (uint256 amountSD) {\\n        require(totalWeight > 0, \\\"Stargate: No ChainPaths exist\\\");\\n        amountSD = amountLDtoSD(_amountLD);\\n\\n        uint256 mintFeeSD = 0;\\n        if (_feesEnabled) {\\n            mintFeeSD = amountSD.mul(mintFeeBP).div(BP_DENOMINATOR);\\n            amountSD = amountSD.sub(mintFeeSD);\\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\\n        }\\n\\n        if (_creditDelta) {\\n            deltaCredit = deltaCredit.add(amountSD);\\n        }\\n\\n        uint256 amountLPTokens = amountSD;\\n        if (totalSupply != 0) {\\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\\n        }\\n        totalLiquidity = totalLiquidity.add(amountSD);\\n\\n        _mint(_to, amountLPTokens);\\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\\n\\n        // add to credits and call delta. short circuit to save gas\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n    }\\n\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) private {\\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Stargate: TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xff0ac7ffc5a5813fb1bce42222d7199f05546fb4b12f55fc3791b6607533f820\",\"license\":\"BUSL-1.1\"},\"contracts/chainlink/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\",\"keccak256\":\"0xa33d12bfca286c3f0dbd77b1451cb14a74db8524d55966a8793223a3717aba56\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateFeeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\nimport \\\"../Pool.sol\\\";\\n\\ninterface IStargateFeeLibrary {\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external returns (Pool.SwapObj memory s);\\n\\n    function getVersion() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x712bc424a034519d61c5a1bbbf3f19fd34dfa51908421775c613f0a44e612d63\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateLPStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateLPStaking {\\n    function poolInfo(uint256 _poolIndex)\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0xeaaf38252f13a03d33073c4cacdb0891eaf145a11ca146f6ba0b1808e25add43\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/StargateFeeLibraryV04.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IStargateFeeLibrary.sol\\\";\\nimport \\\"../Pool.sol\\\";\\nimport \\\"../Factory.sol\\\";\\nimport \\\"../interfaces/IStargateLPStaking.sol\\\";\\nimport \\\"../chainlink/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StargateFeeLibraryV04 is IStargateFeeLibrary, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\\n    uint256 public constant DENOMINATOR = 1e18;\\n    uint256 public constant DELTA_1 = 6000 * 1e14;\\n    uint256 public constant DELTA_2 = 500 * 1e14;\\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\\n    uint256 public constant LP_FEE = 10 * 1e13;\\n    uint256 public constant PROTOCOL_FEE = 50 * 1e13;\\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\\n\\n    uint256 public constant FIFTY_PERCENT = 5 * 1e17;\\n    uint256 public constant SIXTY_PERCENT = 6 * 1e17;\\n\\n    int256 public depegThreshold; // threshold for considering an asset depegged\\n\\n    mapping(address => bool) public whitelist;\\n    mapping(uint256 => uint256) public poolIdToLpId; // poolId -> index of the pool in the lpStaking contract\\n    mapping(uint256 => address) public poolIdToPriceFeed; // maps the poolId to Chainlink priceFeedAddress\\n\\n    Factory public immutable factory;\\n    IStargateLPStaking public immutable lpStaking;\\n\\n    modifier notDepegged(uint256 _srcPoolId, uint256 _dstPoolId) {\\n        address priceFeedAddress = poolIdToPriceFeed[_srcPoolId];\\n        if (_srcPoolId != _dstPoolId && priceFeedAddress != address(0x0)) {\\n            (, int256 price, , , ) = AggregatorV3Interface(priceFeedAddress).latestRoundData();\\n            require(price >= depegThreshold, \\\"FeeLibrary: _srcPoolId is depegged\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address _factory,\\n        address _lpStakingContract,\\n        int256 _depegThreshold\\n    ) {\\n        require(_factory != address(0x0), \\\"FeeLibrary: Factory cannot be 0x0\\\");\\n        require(_lpStakingContract != address(0x0), \\\"FeeLibrary: LPStaking cannot be 0x0\\\");\\n        require(_depegThreshold > 0, \\\"FeeLibrary: _depegThreshold must be > 0\\\");\\n\\n        factory = Factory(_factory);\\n        lpStaking = IStargateLPStaking(_lpStakingContract);\\n        depegThreshold = _depegThreshold;\\n    }\\n\\n    function whiteList(address _from, bool _whiteListed) public onlyOwner {\\n        whitelist[_from] = _whiteListed;\\n    }\\n\\n    function setPoolToLpId(uint256 _poolId, uint256 _lpId) public onlyOwner {\\n        poolIdToLpId[_poolId] = _lpId;\\n    }\\n\\n    function setPoolIdToPriceFeedAddress(uint256 _poolId, address _priceFeedAddress) public onlyOwner {\\n        poolIdToPriceFeed[_poolId] = _priceFeedAddress;\\n    }\\n\\n    function setDepegThreshold(int256 _depegThreshold) public onlyOwner {\\n        require(_depegThreshold > 0, \\\"FeeLibrary: _depegThreshold must be > 0\\\");\\n        depegThreshold = _depegThreshold;\\n    }\\n\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external view override notDepegged(_srcPoolId, _dstPoolId) returns (Pool.SwapObj memory s) {\\n        uint256 srcPoolId = _srcPoolId; // stack too deep\\n\\n        Pool pool = factory.getPool(srcPoolId);\\n        Pool.ChainPath memory chainPath = pool.getChainPath(_dstChainId, _dstPoolId);\\n        address tokenAddress = pool.token();\\n        uint256 currentAssetSD = IERC20(tokenAddress).balanceOf(address(pool)).div(pool.convertRate());\\n        uint256 lpAsset = pool.totalLiquidity();\\n\\n        // calculate the equilibrium reward\\n        s.eqReward = _getEqReward(_amountSD, currentAssetSD, lpAsset, pool.eqFeePool());\\n\\n        // calculate the equilibrium fee\\n        uint256 protocolSubsidy;\\n        (s.eqFee, protocolSubsidy) = _getEquilibriumFee(chainPath.idealBalance, chainPath.balance, _amountSD);\\n\\n        // return no protocol/lp fees for addresses in this mapping\\n        if (whitelist[_from]) {\\n            return s;\\n        }\\n\\n        // calculate protocol and lp fee\\n        (s.protocolFee, s.lpFee) = _getProtocolAndLpFee(_amountSD, currentAssetSD, lpAsset, protocolSubsidy, srcPoolId, chainPath);\\n\\n        return s;\\n    }\\n\\n    function getEqReward(\\n        uint256 _amountSD,\\n        uint256 _currentAssetSD,\\n        uint256 _lpAsset,\\n        uint256 _rewardPoolSize\\n    ) external pure returns (uint256 eqReward) {\\n        return _getEqReward(_amountSD, _currentAssetSD, _lpAsset, _rewardPoolSize);\\n    }\\n\\n    function getEquilibriumFee(\\n        uint256 idealBalance,\\n        uint256 beforeBalance,\\n        uint256 amountSD\\n    ) external pure returns (uint256, uint256) {\\n        return _getEquilibriumFee(idealBalance, beforeBalance, amountSD);\\n    }\\n\\n    function getProtocolAndLpFee(\\n        uint256 _amountSD,\\n        uint256 _currentAssetSD,\\n        uint256 _lpAsset,\\n        uint256 _protocolSubsidy,\\n        uint256 _srcPoolId,\\n        Pool.ChainPath memory _chainPath\\n    ) external view returns (uint256 protocolFee, uint256 lpFee) {\\n        return _getProtocolAndLpFee(_amountSD, _currentAssetSD, _lpAsset, _protocolSubsidy, _srcPoolId, _chainPath);\\n    }\\n\\n    function getTrapezoidArea(\\n        uint256 lambda,\\n        uint256 yOffset,\\n        uint256 xUpperBound,\\n        uint256 xLowerBound,\\n        uint256 xStart,\\n        uint256 xEnd\\n    ) external pure returns (uint256) {\\n        return _getTrapezoidArea(lambda, yOffset, xUpperBound, xLowerBound, xStart, xEnd);\\n    }\\n\\n    function _getEqReward(\\n        uint256 _amountSD,\\n        uint256 _currentAssetSD,\\n        uint256 _lpAsset,\\n        uint256 _rewardPoolSize\\n    ) internal pure returns (uint256 eqReward) {\\n        if (_lpAsset <= _currentAssetSD) {\\n            return 0;\\n        }\\n\\n        uint256 poolDeficit = _lpAsset.sub(_currentAssetSD);\\n        // assets in pool are < 75% of liquidity provided & amount transferred > 2% of pool deficit\\n        if (_currentAssetSD.mul(100).div(_lpAsset) < 75 && _amountSD.mul(100) > poolDeficit.mul(2)) {\\n            // reward capped at rewardPoolSize\\n            eqReward = _rewardPoolSize.mul(_amountSD).div(poolDeficit);\\n            if (eqReward > _rewardPoolSize) {\\n                eqReward = _rewardPoolSize;\\n            }\\n        } else {\\n            eqReward = 0;\\n        }\\n    }\\n\\n    function _getEquilibriumFee(\\n        uint256 idealBalance,\\n        uint256 beforeBalance,\\n        uint256 amountSD\\n    ) internal pure returns (uint256, uint256) {\\n        require(beforeBalance >= amountSD, \\\"Stargate: not enough balance\\\");\\n        uint256 afterBalance = beforeBalance.sub(amountSD);\\n\\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\\n\\n        uint256 eqFee = 0;\\n        uint256 protocolSubsidy = 0;\\n\\n        if (afterBalance >= safeZoneMax) {\\n            // no fee zone, protocol subsidize it.\\n            eqFee = amountSD.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\\n            protocolSubsidy = eqFee;\\n        } else if (afterBalance >= safeZoneMin) {\\n            // safe zone\\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\\n        } else {\\n            // danger zone\\n            if (beforeBalance >= safeZoneMin) {\\n                // across 2 or 3 zones\\n                // part 1\\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\\n                // part 2\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\\n            } else {\\n                // only in danger zone\\n                // part 2 only\\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance, afterBalance));\\n            }\\n        }\\n        return (eqFee, protocolSubsidy);\\n    }\\n\\n    function _getProtocolAndLpFee(\\n        uint256 _amountSD,\\n        uint256 _currentAssetSD,\\n        uint256 _lpAsset,\\n        uint256 _protocolSubsidy,\\n        uint256 _srcPoolId,\\n        Pool.ChainPath memory _chainPath\\n    ) internal view returns (uint256 protocolFee, uint256 lpFee) {\\n        protocolFee = _amountSD.mul(PROTOCOL_FEE).div(DENOMINATOR).sub(_protocolSubsidy);\\n        lpFee = _amountSD.mul(LP_FEE).div(DENOMINATOR);\\n\\n        // when there are active emissions, give the lp fee to the protocol\\n        (, uint256 allocPoint, , ) = lpStaking.poolInfo(poolIdToLpId[_srcPoolId]);\\n        if (allocPoint > 0) {\\n            protocolFee = protocolFee.add(lpFee);\\n            lpFee = 0;\\n        }\\n\\n        if (_lpAsset == 0) {\\n            return (protocolFee, lpFee);\\n        }\\n\\n        bool isAboveIdeal = _chainPath.balance.sub(_amountSD) > _chainPath.idealBalance.mul(SIXTY_PERCENT).div(DENOMINATOR);\\n        uint256 currentAssetNumerated = _currentAssetSD.mul(DENOMINATOR).div(_lpAsset);\\n        if (currentAssetNumerated <= FIFTY_PERCENT && isAboveIdeal) {\\n            // x <= 50% => no fees\\n            protocolFee = 0;\\n            lpFee = 0;\\n        } else if (currentAssetNumerated < SIXTY_PERCENT && isAboveIdeal) {\\n            // 50% > x < 60% => scaled fees &&\\n            // the resulting transfer does not drain the pathway below 60% o`f the ideal balance,\\n\\n            // reduce the protocol and lp fee linearly\\n            // Examples:\\n            // currentAsset == 101, lpAsset == 200 -> haircut == 5%\\n            // currentAsset == 115, lpAsset == 200 -> haircut == 75%\\n            // currentAsset == 119, lpAsset == 200 -> haircut == 95%\\n            uint256 haircut = currentAssetNumerated.sub(FIFTY_PERCENT).mul(10); // scale the percentage by 10\\n            protocolFee = protocolFee.mul(haircut).div(DENOMINATOR);\\n            lpFee = lpFee.mul(haircut).div(DENOMINATOR);\\n        }\\n\\n        // x > 60% => full fees\\n    }\\n\\n    function _getTrapezoidArea(\\n        uint256 lambda,\\n        uint256 yOffset,\\n        uint256 xUpperBound,\\n        uint256 xLowerBound,\\n        uint256 xStart,\\n        uint256 xEnd\\n    ) internal pure returns (uint256) {\\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \\\"Stargate: balance out of bound\\\");\\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\\n\\n        // xStartDrift = xUpperBound.sub(xStart);\\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\\n\\n        // xEndDrift = xUpperBound.sub(xEnd)\\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\\n\\n        // compute the area\\n        uint256 deltaX = xStart.sub(xEnd);\\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\\n    }\\n\\n    function getVersion() external pure override returns (string memory) {\\n        return \\\"4.0.0\\\";\\n    }\\n\\n    // Override the renounce ownership inherited by zeppelin ownable\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xf8bd95ba153d87f6aad35d1a57d16bc339ff5f33cff8e4172c65635661df6acc\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001d7038038062001d70833981016040819052620000349162000151565b60006200004062000130565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556001600160a01b038316620000c05760405162461bcd60e51b8152600401620000b79062000191565b60405180910390fd5b6001600160a01b038216620000e95760405162461bcd60e51b8152600401620000b790620001d2565b600081136200010c5760405162461bcd60e51b8152600401620000b79062000215565b6001600160601b0319606093841b81166080529190921b1660a0526002556200025c565b3390565b80516001600160a01b03811681146200014c57600080fd5b919050565b60008060006060848603121562000166578283fd5b620001718462000134565b9250620001816020850162000134565b9150604084015190509250925092565b60208082526021908201527f4665654c6962726172793a20466163746f72792063616e6e6f742062652030786040820152600360fc1b606082015260800190565b60208082526023908201527f4665654c6962726172793a204c505374616b696e672063616e6e6f742062652060408201526203078360ec1b606082015260800190565b60208082526027908201527f4665654c6962726172793a205f64657065675468726573686f6c64206d7573746040820152660206265203e20360cc1b606082015260800190565b60805160601c60a05160601c611ae06200029060003980610b2c52806110715250806105035280610beb5250611ae06000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806360d86e7711610104578063918f8674116100a2578063af8884f011610071578063af8884f01461035c578063c45a01551461036f578063d16baeb914610377578063f2fde38b1461038a576101cf565b8063918f8674146103245780639b19251a1461032c5780639bf1401c1461034c578063a810de6c14610354576101cf565b80637ba5c12f116100de5780637ba5c12f146103015780637dc9633f14610309578063886a9c50146102a65780638da5cb5b1461031c576101cf565b806360d86e77146102d35780636548c4ac146102e6578063715018a6146102f9576101cf565b80632d4310ad116101715780633dad0dd51161014b5780633dad0dd5146102a6578063518a9f9f146102ae5780635994e07e146102b65780635e3f2727146102cb576101cf565b80632d4310ad1461026a57806334b6a6021461027d5780633d4912c31461029e576101cf565b80630d8e6e2c116101ad5780630d8e6e2c1461021a57806313c6e3801461022f5780631ab62430146102425780631e04cbf314610262576101cf565b8063012a1c2d146101d4578063084285da146101f25780630b4501fd14610212575b600080fd5b6101dc61039d565b6040516101e99190611854565b60405180910390f35b610205610200366004611510565b6103a9565b6040516101e99190611835565b6101dc6103c4565b6102226103cf565b6040516101e9919061185d565b6101dc61023d366004611510565b6103ee565b61025561025036600461161c565b610400565b6040516101e991906119a7565b6101dc6108ef565b6101dc610278366004611698565b6108fb565b61029061028b36600461166d565b610914565b6040516101e99291906119ff565b6101dc61092e565b6101dc610934565b6101dc610940565b6102c96102c4366004611510565b61094b565b005b6101dc6109d2565b6101dc6102e13660046117a4565b6109dc565b6102c96102f43660046115fb565b6109f7565b6102c9610a6b565b6101dc610acf565b6102906103173660046116c9565b610ad9565b610205610afa565b6101dc610b09565b61033f61033a366004611462565b610b15565b6040516101e99190611849565b610205610b2a565b6101dc610b4e565b6102c961036a3660046115d7565b610b59565b610205610be9565b6102c961038536600461149a565b610c0d565b6102c9610398366004611462565b610c9a565b670dd280b9144a000081565b6005602052600090815260409020546001600160a01b031681565b6601c6bf5263400081565b6040805180820190915260058152640342e302e360dc1b602082015290565b60046020526000908152604090205481565b6104086113e1565b600086815260056020526040902054869086906001600160a01b031681831480159061043c57506001600160a01b03811615155b156104e7576000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b491906117e6565b5050509150506002548112156104e55760405162461bcd60e51b81526004016104dc9061191e565b60405180910390fd5b505b60405163068bcd8d60e01b815289906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063068bcd8d90610538908590600401611854565b60206040518083038186803b15801561055057600080fd5b505afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610588919061147e565b90506000816001600160a01b031663159f6add8b8d6040518363ffffffff1660e01b81526004016105ba9291906119eb565b6101006040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190611528565b90506000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064857600080fd5b505afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610680919061147e565b9050600061077a846001600160a01b031663feb56b156040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f891906115bf565b6040516370a0823160e01b81526001600160a01b038516906370a0823190610724908990600401611835565b60206040518083038186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077491906115bf565b90610d9c565b90506000846001600160a01b03166315770f926040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b757600080fd5b505afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef91906115bf565b905061086d8b8383886001600160a01b0316639bb811196040518163ffffffff1660e01b815260040160206040518083038186803b15801561083057600080fd5b505afa158015610844573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086891906115bf565b610e05565b60408b015260e08401516080850151600091610889918e610e89565b6020808e01929092526001600160a01b038f166000908152600390925260409091205490915060ff16156108c357505050505050506108e3565b6108d18c8484848b8a610ffc565b60608d015260808c0152505050505050505b50505095945050505050565b6706f05b59d3b2000081565b600061090985858585610e05565b90505b949350505050565b600080610922858585610e89565b91509150935093915050565b60025481565b670853a0d2313c000081565b66b1a2bc2ec5000081565b610953611216565b6001600160a01b0316610964610afa565b6001600160a01b0316146109ad576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b600081136109cd5760405162461bcd60e51b81526004016104dc90611960565b600255565b655af3107a400081565b60006109ec87878787878761121a565b979650505050505050565b6109ff611216565b6001600160a01b0316610a10610afa565b6001600160a01b031614610a59576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b60009182526004602052604090912055565b610a73611216565b6001600160a01b0316610a84610afa565b6001600160a01b031614610acd576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b565b651b48eb57e00081565b600080610aea888888888888610ffc565b915091505b965096945050505050565b6000546001600160a01b031690565b670de0b6b3a764000081565b60036020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b660e35fa931a000081565b610b61611216565b6001600160a01b0316610b72610afa565b6001600160a01b031614610bbb576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b60009182526005602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b610c15611216565b6001600160a01b0316610c26610afa565b6001600160a01b031614610c6f576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b610ca2611216565b6001600160a01b0316610cb3610afa565b6001600160a01b031614610cfc576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b6001600160a01b038116610d415760405162461bcd60e51b8152600401808060200182810382526026815260200180611a446026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000808211610df2576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610dfb57fe5b0490505b92915050565b6000838311610e165750600061090c565b6000610e2284866112ca565b9050604b610e3585610774886064611327565b108015610e555750610e48816002611327565b610e53876064611327565b115b15610e7b57610e68816107748589611327565b915082821115610e76578291505b610e80565b600091505b50949350505050565b60008082841015610eac5760405162461bcd60e51b81526004016104dc906118e7565b6000610eb885856112ca565b90506000610eda670de0b6b3a764000061077489670853a0d2313c0000611327565b90506000610efb670de0b6b3a76400006107748a66b1a2bc2ec50000611327565b9050600080838510610f2d57610f23670de0b6b3a76400006107748a651b48eb57e000611327565b9150819050610fed565b828510610f65576000848a10610f435784610f45565b895b9050610f5d660e35fa931a000060008787858b61121a565b925050610fed565b828910610fc2576000848a10610f7b5784610f7d565b895b9050610f9f610f98660e35fa931a000060008888868a61121a565b8490611387565b9250610f5d610f98670dd280b9144a0000660e35fa931a0000876000898c61121a565b610fea610fe3670dd280b9144a0000660e35fa931a00008660008e8b61121a565b8390611387565b91505b90999098509650505050505050565b60008061102685611020670de0b6b3a76400006107748c6601c6bf52634000611327565b906112ca565b9150611044670de0b6b3a76400006107748a655af3107a4000611327565b6000858152600460208190526040808320549051631526fe2760e01b815293945091926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692631526fe27926110a29201611854565b60806040518083038186803b1580156110ba57600080fd5b505afa1580156110ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f291906114d2565b505091505060008111156111115761110a8383611387565b9250600091505b8661111c5750610aef565b6000611149670de0b6b3a7640000610774670853a0d2313c00008860e0015161132790919063ffffffff16565b6080860151611158908c6112ca565b1190506000611173896107748c670de0b6b3a7640000611327565b90506706f05b59d3b20000811115801561118a5750815b1561119c576000945060009350611208565b670853a0d2313c0000811080156111b05750815b156112085760006111d4600a6111ce846706f05b59d3b200006112ca565b90611327565b90506111ec670de0b6b3a76400006107748884611327565b9550611204670de0b6b3a76400006107748784611327565b9450505b505050965096945050505050565b3390565b600083821015801561122c5750848311155b6112485760405162461bcd60e51b81526004016104dc906118b0565b600061125486866112ca565b905060006112748861126e846107748d6111ce8d8c6112ca565b90611387565b9050600061128e8961126e856107748e6111ce8e8c6112ca565b9050600061129c87876112ca565b90506112bb670de0b6b3a7640000610774600281856111ce8989611387565b9b9a5050505050505050505050565b600082821115611321576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261133657506000610dff565b8282028284828161134357fe5b04146113805760405162461bcd60e51b8152600401808060200182810382526021815260200180611a6a6021913960400191505060405180910390fd5b9392505050565b600082820183811015611380576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803561142281611a25565b919050565b805161142281611a25565b803561142281611a33565b805161142281611a33565b805169ffffffffffffffffffff8116811461142257600080fd5b600060208284031215611473578081fd5b813561138081611a0d565b60006020828403121561148f578081fd5b815161138081611a0d565b600080604083850312156114ac578081fd5b82356114b781611a0d565b915060208301356114c781611a25565b809150509250929050565b600080600080608085870312156114e7578182fd5b84516114f281611a0d565b60208601516040870151606090970151919890975090945092505050565b600060208284031215611521578081fd5b5035919050565b600061010080838503121561153b578182fd5b6040519081019067ffffffffffffffff8211818310171561155857fe5b8160405261156584611427565b81526115736020850161143d565b602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b6000602082840312156115d0578081fd5b5051919050565b600080604083850312156115e9578182fd5b8235915060208301356114c781611a0d565b6000806040838503121561160d578182fd5b50508035926020909101359150565b600080600080600060a08688031215611633578283fd5b8535945060208601359350604086013561164c81611a33565b9250606086013561165c81611a0d565b949793965091946080013592915050565b600080600060608486031215611681578081fd5b505081359360208301359350604090920135919050565b600080600080608085870312156116ad578182fd5b5050823594602084013594506040840135936060013592509050565b6000806000806000808688036101a08112156116e3578485fd5b873596506020880135955060408801359450606088013593506080880135925061010080609f1983011215611716578283fd5b604051915080820182811067ffffffffffffffff8211171561173457fe5b60405261174360a08a01611417565b825261175160c08a01611432565b602083015260e0890135604083015280890135606083015250610120880135608082015261014088013560a082015261016088013560c082015261018088013560e0820152809150509295509295509295565b60008060008060008060c087890312156117bc578384fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600080600080600060a086880312156117fd578283fd5b61180686611448565b945060208601519350604086015192506060860151915061182960808701611448565b90509295509295909350565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b818110156118895785810183015185820160400152820161186d565b8181111561189a5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601e908201527f53746172676174653a2062616c616e6365206f7574206f6620626f756e640000604082015260600190565b6020808252601c908201527f53746172676174653a206e6f7420656e6f7567682062616c616e636500000000604082015260600190565b60208082526022908201527f4665654c6962726172793a205f737263506f6f6c496420697320646570656767604082015261195960f21b606082015260800190565b60208082526027908201527f4665654c6962726172793a205f64657065675468726573686f6c64206d7573746040820152660206265203e20360cc1b606082015260800190565b600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b61ffff929092168252602082015260400190565b918252602082015260400190565b6001600160a01b0381168114611a2257600080fd5b50565b8015158114611a2257600080fd5b61ffff81168114611a2257600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200e2ab6be8faa326a5c04f4ad646757f518d73787f62438597ad369023303664664736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806360d86e7711610104578063918f8674116100a2578063af8884f011610071578063af8884f01461035c578063c45a01551461036f578063d16baeb914610377578063f2fde38b1461038a576101cf565b8063918f8674146103245780639b19251a1461032c5780639bf1401c1461034c578063a810de6c14610354576101cf565b80637ba5c12f116100de5780637ba5c12f146103015780637dc9633f14610309578063886a9c50146102a65780638da5cb5b1461031c576101cf565b806360d86e77146102d35780636548c4ac146102e6578063715018a6146102f9576101cf565b80632d4310ad116101715780633dad0dd51161014b5780633dad0dd5146102a6578063518a9f9f146102ae5780635994e07e146102b65780635e3f2727146102cb576101cf565b80632d4310ad1461026a57806334b6a6021461027d5780633d4912c31461029e576101cf565b80630d8e6e2c116101ad5780630d8e6e2c1461021a57806313c6e3801461022f5780631ab62430146102425780631e04cbf314610262576101cf565b8063012a1c2d146101d4578063084285da146101f25780630b4501fd14610212575b600080fd5b6101dc61039d565b6040516101e99190611854565b60405180910390f35b610205610200366004611510565b6103a9565b6040516101e99190611835565b6101dc6103c4565b6102226103cf565b6040516101e9919061185d565b6101dc61023d366004611510565b6103ee565b61025561025036600461161c565b610400565b6040516101e991906119a7565b6101dc6108ef565b6101dc610278366004611698565b6108fb565b61029061028b36600461166d565b610914565b6040516101e99291906119ff565b6101dc61092e565b6101dc610934565b6101dc610940565b6102c96102c4366004611510565b61094b565b005b6101dc6109d2565b6101dc6102e13660046117a4565b6109dc565b6102c96102f43660046115fb565b6109f7565b6102c9610a6b565b6101dc610acf565b6102906103173660046116c9565b610ad9565b610205610afa565b6101dc610b09565b61033f61033a366004611462565b610b15565b6040516101e99190611849565b610205610b2a565b6101dc610b4e565b6102c961036a3660046115d7565b610b59565b610205610be9565b6102c961038536600461149a565b610c0d565b6102c9610398366004611462565b610c9a565b670dd280b9144a000081565b6005602052600090815260409020546001600160a01b031681565b6601c6bf5263400081565b6040805180820190915260058152640342e302e360dc1b602082015290565b60046020526000908152604090205481565b6104086113e1565b600086815260056020526040902054869086906001600160a01b031681831480159061043c57506001600160a01b03811615155b156104e7576000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561047c57600080fd5b505afa158015610490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b491906117e6565b5050509150506002548112156104e55760405162461bcd60e51b81526004016104dc9061191e565b60405180910390fd5b505b60405163068bcd8d60e01b815289906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063068bcd8d90610538908590600401611854565b60206040518083038186803b15801561055057600080fd5b505afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610588919061147e565b90506000816001600160a01b031663159f6add8b8d6040518363ffffffff1660e01b81526004016105ba9291906119eb565b6101006040518083038186803b1580156105d357600080fd5b505afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b9190611528565b90506000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064857600080fd5b505afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610680919061147e565b9050600061077a846001600160a01b031663feb56b156040518163ffffffff1660e01b815260040160206040518083038186803b1580156106c057600080fd5b505afa1580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f891906115bf565b6040516370a0823160e01b81526001600160a01b038516906370a0823190610724908990600401611835565b60206040518083038186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077491906115bf565b90610d9c565b90506000846001600160a01b03166315770f926040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b757600080fd5b505afa1580156107cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ef91906115bf565b905061086d8b8383886001600160a01b0316639bb811196040518163ffffffff1660e01b815260040160206040518083038186803b15801561083057600080fd5b505afa158015610844573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086891906115bf565b610e05565b60408b015260e08401516080850151600091610889918e610e89565b6020808e01929092526001600160a01b038f166000908152600390925260409091205490915060ff16156108c357505050505050506108e3565b6108d18c8484848b8a610ffc565b60608d015260808c0152505050505050505b50505095945050505050565b6706f05b59d3b2000081565b600061090985858585610e05565b90505b949350505050565b600080610922858585610e89565b91509150935093915050565b60025481565b670853a0d2313c000081565b66b1a2bc2ec5000081565b610953611216565b6001600160a01b0316610964610afa565b6001600160a01b0316146109ad576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b600081136109cd5760405162461bcd60e51b81526004016104dc90611960565b600255565b655af3107a400081565b60006109ec87878787878761121a565b979650505050505050565b6109ff611216565b6001600160a01b0316610a10610afa565b6001600160a01b031614610a59576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b60009182526004602052604090912055565b610a73611216565b6001600160a01b0316610a84610afa565b6001600160a01b031614610acd576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b565b651b48eb57e00081565b600080610aea888888888888610ffc565b915091505b965096945050505050565b6000546001600160a01b031690565b670de0b6b3a764000081565b60036020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b660e35fa931a000081565b610b61611216565b6001600160a01b0316610b72610afa565b6001600160a01b031614610bbb576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b60009182526005602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b610c15611216565b6001600160a01b0316610c26610afa565b6001600160a01b031614610c6f576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b6001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b610ca2611216565b6001600160a01b0316610cb3610afa565b6001600160a01b031614610cfc576040805162461bcd60e51b81526020600482018190526024820152600080516020611a8b833981519152604482015290519081900360640190fd5b6001600160a01b038116610d415760405162461bcd60e51b8152600401808060200182810382526026815260200180611a446026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000808211610df2576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610dfb57fe5b0490505b92915050565b6000838311610e165750600061090c565b6000610e2284866112ca565b9050604b610e3585610774886064611327565b108015610e555750610e48816002611327565b610e53876064611327565b115b15610e7b57610e68816107748589611327565b915082821115610e76578291505b610e80565b600091505b50949350505050565b60008082841015610eac5760405162461bcd60e51b81526004016104dc906118e7565b6000610eb885856112ca565b90506000610eda670de0b6b3a764000061077489670853a0d2313c0000611327565b90506000610efb670de0b6b3a76400006107748a66b1a2bc2ec50000611327565b9050600080838510610f2d57610f23670de0b6b3a76400006107748a651b48eb57e000611327565b9150819050610fed565b828510610f65576000848a10610f435784610f45565b895b9050610f5d660e35fa931a000060008787858b61121a565b925050610fed565b828910610fc2576000848a10610f7b5784610f7d565b895b9050610f9f610f98660e35fa931a000060008888868a61121a565b8490611387565b9250610f5d610f98670dd280b9144a0000660e35fa931a0000876000898c61121a565b610fea610fe3670dd280b9144a0000660e35fa931a00008660008e8b61121a565b8390611387565b91505b90999098509650505050505050565b60008061102685611020670de0b6b3a76400006107748c6601c6bf52634000611327565b906112ca565b9150611044670de0b6b3a76400006107748a655af3107a4000611327565b6000858152600460208190526040808320549051631526fe2760e01b815293945091926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692631526fe27926110a29201611854565b60806040518083038186803b1580156110ba57600080fd5b505afa1580156110ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f291906114d2565b505091505060008111156111115761110a8383611387565b9250600091505b8661111c5750610aef565b6000611149670de0b6b3a7640000610774670853a0d2313c00008860e0015161132790919063ffffffff16565b6080860151611158908c6112ca565b1190506000611173896107748c670de0b6b3a7640000611327565b90506706f05b59d3b20000811115801561118a5750815b1561119c576000945060009350611208565b670853a0d2313c0000811080156111b05750815b156112085760006111d4600a6111ce846706f05b59d3b200006112ca565b90611327565b90506111ec670de0b6b3a76400006107748884611327565b9550611204670de0b6b3a76400006107748784611327565b9450505b505050965096945050505050565b3390565b600083821015801561122c5750848311155b6112485760405162461bcd60e51b81526004016104dc906118b0565b600061125486866112ca565b905060006112748861126e846107748d6111ce8d8c6112ca565b90611387565b9050600061128e8961126e856107748e6111ce8e8c6112ca565b9050600061129c87876112ca565b90506112bb670de0b6b3a7640000610774600281856111ce8989611387565b9b9a5050505050505050505050565b600082821115611321576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261133657506000610dff565b8282028284828161134357fe5b04146113805760405162461bcd60e51b8152600401808060200182810382526021815260200180611a6a6021913960400191505060405180910390fd5b9392505050565b600082820183811015611380576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803561142281611a25565b919050565b805161142281611a25565b803561142281611a33565b805161142281611a33565b805169ffffffffffffffffffff8116811461142257600080fd5b600060208284031215611473578081fd5b813561138081611a0d565b60006020828403121561148f578081fd5b815161138081611a0d565b600080604083850312156114ac578081fd5b82356114b781611a0d565b915060208301356114c781611a25565b809150509250929050565b600080600080608085870312156114e7578182fd5b84516114f281611a0d565b60208601516040870151606090970151919890975090945092505050565b600060208284031215611521578081fd5b5035919050565b600061010080838503121561153b578182fd5b6040519081019067ffffffffffffffff8211818310171561155857fe5b8160405261156584611427565b81526115736020850161143d565b602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b6000602082840312156115d0578081fd5b5051919050565b600080604083850312156115e9578182fd5b8235915060208301356114c781611a0d565b6000806040838503121561160d578182fd5b50508035926020909101359150565b600080600080600060a08688031215611633578283fd5b8535945060208601359350604086013561164c81611a33565b9250606086013561165c81611a0d565b949793965091946080013592915050565b600080600060608486031215611681578081fd5b505081359360208301359350604090920135919050565b600080600080608085870312156116ad578182fd5b5050823594602084013594506040840135936060013592509050565b6000806000806000808688036101a08112156116e3578485fd5b873596506020880135955060408801359450606088013593506080880135925061010080609f1983011215611716578283fd5b604051915080820182811067ffffffffffffffff8211171561173457fe5b60405261174360a08a01611417565b825261175160c08a01611432565b602083015260e0890135604083015280890135606083015250610120880135608082015261014088013560a082015261016088013560c082015261018088013560e0820152809150509295509295509295565b60008060008060008060c087890312156117bc578384fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600080600080600060a086880312156117fd578283fd5b61180686611448565b945060208601519350604086015192506060860151915061182960808701611448565b90509295509295909350565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b6000602080835283518082850152825b818110156118895785810183015185820160400152820161186d565b8181111561189a5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601e908201527f53746172676174653a2062616c616e6365206f7574206f6620626f756e640000604082015260600190565b6020808252601c908201527f53746172676174653a206e6f7420656e6f7567682062616c616e636500000000604082015260600190565b60208082526022908201527f4665654c6962726172793a205f737263506f6f6c496420697320646570656767604082015261195960f21b606082015260800190565b60208082526027908201527f4665654c6962726172793a205f64657065675468726573686f6c64206d7573746040820152660206265203e20360cc1b606082015260800190565b600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b61ffff929092168252602082015260400190565b918252602082015260400190565b6001600160a01b0381168114611a2257600080fd5b50565b8015158114611a2257600080fd5b61ffff81168114611a2257600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200e2ab6be8faa326a5c04f4ad646757f518d73787f62438597ad369023303664664736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/libraries/StargateFeeLibraryV04.sol:StargateFeeLibraryV04",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2270,
        "contract": "contracts/libraries/StargateFeeLibraryV04.sol:StargateFeeLibraryV04",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14049,
        "contract": "contracts/libraries/StargateFeeLibraryV04.sol:StargateFeeLibraryV04",
        "label": "depegThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 14053,
        "contract": "contracts/libraries/StargateFeeLibraryV04.sol:StargateFeeLibraryV04",
        "label": "whitelist",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14057,
        "contract": "contracts/libraries/StargateFeeLibraryV04.sol:StargateFeeLibraryV04",
        "label": "poolIdToLpId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 14061,
        "contract": "contracts/libraries/StargateFeeLibraryV04.sol:StargateFeeLibraryV04",
        "label": "poolIdToPriceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}