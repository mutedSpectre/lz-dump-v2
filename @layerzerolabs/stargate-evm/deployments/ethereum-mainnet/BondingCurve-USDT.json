{
  "address": "0x224D8Fd7aB6AD4c6eb4611Ce56EF35Dec2277F03",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_stargateTreasury",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "_stargate",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "_stableCoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalStargateForBonding",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stableQty",
          "type": "uint256"
        }
      ],
      "name": "Bonded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "Started",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "coin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenQty",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_targetBondQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountToPay",
          "type": "uint256"
        }
      ],
      "name": "bond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalBondCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountToBuy",
          "type": "uint256"
        }
      ],
      "name": "bondWithCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convertRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slopeDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slopeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargate",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slopeNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slopeDenominator",
          "type": "uint256"
        }
      ],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStargateBonded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStargateForBonding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStargate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x48a3becce78789b33ab73e83a057b990f684ed6d458aabc3bcaadd49a6890c69",
  "receipt": {
    "to": null,
    "from": "0x1D7C6783328C145393e84fb47a7f7C548f5Ee28d",
    "contractAddress": "0x224D8Fd7aB6AD4c6eb4611Ce56EF35Dec2277F03",
    "transactionIndex": 167,
    "gasUsed": "1182608",
    "logsBloom": "0x
    "blockHash": "0x1b736842840ef76b72b0d887e8202271a4696bc44ffde7efe2076a9e3663d200",
    "transactionHash": "0x48a3becce78789b33ab73e83a057b990f684ed6d458aabc3bcaadd49a6890c69",
    "logs": [
      {
        "transactionIndex": 167,
        "blockNumber": 14402862,
        "transactionHash": "0x48a3becce78789b33ab73e83a057b990f684ed6d458aabc3bcaadd49a6890c69",
        "address": "0x224D8Fd7aB6AD4c6eb4611Ce56EF35Dec2277F03",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001d7c6783328c145393e84fb47a7f7c548f5ee28d"
        ],
        "data": "0x",
        "logIndex": 235,
        "blockHash": "0x1b736842840ef76b72b0d887e8202271a4696bc44ffde7efe2076a9e3663d200"
      }
    ],
    "blockNumber": 14402862,
    "cumulativeGasUsed": "12597293",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67FC8c432448f9a8d541C17579EF7a142378d5aD",
    "0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6",
    "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    "15000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "52cab37e3ef0ffbba6808e43eaca2a3f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_stargateTreasury\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_stargate\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalStargateForBonding\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableQty\",\"type\":\"uint256\"}],\"name\":\"Bonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetBondQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountToPay\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBondCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountToBuy\",\"type\":\"uint256\"}],\"name\":\"bondWithCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slopeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargate\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slopeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slopeDenominator\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStargateBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStargateForBonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStargate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondingCurve.sol\":\"BondingCurve\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/BondingCurve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Metadata.sol\\\";\\n\\ncontract BondingCurve is Ownable {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    IERC20Metadata public immutable stargate;\\n    IERC20Metadata public immutable stableCoin;\\n\\n    uint256 public constant DURATION = 3 days;\\n    uint256 public slopeNumerator;\\n    uint256 public slopeDenominator;\\n    uint256 public endTime;\\n    uint256 public convertRate;\\n    uint256 public initialPrice; //stargate decimals, cast once\\n    uint256 public immutable totalStargateForBonding; //stargate decimals\\n    uint256 public totalStargateBonded; //stargate decimals\\n\\n    address immutable public stargateTreasury;\\n\\n    event Started(uint endTime);\\n    event Bonded(address user, uint bondQuantity, uint stableQty);\\n    event Withdrawn(address coin, address to, uint tokenQty);\\n\\n    constructor(\\n        address payable _stargateTreasury,\\n        IERC20Metadata _stargate,\\n        IERC20Metadata _stableCoin,\\n        uint256 _totalStargateForBonding //stargate decimals\\n    ) {\\n        require(\\n            _stableCoin.decimals() <= _stargate.decimals(),\\n            \\\"stable coin not supported\\\"\\n        );\\n\\n        stargateTreasury = _stargateTreasury;\\n        convertRate = 10 ** (_stargate.decimals() - _stableCoin.decimals());\\n        stargate = _stargate;\\n        stableCoin = _stableCoin;\\n        totalStargateForBonding = _totalStargateForBonding;\\n    }\\n\\n    modifier notEnded() {\\n        require(endTime != 0, \\\"bonding not started\\\");\\n        require(block.timestamp < endTime, \\\"bonding ended\\\");\\n        _;\\n    }\\n\\n    // ============================ External =======================================\\n\\n    function bond(\\n        uint256 _targetBondQuantity, // stargate decimals\\n        uint256 _maxAmountToPay // stableCoin decimals\\n    ) external notEnded {\\n        (uint256 amountToPay, uint256 bondQuantity) = _getCostFromQuantity(\\n            _targetBondQuantity\\n        );\\n        require(amountToPay <= _maxAmountToPay, \\\"exceeds user max amount\\\");\\n\\n        _executeBonding(amountToPay, bondQuantity);\\n    }\\n\\n    function bondWithCost(\\n        uint256 _totalBondCost, // stableCoin decimals\\n        uint256 _minAmountToBuy // stargateCoin decimals\\n    ) external notEnded {\\n        (uint256 amountToPay, uint256 bondQuantity) = _getQuantityFromCost(\\n            _totalBondCost\\n        );\\n        require(bondQuantity >= _minAmountToBuy, \\\"under user min amount\\\");\\n\\n        _executeBonding(amountToPay, bondQuantity);\\n    }\\n\\n    // ============================ OnlyOwner =====================================\\n\\n    function start(\\n        uint256 _initialPrice,       \\n        uint256 _slopeNumerator,\\n        uint256 _slopeDenominator\\n    ) external onlyOwner {\\n        require(endTime == 0, \\\"Bonding already started\\\");\\n        require(\\n            stargate.balanceOf(address(this)) == totalStargateForBonding,\\n            \\\"please provision stargate before start\\\"\\n        );\\n        initialPrice = _toStargateDecimals(_initialPrice);\\n        slopeNumerator = _slopeNumerator;\\n        slopeDenominator = _slopeDenominator;\\n        endTime = block.timestamp + DURATION;\\n        emit Started(endTime);\\n    }\\n\\n    function withdrawStargate(address _to, uint _amount) external onlyOwner {\\n        require(endTime != 0, \\\"bonding not started\\\");\\n        require(block.timestamp >= endTime, \\\"bonding in progress\\\");\\n        stargate.safeTransfer(_to, _amount);\\n        emit Withdrawn(address(stargate), _to, _amount);\\n    }\\n\\n    // ============================ Internal =======================================\\n\\n    function _executeBonding(uint amountToPay, uint bondQuantity) internal {\\n        stableCoin.safeTransferFrom(msg.sender, stargateTreasury, amountToPay);\\n        stargate.safeTransfer(msg.sender, bondQuantity);\\n\\n        totalStargateBonded += bondQuantity;\\n\\n        emit Bonded(msg.sender, bondQuantity, amountToPay);\\n    }\\n\\n    function _getCostFromQuantity(uint _targetQuantity) internal view returns (uint, uint){\\n        uint targetQuantity = _targetQuantity; //stargate decimals\\n        uint quota = totalStargateForBonding - totalStargateBonded;\\n        if(targetQuantity > quota){\\n            targetQuantity = quota;\\n        }\\n        require(\\n            targetQuantity > 0,\\n            \\\"BondingCurve: There are no remaining tokens to bond\\\"\\n        );\\n\\n        // Linear price curve, S = K*T + I\\n        // U = (S + (S + kt))/2 * t\\n        uint startPrice = initialPrice + (totalStargateBonded * slopeNumerator / slopeDenominator); // in stargate decimals\\n        uint endPrice = startPrice + (targetQuantity * slopeNumerator / slopeDenominator); // in stargate decimals\\n        uint avgPrice = (startPrice + endPrice) / 2; // in stargate decimals\\n\\n        // totalStargateBonded and targetQuantity are in stargate decimals\\n        uint cost = _toStableCoinDecimals(avgPrice * targetQuantity / (10 ** stargate.decimals())); //stableCoin decimals\\n\\n        return (cost, targetQuantity);\\n    }\\n\\n    function _getQuantityFromCost(uint _totalCost) internal view returns (uint, uint){\\n        uint totalCost = _toStargateDecimals(_totalCost); // in stargate decimals\\n        uint startPrice = initialPrice + (totalStargateBonded * slopeNumerator / slopeDenominator); // in stargate decimals\\n\\n        uint val = (startPrice ** 2) + (2 * totalCost * 10 ** stargate.decimals() * slopeNumerator / slopeDenominator);\\n        uint quantity = (_sqrt(val * 10 ** 18) / 10 ** 9 - startPrice) * slopeDenominator / slopeNumerator;\\n\\n        uint quota = totalStargateForBonding - totalStargateBonded;\\n        if(quantity > quota){\\n            return _getCostFromQuantity(quota);\\n        }\\n\\n        return (_totalCost, quantity);\\n    }\\n\\n    function _toStargateDecimals(uint _amount) internal view returns (uint) {\\n        return _amount * convertRate;\\n    }\\n\\n    function _toStableCoinDecimals(uint _amount) internal view returns (uint) {\\n        return _amount / convertRate;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function _sqrt(uint256 y) internal pure returns (uint256) {\\n        y = y * 10**18;\\n        uint256 z;\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        return z / 10**9;\\n    }\\n}\\n\",\"keccak256\":\"0x22e53725fafd3a0a1c0a912e8c79397e1ae41d1f315366e098eb6829205267b8\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x8258f8ffa45fc7e09f302902c55fd90ed2581a079952a7ed7db1b61b7dd4799e\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620016ab380380620016ab833981810160405260808110156200003857600080fd5b508051602082015160408301516060909301519192909160006200005b620002fd565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620000df57600080fd5b505afa158015620000f4573d6000803e3d6000fd5b505050506040513d60208110156200010b57600080fd5b50516040805163313ce56760e01b8152905160ff909216916001600160a01b0385169163313ce567916004808301926020929190829003018186803b1580156200015457600080fd5b505afa15801562000169573d6000803e3d6000fd5b505050506040513d60208110156200018057600080fd5b505160ff161115620001d9576040805162461bcd60e51b815260206004820152601960248201527f737461626c6520636f696e206e6f7420737570706f7274656400000000000000604482015290519081900360640190fd5b836001600160a01b031660e0816001600160a01b031660601b81525050816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200023057600080fd5b505afa15801562000245573d6000803e3d6000fd5b505050506040513d60208110156200025c57600080fd5b50516040805163313ce56760e01b815290516001600160a01b0386169163313ce567916004808301926020929190829003018186803b1580156200029f57600080fd5b505afa158015620002b4573d6000803e3d6000fd5b505050506040513d6020811015620002cb57600080fd5b50510360ff16600a0a600455606092831b6001600160601b03199081166080529190921b1660a05260c0525062000301565b3390565b60805160601c60a05160601c60c05160e05160601c61133462000377600039806106745280610c0e52508061044b52806107b85280610a895280610dcc5250806107945280610beb52508061046c528061059e52806108e052806109155280610b355280610c405280610cf252506113346000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80637b518b3b116100a2578063992642e511610071578063992642e51461020a578063b5d709d114610212578063f01c81811461021a578063f2fde38b14610246578063feb56b151461026c57610116565b80637b518b3b146101cf578063807d1378146101d75780638676ed22146101df5780638da5cb5b1461020257610116565b80633197cbb6116100e95780633197cbb61461016a578063641ccd831461017257806365a3ea5f1461019b5780636c099dee146101a3578063715018a6146101c757610116565b80630ba74b2f1461011b5780631be05289146101405780631d0806ae1461015a57806321800fc314610162575b600080fd5b61013e6004803603604081101561013157600080fd5b5080359060200135610274565b005b610148610379565b60408051918252519081900360200190f35b610148610380565b610148610386565b61014861038c565b61013e6004803603606081101561018857600080fd5b5080359060208101359060400135610392565b610148610596565b6101ab61059c565b604080516001600160a01b039092168252519081900360200190f35b61013e6105c0565b61014861066c565b6101ab610672565b61013e600480360360408110156101f557600080fd5b5080359060200135610696565b6101ab610783565b6101ab610792565b6101486107b6565b61013e6004803603604081101561023057600080fd5b506001600160a01b0381351690602001356107da565b61013e6004803603602081101561025c57600080fd5b50356001600160a01b0316610975565b610148610a77565b6003546102be576040805162461bcd60e51b8152602060048201526013602482015272189bdb991a5b99c81b9bdd081cdd185c9d1959606a1b604482015290519081900360640190fd5b6003544210610304576040805162461bcd60e51b815260206004820152600d60248201526c189bdb991a5b99c8195b991959609a1b604482015290519081900360640190fd5b60008061031084610a7d565b9150915082821115610369576040805162461bcd60e51b815260206004820152601760248201527f657863656564732075736572206d617820616d6f756e74000000000000000000604482015290519081900360640190fd5b6103738282610bde565b50505050565b6203f48081565b60055481565b60015481565b60035481565b61039a610cb3565b6001600160a01b03166103ab610783565b6001600160a01b0316146103f4576040805162461bcd60e51b8152602060048201819052602482015260008051602061128f833981519152604482015290519081900360640190fd5b60035415610449576040805162461bcd60e51b815260206004820152601760248201527f426f6e64696e6720616c72656164792073746172746564000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d602081101561050157600080fd5b50511461053f5760405162461bcd60e51b81526004018080602001828103825260268152602001806112af6026913960400191505060405180910390fd5b61054883610cb7565b60055560018290556002819055426203f48001600381905560408051918252517e6e0c97de781a7389d44ba8fd35d1467cabb17ed04d038d166d34ab819213f39181900360200190a1505050565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6105c8610cb3565b6001600160a01b03166105d9610783565b6001600160a01b031614610622576040805162461bcd60e51b8152602060048201819052602482015260008051602061128f833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60065481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003546106e0576040805162461bcd60e51b8152602060048201526013602482015272189bdb991a5b99c81b9bdd081cdd185c9d1959606a1b604482015290519081900360640190fd5b6003544210610726576040805162461bcd60e51b815260206004820152600d60248201526c189bdb991a5b99c8195b991959609a1b604482015290519081900360640190fd5b60008061073284610cbe565b9150915082811015610369576040805162461bcd60e51b81526020600482015260156024820152741d5b99195c881d5cd95c881b5a5b88185b5bdd5b9d605a1b604482015290519081900360640190fd5b6000546001600160a01b031690565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6107e2610cb3565b6001600160a01b03166107f3610783565b6001600160a01b03161461083c576040805162461bcd60e51b8152602060048201819052602482015260008051602061128f833981519152604482015290519081900360640190fd5b600354610886576040805162461bcd60e51b8152602060048201526013602482015272189bdb991a5b99c81b9bdd081cdd185c9d1959606a1b604482015290519081900360640190fd5b6003544210156108d3576040805162461bcd60e51b8152602060048201526013602482015272626f6e64696e6720696e2070726f677265737360681b604482015290519081900360640190fd5b6109076001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610e16565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682528416602082015280820183905290517fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb9181900360600190a15050565b61097d610cb3565b6001600160a01b031661098e610783565b6001600160a01b0316146109d7576040805162461bcd60e51b8152602060048201819052602482015260008051602061128f833981519152604482015290519081900360640190fd5b6001600160a01b038116610a1c5760405162461bcd60e51b81526004018080602001828103825260268152602001806112106026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b600654600090819083907f00000000000000000000000000000000000000000000000000000000000000000380821115610ab5578091505b60008211610af45760405162461bcd60e51b81526004018080602001828103825260338152602001806112366033913960400191505060405180910390fd5b60006002546001546006540281610b0757fe5b046005540190506000600254600154850281610b1f57fe5b0482019050600060028284010490506000610bce7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8c57600080fd5b505afa158015610ba0573d6000803e3d6000fd5b505050506040513d6020811015610bb657600080fd5b505160ff16600a0a83880281610bc857fe5b04610e6d565b975094955050505050505b915091565b610c336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f000000000000000000000000000000000000000000000000000000000000000085610e81565b610c676001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610e16565b6006805482019055604080513381526020810183905280820184905290517f524384adee0b2f52827eebf00ddd616aa286978612393216724d61cdb43dc8359181900360600190a15050565b3390565b6004540290565b6000806000610ccc84610cb7565b905060006002546001546006540281610ce157fe5b0460055401905060006002546001547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4957600080fd5b505afa158015610d5d573d6000803e3d6000fd5b505050506040513d6020811015610d7357600080fd5b505160ff16600a0a85020260020281610d8857fe5b046002830a019050600060015460025484633b9aca00610db186670de0b6b3a764000002610edb565b81610db857fe5b04030281610dc257fe5b60065491900491507f00000000000000000000000000000000000000000000000000000000000000000380821115610e0b57610dfd81610a7d565b965096505050505050610bd9565b509596945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e68908490610f40565b505050565b60006004548281610e7a57fe5b0492915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610373908590610f40565b670de0b6b3a7640000026000806003831115610f29575081600160028204015b81811015610f2357809150600281828681610f1257fe5b040181610f1b57fe5b049050610efb565b50610f33565b8215610f33575060015b633b9aca00900492915050565b6000610f95826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ff19092919063ffffffff16565b805190915015610e6857808060200190516020811015610fb457600080fd5b5051610e685760405162461bcd60e51b815260040180806020018281038252602a8152602001806112d5602a913960400191505060405180910390fd5b6060611000848460008561100a565b90505b9392505050565b60608247101561104b5760405162461bcd60e51b81526004018080602001828103825260268152602001806112696026913960400191505060405180910390fd5b61105485611165565b6110a5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106110e35780518252601f1990920191602091820191016110c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611145576040519150601f19603f3d011682016040523d82523d6000602084013e61114a565b606091505b509150915061115a82828661116b565b979650505050505050565b3b151590565b6060831561117a575081611003565b82511561118a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111d45781810151838201526020016111bc565b50505050905090810190601f1680156112015780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373426f6e64696e6743757276653a20546865726520617265206e6f2072656d61696e696e6720746f6b656e7320746f20626f6e64416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572706c656173652070726f766973696f6e207374617267617465206265666f72652073746172745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122026150ef630214cc836775d2415edbb07216c15acbffbc4b8fdfe1376b4f7dd2e64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80637b518b3b116100a2578063992642e511610071578063992642e51461020a578063b5d709d114610212578063f01c81811461021a578063f2fde38b14610246578063feb56b151461026c57610116565b80637b518b3b146101cf578063807d1378146101d75780638676ed22146101df5780638da5cb5b1461020257610116565b80633197cbb6116100e95780633197cbb61461016a578063641ccd831461017257806365a3ea5f1461019b5780636c099dee146101a3578063715018a6146101c757610116565b80630ba74b2f1461011b5780631be05289146101405780631d0806ae1461015a57806321800fc314610162575b600080fd5b61013e6004803603604081101561013157600080fd5b5080359060200135610274565b005b610148610379565b60408051918252519081900360200190f35b610148610380565b610148610386565b61014861038c565b61013e6004803603606081101561018857600080fd5b5080359060208101359060400135610392565b610148610596565b6101ab61059c565b604080516001600160a01b039092168252519081900360200190f35b61013e6105c0565b61014861066c565b6101ab610672565b61013e600480360360408110156101f557600080fd5b5080359060200135610696565b6101ab610783565b6101ab610792565b6101486107b6565b61013e6004803603604081101561023057600080fd5b506001600160a01b0381351690602001356107da565b61013e6004803603602081101561025c57600080fd5b50356001600160a01b0316610975565b610148610a77565b6003546102be576040805162461bcd60e51b8152602060048201526013602482015272189bdb991a5b99c81b9bdd081cdd185c9d1959606a1b604482015290519081900360640190fd5b6003544210610304576040805162461bcd60e51b815260206004820152600d60248201526c189bdb991a5b99c8195b991959609a1b604482015290519081900360640190fd5b60008061031084610a7d565b9150915082821115610369576040805162461bcd60e51b815260206004820152601760248201527f657863656564732075736572206d617820616d6f756e74000000000000000000604482015290519081900360640190fd5b6103738282610bde565b50505050565b6203f48081565b60055481565b60015481565b60035481565b61039a610cb3565b6001600160a01b03166103ab610783565b6001600160a01b0316146103f4576040805162461bcd60e51b8152602060048201819052602482015260008051602061128f833981519152604482015290519081900360640190fd5b60035415610449576040805162461bcd60e51b815260206004820152601760248201527f426f6e64696e6720616c72656164792073746172746564000000000000000000604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d602081101561050157600080fd5b50511461053f5760405162461bcd60e51b81526004018080602001828103825260268152602001806112af6026913960400191505060405180910390fd5b61054883610cb7565b60055560018290556002819055426203f48001600381905560408051918252517e6e0c97de781a7389d44ba8fd35d1467cabb17ed04d038d166d34ab819213f39181900360200190a1505050565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6105c8610cb3565b6001600160a01b03166105d9610783565b6001600160a01b031614610622576040805162461bcd60e51b8152602060048201819052602482015260008051602061128f833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60065481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003546106e0576040805162461bcd60e51b8152602060048201526013602482015272189bdb991a5b99c81b9bdd081cdd185c9d1959606a1b604482015290519081900360640190fd5b6003544210610726576040805162461bcd60e51b815260206004820152600d60248201526c189bdb991a5b99c8195b991959609a1b604482015290519081900360640190fd5b60008061073284610cbe565b9150915082811015610369576040805162461bcd60e51b81526020600482015260156024820152741d5b99195c881d5cd95c881b5a5b88185b5bdd5b9d605a1b604482015290519081900360640190fd5b6000546001600160a01b031690565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6107e2610cb3565b6001600160a01b03166107f3610783565b6001600160a01b03161461083c576040805162461bcd60e51b8152602060048201819052602482015260008051602061128f833981519152604482015290519081900360640190fd5b600354610886576040805162461bcd60e51b8152602060048201526013602482015272189bdb991a5b99c81b9bdd081cdd185c9d1959606a1b604482015290519081900360640190fd5b6003544210156108d3576040805162461bcd60e51b8152602060048201526013602482015272626f6e64696e6720696e2070726f677265737360681b604482015290519081900360640190fd5b6109076001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610e16565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682528416602082015280820183905290517fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb9181900360600190a15050565b61097d610cb3565b6001600160a01b031661098e610783565b6001600160a01b0316146109d7576040805162461bcd60e51b8152602060048201819052602482015260008051602061128f833981519152604482015290519081900360640190fd5b6001600160a01b038116610a1c5760405162461bcd60e51b81526004018080602001828103825260268152602001806112106026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b600654600090819083907f00000000000000000000000000000000000000000000000000000000000000000380821115610ab5578091505b60008211610af45760405162461bcd60e51b81526004018080602001828103825260338152602001806112366033913960400191505060405180910390fd5b60006002546001546006540281610b0757fe5b046005540190506000600254600154850281610b1f57fe5b0482019050600060028284010490506000610bce7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8c57600080fd5b505afa158015610ba0573d6000803e3d6000fd5b505050506040513d6020811015610bb657600080fd5b505160ff16600a0a83880281610bc857fe5b04610e6d565b975094955050505050505b915091565b610c336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016337f000000000000000000000000000000000000000000000000000000000000000085610e81565b610c676001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610e16565b6006805482019055604080513381526020810183905280820184905290517f524384adee0b2f52827eebf00ddd616aa286978612393216724d61cdb43dc8359181900360600190a15050565b3390565b6004540290565b6000806000610ccc84610cb7565b905060006002546001546006540281610ce157fe5b0460055401905060006002546001547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4957600080fd5b505afa158015610d5d573d6000803e3d6000fd5b505050506040513d6020811015610d7357600080fd5b505160ff16600a0a85020260020281610d8857fe5b046002830a019050600060015460025484633b9aca00610db186670de0b6b3a764000002610edb565b81610db857fe5b04030281610dc257fe5b60065491900491507f00000000000000000000000000000000000000000000000000000000000000000380821115610e0b57610dfd81610a7d565b965096505050505050610bd9565b509596945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e68908490610f40565b505050565b60006004548281610e7a57fe5b0492915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610373908590610f40565b670de0b6b3a7640000026000806003831115610f29575081600160028204015b81811015610f2357809150600281828681610f1257fe5b040181610f1b57fe5b049050610efb565b50610f33565b8215610f33575060015b633b9aca00900492915050565b6000610f95826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ff19092919063ffffffff16565b805190915015610e6857808060200190516020811015610fb457600080fd5b5051610e685760405162461bcd60e51b815260040180806020018281038252602a8152602001806112d5602a913960400191505060405180910390fd5b6060611000848460008561100a565b90505b9392505050565b60608247101561104b5760405162461bcd60e51b81526004018080602001828103825260268152602001806112696026913960400191505060405180910390fd5b61105485611165565b6110a5576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106110e35780518252601f1990920191602091820191016110c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611145576040519150601f19603f3d011682016040523d82523d6000602084013e61114a565b606091505b509150915061115a82828661116b565b979650505050505050565b3b151590565b6060831561117a575081611003565b82511561118a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111d45781810151838201526020016111bc565b50505050905090810190601f1680156112015780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373426f6e64696e6743757276653a20546865726520617265206e6f2072656d61696e696e6720746f6b656e7320746f20626f6e64416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572706c656173652070726f766973696f6e207374617267617465206265666f72652073746172745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122026150ef630214cc836775d2415edbb07216c15acbffbc4b8fdfe1376b4f7dd2e64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/BondingCurve.sol:BondingCurve",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2657,
        "contract": "contracts/BondingCurve.sol:BondingCurve",
        "label": "slopeNumerator",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2659,
        "contract": "contracts/BondingCurve.sol:BondingCurve",
        "label": "slopeDenominator",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2661,
        "contract": "contracts/BondingCurve.sol:BondingCurve",
        "label": "endTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2663,
        "contract": "contracts/BondingCurve.sol:BondingCurve",
        "label": "convertRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2665,
        "contract": "contracts/BondingCurve.sol:BondingCurve",
        "label": "initialPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2669,
        "contract": "contracts/BondingCurve.sol:BondingCurve",
        "label": "totalStargateBonded",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}