{
  "address": "0xe409af258A87545b754B7f1BE423f0f65f3355D6",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needPrecrime",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolView.ChainPathState",
          "name": "_cp",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.CreditObj",
          "name": "_c",
          "type": "tuple"
        }
      ],
      "name": "creditChainPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needPrecrime",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolView.ChainPathState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Pool",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getPoolState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "dstChainId",
                  "type": "uint16"
                },
                {
                  "internalType": "uint256",
                  "name": "dstPoolId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lkb",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "credits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "idealBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "needPrecrime",
                  "type": "bool"
                }
              ],
              "internalType": "struct PoolView.ChainPathState[]",
              "name": "chainPaths",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalLiquidity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "protocolFeeBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mintFeeBalance",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "eqFeePool",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deltaCredit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenBalance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PoolView.PoolBalance",
              "name": "balance",
              "type": "tuple"
            }
          ],
          "internalType": "struct PoolView.PoolState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFeeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintFeeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFeePool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deltaCredit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolView.PoolBalance",
          "name": "_pb",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needPrecrime",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolView.ChainPathState",
          "name": "_cp",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToMintSD",
          "type": "uint256"
        }
      ],
      "name": "redeemLocalCallback",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFeeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintFeeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFeePool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deltaCredit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolView.PoolBalance",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needPrecrime",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolView.ChainPathState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needPrecrime",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolView.ChainPathState",
          "name": "_cp",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        }
      ],
      "name": "redeemLocalCheckOnRemote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needPrecrime",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolView.ChainPathState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFeeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintFeeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFeePool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deltaCredit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolView.PoolBalance",
          "name": "_pb",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needPrecrime",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolView.ChainPathState",
          "name": "_cp",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkbRemove",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.SwapObj",
          "name": "_s",
          "type": "tuple"
        }
      ],
      "name": "swapRemote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFeeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintFeeBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFeePool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deltaCredit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolView.PoolBalance",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "dstChainId",
              "type": "uint16"
            },
            {
              "internalType": "uint256",
              "name": "dstPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkb",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "needPrecrime",
              "type": "bool"
            }
          ],
          "internalType": "struct PoolView.ChainPathState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf405e3a3e82c8dd4cc9ca294ad834305c69342c98ad7c8cefd65c38e6ef882bf",
  "receipt": {
    "to": null,
    "from": "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6",
    "contractAddress": "0xe409af258A87545b754B7f1BE423f0f65f3355D6",
    "transactionIndex": 76,
    "gasUsed": "886721",
    "logsBloom": "0x
    "blockHash": "0x211f2082da76319a478adf33cf0b8abc615d96fbfa6cbad5bd7b666d29e9f807",
    "transactionHash": "0xf405e3a3e82c8dd4cc9ca294ad834305c69342c98ad7c8cefd65c38e6ef882bf",
    "logs": [],
    "blockNumber": 16587371,
    "cumulativeGasUsed": "19060536",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5a0d1bfc35dfc3636e995d542f7cc3f9",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState\",\"name\":\"_cp\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.CreditObj\",\"name\":\"_c\",\"type\":\"tuple\"}],\"name\":\"creditChainPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Pool\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPoolState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState[]\",\"name\":\"chainPaths\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFeePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaCredit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolView.PoolBalance\",\"name\":\"balance\",\"type\":\"tuple\"}],\"internalType\":\"struct PoolView.PoolState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFeePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaCredit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolView.PoolBalance\",\"name\":\"_pb\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState\",\"name\":\"_cp\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToMintSD\",\"type\":\"uint256\"}],\"name\":\"redeemLocalCallback\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFeePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaCredit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolView.PoolBalance\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState\",\"name\":\"_cp\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"}],\"name\":\"redeemLocalCheckOnRemote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFeePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaCredit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolView.PoolBalance\",\"name\":\"_pb\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState\",\"name\":\"_cp\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkbRemove\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.SwapObj\",\"name\":\"_s\",\"type\":\"tuple\"}],\"name\":\"swapRemote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFeeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFeePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaCredit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolView.PoolBalance\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"needPrecrime\",\"type\":\"bool\"}],\"internalType\":\"struct PoolView.ChainPathState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/precrime/stargate/PoolView.sol\":\"PoolView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/LPTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LPTokenERC20 {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    string public name;\\n    string public symbol;\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // set in constructor\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    uint256 public decimals;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Bridge: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Bridge: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xd0ac7dd3767cd0223a26075c43d10bd3866c226f3a43ebc5f5c4b8bc3d21a77e\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./LPTokenERC20.sol\\\";\\nimport \\\"./interfaces/IStargateFeeLibrary.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// Pool contracts on other chains and managed by the Stargate protocol.\\ncontract Pool is LPTokenERC20, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    uint256 public constant BP_DENOMINATOR = 10000;\\n\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct ChainPath {\\n        bool ready; // indicate if the counter chainPath has been created.\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        uint256 weight;\\n        uint256 balance;\\n        uint256 lkb;\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    struct SwapObj {\\n        uint256 amount;\\n        uint256 eqFee;\\n        uint256 eqReward;\\n        uint256 lpFee;\\n        uint256 protocolFee;\\n        uint256 lkbRemove;\\n    }\\n\\n    struct CreditObj {\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // chainPath\\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\\n    mapping(uint16 => mapping(uint256 => uint256)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\\n\\n    // metadata\\n    uint256 public immutable poolId; // shared id between chains to represent same pool\\n    uint256 public sharedDecimals; // the shared decimals (lowest common decimals between chains)\\n    uint256 public localDecimals; // the decimals for the token\\n    uint256 public immutable convertRate; // the decimals for the token\\n    address public immutable token; // the token for the pool\\n    address public immutable router; // the token for the pool\\n\\n    bool public stopSwap; // flag to stop swapping in extreme cases\\n\\n    // Fee and Liquidity\\n    uint256 public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\\n    uint256 public totalWeight; // total weight for pool percentages\\n    uint256 public mintFeeBP; // fee basis points for the mint/deposit\\n    uint256 public protocolFeeBalance; // fee balance created from dao fee\\n    uint256 public mintFeeBalance; // fee balance created from mint fee\\n    uint256 public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\\n    address public feeLibrary; // address for retrieving fee params for swaps\\n\\n    // Delta related\\n    uint256 public deltaCredit; // credits accumulated from txn\\n    bool public batched; // flag to indicate if we want batch processing.\\n    bool public defaultSwapMode; // flag for the default mode for swap\\n    bool public defaultLPMode; // flag for the default mode for lp\\n    uint256 public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\\n    uint256 public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Mint(address to, uint256 amountLP, uint256 amountSD, uint256 mintFeeAmountSD);\\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocalCallback(address _to, uint256 _amountSD, uint256 _amountToMintSD);\\n    event Swap(\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        address from,\\n        uint256 amountSD,\\n        uint256 eqReward,\\n        uint256 eqFee,\\n        uint256 protocolFee,\\n        uint256 lpFee\\n    );\\n    event SendCredits(uint16 dstChainId, uint256 dstPoolId, uint256 credits, uint256 idealBalance);\\n    event RedeemRemote(uint16 chainId, uint256 dstPoolId, address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, bytes to);\\n    event InstantRedeemLocal(address from, uint256 amountLP, uint256 amountSD, address to);\\n    event CreditChainPath(uint16 chainId, uint256 srcPoolId, uint256 amountSD, uint256 idealBalance);\\n    event SwapRemote(address to, uint256 amountSD, uint256 protocolFee, uint256 dstFee);\\n    event WithdrawRemote(uint16 srcChainId, uint256 srcPoolId, uint256 swapAmount, uint256 mintAmount);\\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\\n    event FeesUpdated(uint256 mintFeeBP);\\n    event FeeLibraryUpdated(address feeLibraryAddr);\\n    event StopSwapUpdated(bool swapStop);\\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\\n    event DeltaParamUpdated(bool batched, uint256 swapDeltaBP, uint256 lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: only the router can call this method\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _poolId,\\n        address _router,\\n        address _token,\\n        uint256 _sharedDecimals,\\n        uint256 _localDecimals,\\n        address _feeLibrary,\\n        string memory _name,\\n        string memory _symbol\\n    ) LPTokenERC20(_name, _symbol) {\\n        require(_token != address(0x0), \\\"Stargate: _token cannot be 0x0\\\");\\n        require(_router != address(0x0), \\\"Stargate: _router cannot be 0x0\\\");\\n        poolId = _poolId;\\n        router = _router;\\n        token = _token;\\n        sharedDecimals = _sharedDecimals;\\n        decimals = uint8(_sharedDecimals);\\n        localDecimals = _localDecimals;\\n        convertRate = 10**(uint256(localDecimals).sub(sharedDecimals));\\n        totalWeight = 0;\\n        feeLibrary = _feeLibrary;\\n\\n        //delta algo related\\n        batched = false;\\n        defaultSwapMode = true;\\n        defaultLPMode = true;\\n    }\\n\\n    function getChainPathsLength() public view returns (uint256) {\\n        return chainPaths.length;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n\\n    function mint(address _to, uint256 _amountLD) external nonReentrant onlyRouter returns (uint256) {\\n        return _mintLocal(_to, _amountLD, true, true);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        bool newLiquidity\\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\\n        require(!stopSwap, \\\"Stargate: swap func stopped\\\");\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n\\n        uint256 amountSD = amountLDtoSD(_amountLD);\\n        uint256 minAmountSD = amountLDtoSD(_minAmountLD);\\n\\n        // request fee params from library\\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\\n\\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\\n        eqFeePool = eqFeePool.sub(s.eqReward);\\n        // update the new amount the user gets minus the fees\\n        s.amount = amountSD.sub(s.eqFee).sub(s.protocolFee).sub(s.lpFee);\\n        // users will also get the eqReward\\n        require(s.amount.add(s.eqReward) >= minAmountSD, \\\"Stargate: slippage too high\\\");\\n\\n        // behaviours\\n        //     - protocolFee: booked, stayed and withdrawn at remote.\\n        //     - eqFee: booked, stayed and withdrawn at remote.\\n        //     - lpFee: booked and stayed at remote, can be withdrawn anywhere\\n\\n        s.lkbRemove = amountSD.sub(s.lpFee).add(s.eqReward);\\n        // check for transfer solvency.\\n        require(cp.balance >= s.lkbRemove, \\\"Stargate: dst balance too low\\\");\\n        cp.balance = cp.balance.sub(s.lkbRemove);\\n\\n        if (newLiquidity) {\\n            deltaCredit = deltaCredit.add(amountSD).add(s.eqReward);\\n        } else if (s.eqReward > 0) {\\n            deltaCredit = deltaCredit.add(s.eqReward);\\n        }\\n\\n        // distribute credits on condition.\\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultSwapMode);\\n        }\\n\\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\\n        return s;\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function sendCredits(uint16 _dstChainId, uint256 _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        cp.lkb = cp.lkb.add(cp.credits);\\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\\n        c.credits = cp.credits;\\n        cp.credits = 0;\\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemRemote   ->                        swapRemote\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLP\\n    ) external nonReentrant onlyRouter {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 amountSD = _burnLocal(_from, _amountLP);\\n        //run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountLD);\\n    }\\n\\n    function instantRedeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        address _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 _deltaCredit = deltaCredit; // sload optimization.\\n        uint256 _capAmountLP = _amountSDtoLP(_deltaCredit);\\n\\n        if (_amountLP > _capAmountLP) _amountLP = _capAmountLP;\\n\\n        amountSD = _burnLocal(_from, _amountLP);\\n        deltaCredit = _deltaCredit.sub(amountSD);\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit InstantRedeemLocal(_from, _amountLP, amountSD, _to);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        bytes calldata _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n\\n        // safeguard.\\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        amountSD = _burnLocal(_from, _amountLP);\\n\\n        // run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(false);\\n        }\\n        emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // REMOTE CHAIN FUNCTIONS\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function creditChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        CreditObj memory _c\\n    ) external nonReentrant onlyRouter {\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        cp.balance = cp.balance.add(_c.credits);\\n        if (cp.idealBalance != _c.idealBalance) {\\n            cp.idealBalance = _c.idealBalance;\\n        }\\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swapRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        SwapObj memory _s\\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\\n        // booking lpFee\\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\\n        // booking eqFee\\n        eqFeePool = eqFeePool.add(_s.eqFee);\\n        // booking stargateFee\\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\\n\\n        // update LKB\\n        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\\n\\n        // user receives the amount + the srcReward\\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\\n        _safeTransfer(token, _to, amountLD);\\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCallback(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _amountToMintSD\\n    ) external nonReentrant onlyRouter {\\n        if (_amountToMintSD > 0) {\\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\\n        }\\n\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        cp.lkb = cp.lkb.sub(_amountSD);\\n\\n        uint256 amountLD = amountSDtoLD(_amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCheckOnRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _amountSD\\n    ) external nonReentrant onlyRouter returns (uint256 swapAmount, uint256 mintAmount) {\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        if (_amountSD > cp.balance) {\\n            mintAmount = _amountSD - cp.balance;\\n            swapAmount = cp.balance;\\n            cp.balance = 0;\\n        } else {\\n            cp.balance = cp.balance.sub(_amountSD);\\n            swapAmount = _amountSD;\\n            mintAmount = 0;\\n        }\\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // DAO Calls\\n    function createChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _weight\\n    ) external onlyRouter {\\n        for (uint256 i = 0; i < chainPaths.length; ++i) {\\n            ChainPath memory cp = chainPaths[i];\\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\\n            require(!exists, \\\"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\\\");\\n        }\\n        totalWeight = totalWeight.add(_weight);\\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\\n        chainPaths.push(ChainPath(false, _dstChainId, _dstPoolId, _weight, 0, 0, 0, 0));\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setWeightForChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint16 _weight\\n    ) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\\n        cp.weight = _weight;\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setFee(uint256 _mintFeeBP) external onlyRouter {\\n        require(_mintFeeBP <= BP_DENOMINATOR, \\\"Bridge: cum fees > 100%\\\");\\n        mintFeeBP = _mintFeeBP;\\n        emit FeesUpdated(mintFeeBP);\\n    }\\n\\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\\n        require(_feeLibraryAddr != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        feeLibrary = _feeLibraryAddr;\\n        emit FeeLibraryUpdated(_feeLibraryAddr);\\n    }\\n\\n    function setSwapStop(bool _swapStop) external onlyRouter {\\n        stopSwap = _swapStop;\\n        emit StopSwapUpdated(_swapStop);\\n    }\\n\\n    function setDeltaParam(\\n        bool _batched,\\n        uint256 _swapDeltaBP,\\n        uint256 _lpDeltaBP,\\n        bool _defaultSwapMode,\\n        bool _defaultLPMode\\n    ) external onlyRouter {\\n        require(_swapDeltaBP <= BP_DENOMINATOR && _lpDeltaBP <= BP_DENOMINATOR, \\\"Stargate: wrong Delta param\\\");\\n        batched = _batched;\\n        swapDeltaBP = _swapDeltaBP;\\n        lpDeltaBP = _lpDeltaBP;\\n        defaultSwapMode = _defaultSwapMode;\\n        defaultLPMode = _defaultLPMode;\\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\\n    }\\n\\n    function callDelta(bool _fullMode) external onlyRouter {\\n        _delta(_fullMode);\\n    }\\n\\n    function activateChainPath(uint16 _dstChainId, uint256 _dstPoolId) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == false, \\\"Stargate: chainPath is already active\\\");\\n        // this func will only be called once\\n        cp.ready = true;\\n    }\\n\\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\\n        if (protocolFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(protocolFeeBalance);\\n            protocolFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\\n        if (mintFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(mintFeeBalance);\\n            mintFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL\\n    // Conversion Helpers\\n    //---------------------------------------------------------------------------\\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256) {\\n        return amountSDtoLD(_amountLPtoSD(_amountLP));\\n    }\\n\\n    function _amountLPtoSD(uint256 _amountLP) internal view returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant convert LPtoSD when totalSupply == 0\\\");\\n        return _amountLP.mul(totalLiquidity).div(totalSupply);\\n    }\\n\\n    function _amountSDtoLP(uint256 _amountSD) internal view returns (uint256) {\\n        require(totalLiquidity > 0, \\\"Stargate: cant convert SDtoLP when totalLiq == 0\\\");\\n        return _amountSD.mul(totalSupply).div(totalLiquidity);\\n    }\\n\\n    function amountSDtoLD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(convertRate);\\n    }\\n\\n    function amountLDtoSD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.div(convertRate);\\n    }\\n\\n    function getAndCheckCP(uint16 _dstChainId, uint256 _dstPoolId) internal view returns (ChainPath storage) {\\n        require(chainPaths.length > 0, \\\"Stargate: no chainpaths exist\\\");\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function getChainPath(uint16 _dstChainId, uint256 _dstPoolId) external view returns (ChainPath memory) {\\n        ChainPath memory cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function _burnLocal(address _from, uint256 _amountLP) internal returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant burn when totalSupply == 0\\\");\\n        uint256 amountOfLPTokens = balanceOf[_from];\\n        require(amountOfLPTokens >= _amountLP, \\\"Stargate: not enough LP tokens to burn\\\");\\n\\n        uint256 amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\\n        //subtract totalLiquidity accordingly\\n        totalLiquidity = totalLiquidity.sub(amountSD);\\n\\n        _burn(_from, _amountLP);\\n        emit Burn(_from, _amountLP, amountSD);\\n        return amountSD;\\n    }\\n\\n    function _delta(bool fullMode) internal {\\n        if (deltaCredit > 0 && totalWeight > 0) {\\n            uint256 cpLength = chainPaths.length;\\n            uint256[] memory deficit = new uint256[](cpLength);\\n            uint256 totalDeficit = 0;\\n\\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\\n            for (uint256 i = 0; i < cpLength; ++i) {\\n                ChainPath storage cp = chainPaths[i];\\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\\n                uint256 balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\\n                uint256 currLiq = cp.lkb.add(cp.credits);\\n                if (balLiq > currLiq) {\\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\\n                    deficit[i] = balLiq - currLiq;\\n                    totalDeficit = totalDeficit.add(deficit[i]);\\n                }\\n            }\\n\\n            // indicates how much delta credit is distributed\\n            uint256 spent;\\n\\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\\n            // run full Delta, allocate all credits\\n            if (totalDeficit == 0) {\\n                // only fullMode delta will allocate excess credits\\n                if (fullMode && deltaCredit > 0) {\\n                    // credit ChainPath by weights\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\\n                        uint256 amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\\n                        spent = spent.add(amtToCredit);\\n                        cp.credits = cp.credits.add(amtToCredit);\\n                    }\\n                } // else do nth\\n            } else if (totalDeficit <= deltaCredit) {\\n                if (fullMode) {\\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\\n                    uint256 excessCredit = deltaCredit - totalDeficit;\\n                    // algorithm steps 14-16: calculate credits\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            // credits = credits + deficit + remaining allocation based on weight\\n                            uint256 amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                } else {\\n                    // totalDeficit <= deltaCredit but not running fullMode\\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            uint256 amtToCredit = deficit[i];\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\\n                for (uint256 i = 0; i < cpLength; ++i) {\\n                    if (deficit[i] > 0) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        uint256 proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\\n                        spent = spent.add(proportionalDeficit);\\n                        cp.credits = cp.credits.add(proportionalDeficit);\\n                    }\\n                }\\n            }\\n\\n            // deduct the amount of credit sent\\n            deltaCredit = deltaCredit.sub(spent);\\n        }\\n    }\\n\\n    function _mintLocal(\\n        address _to,\\n        uint256 _amountLD,\\n        bool _feesEnabled,\\n        bool _creditDelta\\n    ) internal returns (uint256 amountSD) {\\n        require(totalWeight > 0, \\\"Stargate: No ChainPaths exist\\\");\\n        amountSD = amountLDtoSD(_amountLD);\\n\\n        uint256 mintFeeSD = 0;\\n        if (_feesEnabled) {\\n            mintFeeSD = amountSD.mul(mintFeeBP).div(BP_DENOMINATOR);\\n            amountSD = amountSD.sub(mintFeeSD);\\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\\n        }\\n\\n        if (_creditDelta) {\\n            deltaCredit = deltaCredit.add(amountSD);\\n        }\\n\\n        uint256 amountLPTokens = amountSD;\\n        if (totalSupply != 0) {\\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\\n        }\\n        totalLiquidity = totalLiquidity.add(amountSD);\\n\\n        _mint(_to, amountLPTokens);\\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\\n\\n        // add to credits and call delta. short circuit to save gas\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n    }\\n\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) private {\\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Stargate: TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xff0ac7ffc5a5813fb1bce42222d7199f05546fb4b12f55fc3791b6607533f820\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateFeeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\nimport \\\"../Pool.sol\\\";\\n\\ninterface IStargateFeeLibrary {\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external returns (Pool.SwapObj memory s);\\n\\n    function getVersion() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x712bc424a034519d61c5a1bbbf3f19fd34dfa51908421775c613f0a44e612d63\",\"license\":\"BUSL-1.1\"},\"contracts/precrime/stargate/PoolView.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../../Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract PoolView {\\n    using SafeMath for uint256;\\n\\n    struct ChainPathState {\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        uint256 balance;\\n        uint256 lkb;\\n        uint256 credits;\\n        uint256 idealBalance;\\n        bool needPrecrime;\\n    }\\n\\n    struct PoolBalance {\\n        uint256 totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\\n        uint256 protocolFeeBalance; // fee balance created from dao fee\\n        uint256 mintFeeBalance; // fee balance created from mint fee\\n        uint256 eqFeePool;\\n        uint256 deltaCredit;\\n        uint256 tokenBalance; // token balance of the pool, in sd\\n    }\\n\\n    struct PoolState {\\n        uint256 poolId;\\n        ChainPathState[] chainPaths; // list of connected chains with shared pools\\n        PoolBalance balance;\\n    }\\n\\n    function getPoolState(Pool _pool) external view returns (PoolState memory) {\\n        // get all chain paths\\n        uint256 chainPathSize = _pool.getChainPathsLength();\\n        ChainPathState[] memory chainPaths = new ChainPathState[](chainPathSize);\\n        for (uint256 j = 0; j < chainPathSize; j++) {\\n            (, uint16 dstChainId, uint256 dstPoolId, , uint256 balance, uint256 lkb, uint256 credits, uint256 idealBalance) = _pool.chainPaths(\\n                j\\n            );\\n\\n            chainPaths[j] = ChainPathState({\\n                dstChainId: dstChainId,\\n                dstPoolId: dstPoolId,\\n                balance: balance,\\n                lkb: lkb,\\n                credits: credits,\\n                idealBalance: idealBalance,\\n                needPrecrime: false\\n            });\\n        }\\n\\n        uint256 tokenBalance = IERC20(_pool.token()).balanceOf(address(_pool));\\n\\n        return\\n            PoolState({\\n                poolId: _pool.poolId(),\\n                chainPaths: chainPaths,\\n                balance: PoolBalance({\\n                    totalLiquidity: _pool.totalLiquidity(),\\n                    protocolFeeBalance: _pool.protocolFeeBalance(),\\n                    mintFeeBalance: _pool.mintFeeBalance(),\\n                    eqFeePool: _pool.eqFeePool(),\\n                    deltaCredit: _pool.deltaCredit(),\\n                    tokenBalance: amountLDtoSD(_pool, tokenBalance)\\n                })\\n            });\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function creditChainPath(ChainPathState memory _cp, Pool.CreditObj memory _c) external pure returns (ChainPathState memory) {\\n        _cp.balance = _cp.balance.add(_c.credits);\\n        _cp.needPrecrime = true;\\n        if (_cp.idealBalance != _c.idealBalance) {\\n            _cp.idealBalance = _c.idealBalance;\\n        }\\n\\n        return _cp;\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swapRemote(\\n        PoolBalance memory _pb,\\n        ChainPathState memory _cp,\\n        Pool.SwapObj memory _s\\n    ) external pure returns (PoolBalance memory, ChainPathState memory) {\\n//        // booking lpFee\\n//        totalLiquidity = totalLiquidity.add(_s.lpFee);\\n//        // booking eqFee\\n//        eqFeePool = eqFeePool.add(_s.eqFee);\\n//        // booking stargateFee\\n//        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\\n//\\n//        // update LKB\\n//        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\\n//        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\\n//\\n//        // user receives the amount + the srcReward\\n//        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\\n//        _safeTransfer(token, _to, amountLD);\\n//        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\\n\\n        // booking lpFee\\n        _pb.totalLiquidity = _pb.totalLiquidity.add(_s.lpFee);\\n        // booking eqFee\\n        _pb.eqFeePool = _pb.eqFeePool.add(_s.eqFee);\\n        // booking stargateFee\\n        _pb.protocolFeeBalance = _pb.protocolFeeBalance.add(_s.protocolFee);\\n\\n        // update LKB\\n        _cp.lkb = _cp.lkb.sub(_s.lkbRemove);\\n        _cp.needPrecrime = true;\\n\\n        // user receives the amount + the srcReward\\n        _pb.tokenBalance = _pb.tokenBalance.sub(_s.amount.add(_s.eqReward));\\n\\n        return (_pb, _cp);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCallback(\\n        PoolBalance memory _pb,\\n        ChainPathState memory _cp,\\n        uint256 _amountSD,\\n        uint256 _amountToMintSD\\n    ) external pure returns (PoolBalance memory, ChainPathState memory) {\\n//        if (_amountToMintSD > 0) {\\n//            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\\n//        }\\n//\\n//        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n//        cp.lkb = cp.lkb.sub(_amountSD);\\n//\\n//        uint256 amountLD = amountSDtoLD(_amountSD);\\n//        _safeTransfer(token, _to, amountLD);\\n//        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\\n\\n\\n        if (_amountToMintSD > 0) {\\n            _pb.totalLiquidity = _pb.totalLiquidity.add(_amountToMintSD);\\n        }\\n\\n        _cp.lkb = _cp.lkb.sub(_amountSD);\\n        _cp.needPrecrime = true;\\n\\n        _pb.tokenBalance = _pb.tokenBalance.sub(_amountSD);\\n\\n        return (_pb, _cp);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCheckOnRemote(ChainPathState memory _cp, uint256 _amountSD) external pure returns (ChainPathState memory) {\\n//        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n//        if (_amountSD > cp.balance) {\\n//            mintAmount = _amountSD - cp.balance;\\n//            swapAmount = cp.balance;\\n//            cp.balance = 0;\\n//        } else {\\n//            cp.balance = cp.balance.sub(_amountSD);\\n//            swapAmount = _amountSD;\\n//            mintAmount = 0;\\n//        }\\n//        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\\n\\n        if (_amountSD > _cp.balance) {\\n            _cp.balance = 0;\\n        } else {\\n            _cp.balance = _cp.balance.sub(_amountSD);\\n        }\\n        _cp.needPrecrime = true;\\n        return _cp;\\n    }\\n\\n    function amountSDtoLD(Pool _pool, uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(_pool.convertRate());\\n    }\\n\\n    function amountLDtoSD(Pool _pool, uint256 _amount) internal view returns (uint256) {\\n        return _amount.div(_pool.convertRate());\\n    }\\n}\\n\",\"keccak256\":\"0x6a7cd16c4526f26e365414a5253a5263c23e035aa4384f35470dc3b12e0c1d0c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f15806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806317b597d91461005c5780636ab202d31461008557806372666b1014610098578063ea8683cd146100b9578063ec04205b146100cc575b600080fd5b61006f61006a366004610c95565b6100ec565b60405161007c9190610dfd565b60405180910390f35b61006f610093366004610c29565b610131565b6100ab6100a6366004610d07565b610176565b60405161007c929190610e0b565b6100ab6100c7366004610cc0565b6101d4565b6100df6100da366004610c0d565b610273565b60405161007c9190610e27565b6100f46109d0565b826040015182111561010c5760006040840152610121565b604083015161011b9083610833565b60408401525b50600160c0830152815b92915050565b6101396109d0565b8151604084015161014991610890565b6040840152600160c0840152602082015160a08401511461016f57602082015160a08401525b5090919050565b61017e610a13565b6101866109d0565b821561019b5785516101989084610890565b86525b60608501516101aa9085610833565b6060860152600160c086015260a08601516101c59085610833565b60a08701525093949293505050565b6101dc610a13565b6101e46109d0565b606083015185516101f491610890565b85526020830151606086015161020991610890565b60608601526080830151602086015161022191610890565b602086015260a0830151606085015161023991610833565b6060850152600160c0850152604083015183516102659161025a9190610890565b60a087015190610833565b60a086015250929391925050565b61027b610a49565b6000826001600160a01b031663163ef4906040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b657600080fd5b505afa1580156102ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ee9190610d4d565b905060008167ffffffffffffffff8111801561030957600080fd5b5060405190808252806020026020018201604052801561034357816020015b6103306109d0565b8152602001906001900390816103285790505b50905060005b82811015610449576000806000806000808a6001600160a01b031663a138ed6b886040518263ffffffff1660e01b81526004016103869190610ea0565b6101006040518083038186803b15801561039f57600080fd5b505afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d79190610b9d565b97509750975097505096509650506040518060e001604052808761ffff1681526020018681526020018581526020018481526020018381526020018281526020016000151581525088888151811061042b57fe5b60200260200101819052505050505050508080600101915050610349565b506000846001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048557600080fd5b505afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190610b81565b6001600160a01b03166370a08231866040518263ffffffff1660e01b81526004016104e89190610de9565b60206040518083038186803b15801561050057600080fd5b505afa158015610514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105389190610d4d565b90506040518060600160405280866001600160a01b0316633e0dc34e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b69190610d4d565b81526020018381526020016040518060c00160405280886001600160a01b03166315770f926040518163ffffffff1660e01b815260040160206040518083038186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190610d4d565b8152602001886001600160a01b0316630a22d68c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067b57600080fd5b505afa15801561068f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b39190610d4d565b8152602001886001600160a01b03166365152f2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f157600080fd5b505afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190610d4d565b8152602001886001600160a01b0316639bb811196040518163ffffffff1660e01b815260040160206040518083038186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f9190610d4d565b8152602001886001600160a01b0316631e8e51da6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107dd57600080fd5b505afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190610d4d565b815260200161082489866108f1565b9052905293505050505b919050565b60008282111561088a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156108ea576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006108ea836001600160a01b031663feb56b156040518163ffffffff1660e01b815260040160206040518083038186803b15801561092f57600080fd5b505afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190610d4d565b839060008082116109bf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816109c857fe5b049392505050565b6040518060e00160405280600061ffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160608152602001610a6a610a13565b905290565b803561082e81610ec1565b600060e08284031215610a8b578081fd5b60405160e0810181811067ffffffffffffffff82111715610aa857fe5b604052905080610ab783610b76565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a0820152610af760c08401610a6f565b60c08201525092915050565b600060c08284031215610b14578081fd5b60405160c0810181811067ffffffffffffffff82111715610b3157fe5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b803561082e81610ecf565b600060208284031215610b92578081fd5b81516108ea81610ea9565b600080600080600080600080610100898b031215610bb9578384fd5b8851610bc481610ec1565b60208a0151909850610bd581610ecf565b60408a015160608b015160808c015160a08d015160c08e015160e0909e01519c9f949e50929c919b909a509198509650945092505050565b600060208284031215610c1e578081fd5b81356108ea81610ea9565b600080828403610120811215610c3d578283fd5b610c478585610a7a565b9250604060df1982011215610c5a578182fd5b506040516040810181811067ffffffffffffffff82111715610c7857fe5b60405260e084013581526101009093013560208401525092909150565b6000806101008385031215610ca8578182fd5b610cb28484610a7a565b9460e0939093013593505050565b60008060006102608486031215610cd5578283fd5b610cdf8585610b03565b9250610cee8560c08601610a7a565b9150610cfe856101a08601610b03565b90509250925092565b6000806000806101e08587031215610d1d578384fd5b610d278686610b03565b9350610d368660c08701610a7a565b93969395505050506101a0820135916101c0013590565b600060208284031215610d5e578081fd5b5051919050565b61ffff81511682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151151560c08301525050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b6001600160a01b0391909116815260200190565b60e0810161012b8284610d65565b6101a08101610e1a8285610daf565b6108ea60c0830184610d65565b6020808252825182820152828101516101006040840152805161012084018190526000929182019083906101408601905b80831015610e8157610e6b828551610d65565b60e0820191508484019350600183019250610e58565b5060408701519350610e966060870185610daf565b9695505050505050565b90815260200190565b6001600160a01b0381168114610ebe57600080fd5b50565b8015158114610ebe57600080fd5b61ffff81168114610ebe57600080fdfea26469706673582212206c640d5cff2ad540eebfc00c5d64a15a3e99d12f12d1ed07fb1b70bd717d0a8d64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806317b597d91461005c5780636ab202d31461008557806372666b1014610098578063ea8683cd146100b9578063ec04205b146100cc575b600080fd5b61006f61006a366004610c95565b6100ec565b60405161007c9190610dfd565b60405180910390f35b61006f610093366004610c29565b610131565b6100ab6100a6366004610d07565b610176565b60405161007c929190610e0b565b6100ab6100c7366004610cc0565b6101d4565b6100df6100da366004610c0d565b610273565b60405161007c9190610e27565b6100f46109d0565b826040015182111561010c5760006040840152610121565b604083015161011b9083610833565b60408401525b50600160c0830152815b92915050565b6101396109d0565b8151604084015161014991610890565b6040840152600160c0840152602082015160a08401511461016f57602082015160a08401525b5090919050565b61017e610a13565b6101866109d0565b821561019b5785516101989084610890565b86525b60608501516101aa9085610833565b6060860152600160c086015260a08601516101c59085610833565b60a08701525093949293505050565b6101dc610a13565b6101e46109d0565b606083015185516101f491610890565b85526020830151606086015161020991610890565b60608601526080830151602086015161022191610890565b602086015260a0830151606085015161023991610833565b6060850152600160c0850152604083015183516102659161025a9190610890565b60a087015190610833565b60a086015250929391925050565b61027b610a49565b6000826001600160a01b031663163ef4906040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b657600080fd5b505afa1580156102ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ee9190610d4d565b905060008167ffffffffffffffff8111801561030957600080fd5b5060405190808252806020026020018201604052801561034357816020015b6103306109d0565b8152602001906001900390816103285790505b50905060005b82811015610449576000806000806000808a6001600160a01b031663a138ed6b886040518263ffffffff1660e01b81526004016103869190610ea0565b6101006040518083038186803b15801561039f57600080fd5b505afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d79190610b9d565b97509750975097505096509650506040518060e001604052808761ffff1681526020018681526020018581526020018481526020018381526020018281526020016000151581525088888151811061042b57fe5b60200260200101819052505050505050508080600101915050610349565b506000846001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048557600080fd5b505afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190610b81565b6001600160a01b03166370a08231866040518263ffffffff1660e01b81526004016104e89190610de9565b60206040518083038186803b15801561050057600080fd5b505afa158015610514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105389190610d4d565b90506040518060600160405280866001600160a01b0316633e0dc34e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b69190610d4d565b81526020018381526020016040518060c00160405280886001600160a01b03166315770f926040518163ffffffff1660e01b815260040160206040518083038186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190610d4d565b8152602001886001600160a01b0316630a22d68c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067b57600080fd5b505afa15801561068f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b39190610d4d565b8152602001886001600160a01b03166365152f2b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f157600080fd5b505afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190610d4d565b8152602001886001600160a01b0316639bb811196040518163ffffffff1660e01b815260040160206040518083038186803b15801561076757600080fd5b505afa15801561077b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079f9190610d4d565b8152602001886001600160a01b0316631e8e51da6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107dd57600080fd5b505afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190610d4d565b815260200161082489866108f1565b9052905293505050505b919050565b60008282111561088a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000828201838110156108ea576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006108ea836001600160a01b031663feb56b156040518163ffffffff1660e01b815260040160206040518083038186803b15801561092f57600080fd5b505afa158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190610d4d565b839060008082116109bf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816109c857fe5b049392505050565b6040518060e00160405280600061ffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160608152602001610a6a610a13565b905290565b803561082e81610ec1565b600060e08284031215610a8b578081fd5b60405160e0810181811067ffffffffffffffff82111715610aa857fe5b604052905080610ab783610b76565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a0820152610af760c08401610a6f565b60c08201525092915050565b600060c08284031215610b14578081fd5b60405160c0810181811067ffffffffffffffff82111715610b3157fe5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b803561082e81610ecf565b600060208284031215610b92578081fd5b81516108ea81610ea9565b600080600080600080600080610100898b031215610bb9578384fd5b8851610bc481610ec1565b60208a0151909850610bd581610ecf565b60408a015160608b015160808c015160a08d015160c08e015160e0909e01519c9f949e50929c919b909a509198509650945092505050565b600060208284031215610c1e578081fd5b81356108ea81610ea9565b600080828403610120811215610c3d578283fd5b610c478585610a7a565b9250604060df1982011215610c5a578182fd5b506040516040810181811067ffffffffffffffff82111715610c7857fe5b60405260e084013581526101009093013560208401525092909150565b6000806101008385031215610ca8578182fd5b610cb28484610a7a565b9460e0939093013593505050565b60008060006102608486031215610cd5578283fd5b610cdf8585610b03565b9250610cee8560c08601610a7a565b9150610cfe856101a08601610b03565b90509250925092565b6000806000806101e08587031215610d1d578384fd5b610d278686610b03565b9350610d368660c08701610a7a565b93969395505050506101a0820135916101c0013590565b600060208284031215610d5e578081fd5b5051919050565b61ffff81511682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151151560c08301525050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b6001600160a01b0391909116815260200190565b60e0810161012b8284610d65565b6101a08101610e1a8285610daf565b6108ea60c0830184610d65565b6020808252825182820152828101516101006040840152805161012084018190526000929182019083906101408601905b80831015610e8157610e6b828551610d65565b60e0820191508484019350600183019250610e58565b5060408701519350610e966060870185610daf565b9695505050505050565b90815260200190565b6001600160a01b0381168114610ebe57600080fd5b50565b8015158114610ebe57600080fd5b61ffff81168114610ebe57600080fdfea26469706673582212206c640d5cff2ad540eebfc00c5d64a15a3e99d12f12d1ed07fb1b70bd717d0a8d64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}