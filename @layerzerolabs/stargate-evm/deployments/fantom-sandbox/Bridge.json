{
  "address": "0x7983f1A01a52CE443F6A4E9E40C8E6eF3A1a23c6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "msgType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "SendMsg",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveTokenSpender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "bridgeLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "gasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "layerZeroEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_functionType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_transferAndCallPayload",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStargateRouter.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "quoteLayerZeroFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.CreditObj",
          "name": "_c",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_amountSD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStargateRouter.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        }
      ],
      "name": "redeemLocal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.CreditObj",
          "name": "_c",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStargateRouter.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "redeemLocalCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.CreditObj",
          "name": "_c",
          "type": "tuple"
        }
      ],
      "name": "sendCredits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_bridgeAddress",
          "type": "bytes"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "_functionType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_gasAmount",
          "type": "uint256"
        }
      ],
      "name": "setGasAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "setUseLayerZeroToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_srcPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dstPoolId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "credits",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "idealBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.CreditObj",
          "name": "_c",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "eqReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lkbRemove",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.SwapObj",
          "name": "_s",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStargateRouter.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useLayerZeroToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdf8e370826567a1333e8c32def580c744b306b6f80a0f717870e6d694ec9f3a",
  "receipt": {
    "to": null,
    "from": "0x732BC218Ea380B93081c7dfeb362A13e28b7A8d6",
    "contractAddress": "0x7983f1A01a52CE443F6A4E9E40C8E6eF3A1a23c6",
    "transactionIndex": 0,
    "gasUsed": "2701160",
    "logsBloom": "0x
    "blockHash": "0x000029e70000029e0759f6c2ba6f17a7f7a12f239ae84d38cd0b31750ad83f11",
    "transactionHash": "0xcdf8e370826567a1333e8c32def580c744b306b6f80a0f717870e6d694ec9f3a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9994919,
        "transactionHash": "0xcdf8e370826567a1333e8c32def580c744b306b6f80a0f717870e6d694ec9f3a",
        "address": "0x7983f1A01a52CE443F6A4E9E40C8E6eF3A1a23c6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000732bc218ea380b93081c7dfeb362a13e28b7a8d6"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x000029e70000029e0759f6c2ba6f17a7f7a12f239ae84d38cd0b31750ad83f11"
      }
    ],
    "blockNumber": 9994919,
    "cumulativeGasUsed": "2701160",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3EF72CaC6428B4DEF9Cb74cf7fE5c9EEE6163c8f",
    "0x949a96daCaFA8Ac5A0acbE0907eED14579683782"
  ],
  "numDeployments": 1,
  "solcInputHash": "7726894fd215076bb1a30f54ef119d8e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"msgType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"SendMsg\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveTokenSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"bridgeLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"gasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"layerZeroEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_transferAndCallPayload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"quoteLayerZeroFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.CreditObj\",\"name\":\"_c\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_amountSD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"}],\"name\":\"redeemLocal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.CreditObj\",\"name\":\"_c\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"redeemLocalCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.CreditObj\",\"name\":\"_c\",\"type\":\"tuple\"}],\"name\":\"sendCredits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_bridgeAddress\",\"type\":\"bytes\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_functionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"}],\"name\":\"setGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setUseLayerZeroToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_srcPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.CreditObj\",\"name\":\"_c\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eqReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lkbRemove\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.SwapObj\",\"name\":\"_s\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useLayerZeroToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xbc2e0022d4d53d136830aa90037be2ed7a0966f5fd1b409bf5986185984c495f\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xd1617e455d90d41556bba636bc440627d301ec481de16ff04fbd520333c3c6f3\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./Router.sol\\\";\\n// interfaces\\nimport \\\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"@layerzerolabs/layerzero-core/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract Bridge is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    uint8 internal constant TYPE_SWAP_REMOTE = 1;\\n    uint8 internal constant TYPE_ADD_LIQUIDITY = 2;\\n    uint8 internal constant TYPE_REDEEM_LOCAL_CALL_BACK = 3;\\n    uint8 internal constant TYPE_WITHDRAW_REMOTE = 4;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    ILayerZeroEndpoint public immutable layerZeroEndpoint;\\n    mapping(uint16 => bytes) public bridgeLookup;\\n    mapping(uint16 => mapping(uint8 => uint256)) public gasLookup;\\n    Router public immutable router;\\n    bool public useLayerZeroToken;\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event SendMsg(uint8 msgType, uint64 nonce);\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == address(router), \\\"Stargate: caller must be Router.\\\");\\n        _;\\n    }\\n\\n    constructor(address _layerZeroEndpoint, address _router) {\\n        require(_layerZeroEndpoint != address(0x0), \\\"Stargate: _layerZeroEndpoint cannot be 0x0\\\");\\n        require(_router != address(0x0), \\\"Stargate: _router cannot be 0x0\\\");\\n        layerZeroEndpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\\n        router = Router(_router);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // EXTERNAL functions\\n\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) external override {\\n        require(msg.sender == address(layerZeroEndpoint), \\\"Stargate: only LayerZero endpoint can call lzReceive\\\");\\n        require(\\n            _srcAddress.length == bridgeLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(bridgeLookup[_srcChainId]),\\n            \\\"Stargate: bridge does not match\\\"\\n        );\\n\\n        uint8 functionType;\\n        assembly {\\n            functionType := mload(add(_payload, 32))\\n        }\\n\\n        if (functionType == TYPE_SWAP_REMOTE) {\\n            (\\n                ,\\n                uint256 srcPoolId,\\n                uint256 dstPoolId,\\n                uint256 dstGasForCall,\\n                Pool.CreditObj memory c,\\n                Pool.SwapObj memory s,\\n                bytes memory to,\\n                bytes memory payload\\n            ) = abi.decode(_payload, (uint8, uint256, uint256, uint256, Pool.CreditObj, Pool.SwapObj, bytes, bytes));\\n            address toAddress;\\n            assembly {\\n                toAddress := mload(add(to, 20))\\n            }\\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\\n            router.swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, toAddress, s, payload);\\n        } else if (functionType == TYPE_ADD_LIQUIDITY) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c) = abi.decode(_payload, (uint8, uint256, uint256, Pool.CreditObj));\\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\\n        } else if (functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c, uint256 amountSD, uint256 mintAmountSD, bytes memory to) = abi\\n                .decode(_payload, (uint8, uint256, uint256, Pool.CreditObj, uint256, uint256, bytes));\\n            address toAddress;\\n            assembly {\\n                toAddress := mload(add(to, 20))\\n            }\\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\\n            router.redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, toAddress, amountSD, mintAmountSD);\\n        } else if (functionType == TYPE_WITHDRAW_REMOTE) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c, uint256 amountSD, bytes memory to) = abi.decode(\\n                _payload,\\n                (uint8, uint256, uint256, Pool.CreditObj, uint256, bytes)\\n            );\\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\\n            router.redeemLocalCheckOnRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, amountSD, to);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n    function swap(\\n        uint16 _chainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        Pool.CreditObj memory _c,\\n        Pool.SwapObj memory _s,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable onlyRouter {\\n        bytes memory payload = abi.encode(TYPE_SWAP_REMOTE, _srcPoolId, _dstPoolId, _lzTxParams.dstGasForCall, _c, _s, _to, _payload);\\n        _call(_chainId, TYPE_SWAP_REMOTE, _refundAddress, _lzTxParams, payload);\\n    }\\n\\n    function redeemLocalCallback(\\n        uint16 _chainId,\\n        address payable _refundAddress,\\n        Pool.CreditObj memory _c,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes memory _payload\\n    ) external payable onlyRouter {\\n        bytes memory payload;\\n\\n        {\\n            (, uint256 srcPoolId, uint256 dstPoolId, uint256 amountSD, uint256 mintAmountSD, bytes memory to) = abi.decode(\\n                _payload,\\n                (uint8, uint256, uint256, uint256, uint256, bytes)\\n            );\\n\\n            // swap dst and src because we are headed back\\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, dstPoolId, srcPoolId, _c, amountSD, mintAmountSD, to);\\n        }\\n\\n        _call(_chainId, TYPE_REDEEM_LOCAL_CALL_BACK, _refundAddress, _lzTxParams, payload);\\n    }\\n\\n    function redeemLocal(\\n        uint16 _chainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        Pool.CreditObj memory _c,\\n        uint256 _amountSD,\\n        bytes calldata _to,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external payable onlyRouter {\\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_REMOTE, _srcPoolId, _dstPoolId, _c, _amountSD, _to);\\n        _call(_chainId, TYPE_WITHDRAW_REMOTE, _refundAddress, _lzTxParams, payload);\\n    }\\n\\n    function sendCredits(\\n        uint16 _chainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        Pool.CreditObj memory _c\\n    ) external payable onlyRouter {\\n        bytes memory payload = abi.encode(TYPE_ADD_LIQUIDITY, _srcPoolId, _dstPoolId, _c);\\n        IStargateRouter.lzTxObj memory lzTxObj = IStargateRouter.lzTxObj(0, 0, \\\"0x\\\");\\n        _call(_chainId, TYPE_ADD_LIQUIDITY, _refundAddress, lzTxObj, payload);\\n    }\\n\\n    function quoteLayerZeroFee(\\n        uint16 _chainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256) {\\n        bytes memory payload = \\\"\\\";\\n        Pool.CreditObj memory c = Pool.CreditObj(1, 1);\\n        if (_functionType == TYPE_SWAP_REMOTE) {\\n            Pool.SwapObj memory s = Pool.SwapObj(1, 1, 1, 1, 1, 1);\\n            payload = abi.encode(TYPE_SWAP_REMOTE, 0, 0, 0, c, s, _toAddress, _transferAndCallPayload);\\n        } else if (_functionType == TYPE_ADD_LIQUIDITY) {\\n            payload = abi.encode(TYPE_ADD_LIQUIDITY, 0, 0, c);\\n        } else if (_functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, 0, 0, c, 0, 0, _toAddress);\\n        } else if (_functionType == TYPE_WITHDRAW_REMOTE) {\\n            payload = abi.encode(TYPE_WITHDRAW_REMOTE, 0, 0, c, 0, _toAddress);\\n        } else {\\n            revert(\\\"Stargate: unsupported function type\\\");\\n        }\\n\\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _functionType, _lzTxParams);\\n        return layerZeroEndpoint.estimateFees(_chainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // dao functions\\n    function setBridge(uint16 _chainId, bytes calldata _bridgeAddress) external onlyOwner {\\n        require(bridgeLookup[_chainId].length == 0, \\\"Stargate: Bridge already set!\\\");\\n        bridgeLookup[_chainId] = _bridgeAddress;\\n    }\\n\\n    function setGasAmount(\\n        uint16 _chainId,\\n        uint8 _functionType,\\n        uint256 _gasAmount\\n    ) external onlyOwner {\\n        require(_functionType >= 1 && _functionType <= 4, \\\"Stargate: invalid _functionType\\\");\\n        gasLookup[_chainId][_functionType] = _gasAmount;\\n    }\\n\\n    function approveTokenSpender(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).approve(spender, amount);\\n    }\\n\\n    function setUseLayerZeroToken(bool enable) external onlyOwner {\\n        useLayerZeroToken = enable;\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        layerZeroEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // generic config for user Application\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external override onlyOwner {\\n        layerZeroEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 version) external override onlyOwner {\\n        layerZeroEndpoint.setSendVersion(version);\\n    }\\n\\n    function setReceiveVersion(uint16 version) external override onlyOwner {\\n        layerZeroEndpoint.setReceiveVersion(version);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL functions\\n    function txParamBuilderType1(uint256 _gasAmount) internal pure returns (bytes memory) {\\n        uint16 txType = 1;\\n        return abi.encodePacked(txType, _gasAmount);\\n    }\\n\\n    function txParamBuilderType2(\\n        uint256 _gasAmount,\\n        uint256 _dstNativeAmount,\\n        bytes memory _dstNativeAddr\\n    ) internal pure returns (bytes memory) {\\n        uint16 txType = 2;\\n        return abi.encodePacked(txType, _gasAmount, _dstNativeAmount, _dstNativeAddr);\\n    }\\n\\n    function _txParamBuilder(\\n        uint16 _chainId,\\n        uint8 _type,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) internal view returns (bytes memory) {\\n        bytes memory lzTxParam;\\n        address dstNativeAddr;\\n        {\\n            bytes memory dstNativeAddrBytes = _lzTxParams.dstNativeAddr;\\n            assembly {\\n                dstNativeAddr := mload(add(dstNativeAddrBytes, 20))\\n            }\\n        }\\n\\n        uint256 totalGas = gasLookup[_chainId][_type].add(_lzTxParams.dstGasForCall);\\n        if (_lzTxParams.dstNativeAmount > 0 && dstNativeAddr != address(0x0)) {\\n            lzTxParam = txParamBuilderType2(totalGas, _lzTxParams.dstNativeAmount, _lzTxParams.dstNativeAddr);\\n        } else {\\n            lzTxParam = txParamBuilderType1(totalGas);\\n        }\\n\\n        return lzTxParam;\\n    }\\n\\n    function _call(\\n        uint16 _chainId,\\n        uint8 _type,\\n        address payable _refundAddress,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes memory _payload\\n    ) internal {\\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _type, _lzTxParams);\\n        uint64 nextNonce = layerZeroEndpoint.getOutboundNonce(_chainId, address(this)) + 1;\\n        layerZeroEndpoint.send{value: msg.value}(_chainId, bridgeLookup[_chainId], _payload, _refundAddress, address(this), lzTxParamBuilt);\\n        emit SendMsg(_type, nextNonce);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x2ab58a7be8e59dac9a52faedd1645b65f917078d3b10e8b88521e90e8ce4deef\",\"license\":\"BUSL-1.1\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Factory is Ownable {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    mapping(uint256 => Pool) public getPool; // poolId -> PoolInfo\\n    address[] public allPools;\\n    address public immutable router;\\n    address public defaultFeeLibrary; // address for retrieving fee params for swaps\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: caller must be Router.\\\");\\n        _;\\n    }\\n\\n    constructor(address _router) {\\n        require(_router != address(0x0), \\\"Stargate: _router cant be 0x0\\\"); // 1 time only\\n        router = _router;\\n    }\\n\\n    function setDefaultFeeLibrary(address _defaultFeeLibrary) external onlyOwner {\\n        require(_defaultFeeLibrary != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        defaultFeeLibrary = _defaultFeeLibrary;\\n    }\\n\\n    function allPoolsLength() external view returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    function createPool(\\n        uint256 _poolId,\\n        address _token,\\n        uint8 _sharedDecimals,\\n        uint8 _localDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) public onlyRouter returns (address poolAddress) {\\n        require(address(getPool[_poolId]) == address(0x0), \\\"Stargate: Pool already created\\\");\\n\\n        Pool pool = new Pool(_poolId, router, _token, _sharedDecimals, _localDecimals, defaultFeeLibrary, _name, _symbol);\\n        getPool[_poolId] = pool;\\n        poolAddress = address(pool);\\n        allPools.push(poolAddress);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n}\\n\",\"keccak256\":\"0x90afcaeaf0f8e3e44d25a4596705f792a03f15524e400d0c1c131b291e01c4e9\",\"license\":\"BUSL-1.1\"},\"contracts/LPTokenERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract LPTokenERC20 {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    string public name;\\n    string public symbol;\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    // set in constructor\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    uint256 public decimals;\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    mapping(address => uint256) public nonces;\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Bridge: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Bridge: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xd0ac7dd3767cd0223a26075c43d10bd3866c226f3a43ebc5f5c4b8bc3d21a77e\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./LPTokenERC20.sol\\\";\\nimport \\\"./interfaces/IStargateFeeLibrary.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// Pool contracts on other chains and managed by the Stargate protocol.\\ncontract Pool is LPTokenERC20, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\n    uint256 public constant BP_DENOMINATOR = 10000;\\n\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct ChainPath {\\n        bool ready; // indicate if the counter chainPath has been created.\\n        uint16 dstChainId;\\n        uint256 dstPoolId;\\n        uint256 weight;\\n        uint256 balance;\\n        uint256 lkb;\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    struct SwapObj {\\n        uint256 amount;\\n        uint256 eqFee;\\n        uint256 eqReward;\\n        uint256 lpFee;\\n        uint256 protocolFee;\\n        uint256 lkbRemove;\\n    }\\n\\n    struct CreditObj {\\n        uint256 credits;\\n        uint256 idealBalance;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n\\n    // chainPath\\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\\n    mapping(uint16 => mapping(uint256 => uint256)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\\n\\n    // metadata\\n    uint256 public immutable poolId; // shared id between chains to represent same pool\\n    uint256 public sharedDecimals; // the shared decimals (lowest common decimals between chains)\\n    uint256 public localDecimals; // the decimals for the token\\n    uint256 public immutable convertRate; // the decimals for the token\\n    address public immutable token; // the token for the pool\\n    address public immutable router; // the token for the pool\\n\\n    bool public stopSwap; // flag to stop swapping in extreme cases\\n\\n    // Fee and Liquidity\\n    uint256 public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\\n    uint256 public totalWeight; // total weight for pool percentages\\n    uint256 public mintFeeBP; // fee basis points for the mint/deposit\\n    uint256 public protocolFeeBalance; // fee balance created from dao fee\\n    uint256 public mintFeeBalance; // fee balance created from mint fee\\n    uint256 public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\\n    address public feeLibrary; // address for retrieving fee params for swaps\\n\\n    // Delta related\\n    uint256 public deltaCredit; // credits accumulated from txn\\n    bool public batched; // flag to indicate if we want batch processing.\\n    bool public defaultSwapMode; // flag for the default mode for swap\\n    bool public defaultLPMode; // flag for the default mode for lp\\n    uint256 public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\\n    uint256 public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Mint(address to, uint256 amountLP, uint256 amountSD, uint256 mintFeeAmountSD);\\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocalCallback(address _to, uint256 _amountSD, uint256 _amountToMintSD);\\n    event Swap(\\n        uint16 chainId,\\n        uint256 dstPoolId,\\n        address from,\\n        uint256 amountSD,\\n        uint256 eqReward,\\n        uint256 eqFee,\\n        uint256 protocolFee,\\n        uint256 lpFee\\n    );\\n    event SendCredits(uint16 dstChainId, uint256 dstPoolId, uint256 credits, uint256 idealBalance);\\n    event RedeemRemote(uint16 chainId, uint256 dstPoolId, address from, uint256 amountLP, uint256 amountSD);\\n    event RedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, bytes to);\\n    event InstantRedeemLocal(address from, uint256 amountLP, uint256 amountSD, address to);\\n    event CreditChainPath(uint16 chainId, uint256 srcPoolId, uint256 amountSD, uint256 idealBalance);\\n    event SwapRemote(address to, uint256 amountSD, uint256 protocolFee, uint256 dstFee);\\n    event WithdrawRemote(uint16 srcChainId, uint256 srcPoolId, uint256 swapAmount, uint256 mintAmount);\\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\\n    event FeesUpdated(uint256 mintFeeBP);\\n    event FeeLibraryUpdated(address feeLibraryAddr);\\n    event StopSwapUpdated(bool swapStop);\\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\\n    event DeltaParamUpdated(bool batched, uint256 swapDeltaBP, uint256 lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Stargate: only the router can call this method\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _poolId,\\n        address _router,\\n        address _token,\\n        uint256 _sharedDecimals,\\n        uint256 _localDecimals,\\n        address _feeLibrary,\\n        string memory _name,\\n        string memory _symbol\\n    ) LPTokenERC20(_name, _symbol) {\\n        require(_token != address(0x0), \\\"Stargate: _token cannot be 0x0\\\");\\n        require(_router != address(0x0), \\\"Stargate: _router cannot be 0x0\\\");\\n        poolId = _poolId;\\n        router = _router;\\n        token = _token;\\n        sharedDecimals = _sharedDecimals;\\n        decimals = uint8(_sharedDecimals);\\n        localDecimals = _localDecimals;\\n        convertRate = 10**(uint256(localDecimals).sub(sharedDecimals));\\n        totalWeight = 0;\\n        feeLibrary = _feeLibrary;\\n\\n        //delta algo related\\n        batched = false;\\n        defaultSwapMode = true;\\n        defaultLPMode = true;\\n    }\\n\\n    function getChainPathsLength() public view returns (uint256) {\\n        return chainPaths.length;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n\\n    function mint(address _to, uint256 _amountLD) external nonReentrant onlyRouter returns (uint256) {\\n        return _mintLocal(_to, _amountLD, true, true);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        bool newLiquidity\\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\\n        require(!stopSwap, \\\"Stargate: swap func stopped\\\");\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n\\n        uint256 amountSD = amountLDtoSD(_amountLD);\\n        uint256 minAmountSD = amountLDtoSD(_minAmountLD);\\n\\n        // request fee params from library\\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\\n\\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\\n        eqFeePool = eqFeePool.sub(s.eqReward);\\n        // update the new amount the user gets minus the fees\\n        s.amount = amountSD.sub(s.eqFee).sub(s.protocolFee).sub(s.lpFee);\\n        // users will also get the eqReward\\n        require(s.amount.add(s.eqReward) >= minAmountSD, \\\"Stargate: slippage too high\\\");\\n\\n        // behaviours\\n        //     - protocolFee: booked, stayed and withdrawn at remote.\\n        //     - eqFee: booked, stayed and withdrawn at remote.\\n        //     - lpFee: booked and stayed at remote, can be withdrawn anywhere\\n\\n        s.lkbRemove = amountSD.sub(s.lpFee).add(s.eqReward);\\n        // check for transfer solvency.\\n        require(cp.balance >= s.lkbRemove, \\\"Stargate: dst balance too low\\\");\\n        cp.balance = cp.balance.sub(s.lkbRemove);\\n\\n        if (newLiquidity) {\\n            deltaCredit = deltaCredit.add(amountSD).add(s.eqReward);\\n        } else if (s.eqReward > 0) {\\n            deltaCredit = deltaCredit.add(s.eqReward);\\n        }\\n\\n        // distribute credits on condition.\\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultSwapMode);\\n        }\\n\\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\\n        return s;\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function sendCredits(uint16 _dstChainId, uint256 _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        cp.lkb = cp.lkb.add(cp.credits);\\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\\n        c.credits = cp.credits;\\n        cp.credits = 0;\\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemRemote   ->                        swapRemote\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        address _from,\\n        uint256 _amountLP\\n    ) external nonReentrant onlyRouter {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 amountSD = _burnLocal(_from, _amountLP);\\n        //run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountLD);\\n    }\\n\\n    function instantRedeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        address _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n        uint256 _deltaCredit = deltaCredit; // sload optimization.\\n        uint256 _capAmountLP = _amountSDtoLP(_deltaCredit);\\n\\n        if (_amountLP > _capAmountLP) _amountLP = _capAmountLP;\\n\\n        amountSD = _burnLocal(_from, _amountLP);\\n        deltaCredit = _deltaCredit.sub(amountSD);\\n        uint256 amountLD = amountSDtoLD(amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit InstantRedeemLocal(_from, _amountLP, amountSD, _to);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocal(\\n        address _from,\\n        uint256 _amountLP,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        bytes calldata _to\\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\\n        require(_from != address(0x0), \\\"Stargate: _from cannot be 0x0\\\");\\n\\n        // safeguard.\\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \\\"Stargate: counter chainPath is not ready\\\");\\n        amountSD = _burnLocal(_from, _amountLP);\\n\\n        // run Delta\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(false);\\n        }\\n        emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // REMOTE CHAIN FUNCTIONS\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // sendCredits      ->                      creditChainPath\\n    function creditChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        CreditObj memory _c\\n    ) external nonReentrant onlyRouter {\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        cp.balance = cp.balance.add(_c.credits);\\n        if (cp.idealBalance != _c.idealBalance) {\\n            cp.idealBalance = _c.idealBalance;\\n        }\\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // swap             ->                      swapRemote\\n    function swapRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        SwapObj memory _s\\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\\n        // booking lpFee\\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\\n        // booking eqFee\\n        eqFeePool = eqFeePool.add(_s.eqFee);\\n        // booking stargateFee\\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\\n\\n        // update LKB\\n        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\\n\\n        // user receives the amount + the srcReward\\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\\n        _safeTransfer(token, _to, amountLD);\\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCallback(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _amountToMintSD\\n    ) external nonReentrant onlyRouter {\\n        if (_amountToMintSD > 0) {\\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\\n        }\\n\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        cp.lkb = cp.lkb.sub(_amountSD);\\n\\n        uint256 amountLD = amountSDtoLD(_amountSD);\\n        _safeTransfer(token, _to, amountLD);\\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\\n    }\\n\\n    // Local                                    Remote\\n    // -------                                  ---------\\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\\n    // redeemLocalCallback             <-\\n    function redeemLocalCheckOnRemote(\\n        uint16 _srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _amountSD\\n    ) external nonReentrant onlyRouter returns (uint256 swapAmount, uint256 mintAmount) {\\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\\n        if (_amountSD > cp.balance) {\\n            mintAmount = _amountSD - cp.balance;\\n            swapAmount = cp.balance;\\n            cp.balance = 0;\\n        } else {\\n            cp.balance = cp.balance.sub(_amountSD);\\n            swapAmount = _amountSD;\\n            mintAmount = 0;\\n        }\\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // DAO Calls\\n    function createChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _weight\\n    ) external onlyRouter {\\n        for (uint256 i = 0; i < chainPaths.length; ++i) {\\n            ChainPath memory cp = chainPaths[i];\\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\\n            require(!exists, \\\"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\\\");\\n        }\\n        totalWeight = totalWeight.add(_weight);\\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\\n        chainPaths.push(ChainPath(false, _dstChainId, _dstPoolId, _weight, 0, 0, 0, 0));\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setWeightForChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint16 _weight\\n    ) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\\n        cp.weight = _weight;\\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setFee(uint256 _mintFeeBP) external onlyRouter {\\n        require(_mintFeeBP <= BP_DENOMINATOR, \\\"Bridge: cum fees > 100%\\\");\\n        mintFeeBP = _mintFeeBP;\\n        emit FeesUpdated(mintFeeBP);\\n    }\\n\\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\\n        require(_feeLibraryAddr != address(0x0), \\\"Stargate: fee library cant be 0x0\\\");\\n        feeLibrary = _feeLibraryAddr;\\n        emit FeeLibraryUpdated(_feeLibraryAddr);\\n    }\\n\\n    function setSwapStop(bool _swapStop) external onlyRouter {\\n        stopSwap = _swapStop;\\n        emit StopSwapUpdated(_swapStop);\\n    }\\n\\n    function setDeltaParam(\\n        bool _batched,\\n        uint256 _swapDeltaBP,\\n        uint256 _lpDeltaBP,\\n        bool _defaultSwapMode,\\n        bool _defaultLPMode\\n    ) external onlyRouter {\\n        require(_swapDeltaBP <= BP_DENOMINATOR && _lpDeltaBP <= BP_DENOMINATOR, \\\"Stargate: wrong Delta param\\\");\\n        batched = _batched;\\n        swapDeltaBP = _swapDeltaBP;\\n        lpDeltaBP = _lpDeltaBP;\\n        defaultSwapMode = _defaultSwapMode;\\n        defaultLPMode = _defaultLPMode;\\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\\n    }\\n\\n    function callDelta(bool _fullMode) external onlyRouter {\\n        _delta(_fullMode);\\n    }\\n\\n    function activateChainPath(uint16 _dstChainId, uint256 _dstPoolId) external onlyRouter {\\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\\n        require(cp.ready == false, \\\"Stargate: chainPath is already active\\\");\\n        // this func will only be called once\\n        cp.ready = true;\\n    }\\n\\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\\n        if (protocolFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(protocolFeeBalance);\\n            protocolFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\\n        if (mintFeeBalance > 0) {\\n            uint256 amountOfLD = amountSDtoLD(mintFeeBalance);\\n            mintFeeBalance = 0;\\n            _safeTransfer(token, _to, amountOfLD);\\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL\\n    // Conversion Helpers\\n    //---------------------------------------------------------------------------\\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256) {\\n        return amountSDtoLD(_amountLPtoSD(_amountLP));\\n    }\\n\\n    function _amountLPtoSD(uint256 _amountLP) internal view returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant convert LPtoSD when totalSupply == 0\\\");\\n        return _amountLP.mul(totalLiquidity).div(totalSupply);\\n    }\\n\\n    function _amountSDtoLP(uint256 _amountSD) internal view returns (uint256) {\\n        require(totalLiquidity > 0, \\\"Stargate: cant convert SDtoLP when totalLiq == 0\\\");\\n        return _amountSD.mul(totalSupply).div(totalLiquidity);\\n    }\\n\\n    function amountSDtoLD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.mul(convertRate);\\n    }\\n\\n    function amountLDtoSD(uint256 _amount) internal view returns (uint256) {\\n        return _amount.div(convertRate);\\n    }\\n\\n    function getAndCheckCP(uint16 _dstChainId, uint256 _dstPoolId) internal view returns (ChainPath storage) {\\n        require(chainPaths.length > 0, \\\"Stargate: no chainpaths exist\\\");\\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function getChainPath(uint16 _dstChainId, uint256 _dstPoolId) external view returns (ChainPath memory) {\\n        ChainPath memory cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \\\"Stargate: local chainPath does not exist\\\");\\n        return cp;\\n    }\\n\\n    function _burnLocal(address _from, uint256 _amountLP) internal returns (uint256) {\\n        require(totalSupply > 0, \\\"Stargate: cant burn when totalSupply == 0\\\");\\n        uint256 amountOfLPTokens = balanceOf[_from];\\n        require(amountOfLPTokens >= _amountLP, \\\"Stargate: not enough LP tokens to burn\\\");\\n\\n        uint256 amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\\n        //subtract totalLiquidity accordingly\\n        totalLiquidity = totalLiquidity.sub(amountSD);\\n\\n        _burn(_from, _amountLP);\\n        emit Burn(_from, _amountLP, amountSD);\\n        return amountSD;\\n    }\\n\\n    function _delta(bool fullMode) internal {\\n        if (deltaCredit > 0 && totalWeight > 0) {\\n            uint256 cpLength = chainPaths.length;\\n            uint256[] memory deficit = new uint256[](cpLength);\\n            uint256 totalDeficit = 0;\\n\\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\\n            for (uint256 i = 0; i < cpLength; ++i) {\\n                ChainPath storage cp = chainPaths[i];\\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\\n                uint256 balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\\n                uint256 currLiq = cp.lkb.add(cp.credits);\\n                if (balLiq > currLiq) {\\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\\n                    deficit[i] = balLiq - currLiq;\\n                    totalDeficit = totalDeficit.add(deficit[i]);\\n                }\\n            }\\n\\n            // indicates how much delta credit is distributed\\n            uint256 spent;\\n\\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\\n            // run full Delta, allocate all credits\\n            if (totalDeficit == 0) {\\n                // only fullMode delta will allocate excess credits\\n                if (fullMode && deltaCredit > 0) {\\n                    // credit ChainPath by weights\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\\n                        uint256 amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\\n                        spent = spent.add(amtToCredit);\\n                        cp.credits = cp.credits.add(amtToCredit);\\n                    }\\n                } // else do nth\\n            } else if (totalDeficit <= deltaCredit) {\\n                if (fullMode) {\\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\\n                    uint256 excessCredit = deltaCredit - totalDeficit;\\n                    // algorithm steps 14-16: calculate credits\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            // credits = credits + deficit + remaining allocation based on weight\\n                            uint256 amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                } else {\\n                    // totalDeficit <= deltaCredit but not running fullMode\\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\\n                    for (uint256 i = 0; i < cpLength; ++i) {\\n                        if (deficit[i] > 0) {\\n                            ChainPath storage cp = chainPaths[i];\\n                            uint256 amtToCredit = deficit[i];\\n                            spent = spent.add(amtToCredit);\\n                            cp.credits = cp.credits.add(amtToCredit);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\\n                for (uint256 i = 0; i < cpLength; ++i) {\\n                    if (deficit[i] > 0) {\\n                        ChainPath storage cp = chainPaths[i];\\n                        uint256 proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\\n                        spent = spent.add(proportionalDeficit);\\n                        cp.credits = cp.credits.add(proportionalDeficit);\\n                    }\\n                }\\n            }\\n\\n            // deduct the amount of credit sent\\n            deltaCredit = deltaCredit.sub(spent);\\n        }\\n    }\\n\\n    function _mintLocal(\\n        address _to,\\n        uint256 _amountLD,\\n        bool _feesEnabled,\\n        bool _creditDelta\\n    ) internal returns (uint256 amountSD) {\\n        require(totalWeight > 0, \\\"Stargate: No ChainPaths exist\\\");\\n        amountSD = amountLDtoSD(_amountLD);\\n\\n        uint256 mintFeeSD = 0;\\n        if (_feesEnabled) {\\n            mintFeeSD = amountSD.mul(mintFeeBP).div(BP_DENOMINATOR);\\n            amountSD = amountSD.sub(mintFeeSD);\\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\\n        }\\n\\n        if (_creditDelta) {\\n            deltaCredit = deltaCredit.add(amountSD);\\n        }\\n\\n        uint256 amountLPTokens = amountSD;\\n        if (totalSupply != 0) {\\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\\n        }\\n        totalLiquidity = totalLiquidity.add(amountSD);\\n\\n        _mint(_to, amountLPTokens);\\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\\n\\n        // add to credits and call delta. short circuit to save gas\\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\\n            _delta(defaultLPMode);\\n        }\\n    }\\n\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    ) private {\\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Stargate: TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xff0ac7ffc5a5813fb1bce42222d7199f05546fb4b12f55fc3791b6607533f820\",\"license\":\"BUSL-1.1\"},\"contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// imports\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./Factory.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./Bridge.sol\\\";\\n\\n// interfaces\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IStargateRouter.sol\\\";\\nimport \\\"./interfaces/IStargateReceiver.sol\\\";\\n\\n// libraries\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract Router is IStargateRouter, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    //---------------------------------------------------------------------------\\n    // CONSTANTS\\n    uint8 internal constant TYPE_REDEEM_LOCAL_RESPONSE = 1;\\n    uint8 internal constant TYPE_REDEEM_LOCAL_CALLBACK_RETRY = 2;\\n    uint8 internal constant TYPE_SWAP_REMOTE_RETRY = 3;\\n\\n    //---------------------------------------------------------------------------\\n    // STRUCTS\\n    struct CachedSwap {\\n        address token;\\n        uint256 amountLD;\\n        address to;\\n        bytes payload;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VARIABLES\\n    Factory public factory; // used for creating pools\\n    address public protocolFeeOwner; // can call methods to pull Stargate fees collected in pools\\n    address public mintFeeOwner; // can call methods to pull mint fees collected in pools\\n    Bridge public bridge;\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => bytes))) public revertLookup; //[chainId][srcAddress][nonce]\\n    mapping(uint16 => mapping(bytes => mapping(uint256 => CachedSwap))) public cachedSwapLookup; //[chainId][srcAddress][nonce]\\n\\n    //---------------------------------------------------------------------------\\n    // EVENTS\\n    event Revert(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce);\\n    event CachedSwapSaved(\\n        uint16 chainId,\\n        bytes srcAddress,\\n        uint256 nonce,\\n        address token,\\n        uint256 amountLD,\\n        address to,\\n        bytes payload,\\n        bytes reason\\n    );\\n    event RevertRedeemLocal(\\n        uint16 srcChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        bytes to,\\n        uint256 redeemAmountSD,\\n        uint256 mintAmountSD,\\n        uint256 indexed nonce,\\n        bytes indexed srcAddress\\n    );\\n    event RedeemLocalCallback(\\n        uint16 srcChainId,\\n        bytes indexed srcAddress,\\n        uint256 indexed nonce,\\n        uint256 srcPoolId,\\n        uint256 dstPoolId,\\n        address to,\\n        uint256 amountSD,\\n        uint256 mintAmountSD\\n    );\\n\\n    //---------------------------------------------------------------------------\\n    // MODIFIERS\\n    modifier onlyBridge() {\\n        require(msg.sender == address(bridge), \\\"Bridge: caller must be Bridge.\\\");\\n        _;\\n    }\\n\\n    constructor() {}\\n\\n    function setBridgeAndFactory(Bridge _bridge, Factory _factory) external onlyOwner {\\n        require(address(bridge) == address(0x0) && address(factory) == address(0x0), \\\"Stargate: bridge and factory already initialized\\\"); // 1 time only\\n        require(address(_bridge) != address(0x0), \\\"Stargate: bridge cant be 0x0\\\");\\n        require(address(_factory) != address(0x0), \\\"Stargate: factory cant be 0x0\\\");\\n\\n        bridge = _bridge;\\n        factory = _factory;\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // VIEWS\\n    function _getPool(uint256 _poolId) internal view returns (Pool pool) {\\n        pool = factory.getPool(_poolId);\\n        require(address(pool) != address(0x0), \\\"Stargate: Pool does not exist\\\");\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // INTERNAL\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) private {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Stargate: TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // LOCAL CHAIN FUNCTIONS\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external override nonReentrant {\\n        Pool pool = _getPool(_poolId);\\n        uint256 convertRate = pool.convertRate();\\n        _amountLD = _amountLD.div(convertRate).mul(convertRate);\\n        _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\\n        pool.mint(_to, _amountLD);\\n    }\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable override nonReentrant {\\n        require(_amountLD > 0, \\\"Stargate: cannot swap 0\\\");\\n        require(_refundAddress != address(0x0), \\\"Stargate: _refundAddress cannot be 0x0\\\");\\n        Pool.SwapObj memory s;\\n        Pool.CreditObj memory c;\\n        {\\n            Pool pool = _getPool(_srcPoolId);\\n            {\\n                uint256 convertRate = pool.convertRate();\\n                _amountLD = _amountLD.div(convertRate).mul(convertRate);\\n            }\\n\\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, _amountLD, _minAmountLD, true);\\n            _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\\n        }\\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, _payload);\\n    }\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable override nonReentrant {\\n        require(_refundAddress != address(0x0), \\\"Stargate: _refundAddress cannot be 0x0\\\");\\n        require(_amountLP > 0, \\\"Stargate: not enough lp to redeemRemote\\\");\\n        Pool.SwapObj memory s;\\n        Pool.CreditObj memory c;\\n        {\\n            Pool pool = _getPool(_srcPoolId);\\n            uint256 amountLD = pool.amountLPtoLD(_amountLP);\\n            // perform a swap with no liquidity\\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, amountLD, _minAmountLD, false);\\n            pool.redeemRemote(_dstChainId, _dstPoolId, msg.sender, _amountLP);\\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\\n        }\\n        // equal to a swap, with no payload (\\\"0x\\\") no dstGasForCall 0\\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, \\\"\\\");\\n    }\\n\\n    function instantRedeemLocal(\\n        uint16 _srcPoolId,\\n        uint256 _amountLP,\\n        address _to\\n    ) external override nonReentrant returns (uint256 amountSD) {\\n        require(_amountLP > 0, \\\"Stargate: not enough lp to redeem\\\");\\n        Pool pool = _getPool(_srcPoolId);\\n        amountSD = pool.instantRedeemLocal(msg.sender, _amountLP, _to);\\n    }\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable override nonReentrant {\\n        require(_refundAddress != address(0x0), \\\"Stargate: _refundAddress cannot be 0x0\\\");\\n        Pool pool = _getPool(_srcPoolId);\\n        require(_amountLP > 0, \\\"Stargate: not enough lp to redeem\\\");\\n        uint256 amountSD = pool.redeemLocal(msg.sender, _amountLP, _dstChainId, _dstPoolId, _to);\\n        require(amountSD > 0, \\\"Stargate: not enough lp to redeem with amountSD\\\");\\n\\n        Pool.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\\n        bridge.redeemLocal{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, amountSD, _to, _lzTxParams);\\n    }\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable override nonReentrant {\\n        require(_refundAddress != address(0x0), \\\"Stargate: _refundAddress cannot be 0x0\\\");\\n        Pool pool = _getPool(_srcPoolId);\\n        Pool.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\\n        bridge.sendCredits{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c);\\n    }\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        Router.lzTxObj memory _lzTxParams\\n    ) external view override returns (uint256, uint256) {\\n        return bridge.quoteLayerZeroFee(_dstChainId, _functionType, _toAddress, _transferAndCallPayload, _lzTxParams);\\n    }\\n\\n    function revertRedeemLocal(\\n        uint16 _dstChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce,\\n        address payable _refundAddress,\\n        lzTxObj memory _lzTxParams\\n    ) external payable {\\n        require(_refundAddress != address(0x0), \\\"Stargate: _refundAddress cannot be 0x0\\\");\\n        bytes memory payload = revertLookup[_dstChainId][_srcAddress][_nonce];\\n        require(payload.length > 0, \\\"Stargate: no retry revert\\\");\\n        {\\n            uint8 functionType;\\n            assembly {\\n                functionType := mload(add(payload, 32))\\n            }\\n            require(functionType == TYPE_REDEEM_LOCAL_RESPONSE, \\\"Stargate: invalid function type\\\");\\n        }\\n\\n        // empty it\\n        revertLookup[_dstChainId][_srcAddress][_nonce] = \\\"\\\";\\n\\n        uint256 srcPoolId;\\n        uint256 dstPoolId;\\n        assembly {\\n            srcPoolId := mload(add(payload, 64))\\n            dstPoolId := mload(add(payload, 96))\\n        }\\n\\n        Pool.CreditObj memory c;\\n        {\\n            Pool pool = _getPool(dstPoolId);\\n            c = pool.sendCredits(_dstChainId, srcPoolId);\\n        }\\n\\n        bridge.redeemLocalCallback{value: msg.value}(_dstChainId, _refundAddress, c, _lzTxParams, payload);\\n    }\\n\\n    function retryRevert(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external payable {\\n        bytes memory payload = revertLookup[_srcChainId][_srcAddress][_nonce];\\n        require(payload.length > 0, \\\"Stargate: no retry revert\\\");\\n\\n        // empty it\\n        revertLookup[_srcChainId][_srcAddress][_nonce] = \\\"\\\";\\n\\n        uint8 functionType;\\n        assembly {\\n            functionType := mload(add(payload, 32))\\n        }\\n\\n        if (functionType == TYPE_REDEEM_LOCAL_CALLBACK_RETRY) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, address to, uint256 amountSD, uint256 mintAmountSD) = abi.decode(\\n                payload,\\n                (uint8, uint256, uint256, address, uint256, uint256)\\n            );\\n            _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, to, amountSD, mintAmountSD);\\n        }\\n        // for retrying the swapRemote. if it fails again, retry\\n        else if (functionType == TYPE_SWAP_REMOTE_RETRY) {\\n            (, uint256 srcPoolId, uint256 dstPoolId, uint256 dstGasForCall, address to, Pool.SwapObj memory s, bytes memory p) = abi.decode(\\n                payload,\\n                (uint8, uint256, uint256, uint256, address, Pool.SwapObj, bytes)\\n            );\\n            _swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, to, s, p);\\n        } else {\\n            revert(\\\"Stargate: invalid function type\\\");\\n        }\\n    }\\n\\n    function clearCachedSwap(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external {\\n        CachedSwap memory cs = cachedSwapLookup[_srcChainId][_srcAddress][_nonce];\\n        require(cs.to != address(0x0), \\\"Stargate: cache already cleared\\\");\\n        // clear the data\\n        cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(address(0x0), 0, address(0x0), \\\"\\\");\\n        IStargateReceiver(cs.to).sgReceive(_srcChainId, _srcAddress, _nonce, cs.token, cs.amountLD, cs.payload);\\n    }\\n\\n    function creditChainPath(\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _srcPoolId,\\n        Pool.CreditObj memory _c\\n    ) external onlyBridge {\\n        Pool pool = _getPool(_srcPoolId);\\n        pool.creditChainPath(_dstChainId, _dstPoolId, _c);\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // REMOTE CHAIN FUNCTIONS\\n    function redeemLocalCheckOnRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint256 _amountSD,\\n        bytes calldata _to\\n    ) external onlyBridge {\\n        Pool pool = _getPool(_dstPoolId);\\n        try pool.redeemLocalCheckOnRemote(_srcChainId, _srcPoolId, _amountSD) returns (uint256 redeemAmountSD, uint256 mintAmountSD) {\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\\n                TYPE_REDEEM_LOCAL_RESPONSE,\\n                _srcPoolId,\\n                _dstPoolId,\\n                redeemAmountSD,\\n                mintAmountSD,\\n                _to\\n            );\\n            emit RevertRedeemLocal(_srcChainId, _srcPoolId, _dstPoolId, _to, redeemAmountSD, mintAmountSD, _nonce, _srcAddress);\\n        } catch {\\n            // if the func fail, return [swapAmount: 0, mintAMount: _amountSD]\\n            // swapAmount represents the amount of chainPath balance deducted on the remote side, which because the above tx failed, should be 0\\n            // mintAmount is the full amount of tokens the user attempted to redeem on the src side, which gets converted back into the lp amount\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REDEEM_LOCAL_RESPONSE, _srcPoolId, _dstPoolId, 0, _amountSD, _to);\\n            emit Revert(TYPE_REDEEM_LOCAL_RESPONSE, _srcChainId, _srcAddress, _nonce);\\n        }\\n    }\\n\\n    function redeemLocalCallback(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _mintAmountSD\\n    ) external onlyBridge {\\n        _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\\n    }\\n\\n    function _redeemLocalCallback(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address _to,\\n        uint256 _amountSD,\\n        uint256 _mintAmountSD\\n    ) internal {\\n        Pool pool = _getPool(_dstPoolId);\\n        try pool.redeemLocalCallback(_srcChainId, _srcPoolId, _to, _amountSD, _mintAmountSD) {} catch {\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\\n                TYPE_REDEEM_LOCAL_CALLBACK_RETRY,\\n                _srcPoolId,\\n                _dstPoolId,\\n                _to,\\n                _amountSD,\\n                _mintAmountSD\\n            );\\n            emit Revert(TYPE_REDEEM_LOCAL_CALLBACK_RETRY, _srcChainId, _srcAddress, _nonce);\\n        }\\n        emit RedeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\\n    }\\n\\n    function swapRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint256 _dstGasForCall,\\n        address _to,\\n        Pool.SwapObj memory _s,\\n        bytes memory _payload\\n    ) external onlyBridge {\\n        _swapRemote(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _dstGasForCall, _to, _s, _payload);\\n    }\\n\\n    function _swapRemote(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint256 _dstGasForCall,\\n        address _to,\\n        Pool.SwapObj memory _s,\\n        bytes memory _payload\\n    ) internal {\\n        Pool pool = _getPool(_dstPoolId);\\n        // first try catch the swap remote\\n        try pool.swapRemote(_srcChainId, _srcPoolId, _to, _s) returns (uint256 amountLD) {\\n            if (_payload.length > 0) {\\n                // then try catch the external contract call\\n                try IStargateReceiver(_to).sgReceive{gas: _dstGasForCall}(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _payload) {\\n                    // do nothing\\n                } catch (bytes memory reason) {\\n                    cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(pool.token(), amountLD, _to, _payload);\\n                    emit CachedSwapSaved(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _to, _payload, reason);\\n                }\\n            }\\n        } catch {\\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\\n                TYPE_SWAP_REMOTE_RETRY,\\n                _srcPoolId,\\n                _dstPoolId,\\n                _dstGasForCall,\\n                _to,\\n                _s,\\n                _payload\\n            );\\n            emit Revert(TYPE_SWAP_REMOTE_RETRY, _srcChainId, _srcAddress, _nonce);\\n        }\\n    }\\n\\n    //---------------------------------------------------------------------------\\n    // DAO Calls\\n    function createPool(\\n        uint256 _poolId,\\n        address _token,\\n        uint8 _sharedDecimals,\\n        uint8 _localDecimals,\\n        string memory _name,\\n        string memory _symbol\\n    ) external onlyOwner returns (address) {\\n        require(_token != address(0x0), \\\"Stargate: _token cannot be 0x0\\\");\\n        return factory.createPool(_poolId, _token, _sharedDecimals, _localDecimals, _name, _symbol);\\n    }\\n\\n    function createChainPath(\\n        uint256 _poolId,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint256 _weight\\n    ) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.createChainPath(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function activateChainPath(\\n        uint256 _poolId,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId\\n    ) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.activateChainPath(_dstChainId, _dstPoolId);\\n    }\\n\\n    function setWeightForChainPath(\\n        uint256 _poolId,\\n        uint16 _dstChainId,\\n        uint256 _dstPoolId,\\n        uint16 _weight\\n    ) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setWeightForChainPath(_dstChainId, _dstPoolId, _weight);\\n    }\\n\\n    function setProtocolFeeOwner(address _owner) external onlyOwner {\\n        require(_owner != address(0x0), \\\"Stargate: _owner cannot be 0x0\\\");\\n        protocolFeeOwner = _owner;\\n    }\\n\\n    function setMintFeeOwner(address _owner) external onlyOwner {\\n        require(_owner != address(0x0), \\\"Stargate: _owner cannot be 0x0\\\");\\n        mintFeeOwner = _owner;\\n    }\\n\\n    function setFees(uint256 _poolId, uint256 _mintFeeBP) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setFee(_mintFeeBP);\\n    }\\n\\n    function setFeeLibrary(uint256 _poolId, address _feeLibraryAddr) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setFeeLibrary(_feeLibraryAddr);\\n    }\\n\\n    function setSwapStop(uint256 _poolId, bool _swapStop) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setSwapStop(_swapStop);\\n    }\\n\\n    function setDeltaParam(\\n        uint256 _poolId,\\n        bool _batched,\\n        uint256 _swapDeltaBP,\\n        uint256 _lpDeltaBP,\\n        bool _defaultSwapMode,\\n        bool _defaultLPMode\\n    ) external onlyOwner {\\n        Pool pool = _getPool(_poolId);\\n        pool.setDeltaParam(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\\n    }\\n\\n    function callDelta(uint256 _poolId, bool _fullMode) external {\\n        Pool pool = _getPool(_poolId);\\n        pool.callDelta(_fullMode);\\n    }\\n\\n    function withdrawMintFee(uint256 _poolId, address _to) external {\\n        require(mintFeeOwner == msg.sender, \\\"Stargate: only mintFeeOwner\\\");\\n        Pool pool = _getPool(_poolId);\\n        pool.withdrawMintFeeBalance(_to);\\n    }\\n\\n    function withdrawProtocolFee(uint256 _poolId, address _to) external {\\n        require(protocolFeeOwner == msg.sender, \\\"Stargate: only protocolFeeOwner\\\");\\n        Pool pool = _getPool(_poolId);\\n        pool.withdrawProtocolFeeBalance(_to);\\n    }\\n}\\n\",\"keccak256\":\"0xebc9676df0345bd2961d97d96e3d3504df272631fe1691b976c330673b6ad822\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateFeeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\nimport \\\"../Pool.sol\\\";\\n\\ninterface IStargateFeeLibrary {\\n    function getFees(\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        uint16 _dstChainId,\\n        address _from,\\n        uint256 _amountSD\\n    ) external returns (Pool.SwapObj memory s);\\n\\n    function getVersion() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x712bc424a034519d61c5a1bbbf3f19fd34dfa51908421775c613f0a44e612d63\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x426e44d3907557a4cc3938894f5c42620d553603900c855ccd7cd417b3a75e79\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(\\n        uint16 _srcPoolId,\\n        uint256 _amountLP,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xe560f0b426fdcd13d3add6bab4a18aed16fcaa99ea7d785e4a9d96ccc66f2ca3\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620031d3380380620031d3833981016040819052620000349162000125565b60006200004062000104565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038216620000bc5760405162461bcd60e51b8152600401620000b39062000193565b60405180910390fd5b6001600160a01b038116620000e55760405162461bcd60e51b8152600401620000b3906200015c565b6001600160601b0319606092831b8116608052911b1660a052620001dd565b3390565b80516001600160a01b03811681146200012057600080fd5b919050565b6000806040838503121562000138578182fd5b620001438362000108565b9150620001536020840162000108565b90509250929050565b6020808252601f908201527f53746172676174653a205f726f757465722063616e6e6f742062652030783000604082015260600190565b6020808252602a908201527f53746172676174653a205f6c617965725a65726f456e64706f696e742063616e60408201526906e6f74206265203078360b41b606082015260800190565b60805160601c60a05160601c612f6d62000266600039806104ff5280610583528061064a528061071552806107ac528061086452806108fb5280610d795280610fbf5280611172528061122d52806116285250806103e6528061099c5280610a375280610bfd5280610d395280610e7a52806113cc52806117ad52806118795250612f6d6000f3fe6080604052600436106101345760003560e01c80638c7ae0fc116100ab578063c213dc2b1161006f578063c213dc2b14610326578063cbed8b9c14610346578063d7d3c3b914610366578063f2fde38b14610386578063f887ea40146103a6578063fc869108146103bb57610134565b80638c7ae0fc1461029c5780638da5cb5b146102be5780638e3b5d6a146102d357806396aae4af14610300578063be9d40ac1461031357610134565b806310ddb137116100fd57806310ddb137146102015780633cef94b91461022157806342d65a8d1461023457806343b180091461025457806351156e7314610274578063715018a61461028757610134565b80621d356714610139578063024220541461015b57806307968db11461019157806307e0db17146101b35780630a512369146101d3575b600080fd5b34801561014557600080fd5b50610159610154366004611e98565b6103db565b005b34801561016757600080fd5b5061017b61017636600461218e565b61097d565b6040516101889190612be6565b60405180910390f35b34801561019d57600080fd5b506101a661099a565b6040516101889190612705565b3480156101bf57600080fd5b506101596101ce366004611d99565b6109be565b3480156101df57600080fd5b506101f36101ee3660046121c4565b610a9a565b604051610188929190612bef565b34801561020d57600080fd5b5061015961021c366004611d99565b610cc0565b61015961022f3660046120d6565b610d6e565b34801561024057600080fd5b5061015961024f366004611e48565b610e01565b34801561026057600080fd5b5061015961026f366004611e48565b610eea565b610159610282366004611fe2565b610fb4565b34801561029357600080fd5b50610159611051565b3480156102a857600080fd5b506102b16110b5565b6040516101889190612732565b3480156102ca57600080fd5b506101a66110be565b3480156102df57600080fd5b506102f36102ee366004611d99565b6110cd565b604051610188919061273d565b61015961030e366004611db3565b611167565b610159610321366004611f89565b611222565b34801561033257600080fd5b50610159610341366004611d61565b6112de565b34801561035257600080fd5b50610159610361366004611f1d565b611353565b34801561037257600080fd5b50610159610381366004611d21565b611442565b34801561039257600080fd5b506101596103a1366004611d05565b611524565b3480156103b257600080fd5b506101a6611626565b3480156103c757600080fd5b506101596103d6366004612276565b61164a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461042c5760405162461bcd60e51b815260040161042390612787565b60405180910390fd5b600160008561ffff1661ffff1681526020019081526020016000208054600181600116156101000203166002900490508351148015610499575061ffff8416600090815260016020526040908190209051610487919061263a565b60405180910390208380519060200120145b6104b55760405162461bcd60e51b815260040161042390612812565b602081015160ff81166001141561061c576000806000806000806000888060200190518101906104e5919061241e565b9750975097509750975097509750506000601483015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a18fa8048e8a8a896040518563ffffffff1660e01b815260040161054f9493929190612bc0565b600060405180830381600087803b15801561056957600080fd5b505af115801561057d573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632f9255558e8e8e8c8c8c888c8b6040518a63ffffffff1660e01b81526004016105dd999897969594939291906129cb565b600060405180830381600087803b1580156105f757600080fd5b505af115801561060b573d6000803e3d6000fd5b505050505050505050505050610976565b60ff8116600214156106d45760008060008480602001905181019061064191906122e2565b935093509350507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a18fa804898585856040518563ffffffff1660e01b815260040161069a9493929190612bc0565b600060405180830381600087803b1580156106b457600080fd5b505af11580156106c8573d6000803e3d6000fd5b50505050505050610976565b60ff81166003141561082f57600080600080600080878060200190518101906106fd91906123a6565b965096509650965096509650506000601482015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a18fa8048d8989896040518563ffffffff1660e01b81526004016107659493929190612bc0565b600060405180830381600087803b15801561077f57600080fd5b505af1158015610793573d6000803e3d6000fd5b5050604051630fee425360e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250637f72129891506107f1908f908f908f908d908d9089908d908d90600401612968565b600060405180830381600087803b15801561080b57600080fd5b505af115801561081f573d6000803e3d6000fd5b5050505050505050505050610976565b60ff81166004141561097657600080600080600086806020019051810190610857919061232b565b95509550955095509550507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a18fa8048b8787876040518563ffffffff1660e01b81526004016108b49493929190612bc0565b600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b5050604051630403bce560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250630403bce5915061093e908d908d908d908b908b908a908a90600401612a4e565b600060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b5050505050505050505b5050505050565b600260209081526000928352604080842090915290825290205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109c6611705565b6001600160a01b03166109d76110be565b6001600160a01b031614610a20576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b6040516307e0db1760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906307e0db1790610a6c9084906004016128c1565b600060405180830381600087803b158015610a8657600080fd5b505af1158015610976573d6000803e3d6000fd5b60408051602080820183526000808352835180850190945260018085529184018290529283929160ff8b161415610b3f5760006040518060c001604052806001815260200160018152602001600181526020016001815260200160018152602001600181525090506001600080600085858f8f8f8f604051602001610b289a99989796959493929190612bfd565b604051602081830303815290604052925050610bec565b60ff8a1660021415610b7a57600260008083604051602001610b649493929190612c78565b6040516020818303038152906040529150610bec565b60ff8a1660031415610ba8576003600080836000808e8e604051602001610b64989796959493929190612ce4565b60ff8a1660041415610bd45760046000808360008d8d604051602001610b649796959493929190612c9f565b60405162461bcd60e51b815260040161042390612849565b6000610bf98c8c88611709565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340a7bb108d3086600360009054906101000a900460ff16866040518663ffffffff1660e01b8152600401610c5e9594939291906128ed565b604080518083038186803b158015610c7557600080fd5b505afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad91906122a3565b9450945050505097509795505050505050565b610cc8611705565b6001600160a01b0316610cd96110be565b6001600160a01b031614610d22576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b6040516310ddb13760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906310ddb13790610a6c9084906004016128c1565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610db65760405162461bcd60e51b81526004016104239061288c565b60006004898988888888604051602001610dd69796959493929190612d67565b6040516020818303038152906040529050610df58a600489858561179a565b50505050505050505050565b610e09611705565b6001600160a01b0316610e1a6110be565b6001600160a01b031614610e63576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610eb390869086908690600401612941565b600060405180830381600087803b158015610ecd57600080fd5b505af1158015610ee1573d6000803e3d6000fd5b50505050505050565b610ef2611705565b6001600160a01b0316610f036110be565b6001600160a01b031614610f4c576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b61ffff83166000908152600160208190526040909120546002918116156101000260001901160415610f905760405162461bcd60e51b815260040161042390612750565b61ffff83166000908152600160205260409020610fae9083836119f4565b50505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ffc5760405162461bcd60e51b81526004016104239061288c565b8451604051600091611024916001918e918e91908d908d908c908c908c908c90602001612de5565b60405160208183030381529060405290506110438c60018b898561179a565b505050505050505050505050565b611059611705565b6001600160a01b031661106a6110be565b6001600160a01b0316146110b3576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b565b60035460ff1681565b6000546001600160a01b031690565b60016020818152600092835260409283902080548451600294821615610100026000190190911693909304601f810183900483028401830190945283835291929083018282801561115f5780601f106111345761010080835404028352916020019161115f565b820191906000526020600020905b81548152906001019060200180831161114257829003601f168201915b505050505081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111af5760405162461bcd60e51b81526004016104239061288c565b60606000806000806000868060200190518101906111cd9190612533565b9550955095509550955050600384868b8686866040516020016111f69796959493929190612da3565b6040516020818303038152906040529550505050505061121a86600387868561179a565b505050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461126a5760405162461bcd60e51b81526004016104239061288c565b600060028585846040516020016112849493929190612d42565b604051602081830303815290604052905060006040518060600160405280600081526020016000815260200160405180604001604052806002815260200161060f60f31b8152508152509050610ee187600286848661179a565b6112e6611705565b6001600160a01b03166112f76110be565b6001600160a01b031614611340576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b6003805460ff1916911515919091179055565b61135b611705565b6001600160a01b031661136c6110be565b6001600160a01b0316146113b5576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906114099088908890889088908890600401612b87565b600060405180830381600087803b15801561142357600080fd5b505af1158015611437573d6000803e3d6000fd5b505050505050505050565b61144a611705565b6001600160a01b031661145b6110be565b6001600160a01b0316146114a4576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b3906114d29085908590600401612719565b602060405180830381600087803b1580156114ec57600080fd5b505af1158015611500573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190611d7d565b61152c611705565b6001600160a01b031661153d6110be565b6001600160a01b031614611586576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b6001600160a01b0381166115cb5760405162461bcd60e51b8152600401808060200182810382526026815260200180612ef26026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b611652611705565b6001600160a01b03166116636110be565b6001600160a01b0316146116ac576040805162461bcd60e51b81526020600482018190526024820152600080516020612f18833981519152604482015290519081900360640190fd5b60018260ff16101580156116c4575060048260ff1611155b6116e05760405162461bcd60e51b8152600401610423906127db565b61ffff909216600090815260026020908152604080832060ff90941683529290522055565b3390565b60408082015160140151825161ffff861660009081526002602090815284822060ff8816835290529283205460609384939290916117469161192c565b90506000856020015111801561176457506001600160a01b03821615155b156117835761177c818660200151876040015161198d565b925061178f565b61178c816119c3565b92505b509095945050505050565b60006117a7868685611709565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a14574888306040518363ffffffff1660e01b81526004016117f99291906128d0565b60206040518083038186803b15801561181157600080fd5b505afa158015611825573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184991906122c6565b61ffff8816600090815260016020819052604091829020915162c5803160e81b8152920192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c58031009134916118b8918c9189908c9030908b90600401612aac565b6000604051808303818588803b1580156118d157600080fd5b505af11580156118e5573d6000803e3d6000fd5b50505050507f8d3ee0df6a4b7e82a7f20a763f1c6826e6176323e655af64f32318827d2112d4868260405161191b929190612e0f565b60405180910390a150505050505050565b600082820183811015611986576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6040516060906002906119aa9082908790879087906020016126c7565b6040516020818303038152906040529150509392505050565b6040516060906001906119dc90829085906020016126aa565b6040516020818303038152906040529150505b919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611a2a5760008555611a70565b82601f10611a435782800160ff19823516178555611a70565b82800160010185558215611a70579182015b82811115611a70578235825591602001919060010190611a55565b50611a7c929150611a80565b5090565b5b80821115611a7c5760008155600101611a81565b80356119ef81612ea7565b60008083601f840112611ab1578182fd5b5081356001600160401b03811115611ac7578182fd5b602083019150836020828501011115611adf57600080fd5b9250929050565b600082601f830112611af6578081fd5b8135611b09611b0482612e4e565b612e2b565b818152846020838601011115611b1d578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611b47578081fd5b8151611b55611b0482612e4e565b818152846020838601011115611b69578283fd5b611b7a826020830160208701612e7b565b949350505050565b600060408284031215611b93578081fd5b604051604081018181106001600160401b0382111715611baf57fe5b604052823581526020928301359281019290925250919050565b600060408284031215611bda578081fd5b604051604081018181106001600160401b0382111715611bf657fe5b604052825181526020928301519281019290925250919050565b600060c08284031215611c21578081fd5b60405160c081018181106001600160401b0382111715611c3d57fe5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b600060608284031215611c93578081fd5b604051606081016001600160401b038282108183111715611cb057fe5b8160405282935084358352602085013560208401526040850135915080821115611cd957600080fd5b50611ce685828601611ae6565b6040830152505092915050565b803561ffff811681146119ef57600080fd5b600060208284031215611d16578081fd5b813561198681612ea7565b600080600060608486031215611d35578182fd5b8335611d4081612ea7565b92506020840135611d5081612ea7565b929592945050506040919091013590565b600060208284031215611d72578081fd5b813561198681612ebf565b600060208284031215611d8e578081fd5b815161198681612ebf565b600060208284031215611daa578081fd5b61198682611cf3565b600080600080600060c08688031215611dca578283fd5b611dd386611cf3565b94506020860135611de381612ea7565b9350611df28760408801611b82565b925060808601356001600160401b0380821115611e0d578283fd5b611e1989838a01611c82565b935060a0880135915080821115611e2e578283fd5b50611e3b88828901611ae6565b9150509295509295909350565b600080600060408486031215611e5c578081fd5b611e6584611cf3565b925060208401356001600160401b03811115611e7f578182fd5b611e8b86828701611aa0565b9497909650939450505050565b60008060008060808587031215611ead578182fd5b611eb685611cf3565b935060208501356001600160401b0380821115611ed1578384fd5b611edd88838901611ae6565b945060408701359150611eef82612ecd565b90925060608601359080821115611f04578283fd5b50611f1187828801611ae6565b91505092959194509250565b600080600080600060808688031215611f34578283fd5b611f3d86611cf3565b9450611f4b60208701611cf3565b93506040860135925060608601356001600160401b03811115611f6c578182fd5b611f7888828901611aa0565b969995985093965092949392505050565b600080600080600060c08688031215611fa0578283fd5b611fa986611cf3565b945060208601359350604086013592506060860135611fc781612ea7565b9150611fd68760808801611b82565b90509295509295909350565b60008060008060008060008060008060006101e08c8e031215612003578889fd5b61200c8c611cf3565b9a5060208c0135995060408c0135985061202860608d01611a95565b97506120378d60808e01611b82565b96506120468d60c08e01611c10565b95506001600160401b03806101808e01351115612061578586fd5b6120728e6101808f01358f01611c82565b9550806101a08e01351115612085578485fd5b6120968e6101a08f01358f01611aa0565b90955093506101c08d01358110156120ac578283fd5b506120be8d6101c08e01358e01611aa0565b81935080925050509295989b509295989b9093969950565b60008060008060008060008060006101208a8c0312156120f4578283fd5b6120fd8a611cf3565b985060208a0135975060408a0135965060608a013561211b81612ea7565b955061212a8b60808c01611b82565b945060c08a0135935060e08a01356001600160401b038082111561214c578485fd5b6121588d838e01611aa0565b90955093506101008c0135915080821115612171578283fd5b5061217e8c828d01611c82565b9150509295985092959850929598565b600080604083850312156121a0578182fd5b6121a983611cf3565b915060208301356121b981612ee2565b809150509250929050565b600080600080600080600060a0888a0312156121de578081fd5b6121e788611cf3565b965060208801356121f781612ee2565b955060408801356001600160401b0380821115612212578283fd5b61221e8b838c01611aa0565b909750955060608a0135915080821115612236578283fd5b6122428b838c01611aa0565b909550935060808a013591508082111561225a578283fd5b506122678a828b01611c82565b91505092959891949750929550565b60008060006060848603121561228a578081fd5b61229384611cf3565b92506020840135611d5081612ee2565b600080604083850312156122b5578182fd5b505080516020909101519092909150565b6000602082840312156122d7578081fd5b815161198681612ecd565b60008060008060a085870312156122f7578182fd5b845161230281612ee2565b60208601516040870151919550935091506123208660608701611bc9565b905092959194509250565b60008060008060008060e08789031215612343578384fd5b865161234e81612ee2565b602088015160408901519197509550935061236c8860608901611bc9565b925060a0870151915060c08701516001600160401b0381111561238d578182fd5b61239989828a01611b37565b9150509295509295509295565b6000806000806000806000610100888a0312156123c1578081fd5b87516123cc81612ee2565b602089015160408a0151919850965094506123ea8960608a01611bc9565b935060a0880151925060c0880151915060e08801516001600160401b03811115612412578182fd5b6122678a828b01611b37565b600080600080600080600080888a036101c081121561243b578283fd5b895161244681612ee2565b8099505060208a0151975060408a0151965060608a0151955061246c8b60808c01611bc9565b945060c060bf198201121561247f578283fd5b5060405160c081016001600160401b03828210818311171561249d57fe5b604082815260c08d0151845260e08d015160208501526101008d0151908401526101208c015160608401526101408c015160808401526101608c015160a08401526101808c0151929550808311156124f3578485fd5b6124ff8d848e01611b37565b94506101a08c0151925080831115612515578384fd5b50506125238b828c01611b37565b9150509295985092959890939650565b60008060008060008060c0878903121561254b578384fd5b865161255681612ee2565b809650506020870151945060408701519350606087015192506080870151915060a08701516001600160401b0381111561238d578182fd5b6001600160a01b03169052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526125dd816020860160208601612e7b565b601f01601f19169290920160200192915050565b80518252602090810151910152565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b600080835460018082166000811461265957600181146126705761269f565b60ff198316865260028304607f168601935061269f565b600283048786526020808720875b838110156126975781548a82015290850190820161267e565b505050860193505b509195945050505050565b60f09290921b6001600160f01b0319168252600282015260220190565b600061ffff60f01b8660f01b16825284600283015283602283015282516126f5816042850160208701612e7b565b9190910160420195945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60006020825261198660208301846125c5565b6020808252601d908201527f53746172676174653a2042726964676520616c72656164792073657421000000604082015260600190565b60208082526034908201527f53746172676174653a206f6e6c79204c617965725a65726f20656e64706f696e604082015273742063616e2063616c6c206c7a5265636569766560601b606082015260800190565b6020808252601f908201527f53746172676174653a20696e76616c6964205f66756e6374696f6e5479706500604082015260600190565b6020808252601f908201527f53746172676174653a2062726964676520646f6573206e6f74206d6174636800604082015260600190565b60208082526023908201527f53746172676174653a20756e737570706f727465642066756e6374696f6e207460408201526279706560e81b606082015260800190565b6020808252818101527f53746172676174653a2063616c6c6572206d75737420626520526f757465722e604082015260600190565b61ffff91909116815260200190565b61ffff9290921682526001600160a01b0316602082015260400190565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061291b908301866125c5565b8415156060840152828103608084015261293581856125c5565b98975050505050505050565b600061ffff851682526040602083015261295f60408301848661259b565b95945050505050565b600061010061ffff8b1683528060208401526129868184018b6125c5565b6001600160401b039990991660408401525050606081019590955260808501939093526001600160a01b039190911660a084015260c083015260e09091015292915050565b60006101c061ffff8c1683528060208401526129e98184018c6125c5565b6001600160401b038b166040850152606084018a90526080840189905260a084018890526001600160a01b03871660c08501529050612a2b60e0840186612600565b8281036101a0840152612a3e81856125c5565b9c9b505050505050505050505050565b600061ffff8916825260e06020830152612a6b60e08301896125c5565b6001600160401b03881660408401528660608401528560808401528460a084015282810360c0840152612a9e81856125c5565b9a9950505050505050505050565b600060c0820161ffff89168352602060c081850152828954600180821660008114612ade5760018114612afd57612b35565b60028304607f16865260ff19831660e089015261010088019350612b35565b60028304808752612b0d8e612e6f565b885b82811015612b2b5781548b820160e00152908401908701612b0f565b8a0160e001955050505b5050508481036040860152612b4a818a6125c5565b92505050612b5b606084018761258e565b612b68608084018661258e565b82810360a0840152612b7a81856125c5565b9998505050505050505050565b600061ffff808816835280871660208401525084604083015260806060830152612bb560808301848661259b565b979650505050505050565b61ffff85168152602081018490526040810183905260a0810161295f60608301846125f1565b90815260200190565b918252602082015260400190565b60006101c060ff8d16835260ff8c16602084015260ff8b16604084015260ff8a166060840152612c30608084018a6125f1565b612c3d60c0840189612600565b80610180840152612c51818401878961259b565b90508281036101a0840152612c6781858761259b565b9d9c50505050505050505050505050565b60ff858116825284811660208301528316604082015260a0810161295f60608301846125f1565b600060ff8916825260ff8816602083015260ff87166040830152612cc660608301876125f1565b60ff851660a083015260e060c0830152612b7a60e08301848661259b565b600061010060ff8b16835260ff8a16602084015260ff89166040840152612d0e60608401896125f1565b60ff871660a084015260ff861660c08401528060e0840152612d33818401858761259b565b9b9a5050505050505050505050565b60ff85168152602081018490526040810183905260a0810161295f60608301846125f1565b600060ff89168252876020830152866040830152612d8860608301876125f1565b8460a083015260e060c0830152612b7a60e08301848661259b565b600061010060ff8a168352886020840152876040840152612dc760608401886125f1565b8560a08401528460c08401528060e0840152612a9e818401856125c5565b60006101c060ff8d1683528b60208401528a6040840152896060840152612c30608084018a6125f1565b60ff9290921682526001600160401b0316602082015260400190565b6040518181016001600160401b0381118282101715612e4657fe5b604052919050565b60006001600160401b03821115612e6157fe5b50601f01601f191660200190565b60009081526020902090565b60005b83811015612e96578181015183820152602001612e7e565b83811115610fae5750506000910152565b6001600160a01b0381168114612ebc57600080fd5b50565b8015158114612ebc57600080fd5b6001600160401b0381168114612ebc57600080fd5b60ff81168114612ebc57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200d99d0e675f2d3997a85bffcee188d57091576c27ce20e0d5226e456d641c13664736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3272,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "bridgeLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 3278,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "gasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 3282,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "useLayerZeroToken",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}