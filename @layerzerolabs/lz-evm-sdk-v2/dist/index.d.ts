import { Event, EventFilter, BaseContract, Signer, CallOverrides, BigNumberish, BytesLike, PayableOverrides, ContractTransaction, BigNumber, Overrides, PopulatedTransaction, utils, ContractFactory } from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider, TransactionRequest } from '@ethersproject/providers';

interface TypedEvent<TArgsArray extends Array<any> = any, TArgsObject = any> extends Event {
    args: TArgsArray & TArgsObject;
}
interface TypedEventFilter<_TEvent extends TypedEvent> extends EventFilter {
}
interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}
type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>, listener: TypedListener<TEvent>): TRes;
    (eventName: string, listener: Listener): TRes;
}
type PromiseOrValue<T> = T | Promise<T>;

declare namespace IMessageOrigin$k {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$e {
    type PacketStruct = {
        origin: IMessageOrigin$k.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$k.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$k.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface OmniCounterInterface extends utils.Interface {
    functions: {
        "admin()": FunctionFragment;
        "batchIncrement(uint32[],uint8[],bytes[])": FunctionFragment;
        "brokenIncrement(uint32,uint8,bytes)": FunctionFragment;
        "composedCount()": FunctionFragment;
        "count()": FunctionFragment;
        "eid()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "inboundCount(uint32)": FunctionFragment;
        "increment(uint32,uint8,bytes)": FunctionFragment;
        "lzCompose(address,bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "outboundCount(uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "precrime()": FunctionFragment;
        "quote(uint32,uint8,bytes)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "safeGetPeer(uint32)": FunctionFragment;
        "setAdmin(address)": FunctionFragment;
        "setEndpointConfig(bytes)": FunctionFragment;
        "setOrderedNonce(bool)": FunctionFragment;
        "setPeer(uint32,bytes32,bool)": FunctionFragment;
        "setPrecrime(address)": FunctionFragment;
        "skipInboundNonce(uint32,bytes32,uint64)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
        "withdraw(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "admin" | "batchIncrement" | "brokenIncrement" | "composedCount" | "count" | "eid" | "endpoint" | "inboundCount" | "increment" | "lzCompose" | "lzReceive" | "lzReceiveAndRevert" | "nextNonce" | "outboundCount" | "owner" | "peers" | "precrime" | "quote" | "renounceOwnership" | "safeGetPeer" | "setAdmin" | "setEndpointConfig" | "setOrderedNonce" | "setPeer" | "setPrecrime" | "skipInboundNonce" | "transferOwnership" | "version" | "withdraw"): FunctionFragment;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "batchIncrement", values: [
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "brokenIncrement", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "composedCount", values?: undefined): string;
    encodeFunctionData(functionFragment: "count", values?: undefined): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "inboundCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "increment", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$k.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [IPreCrime$e.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "outboundCount", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setEndpointConfig", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setOrderedNonce", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setPrecrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "skipInboundNonce", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "batchIncrement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "brokenIncrement", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composedCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpointConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOrderedNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skipInboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "SetPeer(uint32,bytes32,bool)": EventFragment;
        "SetPrecrime(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPeer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPrecrime"): EventFragment;
}
interface OwnershipTransferredEventObject$j {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$j = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$j>;
type OwnershipTransferredEventFilter$j = TypedEventFilter<OwnershipTransferredEvent$j>;
interface SetPeerEventObject$6 {
    remoteEid: number;
    peer: string;
    active: boolean;
}
type SetPeerEvent$6 = TypedEvent<[
    number,
    string,
    boolean
], SetPeerEventObject$6>;
type SetPeerEventFilter$6 = TypedEventFilter<SetPeerEvent$6>;
interface SetPrecrimeEventObject$6 {
    precrime: string;
}
type SetPrecrimeEvent$6 = TypedEvent<[string], SetPrecrimeEventObject$6>;
type SetPrecrimeEventFilter$6 = TypedEventFilter<SetPrecrimeEvent$6>;
interface OmniCounter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OmniCounterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        admin(overrides?: CallOverrides): Promise<[string]>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        composedCount(overrides?: CallOverrides): Promise<[BigNumber]>;
        count(overrides?: CallOverrides): Promise<[BigNumber]>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzCompose(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: IMessageOrigin$k.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$e.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            count: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrime(overrides?: CallOverrides): Promise<[string]>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber]>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    admin(overrides?: CallOverrides): Promise<string>;
    batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    composedCount(overrides?: CallOverrides): Promise<BigNumber>;
    count(overrides?: CallOverrides): Promise<BigNumber>;
    eid(overrides?: CallOverrides): Promise<number>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzCompose(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: IMessageOrigin$k.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: IPreCrime$e.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrime(overrides?: CallOverrides): Promise<string>;
    quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        admin(overrides?: CallOverrides): Promise<string>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        composedCount(overrides?: CallOverrides): Promise<BigNumber>;
        count(overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<number>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzCompose(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceive(_origin: IMessageOrigin$k.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: IPreCrime$e.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrime(overrides?: CallOverrides): Promise<string>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$j;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$j;
        "SetPeer(uint32,bytes32,bool)"(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$6;
        SetPeer(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$6;
        "SetPrecrime(address)"(precrime?: null): SetPrecrimeEventFilter$6;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter$6;
    };
    estimateGas: {
        admin(overrides?: CallOverrides): Promise<BigNumber>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        composedCount(overrides?: CallOverrides): Promise<BigNumber>;
        count(overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzCompose(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: IMessageOrigin$k.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: IPreCrime$e.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrime(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        batchIncrement(_eids: PromiseOrValue<BigNumberish>[], _types: PromiseOrValue<BigNumberish>[], _options: PromiseOrValue<BytesLike>[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        brokenIncrement(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        composedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        count(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundCount(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increment(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzCompose(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, arg3: PromiseOrValue<string>, arg4: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: IMessageOrigin$k.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$e.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundCount(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_eid: PromiseOrValue<BigNumberish>, _type: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setOrderedNonce(_orderedNonce: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        skipInboundNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdraw(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$j {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$d {
    type PacketStruct = {
        origin: IMessageOrigin$j.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$j.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$j.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface OmniCounterPreCrimeInterface extends utils.Interface {
    functions: {
        "_simulateAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "getPrecrimeConfig(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "pAdmin()": FunctionFragment;
        "pMaxBatchSize()": FunctionFragment;
        "precrime(((uint32,bytes32,uint64),bytes32,bytes,bytes)[],bytes[])": FunctionFragment;
        "precrimeEidToPeer(uint32)": FunctionFragment;
        "precrimeEids(uint256)": FunctionFragment;
        "precrimePeers(uint256)": FunctionFragment;
        "precrimeVersion()": FunctionFragment;
        "setPrecrimeAdmin(address)": FunctionFragment;
        "setPrecrimeMaxBatchSize(uint64)": FunctionFragment;
        "setPrecrimePeers(uint32[],bytes32[])": FunctionFragment;
        "simulate(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulateView(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulationCallback()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "_simulateAndRevert" | "getPrecrimeConfig" | "pAdmin" | "pMaxBatchSize" | "precrime" | "precrimeEidToPeer" | "precrimeEids" | "precrimePeers" | "precrimeVersion" | "setPrecrimeAdmin" | "setPrecrimeMaxBatchSize" | "setPrecrimePeers" | "simulate" | "simulateView" | "simulationCallback"): FunctionFragment;
    encodeFunctionData(functionFragment: "_simulateAndRevert", values: [IPreCrime$d.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "getPrecrimeConfig", values: [IPreCrime$d.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "pAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "pMaxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "precrime", values: [IPreCrime$d.PacketStruct[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "precrimeEidToPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeEids", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimePeers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPrecrimeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPrecrimeMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrecrimePeers", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [IPreCrime$d.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulateView", values: [IPreCrime$d.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulationCallback", values?: undefined): string;
    decodeFunctionResult(functionFragment: "_simulateAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrecrimeConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEidToPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEids", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulationCallback", data: BytesLike): Result;
    events: {};
}
interface OmniCounterPreCrime extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OmniCounterPreCrimeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        _simulateAndRevert(_packets: IPreCrime$d.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getPrecrimeConfig(_packets: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<[string]>;
        pAdmin(overrides?: CallOverrides): Promise<[string]>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        precrime(_packets: IPreCrime$d.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrimeVersion(overrides?: CallOverrides): Promise<[number]>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(_packets: IPreCrime$d.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulateView(arg0: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
        simulationCallback(overrides?: CallOverrides): Promise<[string]>;
    };
    _simulateAndRevert(_packets: IPreCrime$d.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getPrecrimeConfig(_packets: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<string>;
    pAdmin(overrides?: CallOverrides): Promise<string>;
    pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    precrime(_packets: IPreCrime$d.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        reason: string;
    }>;
    precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeVersion(overrides?: CallOverrides): Promise<number>;
    setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(_packets: IPreCrime$d.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulateView(arg0: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
    simulationCallback(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        _simulateAndRevert(_packets: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        getPrecrimeConfig(_packets: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<string>;
        pAdmin(overrides?: CallOverrides): Promise<string>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$d.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeVersion(overrides?: CallOverrides): Promise<number>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        simulate(_packets: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            data: string;
        }>;
        simulateView(arg0: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
        simulationCallback(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        _simulateAndRevert(_packets: IPreCrime$d.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getPrecrimeConfig(_packets: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        pAdmin(overrides?: CallOverrides): Promise<BigNumber>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$d.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(_packets: IPreCrime$d.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulateView(arg0: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        simulationCallback(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        _simulateAndRevert(_packets: IPreCrime$d.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getPrecrimeConfig(_packets: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(_packets: IPreCrime$d.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(_packets: IPreCrime$d.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulateView(arg0: IPreCrime$d.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        simulationCallback(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$i {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$c {
    type PacketStruct = {
        origin: IMessageOrigin$i.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$i.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$i.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface OmniCounterPreCrimeViewInterface extends utils.Interface {
    functions: {
        "getPrecrimeConfig(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "owner()": FunctionFragment;
        "pAdmin()": FunctionFragment;
        "pMaxBatchSize()": FunctionFragment;
        "precrime(((uint32,bytes32,uint64),bytes32,bytes,bytes)[],bytes[])": FunctionFragment;
        "precrimeEidToPeer(uint32)": FunctionFragment;
        "precrimeEids(uint256)": FunctionFragment;
        "precrimePeers(uint256)": FunctionFragment;
        "precrimeVersion()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setPrecrimeAdmin(address)": FunctionFragment;
        "setPrecrimeMaxBatchSize(uint64)": FunctionFragment;
        "setPrecrimePeers(uint32[],bytes32[])": FunctionFragment;
        "simulate(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulateView(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulationCallback()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "viewer()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getPrecrimeConfig" | "owner" | "pAdmin" | "pMaxBatchSize" | "precrime" | "precrimeEidToPeer" | "precrimeEids" | "precrimePeers" | "precrimeVersion" | "renounceOwnership" | "setPrecrimeAdmin" | "setPrecrimeMaxBatchSize" | "setPrecrimePeers" | "simulate" | "simulateView" | "simulationCallback" | "transferOwnership" | "viewer"): FunctionFragment;
    encodeFunctionData(functionFragment: "getPrecrimeConfig", values: [IPreCrime$c.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "pMaxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "precrime", values: [IPreCrime$c.PacketStruct[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "precrimeEidToPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeEids", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimePeers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPrecrimeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPrecrimeMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrecrimePeers", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [IPreCrime$c.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulateView", values: [IPreCrime$c.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulationCallback", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "viewer", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getPrecrimeConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEidToPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEids", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulationCallback", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "viewer", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$i {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$i = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$i>;
type OwnershipTransferredEventFilter$i = TypedEventFilter<OwnershipTransferredEvent$i>;
interface OmniCounterPreCrimeView extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OmniCounterPreCrimeViewInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getPrecrimeConfig(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        pAdmin(overrides?: CallOverrides): Promise<[string]>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        precrime(_packets: IPreCrime$c.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrimeVersion(overrides?: CallOverrides): Promise<[number]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(arg0: IPreCrime$c.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulateView(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            data: string;
        }>;
        simulationCallback(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        viewer(overrides?: CallOverrides): Promise<[string]>;
    };
    getPrecrimeConfig(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    pAdmin(overrides?: CallOverrides): Promise<string>;
    pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    precrime(_packets: IPreCrime$c.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        reason: string;
    }>;
    precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeVersion(overrides?: CallOverrides): Promise<number>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(arg0: IPreCrime$c.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulateView(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        data: string;
    }>;
    simulationCallback(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    viewer(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        getPrecrimeConfig(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        pAdmin(overrides?: CallOverrides): Promise<string>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$c.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeVersion(overrides?: CallOverrides): Promise<number>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        simulate(arg0: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
        simulateView(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            data: string;
        }>;
        simulationCallback(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        viewer(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$i;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$i;
    };
    estimateGas: {
        getPrecrimeConfig(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        pAdmin(overrides?: CallOverrides): Promise<BigNumber>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$c.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeVersion(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(arg0: IPreCrime$c.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulateView(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        simulationCallback(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        viewer(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getPrecrimeConfig(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(_packets: IPreCrime$c.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(arg0: IPreCrime$c.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulateView(_packets: IPreCrime$c.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        simulationCallback(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        viewer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$h {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$b {
    type PacketStruct = {
        origin: IMessageOrigin$h.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$h.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$h.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface OmniCounterViewerInterface extends utils.Interface {
    functions: {
        "counter()": FunctionFragment;
        "getCounts(uint32[])": FunctionFragment;
        "lzReceive(((uint32,bytes32,uint64),bytes32,bytes,bytes),(uint32,uint256,uint256)[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "counter" | "getCounts" | "lzReceive"): FunctionFragment;
    encodeFunctionData(functionFragment: "counter", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCounts", values: [PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [IPreCrime$b.PacketStruct, OmniCounterViewer.CountStruct[]]): string;
    decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCounts", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    events: {};
}
declare namespace OmniCounterViewer {
    type CountStruct = {
        eid: PromiseOrValue<BigNumberish>;
        inboundCount: PromiseOrValue<BigNumberish>;
        outboundCount: PromiseOrValue<BigNumberish>;
    };
    type CountStructOutput = [number, BigNumber, BigNumber] & {
        eid: number;
        inboundCount: BigNumber;
        outboundCount: BigNumber;
    };
}
interface OmniCounterViewer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OmniCounterViewerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        counter(overrides?: CallOverrides): Promise<[string]>;
        getCounts(peerEids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<[
            OmniCounterViewer.CountStructOutput[]
        ] & {
            counts: OmniCounterViewer.CountStructOutput[];
        }>;
        lzReceive(packet: IPreCrime$b.PacketStruct, counts: OmniCounterViewer.CountStruct[], overrides?: CallOverrides): Promise<[OmniCounterViewer.CountStructOutput[]]>;
    };
    counter(overrides?: CallOverrides): Promise<string>;
    getCounts(peerEids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<OmniCounterViewer.CountStructOutput[]>;
    lzReceive(packet: IPreCrime$b.PacketStruct, counts: OmniCounterViewer.CountStruct[], overrides?: CallOverrides): Promise<OmniCounterViewer.CountStructOutput[]>;
    callStatic: {
        counter(overrides?: CallOverrides): Promise<string>;
        getCounts(peerEids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<OmniCounterViewer.CountStructOutput[]>;
        lzReceive(packet: IPreCrime$b.PacketStruct, counts: OmniCounterViewer.CountStruct[], overrides?: CallOverrides): Promise<OmniCounterViewer.CountStructOutput[]>;
    };
    filters: {};
    estimateGas: {
        counter(overrides?: CallOverrides): Promise<BigNumber>;
        getCounts(peerEids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(packet: IPreCrime$b.PacketStruct, counts: OmniCounterViewer.CountStruct[], overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getCounts(peerEids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(packet: IPreCrime$b.PacketStruct, counts: OmniCounterViewer.CountStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$u_OmniCounter = OmniCounter;
type index$u_OmniCounterPreCrime = OmniCounterPreCrime;
type index$u_OmniCounterPreCrimeView = OmniCounterPreCrimeView;
type index$u_OmniCounterViewer = OmniCounterViewer;
declare namespace index$u {
  export {
    index$u_OmniCounter as OmniCounter,
    index$u_OmniCounterPreCrime as OmniCounterPreCrime,
    index$u_OmniCounterPreCrimeView as OmniCounterPreCrimeView,
    index$u_OmniCounterViewer as OmniCounterViewer,
  };
}

interface IExecutorInterface extends utils.Interface {
    functions: {
        "assignJob(uint32,address,uint256,bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "getFee(uint32,address,uint256,bytes)": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob" | "defaultMultiplierBps" | "dstConfig" | "getFee" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "AirdropFailed(address,uint256)": EventFragment;
        "AirdropSucceeded(address,uint256)": EventFragment;
        "DstConfigSet(tuple[])": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AirdropFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AirdropSucceeded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface AirdropFailedEventObject$1 {
    receiver: string;
    amount: BigNumber;
}
type AirdropFailedEvent$1 = TypedEvent<[
    string,
    BigNumber
], AirdropFailedEventObject$1>;
type AirdropFailedEventFilter$1 = TypedEventFilter<AirdropFailedEvent$1>;
interface AirdropSucceededEventObject$1 {
    receiver: string;
    amount: BigNumber;
}
type AirdropSucceededEvent$1 = TypedEvent<[
    string,
    BigNumber
], AirdropSucceededEventObject$1>;
type AirdropSucceededEventFilter$1 = TypedEventFilter<AirdropSucceededEvent$1>;
interface DstConfigSetEventObject$1 {
    params: IExecutor$3.DstConfigParamStructOutput[];
}
type DstConfigSetEvent$1 = TypedEvent<[
    IExecutor$3.DstConfigParamStructOutput[]
], DstConfigSetEventObject$1>;
type DstConfigSetEventFilter$1 = TypedEventFilter<DstConfigSetEvent$1>;
interface SetDefaultMultiplierBpsEventObject$6 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$6 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$6>;
type SetDefaultMultiplierBpsEventFilter$6 = TypedEventFilter<SetDefaultMultiplierBpsEvent$6>;
interface SetPriceFeedEventObject$6 {
    priceFeed: string;
}
type SetPriceFeedEvent$6 = TypedEvent<[string], SetPriceFeedEventObject$6>;
type SetPriceFeedEventFilter$6 = TypedEventFilter<SetPriceFeedEvent$6>;
interface SetWorkerLibEventObject$6 {
    workerLib: string;
}
type SetWorkerLibEvent$6 = TypedEvent<[string], SetWorkerLibEventObject$6>;
type SetWorkerLibEventFilter$6 = TypedEventFilter<SetWorkerLibEvent$6>;
interface WithdrawEventObject$6 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$6 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$6>;
type WithdrawEventFilter$6 = TypedEventFilter<WithdrawEvent$6>;
declare namespace IExecutor$3 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        baseGas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
        airdropCap: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        BigNumber,
        number,
        BigNumber,
        BigNumber
    ] & {
        dstEid: number;
        baseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        airdropCap: BigNumber;
    };
}
interface IExecutor$3 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IExecutorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber, BigNumber]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            price: BigNumber;
        }>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber, BigNumber]>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber, BigNumber]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AirdropFailed(address,uint256)"(receiver?: null, amount?: null): AirdropFailedEventFilter$1;
        AirdropFailed(receiver?: null, amount?: null): AirdropFailedEventFilter$1;
        "AirdropSucceeded(address,uint256)"(receiver?: null, amount?: null): AirdropSucceededEventFilter$1;
        AirdropSucceeded(receiver?: null, amount?: null): AirdropSucceededEventFilter$1;
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter$1;
        DstConfigSet(params?: null): DstConfigSetEventFilter$1;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$6;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$6;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$6;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$6;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$6;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$6;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$6;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$6;
    };
    estimateGas: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IExecutor$2 {
    type DstConfigStruct = {
        baseGas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
        airdropCap: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [
        BigNumber,
        number,
        BigNumber,
        BigNumber
    ] & {
        baseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        airdropCap: BigNumber;
    };
}
interface IExecutorFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((address,uint32,address,uint256,uint16),(uint64,uint16,uint128,uint128),bytes)": FunctionFragment;
        "getFeeOnSend((address,uint32,address,uint256,uint16),(uint64,uint16,uint128,uint128),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IExecutorFeeLib$1.FeeParamsStruct,
        IExecutor$2.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IExecutorFeeLib$1.FeeParamsStruct,
        IExecutor$2.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    events: {};
}
declare namespace IExecutorFeeLib$1 {
    type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        calldataSize: PromiseOrValue<BigNumberish>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type FeeParamsStructOutput = [
        string,
        number,
        string,
        BigNumber,
        number
    ] & {
        priceFeed: string;
        dstEid: number;
        sender: string;
        calldataSize: BigNumber;
        defaultMultiplierBps: number;
    };
}
interface IExecutorFeeLib$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IExecutorFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IExecutorFeeLib$1.FeeParamsStruct, _dstConfig: IExecutor$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IInspectorInterface extends utils.Interface {
    functions: {
        "inspect(bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "inspect"): FunctionFragment;
    encodeFunctionData(functionFragment: "inspect", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "inspect", data: BytesLike): Result;
    events: {};
}
interface IInspector extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IInspectorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            valid: boolean;
        }>;
    };
    inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        inspect(_message: PromiseOrValue<BytesLike>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroComposerInterface extends utils.Interface {
    functions: {
        "lzCompose(address,bytes32,bytes,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "lzCompose"): FunctionFragment;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroComposer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroComposerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        lzCompose(_receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _caller: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    lzCompose(_receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _caller: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        lzCompose(_receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _caller: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        lzCompose(_receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _caller: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        lzCompose(_receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _caller: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$g {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IMessageLibManager$6 {
    type SetConfigParamStruct = {
        configType: PromiseOrValue<BigNumberish>;
        config: PromiseOrValue<BytesLike>;
    };
    type SetConfigParamStructOutput = [number, string] & {
        configType: number;
        config: string;
    };
}
interface ILayerZeroEndpointV2Interface extends utils.Interface {
    functions: {
        "altFeeToken()": FunctionFragment;
        "clear((uint32,bytes32,uint64),bytes32,bytes)": FunctionFragment;
        "defaultConfig(address,uint32,uint32)": FunctionFragment;
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "deliver((uint32,bytes32,uint64),address,bytes32)": FunctionFragment;
        "deliverComposedMessage(address,bytes32,bytes)": FunctionFragment;
        "deliverable((uint32,bytes32,uint64),address,address)": FunctionFragment;
        "eid()": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendContext()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "hasPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "layerZeroToken()": FunctionFragment;
        "lzCompose(address,address,bytes32,bytes,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "quote(address,uint32,bytes,bool,bytes)": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "resetConfig(address,uint32[])": FunctionFragment;
        "send((uint32,bytes32,bytes,bytes),uint256,address)": FunctionFragment;
        "sendWithAlt((uint32,bytes32,bytes,bytes),uint256,uint256)": FunctionFragment;
        "setConfig(address,uint32,(uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setLayerZeroToken(address)": FunctionFragment;
        "setReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(uint32,address)": FunctionFragment;
        "skip(uint32,bytes32,uint64)": FunctionFragment;
        "snapshotConfig(address,uint32[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "altFeeToken" | "clear" | "defaultConfig" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "deliver" | "deliverComposedMessage" | "deliverable" | "eid" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendContext" | "getSendLibrary" | "hasPayloadHash" | "inboundNonce" | "inboundPayloadHash" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSendingMessage" | "isSupportedEid" | "layerZeroToken" | "lzCompose" | "lzReceive" | "nextGuid" | "outboundNonce" | "quote" | "receiveLibraryTimeout" | "registerLibrary" | "resetConfig" | "send" | "sendWithAlt" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setLayerZeroToken" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "skip" | "snapshotConfig"): FunctionFragment;
    encodeFunctionData(functionFragment: "altFeeToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "clear", values: [
        IMessageOrigin$g.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "defaultConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "deliver", values: [
        IMessageOrigin$g.MessageOriginStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "deliverComposedMessage", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "deliverable", values: [
        IMessageOrigin$g.MessageOriginStruct,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hasPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "layerZeroToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$g.MessageOriginStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "quote", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "send", values: [
        ILayerZeroEndpointV2$a.MessagingParamsStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendWithAlt", values: [
        ILayerZeroEndpointV2$a.MessagingParamsStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IMessageLibManager$6.SetConfigParamStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setLayerZeroToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]): string;
    decodeFunctionResult(functionFragment: "altFeeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverComposedMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "layerZeroToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendWithAlt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLayerZeroToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    events: {
        "ComposedMessageDelivered(address,address,bytes32,bytes)": EventFragment;
        "ComposedMessageReceived(address,address,bytes32,bytes32,address)": EventFragment;
        "DefaultReceiveLibrarySet(uint32,address,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "FeePaid(tuple)": EventFragment;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
        "LayerZeroTokenSet(address)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "LzComposeFailed(address,address,bytes32,bytes32,address,bytes)": EventFragment;
        "LzReceiveFailed(tuple,address,bytes)": EventFragment;
        "PacketDelivered(tuple,address,bytes32)": EventFragment;
        "PacketReceived(tuple,address)": EventFragment;
        "PacketSent(bytes,bytes,address)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address,address)": EventFragment;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposedMessageDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposedMessageReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LayerZeroTokenSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzReceiveFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface ComposedMessageDeliveredEventObject$3 {
    receiver: string;
    composer: string;
    guid: string;
    message: string;
}
type ComposedMessageDeliveredEvent$3 = TypedEvent<[
    string,
    string,
    string,
    string
], ComposedMessageDeliveredEventObject$3>;
type ComposedMessageDeliveredEventFilter$3 = TypedEventFilter<ComposedMessageDeliveredEvent$3>;
interface ComposedMessageReceivedEventObject$3 {
    receiver: string;
    composer: string;
    guid: string;
    messageHash: string;
    caller: string;
}
type ComposedMessageReceivedEvent$3 = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], ComposedMessageReceivedEventObject$3>;
type ComposedMessageReceivedEventFilter$3 = TypedEventFilter<ComposedMessageReceivedEvent$3>;
interface DefaultReceiveLibrarySetEventObject$3 {
    eid: number;
    oldLib: string;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent$3 = TypedEvent<[
    number,
    string,
    string
], DefaultReceiveLibrarySetEventObject$3>;
type DefaultReceiveLibrarySetEventFilter$3 = TypedEventFilter<DefaultReceiveLibrarySetEvent$3>;
interface DefaultReceiveLibraryTimeoutSetEventObject$3 {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent$3 = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject$3>;
type DefaultReceiveLibraryTimeoutSetEventFilter$3 = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent$3>;
interface DefaultSendLibrarySetEventObject$3 {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent$3 = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject$3>;
type DefaultSendLibrarySetEventFilter$3 = TypedEventFilter<DefaultSendLibrarySetEvent$3>;
interface FeePaidEventObject$1 {
    fee: ILayerZeroEndpointV2$a.MessagingFeeStructOutput;
}
type FeePaidEvent$1 = TypedEvent<[
    ILayerZeroEndpointV2$a.MessagingFeeStructOutput
], FeePaidEventObject$1>;
type FeePaidEventFilter$1 = TypedEventFilter<FeePaidEvent$1>;
interface InboundNonceSkippedEventObject$3 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent$3 = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject$3>;
type InboundNonceSkippedEventFilter$3 = TypedEventFilter<InboundNonceSkippedEvent$3>;
interface LayerZeroTokenSetEventObject$1 {
    token: string;
}
type LayerZeroTokenSetEvent$1 = TypedEvent<[
    string
], LayerZeroTokenSetEventObject$1>;
type LayerZeroTokenSetEventFilter$1 = TypedEventFilter<LayerZeroTokenSetEvent$1>;
interface LibraryRegisteredEventObject$3 {
    newLib: string;
}
type LibraryRegisteredEvent$3 = TypedEvent<[
    string
], LibraryRegisteredEventObject$3>;
type LibraryRegisteredEventFilter$3 = TypedEventFilter<LibraryRegisteredEvent$3>;
interface LzComposeFailedEventObject$3 {
    sender: string;
    receiver: string;
    guid: string;
    messageHash: string;
    caller: string;
    reason: string;
}
type LzComposeFailedEvent$3 = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    string
], LzComposeFailedEventObject$3>;
type LzComposeFailedEventFilter$3 = TypedEventFilter<LzComposeFailedEvent$3>;
interface LzReceiveFailedEventObject$1 {
    origin: IMessageOrigin$g.MessageOriginStructOutput;
    receiver: string;
    reason: string;
}
type LzReceiveFailedEvent$1 = TypedEvent<[
    IMessageOrigin$g.MessageOriginStructOutput,
    string,
    string
], LzReceiveFailedEventObject$1>;
type LzReceiveFailedEventFilter$1 = TypedEventFilter<LzReceiveFailedEvent$1>;
interface PacketDeliveredEventObject$1 {
    origin: IMessageOrigin$g.MessageOriginStructOutput;
    receiver: string;
    payloadHash: string;
}
type PacketDeliveredEvent$1 = TypedEvent<[
    IMessageOrigin$g.MessageOriginStructOutput,
    string,
    string
], PacketDeliveredEventObject$1>;
type PacketDeliveredEventFilter$1 = TypedEventFilter<PacketDeliveredEvent$1>;
interface PacketReceivedEventObject$3 {
    origin: IMessageOrigin$g.MessageOriginStructOutput;
    receiver: string;
}
type PacketReceivedEvent$3 = TypedEvent<[
    IMessageOrigin$g.MessageOriginStructOutput,
    string
], PacketReceivedEventObject$3>;
type PacketReceivedEventFilter$3 = TypedEventFilter<PacketReceivedEvent$3>;
interface PacketSentEventObject$3 {
    encodedPayload: string;
    options: string;
    sendLibrary: string;
}
type PacketSentEvent$3 = TypedEvent<[
    string,
    string,
    string
], PacketSentEventObject$3>;
type PacketSentEventFilter$3 = TypedEventFilter<PacketSentEvent$3>;
interface ReceiveLibrarySetEventObject$3 {
    receiver: string;
    eid: number;
    oldLib: string;
    newLib: string;
}
type ReceiveLibrarySetEvent$3 = TypedEvent<[
    string,
    number,
    string,
    string
], ReceiveLibrarySetEventObject$3>;
type ReceiveLibrarySetEventFilter$3 = TypedEventFilter<ReceiveLibrarySetEvent$3>;
interface ReceiveLibraryTimoutSetEventObject$3 {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimoutSetEvent$3 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimoutSetEventObject$3>;
type ReceiveLibraryTimoutSetEventFilter$3 = TypedEventFilter<ReceiveLibraryTimoutSetEvent$3>;
interface SendLibrarySetEventObject$3 {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent$3 = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject$3>;
type SendLibrarySetEventFilter$3 = TypedEventFilter<SendLibrarySetEvent$3>;
declare namespace ILayerZeroEndpointV2$a {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingParamsStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        receiver: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        options: PromiseOrValue<BytesLike>;
    };
    type MessagingParamsStructOutput = [number, string, string, string] & {
        dstEid: number;
        receiver: string;
        message: string;
        options: string;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$a.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$a.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$a.MessagingFeeStructOutput;
    };
}
interface ILayerZeroEndpointV2$a extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroEndpointV2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        altFeeToken(overrides?: CallOverrides): Promise<[string]>;
        clear(_origin: IMessageOrigin$g.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        deliver(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliverable(_origin: IMessageOrigin$g.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        layerZeroToken(overrides?: CallOverrides): Promise<[string]>;
        lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[ILayerZeroEndpointV2$a.MessagingFeeStructOutput]>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendWithAlt(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _altTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$6.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    altFeeToken(overrides?: CallOverrides): Promise<string>;
    clear(_origin: IMessageOrigin$g.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    deliver(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliverable(_origin: IMessageOrigin$g.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    eid(overrides?: CallOverrides): Promise<number>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        config: string;
        isDefault: boolean;
    }>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
    getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    layerZeroToken(overrides?: CallOverrides): Promise<string>;
    lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$a.MessagingFeeStructOutput>;
    receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendWithAlt(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _altTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$6.SetConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        altFeeToken(overrides?: CallOverrides): Promise<string>;
        clear(_origin: IMessageOrigin$g.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        deliver(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        deliverable(_origin: IMessageOrigin$g.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        eid(overrides?: CallOverrides): Promise<number>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        layerZeroToken(overrides?: CallOverrides): Promise<string>;
        lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string]>;
        lzReceive(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string]>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$a.MessagingFeeStructOutput>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        send(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$a.MessagingReceiptStructOutput>;
        sendWithAlt(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _altTokenFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$a.MessagingReceiptStructOutput>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$6.SetConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ComposedMessageDelivered(address,address,bytes32,bytes)"(receiver?: null, composer?: null, guid?: null, message?: null): ComposedMessageDeliveredEventFilter$3;
        ComposedMessageDelivered(receiver?: null, composer?: null, guid?: null, message?: null): ComposedMessageDeliveredEventFilter$3;
        "ComposedMessageReceived(address,address,bytes32,bytes32,address)"(receiver?: null, composer?: null, guid?: null, messageHash?: null, caller?: null): ComposedMessageReceivedEventFilter$3;
        ComposedMessageReceived(receiver?: null, composer?: null, guid?: null, messageHash?: null, caller?: null): ComposedMessageReceivedEventFilter$3;
        "DefaultReceiveLibrarySet(uint32,address,address)"(eid?: null, oldLib?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$3;
        DefaultReceiveLibrarySet(eid?: null, oldLib?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$3;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$3;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$3;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$3;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$3;
        "FeePaid(tuple)"(fee?: null): FeePaidEventFilter$1;
        FeePaid(fee?: null): FeePaidEventFilter$1;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$3;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$3;
        "LayerZeroTokenSet(address)"(token?: null): LayerZeroTokenSetEventFilter$1;
        LayerZeroTokenSet(token?: null): LayerZeroTokenSetEventFilter$1;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter$3;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter$3;
        "LzComposeFailed(address,address,bytes32,bytes32,address,bytes)"(sender?: null, receiver?: null, guid?: null, messageHash?: null, caller?: null, reason?: null): LzComposeFailedEventFilter$3;
        LzComposeFailed(sender?: null, receiver?: null, guid?: null, messageHash?: null, caller?: null, reason?: null): LzComposeFailedEventFilter$3;
        "LzReceiveFailed(tuple,address,bytes)"(origin?: null, receiver?: null, reason?: null): LzReceiveFailedEventFilter$1;
        LzReceiveFailed(origin?: null, receiver?: null, reason?: null): LzReceiveFailedEventFilter$1;
        "PacketDelivered(tuple,address,bytes32)"(origin?: null, receiver?: null, payloadHash?: null): PacketDeliveredEventFilter$1;
        PacketDelivered(origin?: null, receiver?: null, payloadHash?: null): PacketDeliveredEventFilter$1;
        "PacketReceived(tuple,address)"(origin?: null, receiver?: null): PacketReceivedEventFilter$3;
        PacketReceived(origin?: null, receiver?: null): PacketReceivedEventFilter$3;
        "PacketSent(bytes,bytes,address)"(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter$3;
        PacketSent(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter$3;
        "ReceiveLibrarySet(address,uint32,address,address)"(receiver?: null, eid?: null, oldLib?: null, newLib?: null): ReceiveLibrarySetEventFilter$3;
        ReceiveLibrarySet(receiver?: null, eid?: null, oldLib?: null, newLib?: null): ReceiveLibrarySetEventFilter$3;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimoutSetEventFilter$3;
        ReceiveLibraryTimoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimoutSetEventFilter$3;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$3;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$3;
    };
    estimateGas: {
        altFeeToken(overrides?: CallOverrides): Promise<BigNumber>;
        clear(_origin: IMessageOrigin$g.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        deliver(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliverable(_origin: IMessageOrigin$g.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        layerZeroToken(overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendWithAlt(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _altTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$6.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        altFeeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        clear(_origin: IMessageOrigin$g.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliver(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliverable(_origin: IMessageOrigin$g.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        layerZeroToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: IMessageOrigin$g.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendWithAlt(_params: ILayerZeroEndpointV2$a.MessagingParamsStruct, _lzTokenFee: PromiseOrValue<BigNumberish>, _altTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$6.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroExecutorInterface extends utils.Interface {
    functions: {
        "assignJob(uint32,address,uint256,bytes)": FunctionFragment;
        "getFee(uint32,address,uint256,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob" | "getFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroExecutor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroExecutorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            price: BigNumber;
        }>;
    };
    assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroPriceFeedInterface extends utils.Interface {
    functions: {
        "estimateFeeByEid(uint32,uint256,uint256)": FunctionFragment;
        "estimateFeeOnSend(uint32,uint256,uint256)": FunctionFragment;
        "getFee(uint32,uint256,uint256)": FunctionFragment;
        "getPrice(uint32)": FunctionFragment;
        "getPriceRatioDenominator()": FunctionFragment;
        "nativeTokenPriceUSD()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "estimateFeeByEid" | "estimateFeeOnSend" | "getFee" | "getPrice" | "getPriceRatioDenominator" | "nativeTokenPriceUSD"): FunctionFragment;
    encodeFunctionData(functionFragment: "estimateFeeByEid", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "estimateFeeOnSend", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getPrice", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPriceRatioDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeTokenPriceUSD", values?: undefined): string;
    decodeFunctionResult(functionFragment: "estimateFeeByEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeTokenPriceUSD", data: BytesLike): Result;
    events: {};
}
declare namespace ILayerZeroPriceFeed$1 {
    type PriceStruct = {
        priceRatio: PromiseOrValue<BigNumberish>;
        gasPriceInUnit: PromiseOrValue<BigNumberish>;
        gasPerByte: PromiseOrValue<BigNumberish>;
    };
    type PriceStructOutput = [BigNumber, BigNumber, number] & {
        priceRatio: BigNumber;
        gasPriceInUnit: BigNumber;
        gasPerByte: number;
    };
}
interface ILayerZeroPriceFeed$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroPriceFeedInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
            priceRatioDenominator: BigNumber;
            nativePriceUSD: BigNumber;
        }>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[ILayerZeroPriceFeed$1.PriceStructOutput]>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        fee: BigNumber;
        priceRatio: BigNumber;
        priceRatioDenominator: BigNumber;
        nativePriceUSD: BigNumber;
    }>;
    estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed$1.PriceStructOutput>;
    getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
    nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
            priceRatioDenominator: BigNumber;
            nativePriceUSD: BigNumber;
        }>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
            priceRatioDenominator: BigNumber;
            nativePriceUSD: BigNumber;
        }>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed$1.PriceStructOutput>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$f {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
interface ILayerZeroReceiverInterface extends utils.Interface {
    functions: {
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "lzReceive" | "nextNonce"): FunctionFragment;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$f.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroReceiver extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroReceiverInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        lzReceive(_origin: IMessageOrigin$f.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    lzReceive(_origin: IMessageOrigin$f.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        lzReceive(_origin: IMessageOrigin$f.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        lzReceive(_origin: IMessageOrigin$f.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        lzReceive(_origin: IMessageOrigin$f.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(_eid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface ILayerZeroTreasuryInterface extends utils.Interface {
    functions: {
        "getFee(address,uint32,uint256,bool)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroTreasury extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroTreasuryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    getFee(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        getFee(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getFee(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IPacket$3 {
    type PacketForQuoteStruct = {
        sender: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        message: PromiseOrValue<BytesLike>;
    };
    type PacketForQuoteStructOutput = [string, number, string] & {
        sender: string;
        dstEid: number;
        message: string;
    };
    type PacketStruct = {
        nonce: PromiseOrValue<BigNumberish>;
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        receiver: PromiseOrValue<BytesLike>;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        BigNumber,
        number,
        string,
        number,
        string,
        string,
        string
    ] & {
        nonce: BigNumber;
        srcEid: number;
        sender: string;
        dstEid: number;
        receiver: string;
        guid: string;
        message: string;
    };
}
declare namespace ILayerZeroEndpointV2$9 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$9.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$9.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$9.MessagingFeeStructOutput;
    };
}
declare namespace IMessageLibManager$5 {
    type SetConfigParamStruct = {
        configType: PromiseOrValue<BigNumberish>;
        config: PromiseOrValue<BytesLike>;
    };
    type SetConfigParamStructOutput = [number, string] & {
        configType: number;
        config: string;
    };
}
interface IMessageLibInterface extends utils.Interface {
    functions: {
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "getDefaultConfig(uint32,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "quote((address,uint32,bytes),bool,bytes)": FunctionFragment;
        "resetConfig(uint32[],address)": FunctionFragment;
        "send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "setConfig(address,uint32,(uint32,bytes)[])": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "snapshotConfig(uint32[],address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
        "withdrawLzTokenFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getConfig" | "getDefaultConfig" | "isSupportedEid" | "quote" | "resetConfig" | "send" | "setConfig" | "setTreasury" | "snapshotConfig" | "supportsInterface" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultConfig", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "quote", values: [
        IPacket$3.PacketForQuoteStruct,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "send", values: [
        IPacket$3.PacketStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IMessageLibManager$5.SetConfigParamStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
    events: {};
}
interface IMessageLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessageLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        quote(_packet: IPacket$3.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[ILayerZeroEndpointV2$9.MessagingFeeStructOutput]>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_packet: IPacket$3.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$5.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        config: string;
        isDefault: boolean;
    }>;
    getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    quote(_packet: IPacket$3.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$9.MessagingFeeStructOutput>;
    resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_packet: IPacket$3.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$5.SetConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        quote(_packet: IPacket$3.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$9.MessagingFeeStructOutput>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        send(_packet: IPacket$3.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            ILayerZeroEndpointV2$9.MessagingReceiptStructOutput,
            string,
            string
        ] & {
            encodedPacket: string;
            options: string;
        }>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$5.SetConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        quote(_packet: IPacket$3.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_packet: IPacket$3.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$5.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_packet: IPacket$3.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_packet: IPacket$3.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$5.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IMessageLibManagerInterface extends utils.Interface {
    functions: {
        "defaultConfig(address,uint32,uint32)": FunctionFragment;
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "resetConfig(address,uint32[])": FunctionFragment;
        "setConfig(address,uint32,(uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(uint32,address)": FunctionFragment;
        "snapshotConfig(address,uint32[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultConfig" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendLibrary" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSupportedEid" | "receiveLibraryTimeout" | "registerLibrary" | "resetConfig" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "snapshotConfig"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IMessageLibManager$4.SetConfigParamStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]): string;
    decodeFunctionResult(functionFragment: "defaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    events: {
        "DefaultReceiveLibrarySet(uint32,address,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address,address)": EventFragment;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface DefaultReceiveLibrarySetEventObject$2 {
    eid: number;
    oldLib: string;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent$2 = TypedEvent<[
    number,
    string,
    string
], DefaultReceiveLibrarySetEventObject$2>;
type DefaultReceiveLibrarySetEventFilter$2 = TypedEventFilter<DefaultReceiveLibrarySetEvent$2>;
interface DefaultReceiveLibraryTimeoutSetEventObject$2 {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent$2 = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject$2>;
type DefaultReceiveLibraryTimeoutSetEventFilter$2 = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent$2>;
interface DefaultSendLibrarySetEventObject$2 {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent$2 = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject$2>;
type DefaultSendLibrarySetEventFilter$2 = TypedEventFilter<DefaultSendLibrarySetEvent$2>;
interface LibraryRegisteredEventObject$2 {
    newLib: string;
}
type LibraryRegisteredEvent$2 = TypedEvent<[
    string
], LibraryRegisteredEventObject$2>;
type LibraryRegisteredEventFilter$2 = TypedEventFilter<LibraryRegisteredEvent$2>;
interface ReceiveLibrarySetEventObject$2 {
    receiver: string;
    eid: number;
    oldLib: string;
    newLib: string;
}
type ReceiveLibrarySetEvent$2 = TypedEvent<[
    string,
    number,
    string,
    string
], ReceiveLibrarySetEventObject$2>;
type ReceiveLibrarySetEventFilter$2 = TypedEventFilter<ReceiveLibrarySetEvent$2>;
interface ReceiveLibraryTimoutSetEventObject$2 {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimoutSetEvent$2 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimoutSetEventObject$2>;
type ReceiveLibraryTimoutSetEventFilter$2 = TypedEventFilter<ReceiveLibraryTimoutSetEvent$2>;
interface SendLibrarySetEventObject$2 {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent$2 = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject$2>;
type SendLibrarySetEventFilter$2 = TypedEventFilter<SendLibrarySetEvent$2>;
declare namespace IMessageLibManager$4 {
    type SetConfigParamStruct = {
        configType: PromiseOrValue<BigNumberish>;
        config: PromiseOrValue<BytesLike>;
    };
    type SetConfigParamStructOutput = [number, string] & {
        configType: number;
        config: string;
    };
}
interface IMessageLibManager$4 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessageLibManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$4.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        config: string;
        isDefault: boolean;
    }>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$4.SetConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$4.SetConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DefaultReceiveLibrarySet(uint32,address,address)"(eid?: null, oldLib?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$2;
        DefaultReceiveLibrarySet(eid?: null, oldLib?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$2;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$2;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$2;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$2;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$2;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter$2;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter$2;
        "ReceiveLibrarySet(address,uint32,address,address)"(receiver?: null, eid?: null, oldLib?: null, newLib?: null): ReceiveLibrarySetEventFilter$2;
        ReceiveLibrarySet(receiver?: null, eid?: null, oldLib?: null, newLib?: null): ReceiveLibrarySetEventFilter$2;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimoutSetEventFilter$2;
        ReceiveLibraryTimoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimoutSetEventFilter$2;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$2;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$2;
    };
    estimateGas: {
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$4.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(_receiver: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$4.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _timeout: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IMessagingChannelInterface extends utils.Interface {
    functions: {
        "eid()": FunctionFragment;
        "hasPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "skip(uint32,bytes32,uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "eid" | "hasPayloadHash" | "inboundNonce" | "inboundPayloadHash" | "nextGuid" | "outboundNonce" | "skip"): FunctionFragment;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "hasPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    events: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
}
interface InboundNonceSkippedEventObject$2 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent$2 = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject$2>;
type InboundNonceSkippedEventFilter$2 = TypedEventFilter<InboundNonceSkippedEvent$2>;
interface IMessagingChannel extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessagingChannelInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        eid(overrides?: CallOverrides): Promise<[number]>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    eid(overrides?: CallOverrides): Promise<number>;
    hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        eid(overrides?: CallOverrides): Promise<number>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$2;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$2;
    };
    estimateGas: {
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundNonce(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IMessagingComposerInterface extends utils.Interface {
    functions: {
        "deliverComposedMessage(address,bytes32,bytes)": FunctionFragment;
        "lzCompose(address,address,bytes32,bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "deliverComposedMessage" | "lzCompose"): FunctionFragment;
    encodeFunctionData(functionFragment: "deliverComposedMessage", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "deliverComposedMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    events: {
        "ComposedMessageDelivered(address,address,bytes32,bytes)": EventFragment;
        "ComposedMessageReceived(address,address,bytes32,bytes32,address)": EventFragment;
        "LzComposeFailed(address,address,bytes32,bytes32,address,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposedMessageDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposedMessageReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeFailed"): EventFragment;
}
interface ComposedMessageDeliveredEventObject$2 {
    receiver: string;
    composer: string;
    guid: string;
    message: string;
}
type ComposedMessageDeliveredEvent$2 = TypedEvent<[
    string,
    string,
    string,
    string
], ComposedMessageDeliveredEventObject$2>;
type ComposedMessageDeliveredEventFilter$2 = TypedEventFilter<ComposedMessageDeliveredEvent$2>;
interface ComposedMessageReceivedEventObject$2 {
    receiver: string;
    composer: string;
    guid: string;
    messageHash: string;
    caller: string;
}
type ComposedMessageReceivedEvent$2 = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], ComposedMessageReceivedEventObject$2>;
type ComposedMessageReceivedEventFilter$2 = TypedEventFilter<ComposedMessageReceivedEvent$2>;
interface LzComposeFailedEventObject$2 {
    sender: string;
    receiver: string;
    guid: string;
    messageHash: string;
    caller: string;
    reason: string;
}
type LzComposeFailedEvent$2 = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    string
], LzComposeFailedEventObject$2>;
type LzComposeFailedEventFilter$2 = TypedEventFilter<LzComposeFailedEvent$2>;
interface IMessagingComposer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessagingComposerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string]>;
    };
    filters: {
        "ComposedMessageDelivered(address,address,bytes32,bytes)"(receiver?: null, composer?: null, guid?: null, message?: null): ComposedMessageDeliveredEventFilter$2;
        ComposedMessageDelivered(receiver?: null, composer?: null, guid?: null, message?: null): ComposedMessageDeliveredEventFilter$2;
        "ComposedMessageReceived(address,address,bytes32,bytes32,address)"(receiver?: null, composer?: null, guid?: null, messageHash?: null, caller?: null): ComposedMessageReceivedEventFilter$2;
        ComposedMessageReceived(receiver?: null, composer?: null, guid?: null, messageHash?: null, caller?: null): ComposedMessageReceivedEventFilter$2;
        "LzComposeFailed(address,address,bytes32,bytes32,address,bytes)"(sender?: null, receiver?: null, guid?: null, messageHash?: null, caller?: null, reason?: null): LzComposeFailedEventFilter$2;
        LzComposeFailed(sender?: null, receiver?: null, guid?: null, messageHash?: null, caller?: null, reason?: null): LzComposeFailedEventFilter$2;
    };
    estimateGas: {
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzCompose(_receiver: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IMessagingContextInterface extends utils.Interface {
    functions: {
        "getSendContext()": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getSendContext" | "isSendingMessage"): FunctionFragment;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    events: {};
}
interface IMessagingContext extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessagingContextInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
    };
    getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$e {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$a {
    type PacketStruct = {
        origin: IMessageOrigin$e.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$e.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$e.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface IOAppInterface extends utils.Interface {
    functions: {
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "setEndpointConfig(bytes)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "lzReceive" | "lzReceiveAndRevert" | "nextNonce" | "setEndpointConfig" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$e.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [IPreCrime$a.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setEndpointConfig", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpointConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "SetPeer(uint32,bytes32,bool)": EventFragment;
        "SetPrecrime(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SetPeer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPrecrime"): EventFragment;
}
interface SetPeerEventObject$5 {
    remoteEid: number;
    peer: string;
    active: boolean;
}
type SetPeerEvent$5 = TypedEvent<[
    number,
    string,
    boolean
], SetPeerEventObject$5>;
type SetPeerEventFilter$5 = TypedEventFilter<SetPeerEvent$5>;
interface SetPrecrimeEventObject$5 {
    precrime: string;
}
type SetPrecrimeEvent$5 = TypedEvent<[string], SetPrecrimeEventObject$5>;
type SetPrecrimeEventFilter$5 = TypedEventFilter<SetPrecrimeEvent$5>;
interface IOApp extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOAppInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        lzReceive(_origin: IMessageOrigin$e.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$a.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    lzReceive(_origin: IMessageOrigin$e.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: IPreCrime$a.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        lzReceive(_origin: IMessageOrigin$e.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: IPreCrime$a.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "SetPeer(uint32,bytes32,bool)"(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$5;
        SetPeer(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$5;
        "SetPrecrime(address)"(precrime?: null): SetPrecrimeEventFilter$5;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter$5;
    };
    estimateGas: {
        lzReceive(_origin: IMessageOrigin$e.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: IPreCrime$a.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        lzReceive(_origin: IMessageOrigin$e.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$a.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$d {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
interface IPreCrimeInterface extends utils.Interface {
    functions: {
        "getPrecrimeConfig(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "precrime(((uint32,bytes32,uint64),bytes32,bytes,bytes)[],bytes[])": FunctionFragment;
        "precrimeVersion()": FunctionFragment;
        "simulate(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulateView(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulationCallback()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getPrecrimeConfig" | "precrime" | "precrimeVersion" | "simulate" | "simulateView" | "simulationCallback"): FunctionFragment;
    encodeFunctionData(functionFragment: "getPrecrimeConfig", values: [IPreCrime$9.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "precrime", values: [IPreCrime$9.PacketStruct[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "precrimeVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "simulate", values: [IPreCrime$9.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulateView", values: [IPreCrime$9.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulationCallback", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getPrecrimeConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulationCallback", data: BytesLike): Result;
    events: {};
}
declare namespace IPreCrime$9 {
    type PacketStruct = {
        origin: IMessageOrigin$d.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$d.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$d.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface IPreCrime$9 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IPreCrimeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getPrecrimeConfig(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<[string]>;
        precrime(_packets: IPreCrime$9.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeVersion(overrides?: CallOverrides): Promise<[number]>;
        simulate(_packets: IPreCrime$9.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulateView(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            result: string;
        }>;
        simulationCallback(overrides?: CallOverrides): Promise<[string]>;
    };
    getPrecrimeConfig(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<string>;
    precrime(_packets: IPreCrime$9.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        reason: string;
    }>;
    precrimeVersion(overrides?: CallOverrides): Promise<number>;
    simulate(_packets: IPreCrime$9.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulateView(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        result: string;
    }>;
    simulationCallback(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        getPrecrimeConfig(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<string>;
        precrime(_packets: IPreCrime$9.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeVersion(overrides?: CallOverrides): Promise<number>;
        simulate(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            result: string;
        }>;
        simulateView(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            result: string;
        }>;
        simulationCallback(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        getPrecrimeConfig(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$9.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        precrimeVersion(overrides?: CallOverrides): Promise<BigNumber>;
        simulate(_packets: IPreCrime$9.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulateView(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        simulationCallback(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getPrecrimeConfig(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(_packets: IPreCrime$9.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        simulate(_packets: IPreCrime$9.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulateView(_packets: IPreCrime$9.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        simulationCallback(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface IWorkerInterface extends utils.Interface {
    functions: {
        "defaultMultiplierBps()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultMultiplierBps" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface SetDefaultMultiplierBpsEventObject$5 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$5 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$5>;
type SetDefaultMultiplierBpsEventFilter$5 = TypedEventFilter<SetDefaultMultiplierBpsEvent$5>;
interface SetPriceFeedEventObject$5 {
    priceFeed: string;
}
type SetPriceFeedEvent$5 = TypedEvent<[string], SetPriceFeedEventObject$5>;
type SetPriceFeedEventFilter$5 = TypedEventFilter<SetPriceFeedEvent$5>;
interface SetWorkerLibEventObject$5 {
    workerLib: string;
}
type SetWorkerLibEvent$5 = TypedEvent<[string], SetWorkerLibEventObject$5>;
type SetWorkerLibEventFilter$5 = TypedEventFilter<SetWorkerLibEvent$5>;
interface WithdrawEventObject$5 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$5 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$5>;
type WithdrawEventFilter$5 = TypedEventFilter<WithdrawEvent$5>;
interface IWorker extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IWorkerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$5;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$5;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$5;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$5;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$5;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$5;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$5;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$5;
    };
    estimateGas: {
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$t_IInspector = IInspector;
type index$t_ILayerZeroComposer = ILayerZeroComposer;
type index$t_ILayerZeroExecutor = ILayerZeroExecutor;
type index$t_ILayerZeroReceiver = ILayerZeroReceiver;
type index$t_ILayerZeroTreasury = ILayerZeroTreasury;
type index$t_IMessageLib = IMessageLib;
type index$t_IMessagingChannel = IMessagingChannel;
type index$t_IMessagingComposer = IMessagingComposer;
type index$t_IMessagingContext = IMessagingContext;
type index$t_IOApp = IOApp;
type index$t_IWorker = IWorker;
declare namespace index$t {
  export {
    IExecutor$3 as IExecutor,
    IExecutorFeeLib$1 as IExecutorFeeLib,
    index$t_IInspector as IInspector,
    index$t_ILayerZeroComposer as ILayerZeroComposer,
    ILayerZeroEndpointV2$a as ILayerZeroEndpointV2,
    index$t_ILayerZeroExecutor as ILayerZeroExecutor,
    ILayerZeroPriceFeed$1 as ILayerZeroPriceFeed,
    index$t_ILayerZeroReceiver as ILayerZeroReceiver,
    index$t_ILayerZeroTreasury as ILayerZeroTreasury,
    index$t_IMessageLib as IMessageLib,
    IMessageLibManager$4 as IMessageLibManager,
    index$t_IMessagingChannel as IMessagingChannel,
    index$t_IMessagingComposer as IMessagingComposer,
    index$t_IMessagingContext as IMessagingContext,
    index$t_IOApp as IOApp,
    IPreCrime$9 as IPreCrime,
    index$t_IWorker as IWorker,
  };
}

interface BlockedMessageLibInterface extends utils.Interface {
    functions: {
        "supportsInterface(bytes4)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "supportsInterface" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {};
}
interface BlockedMessageLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: BlockedMessageLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    callStatic: {
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
    };
    filters: {};
    estimateGas: {
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IPacket$2 {
    type PacketForQuoteStruct = {
        sender: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        message: PromiseOrValue<BytesLike>;
    };
    type PacketForQuoteStructOutput = [string, number, string] & {
        sender: string;
        dstEid: number;
        message: string;
    };
    type PacketStruct = {
        nonce: PromiseOrValue<BigNumberish>;
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        receiver: PromiseOrValue<BytesLike>;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        BigNumber,
        number,
        string,
        number,
        string,
        string,
        string
    ] & {
        nonce: BigNumber;
        srcEid: number;
        sender: string;
        dstEid: number;
        receiver: string;
        guid: string;
        message: string;
    };
}
declare namespace ILayerZeroEndpointV2$8 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$8.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$8.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$8.MessagingFeeStructOutput;
    };
}
interface SimpleMessageLibInterface extends utils.Interface {
    functions: {
        "defaultOption()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "localEid()": FunctionFragment;
        "lzTokenFee()": FunctionFragment;
        "nativeFee()": FunctionFragment;
        "owner()": FunctionFragment;
        "packetVersion()": FunctionFragment;
        "quote((address,uint32,bytes),bool,bytes)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "setDefaultOption(bytes)": FunctionFragment;
        "setMessagingFee(uint256,uint256)": FunctionFragment;
        "setWhitelistCaller(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "validatePacket(bytes)": FunctionFragment;
        "version()": FunctionFragment;
        "whitelistCaller()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
        "withdrawLzTokenFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultOption" | "endpoint" | "isSupportedEid" | "localEid" | "lzTokenFee" | "nativeFee" | "owner" | "packetVersion" | "quote" | "renounceOwnership" | "send" | "setDefaultOption" | "setMessagingFee" | "setWhitelistCaller" | "supportsInterface" | "transferOwnership" | "treasury" | "validatePacket" | "version" | "whitelistCaller" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultOption", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "localEid", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzTokenFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "packetVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [
        IPacket$2.PacketForQuoteStruct,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [
        IPacket$2.PacketStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultOption", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setMessagingFee", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setWhitelistCaller", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "validatePacket", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "whitelistCaller", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "defaultOption", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "localEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "packetVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultOption", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMessagingFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWhitelistCaller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validatePacket", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "whitelistCaller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$h {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$h = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$h>;
type OwnershipTransferredEventFilter$h = TypedEventFilter<OwnershipTransferredEvent$h>;
interface SimpleMessageLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: SimpleMessageLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultOption(overrides?: CallOverrides): Promise<[string]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        localEid(overrides?: CallOverrides): Promise<[number]>;
        lzTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>;
        nativeFee(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        packetVersion(overrides?: CallOverrides): Promise<[number]>;
        quote(arg0: IPacket$2.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[ILayerZeroEndpointV2$8.MessagingFeeStructOutput]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_packet: IPacket$2.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        whitelistCaller(overrides?: CallOverrides): Promise<[string]>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    defaultOption(overrides?: CallOverrides): Promise<string>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    localEid(overrides?: CallOverrides): Promise<number>;
    lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
    nativeFee(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    packetVersion(overrides?: CallOverrides): Promise<number>;
    quote(arg0: IPacket$2.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$8.MessagingFeeStructOutput>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_packet: IPacket$2.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    whitelistCaller(overrides?: CallOverrides): Promise<string>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        defaultOption(overrides?: CallOverrides): Promise<string>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        localEid(overrides?: CallOverrides): Promise<number>;
        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
        nativeFee(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        packetVersion(overrides?: CallOverrides): Promise<number>;
        quote(arg0: IPacket$2.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$8.MessagingFeeStructOutput>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_packet: IPacket$2.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            ILayerZeroEndpointV2$8.MessagingReceiptStructOutput,
            string,
            string
        ] & {
            receipt: ILayerZeroEndpointV2$8.MessagingReceiptStructOutput;
            encodedPacket: string;
            options: string;
        }>;
        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        whitelistCaller(overrides?: CallOverrides): Promise<string>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$h;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$h;
    };
    estimateGas: {
        defaultOption(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        localEid(overrides?: CallOverrides): Promise<BigNumber>;
        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
        nativeFee(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        packetVersion(overrides?: CallOverrides): Promise<BigNumber>;
        quote(arg0: IPacket$2.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_packet: IPacket$2.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        whitelistCaller(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultOption(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        localEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzTokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        packetVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(arg0: IPacket$2.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_packet: IPacket$2.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMessagingFee(_nativeFee: PromiseOrValue<BigNumberish>, _lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        whitelistCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzTokenFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$s_BlockedMessageLib = BlockedMessageLib;
type index$s_SimpleMessageLib = SimpleMessageLib;
declare namespace index$s {
  export {
    index$s_BlockedMessageLib as BlockedMessageLib,
    index$s_SimpleMessageLib as SimpleMessageLib,
  };
}

declare namespace ILayerZeroEndpointV2$7 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$7.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$7.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$7.MessagingFeeStructOutput;
    };
}
interface IOFTInterface extends utils.Interface {
    functions: {
        "quoteSendAndCallFee((bytes32,uint256,uint256,uint32),bytes,bool,bytes)": FunctionFragment;
        "quoteSendFee((bytes32,uint256,uint256,uint32),bytes,bool)": FunctionFragment;
        "send((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address)": FunctionFragment;
        "sendAndCall((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address,bytes)": FunctionFragment;
        "token()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "quoteSendAndCallFee" | "quoteSendFee" | "send" | "sendAndCall" | "token"): FunctionFragment;
    encodeFunctionData(functionFragment: "quoteSendAndCallFee", values: [
        IOFT$4.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [
        IOFT$4.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "send", values: [
        IOFT$4.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$7.MessagingFeeStruct,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendAndCall", values: [
        IOFT$4.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$7.MessagingFeeStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    decodeFunctionResult(functionFragment: "quoteSendAndCallFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    events: {
        "ReceiveOFT(bytes32,address,uint256)": EventFragment;
        "SendOFT(bytes32,address,uint256)": EventFragment;
        "SetEnforcedOption(tuple[])": EventFragment;
        "SetInspector(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ReceiveOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetEnforcedOption"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetInspector"): EventFragment;
}
interface ReceiveOFTEventObject$4 {
    _guid: string;
    _toAddress: string;
    _amountLD: BigNumber;
}
type ReceiveOFTEvent$4 = TypedEvent<[
    string,
    string,
    BigNumber
], ReceiveOFTEventObject$4>;
type ReceiveOFTEventFilter$4 = TypedEventFilter<ReceiveOFTEvent$4>;
interface SendOFTEventObject$4 {
    _guid: string;
    _fromAddress: string;
    _amountLD: BigNumber;
}
type SendOFTEvent$4 = TypedEvent<[
    string,
    string,
    BigNumber
], SendOFTEventObject$4>;
type SendOFTEventFilter$4 = TypedEventFilter<SendOFTEvent$4>;
interface SetEnforcedOptionEventObject$4 {
    _enforcedOptions: IOFT$4.EnforcedOptionParamStructOutput[];
}
type SetEnforcedOptionEvent$4 = TypedEvent<[
    IOFT$4.EnforcedOptionParamStructOutput[]
], SetEnforcedOptionEventObject$4>;
type SetEnforcedOptionEventFilter$4 = TypedEventFilter<SetEnforcedOptionEvent$4>;
interface SetInspectorEventObject$4 {
    _inspector: string;
}
type SetInspectorEvent$4 = TypedEvent<[string], SetInspectorEventObject$4>;
type SetInspectorEventFilter$4 = TypedEventFilter<SetInspectorEvent$4>;
declare namespace IOFT$4 {
    type EnforcedOptionParamStruct = {
        executionType: PromiseOrValue<BigNumberish>;
        eid: PromiseOrValue<BigNumberish>;
        options: PromiseOrValue<BytesLike>;
    };
    type EnforcedOptionParamStructOutput = [BigNumber, number, string] & {
        executionType: BigNumber;
        eid: number;
        options: string;
    };
    type SendParamStruct = {
        to: PromiseOrValue<BytesLike>;
        amountLD: PromiseOrValue<BigNumberish>;
        minAmountLD: PromiseOrValue<BigNumberish>;
        dstEid: PromiseOrValue<BigNumberish>;
    };
    type SendParamStructOutput = [string, BigNumber, BigNumber, number] & {
        to: string;
        amountLD: BigNumber;
        minAmountLD: BigNumber;
        dstEid: number;
    };
}
interface IOFT$4 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOFTInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        quoteSendAndCallFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        send(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendAndCall(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        token(overrides?: CallOverrides): Promise<[string]>;
    };
    quoteSendAndCallFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    quoteSendFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    send(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendAndCall(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    token(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        quoteSendAndCallFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        send(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$7.MessagingReceiptStructOutput>;
        sendAndCall(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$7.MessagingReceiptStructOutput>;
        token(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ReceiveOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter$4;
        ReceiveOFT(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter$4;
        "SendOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter$4;
        SendOFT(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter$4;
        "SetEnforcedOption(tuple[])"(_enforcedOptions?: null): SetEnforcedOptionEventFilter$4;
        SetEnforcedOption(_enforcedOptions?: null): SetEnforcedOptionEventFilter$4;
        "SetInspector(address)"(_inspector?: null): SetInspectorEventFilter$4;
        SetInspector(_inspector?: null): SetInspectorEventFilter$4;
    };
    estimateGas: {
        quoteSendAndCallFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendAndCall(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        quoteSendAndCallFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendFee(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendAndCall(_send: IOFT$4.SendParamStruct, _options: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$7.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace index$r {
  export {
    IOFT$4 as IOFT,
  };
}

declare namespace IOFT$3 {
    type EnforcedOptionParamStruct = {
        executionType: PromiseOrValue<BigNumberish>;
        eid: PromiseOrValue<BigNumberish>;
        options: PromiseOrValue<BytesLike>;
    };
    type EnforcedOptionParamStructOutput = [BigNumber, number, string] & {
        executionType: BigNumber;
        eid: number;
        options: string;
    };
    type SendParamStruct = {
        to: PromiseOrValue<BytesLike>;
        amountLD: PromiseOrValue<BigNumberish>;
        minAmountLD: PromiseOrValue<BigNumberish>;
        dstEid: PromiseOrValue<BigNumberish>;
    };
    type SendParamStructOutput = [string, BigNumber, BigNumber, number] & {
        to: string;
        amountLD: BigNumber;
        minAmountLD: BigNumber;
        dstEid: number;
    };
}
declare namespace IMessageOrigin$c {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$8 {
    type PacketStruct = {
        origin: IMessageOrigin$c.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$c.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$c.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
declare namespace ILayerZeroEndpointV2$6 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$6.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$6.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$6.MessagingFeeStructOutput;
    };
}
interface TestOFTInterface extends utils.Interface {
    functions: {
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "decimals()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "endpoint()": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "inspector()": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "mint(address,uint256)": FunctionFragment;
        "name()": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "precrime()": FunctionFragment;
        "quoteSendAndCallFee((bytes32,uint256,uint256,uint32),bytes,bool,bytes)": FunctionFragment;
        "quoteSendFee((bytes32,uint256,uint256,uint32),bytes,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "safeGetPeer(uint32)": FunctionFragment;
        "send((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address)": FunctionFragment;
        "sendAndCall((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address,bytes)": FunctionFragment;
        "setEndpointConfig(bytes)": FunctionFragment;
        "setEnforcedOptions((uint256,uint32,bytes)[])": FunctionFragment;
        "setInspector(address)": FunctionFragment;
        "setPeer(uint32,bytes32,bool)": FunctionFragment;
        "setPrecrime(address)": FunctionFragment;
        "sharedDecimals()": FunctionFragment;
        "symbol()": FunctionFragment;
        "token()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "allowance" | "approve" | "balanceOf" | "decimals" | "decreaseAllowance" | "endpoint" | "increaseAllowance" | "inspector" | "lzReceive" | "lzReceiveAndRevert" | "mint" | "name" | "nextNonce" | "owner" | "peers" | "precrime" | "quoteSendAndCallFee" | "quoteSendFee" | "renounceOwnership" | "safeGetPeer" | "send" | "sendAndCall" | "setEndpointConfig" | "setEnforcedOptions" | "setInspector" | "setPeer" | "setPrecrime" | "sharedDecimals" | "symbol" | "token" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "allowance", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "approve", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$c.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [IPreCrime$8.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "mint", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteSendAndCallFee", values: [
        IOFT$3.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [
        IOFT$3.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "send", values: [
        IOFT$3.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$6.MessagingFeeStruct,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendAndCall", values: [
        IOFT$3.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$6.MessagingFeeStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setEndpointConfig", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [IOFT$3.EnforcedOptionParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setInspector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setPrecrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendAndCallFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpointConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "Approval(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "ReceiveOFT(bytes32,address,uint256)": EventFragment;
        "SendOFT(bytes32,address,uint256)": EventFragment;
        "SetEnforcedOption(tuple[])": EventFragment;
        "SetInspector(address)": EventFragment;
        "SetPeer(uint32,bytes32,bool)": EventFragment;
        "SetPrecrime(address)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetEnforcedOption"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetInspector"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPeer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPrecrime"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}
interface ApprovalEventObject$1 {
    owner: string;
    spender: string;
    value: BigNumber;
}
type ApprovalEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], ApprovalEventObject$1>;
type ApprovalEventFilter$1 = TypedEventFilter<ApprovalEvent$1>;
interface OwnershipTransferredEventObject$g {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$g = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$g>;
type OwnershipTransferredEventFilter$g = TypedEventFilter<OwnershipTransferredEvent$g>;
interface ReceiveOFTEventObject$3 {
    _guid: string;
    _toAddress: string;
    _amountLD: BigNumber;
}
type ReceiveOFTEvent$3 = TypedEvent<[
    string,
    string,
    BigNumber
], ReceiveOFTEventObject$3>;
type ReceiveOFTEventFilter$3 = TypedEventFilter<ReceiveOFTEvent$3>;
interface SendOFTEventObject$3 {
    _guid: string;
    _fromAddress: string;
    _amountLD: BigNumber;
}
type SendOFTEvent$3 = TypedEvent<[
    string,
    string,
    BigNumber
], SendOFTEventObject$3>;
type SendOFTEventFilter$3 = TypedEventFilter<SendOFTEvent$3>;
interface SetEnforcedOptionEventObject$3 {
    _enforcedOptions: IOFT$3.EnforcedOptionParamStructOutput[];
}
type SetEnforcedOptionEvent$3 = TypedEvent<[
    IOFT$3.EnforcedOptionParamStructOutput[]
], SetEnforcedOptionEventObject$3>;
type SetEnforcedOptionEventFilter$3 = TypedEventFilter<SetEnforcedOptionEvent$3>;
interface SetInspectorEventObject$3 {
    _inspector: string;
}
type SetInspectorEvent$3 = TypedEvent<[string], SetInspectorEventObject$3>;
type SetInspectorEventFilter$3 = TypedEventFilter<SetInspectorEvent$3>;
interface SetPeerEventObject$4 {
    remoteEid: number;
    peer: string;
    active: boolean;
}
type SetPeerEvent$4 = TypedEvent<[
    number,
    string,
    boolean
], SetPeerEventObject$4>;
type SetPeerEventFilter$4 = TypedEventFilter<SetPeerEvent$4>;
interface SetPrecrimeEventObject$4 {
    precrime: string;
}
type SetPrecrimeEvent$4 = TypedEvent<[string], SetPrecrimeEventObject$4>;
type SetPrecrimeEventFilter$4 = TypedEventFilter<SetPrecrimeEvent$4>;
interface TransferEventObject$1 {
    from: string;
    to: string;
    value: BigNumber;
}
type TransferEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], TransferEventObject$1>;
type TransferEventFilter$1 = TypedEventFilter<TransferEvent$1>;
interface TestOFT extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestOFTInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        decimals(overrides?: CallOverrides): Promise<[number]>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        inspector(overrides?: CallOverrides): Promise<[string]>;
        lzReceive(_origin: IMessageOrigin$c.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$8.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        mint(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        name(overrides?: CallOverrides): Promise<[string]>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrime(overrides?: CallOverrides): Promise<[string]>;
        quoteSendAndCallFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        send(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendAndCall(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEnforcedOptions(_enforcedOptions: IOFT$3.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    decimals(overrides?: CallOverrides): Promise<number>;
    decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    inspector(overrides?: CallOverrides): Promise<string>;
    lzReceive(_origin: IMessageOrigin$c.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: IPreCrime$8.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    mint(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    name(overrides?: CallOverrides): Promise<string>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrime(overrides?: CallOverrides): Promise<string>;
    quoteSendAndCallFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    quoteSendFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    send(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendAndCall(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEnforcedOptions(_enforcedOptions: IOFT$3.EnforcedOptionParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    symbol(overrides?: CallOverrides): Promise<string>;
    token(overrides?: CallOverrides): Promise<string>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<number>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        inspector(overrides?: CallOverrides): Promise<string>;
        lzReceive(_origin: IMessageOrigin$c.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: IPreCrime$8.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        mint(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        name(overrides?: CallOverrides): Promise<string>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrime(overrides?: CallOverrides): Promise<string>;
        quoteSendAndCallFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        send(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$6.MessagingReceiptStructOutput>;
        sendAndCall(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$6.MessagingReceiptStructOutput>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setEnforcedOptions(_enforcedOptions: IOFT$3.EnforcedOptionParamStruct[], overrides?: CallOverrides): Promise<void>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        symbol(overrides?: CallOverrides): Promise<string>;
        token(overrides?: CallOverrides): Promise<string>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "Approval(address,address,uint256)"(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter$1;
        Approval(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$g;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$g;
        "ReceiveOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter$3;
        ReceiveOFT(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter$3;
        "SendOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter$3;
        SendOFT(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter$3;
        "SetEnforcedOption(tuple[])"(_enforcedOptions?: null): SetEnforcedOptionEventFilter$3;
        SetEnforcedOption(_enforcedOptions?: null): SetEnforcedOptionEventFilter$3;
        "SetInspector(address)"(_inspector?: null): SetInspectorEventFilter$3;
        SetInspector(_inspector?: null): SetInspectorEventFilter$3;
        "SetPeer(uint32,bytes32,bool)"(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$4;
        SetPeer(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$4;
        "SetPrecrime(address)"(precrime?: null): SetPrecrimeEventFilter$4;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter$4;
        "Transfer(address,address,uint256)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter$1;
        Transfer(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter$1;
    };
    estimateGas: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        inspector(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: IMessageOrigin$c.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: IPreCrime$8.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        mint(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendAndCallFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendAndCall(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: IOFT$3.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        inspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: IMessageOrigin$c.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$8.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        mint(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendAndCallFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendFee(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendAndCall(_send: IOFT$3.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$6.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: IOFT$3.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$q_TestOFT = TestOFT;
declare namespace index$q {
  export {
    index$q_TestOFT as TestOFT,
  };
}

interface FeeInterface extends utils.Interface {
    functions: {
        "BP_DENOMINATOR()": FunctionFragment;
        "defaultFeeBp()": FunctionFragment;
        "dstEidToFeeBps(uint32)": FunctionFragment;
        "feeOwner()": FunctionFragment;
        "owner()": FunctionFragment;
        "quoteOFTFee(uint32,uint256)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDefaultFeeBp(uint16)": FunctionFragment;
        "setFeeBp(uint32,bool,uint16)": FunctionFragment;
        "setFeeOwner(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "BP_DENOMINATOR" | "defaultFeeBp" | "dstEidToFeeBps" | "feeOwner" | "owner" | "quoteOFTFee" | "renounceOwnership" | "setDefaultFeeBp" | "setFeeBp" | "setFeeOwner" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "BP_DENOMINATOR", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultFeeBp", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstEidToFeeBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "feeOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteOFTFee", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultFeeBp", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setFeeBp", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setFeeOwner", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "BP_DENOMINATOR", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultFeeBp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstEidToFeeBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feeOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteOFTFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultFeeBp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeBp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "SetDefaultFeeBp(uint16)": EventFragment;
        "SetFeeBp(uint32,bool,uint16)": EventFragment;
        "SetFeeOwner(address)": EventFragment;
        "SetFeesEnabled(bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultFeeBp"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetFeeBp"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetFeeOwner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetFeesEnabled"): EventFragment;
}
interface OwnershipTransferredEventObject$f {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$f = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$f>;
type OwnershipTransferredEventFilter$f = TypedEventFilter<OwnershipTransferredEvent$f>;
interface SetDefaultFeeBpEventObject {
    feeBp: number;
}
type SetDefaultFeeBpEvent = TypedEvent<[
    number
], SetDefaultFeeBpEventObject>;
type SetDefaultFeeBpEventFilter = TypedEventFilter<SetDefaultFeeBpEvent>;
interface SetFeeBpEventObject {
    dstEid: number;
    enabled: boolean;
    feeBp: number;
}
type SetFeeBpEvent = TypedEvent<[
    number,
    boolean,
    number
], SetFeeBpEventObject>;
type SetFeeBpEventFilter = TypedEventFilter<SetFeeBpEvent>;
interface SetFeeOwnerEventObject {
    feeOwner: string;
}
type SetFeeOwnerEvent = TypedEvent<[string], SetFeeOwnerEventObject>;
type SetFeeOwnerEventFilter = TypedEventFilter<SetFeeOwnerEvent>;
interface SetFeesEnabledEventObject {
    isEnabled: boolean;
}
type SetFeesEnabledEvent = TypedEvent<[
    boolean
], SetFeesEnabledEventObject>;
type SetFeesEnabledEventFilter = TypedEventFilter<SetFeesEnabledEvent>;
interface Fee extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: FeeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        BP_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;
        defaultFeeBp(overrides?: CallOverrides): Promise<[number]>;
        dstEidToFeeBps(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, boolean] & {
            feeBP: number;
            enabled: boolean;
        }>;
        feeOwner(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quoteOFTFee(_dstEid: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultFeeBp(_feeBp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setFeeBp(_dstEid: PromiseOrValue<BigNumberish>, _enabled: PromiseOrValue<boolean>, _feeBp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setFeeOwner(_feeOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
    defaultFeeBp(overrides?: CallOverrides): Promise<number>;
    dstEidToFeeBps(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, boolean] & {
        feeBP: number;
        enabled: boolean;
    }>;
    feeOwner(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    quoteOFTFee(_dstEid: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultFeeBp(_feeBp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setFeeBp(_dstEid: PromiseOrValue<BigNumberish>, _enabled: PromiseOrValue<boolean>, _feeBp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setFeeOwner(_feeOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
        defaultFeeBp(overrides?: CallOverrides): Promise<number>;
        dstEidToFeeBps(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number, boolean] & {
            feeBP: number;
            enabled: boolean;
        }>;
        feeOwner(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        quoteOFTFee(_dstEid: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDefaultFeeBp(_feeBp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setFeeBp(_dstEid: PromiseOrValue<BigNumberish>, _enabled: PromiseOrValue<boolean>, _feeBp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setFeeOwner(_feeOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$f;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$f;
        "SetDefaultFeeBp(uint16)"(feeBp?: null): SetDefaultFeeBpEventFilter;
        SetDefaultFeeBp(feeBp?: null): SetDefaultFeeBpEventFilter;
        "SetFeeBp(uint32,bool,uint16)"(dstEid?: null, enabled?: null, feeBp?: null): SetFeeBpEventFilter;
        SetFeeBp(dstEid?: null, enabled?: null, feeBp?: null): SetFeeBpEventFilter;
        "SetFeeOwner(address)"(feeOwner?: null): SetFeeOwnerEventFilter;
        SetFeeOwner(feeOwner?: null): SetFeeOwnerEventFilter;
        "SetFeesEnabled(bool)"(isEnabled?: null): SetFeesEnabledEventFilter;
        SetFeesEnabled(isEnabled?: null): SetFeesEnabledEventFilter;
    };
    estimateGas: {
        BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;
        defaultFeeBp(overrides?: CallOverrides): Promise<BigNumber>;
        dstEidToFeeBps(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        feeOwner(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quoteOFTFee(_dstEid: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultFeeBp(_feeBp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setFeeBp(_dstEid: PromiseOrValue<BigNumberish>, _enabled: PromiseOrValue<boolean>, _feeBp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setFeeOwner(_feeOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        BP_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultFeeBp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstEidToFeeBps(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        feeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteOFTFee(_dstEid: PromiseOrValue<BigNumberish>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultFeeBp(_feeBp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setFeeBp(_dstEid: PromiseOrValue<BigNumberish>, _enabled: PromiseOrValue<boolean>, _feeBp: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setFeeOwner(_feeOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IOFT$2 {
    type EnforcedOptionParamStruct = {
        executionType: PromiseOrValue<BigNumberish>;
        eid: PromiseOrValue<BigNumberish>;
        options: PromiseOrValue<BytesLike>;
    };
    type EnforcedOptionParamStructOutput = [BigNumber, number, string] & {
        executionType: BigNumber;
        eid: number;
        options: string;
    };
    type SendParamStruct = {
        to: PromiseOrValue<BytesLike>;
        amountLD: PromiseOrValue<BigNumberish>;
        minAmountLD: PromiseOrValue<BigNumberish>;
        dstEid: PromiseOrValue<BigNumberish>;
    };
    type SendParamStructOutput = [string, BigNumber, BigNumber, number] & {
        to: string;
        amountLD: BigNumber;
        minAmountLD: BigNumber;
        dstEid: number;
    };
}
declare namespace IMessageOrigin$b {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$7 {
    type PacketStruct = {
        origin: IMessageOrigin$b.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$b.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$b.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
declare namespace ILayerZeroEndpointV2$5 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$5.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$5.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$5.MessagingFeeStructOutput;
    };
}
interface OFTInterface extends utils.Interface {
    functions: {
        "allowance(address,address)": FunctionFragment;
        "approve(address,uint256)": FunctionFragment;
        "balanceOf(address)": FunctionFragment;
        "decimals()": FunctionFragment;
        "decreaseAllowance(address,uint256)": FunctionFragment;
        "endpoint()": FunctionFragment;
        "increaseAllowance(address,uint256)": FunctionFragment;
        "inspector()": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "name()": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "precrime()": FunctionFragment;
        "quoteSendAndCallFee((bytes32,uint256,uint256,uint32),bytes,bool,bytes)": FunctionFragment;
        "quoteSendFee((bytes32,uint256,uint256,uint32),bytes,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "safeGetPeer(uint32)": FunctionFragment;
        "send((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address)": FunctionFragment;
        "sendAndCall((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address,bytes)": FunctionFragment;
        "setEndpointConfig(bytes)": FunctionFragment;
        "setEnforcedOptions((uint256,uint32,bytes)[])": FunctionFragment;
        "setInspector(address)": FunctionFragment;
        "setPeer(uint32,bytes32,bool)": FunctionFragment;
        "setPrecrime(address)": FunctionFragment;
        "sharedDecimals()": FunctionFragment;
        "symbol()": FunctionFragment;
        "token()": FunctionFragment;
        "totalSupply()": FunctionFragment;
        "transfer(address,uint256)": FunctionFragment;
        "transferFrom(address,address,uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "allowance" | "approve" | "balanceOf" | "decimals" | "decreaseAllowance" | "endpoint" | "increaseAllowance" | "inspector" | "lzReceive" | "lzReceiveAndRevert" | "name" | "nextNonce" | "owner" | "peers" | "precrime" | "quoteSendAndCallFee" | "quoteSendFee" | "renounceOwnership" | "safeGetPeer" | "send" | "sendAndCall" | "setEndpointConfig" | "setEnforcedOptions" | "setInspector" | "setPeer" | "setPrecrime" | "sharedDecimals" | "symbol" | "token" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "allowance", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "approve", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$b.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [IPreCrime$7.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteSendAndCallFee", values: [
        IOFT$2.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [
        IOFT$2.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "send", values: [
        IOFT$2.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$5.MessagingFeeStruct,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendAndCall", values: [
        IOFT$2.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$5.MessagingFeeStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setEndpointConfig", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [IOFT$2.EnforcedOptionParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setInspector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setPrecrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendAndCallFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpointConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "Approval(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "ReceiveOFT(bytes32,address,uint256)": EventFragment;
        "SendOFT(bytes32,address,uint256)": EventFragment;
        "SetEnforcedOption(tuple[])": EventFragment;
        "SetInspector(address)": EventFragment;
        "SetPeer(uint32,bytes32,bool)": EventFragment;
        "SetPrecrime(address)": EventFragment;
        "Transfer(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetEnforcedOption"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetInspector"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPeer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPrecrime"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}
interface ApprovalEventObject {
    owner: string;
    spender: string;
    value: BigNumber;
}
type ApprovalEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ApprovalEventObject>;
type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
interface OwnershipTransferredEventObject$e {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$e = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$e>;
type OwnershipTransferredEventFilter$e = TypedEventFilter<OwnershipTransferredEvent$e>;
interface ReceiveOFTEventObject$2 {
    _guid: string;
    _toAddress: string;
    _amountLD: BigNumber;
}
type ReceiveOFTEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber
], ReceiveOFTEventObject$2>;
type ReceiveOFTEventFilter$2 = TypedEventFilter<ReceiveOFTEvent$2>;
interface SendOFTEventObject$2 {
    _guid: string;
    _fromAddress: string;
    _amountLD: BigNumber;
}
type SendOFTEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber
], SendOFTEventObject$2>;
type SendOFTEventFilter$2 = TypedEventFilter<SendOFTEvent$2>;
interface SetEnforcedOptionEventObject$2 {
    _enforcedOptions: IOFT$2.EnforcedOptionParamStructOutput[];
}
type SetEnforcedOptionEvent$2 = TypedEvent<[
    IOFT$2.EnforcedOptionParamStructOutput[]
], SetEnforcedOptionEventObject$2>;
type SetEnforcedOptionEventFilter$2 = TypedEventFilter<SetEnforcedOptionEvent$2>;
interface SetInspectorEventObject$2 {
    _inspector: string;
}
type SetInspectorEvent$2 = TypedEvent<[string], SetInspectorEventObject$2>;
type SetInspectorEventFilter$2 = TypedEventFilter<SetInspectorEvent$2>;
interface SetPeerEventObject$3 {
    remoteEid: number;
    peer: string;
    active: boolean;
}
type SetPeerEvent$3 = TypedEvent<[
    number,
    string,
    boolean
], SetPeerEventObject$3>;
type SetPeerEventFilter$3 = TypedEventFilter<SetPeerEvent$3>;
interface SetPrecrimeEventObject$3 {
    precrime: string;
}
type SetPrecrimeEvent$3 = TypedEvent<[string], SetPrecrimeEventObject$3>;
type SetPrecrimeEventFilter$3 = TypedEventFilter<SetPrecrimeEvent$3>;
interface TransferEventObject {
    from: string;
    to: string;
    value: BigNumber;
}
type TransferEvent = TypedEvent<[
    string,
    string,
    BigNumber
], TransferEventObject>;
type TransferEventFilter = TypedEventFilter<TransferEvent>;
interface OFT extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OFTInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        decimals(overrides?: CallOverrides): Promise<[number]>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        inspector(overrides?: CallOverrides): Promise<[string]>;
        lzReceive(_origin: IMessageOrigin$b.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$7.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        name(overrides?: CallOverrides): Promise<[string]>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrime(overrides?: CallOverrides): Promise<[string]>;
        quoteSendAndCallFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        send(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendAndCall(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEnforcedOptions(_enforcedOptions: IOFT$2.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        symbol(overrides?: CallOverrides): Promise<[string]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    decimals(overrides?: CallOverrides): Promise<number>;
    decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    inspector(overrides?: CallOverrides): Promise<string>;
    lzReceive(_origin: IMessageOrigin$b.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: IPreCrime$7.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    name(overrides?: CallOverrides): Promise<string>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrime(overrides?: CallOverrides): Promise<string>;
    quoteSendAndCallFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    quoteSendFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    send(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendAndCall(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEnforcedOptions(_enforcedOptions: IOFT$2.EnforcedOptionParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    symbol(overrides?: CallOverrides): Promise<string>;
    token(overrides?: CallOverrides): Promise<string>;
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
    transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<number>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        inspector(overrides?: CallOverrides): Promise<string>;
        lzReceive(_origin: IMessageOrigin$b.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: IPreCrime$7.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        name(overrides?: CallOverrides): Promise<string>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrime(overrides?: CallOverrides): Promise<string>;
        quoteSendAndCallFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        send(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$5.MessagingReceiptStructOutput>;
        sendAndCall(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$5.MessagingReceiptStructOutput>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setEnforcedOptions(_enforcedOptions: IOFT$2.EnforcedOptionParamStruct[], overrides?: CallOverrides): Promise<void>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        symbol(overrides?: CallOverrides): Promise<string>;
        token(overrides?: CallOverrides): Promise<string>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "Approval(address,address,uint256)"(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter;
        Approval(owner?: PromiseOrValue<string> | null, spender?: PromiseOrValue<string> | null, value?: null): ApprovalEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$e;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$e;
        "ReceiveOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter$2;
        ReceiveOFT(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter$2;
        "SendOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter$2;
        SendOFT(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter$2;
        "SetEnforcedOption(tuple[])"(_enforcedOptions?: null): SetEnforcedOptionEventFilter$2;
        SetEnforcedOption(_enforcedOptions?: null): SetEnforcedOptionEventFilter$2;
        "SetInspector(address)"(_inspector?: null): SetInspectorEventFilter$2;
        SetInspector(_inspector?: null): SetInspectorEventFilter$2;
        "SetPeer(uint32,bytes32,bool)"(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$3;
        SetPeer(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$3;
        "SetPrecrime(address)"(precrime?: null): SetPrecrimeEventFilter$3;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter$3;
        "Transfer(address,address,uint256)"(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter;
        Transfer(from?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, value?: null): TransferEventFilter;
    };
    estimateGas: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        decimals(overrides?: CallOverrides): Promise<BigNumber>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        inspector(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: IMessageOrigin$b.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: IPreCrime$7.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        name(overrides?: CallOverrides): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendAndCallFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendAndCall(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: IOFT$2.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        symbol(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        allowance(owner: PromiseOrValue<string>, spender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        approve(spender: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        decreaseAllowance(spender: PromiseOrValue<string>, subtractedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increaseAllowance(spender: PromiseOrValue<string>, addedValue: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        inspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: IMessageOrigin$b.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$7.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendAndCallFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendFee(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendAndCall(_send: IOFT$2.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$5.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: IOFT$2.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transfer(to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferFrom(from: PromiseOrValue<string>, to: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IOFT$1 {
    type EnforcedOptionParamStruct = {
        executionType: PromiseOrValue<BigNumberish>;
        eid: PromiseOrValue<BigNumberish>;
        options: PromiseOrValue<BytesLike>;
    };
    type EnforcedOptionParamStructOutput = [BigNumber, number, string] & {
        executionType: BigNumber;
        eid: number;
        options: string;
    };
    type SendParamStruct = {
        to: PromiseOrValue<BytesLike>;
        amountLD: PromiseOrValue<BigNumberish>;
        minAmountLD: PromiseOrValue<BigNumberish>;
        dstEid: PromiseOrValue<BigNumberish>;
    };
    type SendParamStructOutput = [string, BigNumber, BigNumber, number] & {
        to: string;
        amountLD: BigNumber;
        minAmountLD: BigNumber;
        dstEid: number;
    };
}
declare namespace IMessageOrigin$a {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$6 {
    type PacketStruct = {
        origin: IMessageOrigin$a.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$a.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$a.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
declare namespace ILayerZeroEndpointV2$4 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$4.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$4.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$4.MessagingFeeStructOutput;
    };
}
interface OFTAdapterInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "inspector()": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "precrime()": FunctionFragment;
        "quoteSendAndCallFee((bytes32,uint256,uint256,uint32),bytes,bool,bytes)": FunctionFragment;
        "quoteSendFee((bytes32,uint256,uint256,uint32),bytes,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "safeGetPeer(uint32)": FunctionFragment;
        "send((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address)": FunctionFragment;
        "sendAndCall((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address,bytes)": FunctionFragment;
        "setEndpointConfig(bytes)": FunctionFragment;
        "setEnforcedOptions((uint256,uint32,bytes)[])": FunctionFragment;
        "setInspector(address)": FunctionFragment;
        "setPeer(uint32,bytes32,bool)": FunctionFragment;
        "setPrecrime(address)": FunctionFragment;
        "sharedDecimals()": FunctionFragment;
        "token()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "inspector" | "lzReceive" | "lzReceiveAndRevert" | "nextNonce" | "owner" | "peers" | "precrime" | "quoteSendAndCallFee" | "quoteSendFee" | "renounceOwnership" | "safeGetPeer" | "send" | "sendAndCall" | "setEndpointConfig" | "setEnforcedOptions" | "setInspector" | "setPeer" | "setPrecrime" | "sharedDecimals" | "token" | "transferOwnership" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$a.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [IPreCrime$6.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteSendAndCallFee", values: [
        IOFT$1.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [
        IOFT$1.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "send", values: [
        IOFT$1.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$4.MessagingFeeStruct,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendAndCall", values: [
        IOFT$1.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$4.MessagingFeeStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setEndpointConfig", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [IOFT$1.EnforcedOptionParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setInspector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setPrecrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendAndCallFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpointConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "ReceiveOFT(bytes32,address,uint256)": EventFragment;
        "SendOFT(bytes32,address,uint256)": EventFragment;
        "SetEnforcedOption(tuple[])": EventFragment;
        "SetInspector(address)": EventFragment;
        "SetPeer(uint32,bytes32,bool)": EventFragment;
        "SetPrecrime(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetEnforcedOption"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetInspector"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPeer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPrecrime"): EventFragment;
}
interface OwnershipTransferredEventObject$d {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$d = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$d>;
type OwnershipTransferredEventFilter$d = TypedEventFilter<OwnershipTransferredEvent$d>;
interface ReceiveOFTEventObject$1 {
    _guid: string;
    _toAddress: string;
    _amountLD: BigNumber;
}
type ReceiveOFTEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], ReceiveOFTEventObject$1>;
type ReceiveOFTEventFilter$1 = TypedEventFilter<ReceiveOFTEvent$1>;
interface SendOFTEventObject$1 {
    _guid: string;
    _fromAddress: string;
    _amountLD: BigNumber;
}
type SendOFTEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], SendOFTEventObject$1>;
type SendOFTEventFilter$1 = TypedEventFilter<SendOFTEvent$1>;
interface SetEnforcedOptionEventObject$1 {
    _enforcedOptions: IOFT$1.EnforcedOptionParamStructOutput[];
}
type SetEnforcedOptionEvent$1 = TypedEvent<[
    IOFT$1.EnforcedOptionParamStructOutput[]
], SetEnforcedOptionEventObject$1>;
type SetEnforcedOptionEventFilter$1 = TypedEventFilter<SetEnforcedOptionEvent$1>;
interface SetInspectorEventObject$1 {
    _inspector: string;
}
type SetInspectorEvent$1 = TypedEvent<[string], SetInspectorEventObject$1>;
type SetInspectorEventFilter$1 = TypedEventFilter<SetInspectorEvent$1>;
interface SetPeerEventObject$2 {
    remoteEid: number;
    peer: string;
    active: boolean;
}
type SetPeerEvent$2 = TypedEvent<[
    number,
    string,
    boolean
], SetPeerEventObject$2>;
type SetPeerEventFilter$2 = TypedEventFilter<SetPeerEvent$2>;
interface SetPrecrimeEventObject$2 {
    precrime: string;
}
type SetPrecrimeEvent$2 = TypedEvent<[string], SetPrecrimeEventObject$2>;
type SetPrecrimeEventFilter$2 = TypedEventFilter<SetPrecrimeEvent$2>;
interface OFTAdapter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OFTAdapterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        inspector(overrides?: CallOverrides): Promise<[string]>;
        lzReceive(_origin: IMessageOrigin$a.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$6.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrime(overrides?: CallOverrides): Promise<[string]>;
        quoteSendAndCallFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        send(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendAndCall(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEnforcedOptions(_enforcedOptions: IOFT$1.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    inspector(overrides?: CallOverrides): Promise<string>;
    lzReceive(_origin: IMessageOrigin$a.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: IPreCrime$6.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrime(overrides?: CallOverrides): Promise<string>;
    quoteSendAndCallFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    quoteSendFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    send(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendAndCall(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEnforcedOptions(_enforcedOptions: IOFT$1.EnforcedOptionParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    token(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        inspector(overrides?: CallOverrides): Promise<string>;
        lzReceive(_origin: IMessageOrigin$a.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: IPreCrime$6.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrime(overrides?: CallOverrides): Promise<string>;
        quoteSendAndCallFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        send(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$4.MessagingReceiptStructOutput>;
        sendAndCall(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$4.MessagingReceiptStructOutput>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setEnforcedOptions(_enforcedOptions: IOFT$1.EnforcedOptionParamStruct[], overrides?: CallOverrides): Promise<void>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        token(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$d;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$d;
        "ReceiveOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter$1;
        ReceiveOFT(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter$1;
        "SendOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter$1;
        SendOFT(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter$1;
        "SetEnforcedOption(tuple[])"(_enforcedOptions?: null): SetEnforcedOptionEventFilter$1;
        SetEnforcedOption(_enforcedOptions?: null): SetEnforcedOptionEventFilter$1;
        "SetInspector(address)"(_inspector?: null): SetInspectorEventFilter$1;
        SetInspector(_inspector?: null): SetInspectorEventFilter$1;
        "SetPeer(uint32,bytes32,bool)"(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$2;
        SetPeer(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$2;
        "SetPrecrime(address)"(precrime?: null): SetPrecrimeEventFilter$2;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter$2;
    };
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        inspector(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: IMessageOrigin$a.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: IPreCrime$6.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendAndCallFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendAndCall(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: IOFT$1.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: IMessageOrigin$a.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$6.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendAndCallFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendFee(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendAndCall(_send: IOFT$1.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$4.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: IOFT$1.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IOFT {
    type EnforcedOptionParamStruct = {
        executionType: PromiseOrValue<BigNumberish>;
        eid: PromiseOrValue<BigNumberish>;
        options: PromiseOrValue<BytesLike>;
    };
    type EnforcedOptionParamStructOutput = [BigNumber, number, string] & {
        executionType: BigNumber;
        eid: number;
        options: string;
    };
    type SendParamStruct = {
        to: PromiseOrValue<BytesLike>;
        amountLD: PromiseOrValue<BigNumberish>;
        minAmountLD: PromiseOrValue<BigNumberish>;
        dstEid: PromiseOrValue<BigNumberish>;
    };
    type SendParamStructOutput = [string, BigNumber, BigNumber, number] & {
        to: string;
        amountLD: BigNumber;
        minAmountLD: BigNumber;
        dstEid: number;
    };
}
declare namespace IMessageOrigin$9 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$5 {
    type PacketStruct = {
        origin: IMessageOrigin$9.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$9.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$9.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
declare namespace ILayerZeroEndpointV2$3 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$3.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$3.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$3.MessagingFeeStructOutput;
    };
}
interface OFTCoreInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "inspector()": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "precrime()": FunctionFragment;
        "quoteSendAndCallFee((bytes32,uint256,uint256,uint32),bytes,bool,bytes)": FunctionFragment;
        "quoteSendFee((bytes32,uint256,uint256,uint32),bytes,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "safeGetPeer(uint32)": FunctionFragment;
        "send((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address)": FunctionFragment;
        "sendAndCall((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address,bytes)": FunctionFragment;
        "setEndpointConfig(bytes)": FunctionFragment;
        "setEnforcedOptions((uint256,uint32,bytes)[])": FunctionFragment;
        "setInspector(address)": FunctionFragment;
        "setPeer(uint32,bytes32,bool)": FunctionFragment;
        "setPrecrime(address)": FunctionFragment;
        "sharedDecimals()": FunctionFragment;
        "token()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "inspector" | "lzReceive" | "lzReceiveAndRevert" | "nextNonce" | "owner" | "peers" | "precrime" | "quoteSendAndCallFee" | "quoteSendFee" | "renounceOwnership" | "safeGetPeer" | "send" | "sendAndCall" | "setEndpointConfig" | "setEnforcedOptions" | "setInspector" | "setPeer" | "setPrecrime" | "sharedDecimals" | "token" | "transferOwnership" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "inspector", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$9.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [IPreCrime$5.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteSendAndCallFee", values: [
        IOFT.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "quoteSendFee", values: [
        IOFT.SendParamStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "send", values: [
        IOFT.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$3.MessagingFeeStruct,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendAndCall", values: [
        IOFT.SendParamStruct,
        PromiseOrValue<BytesLike>,
        ILayerZeroEndpointV2$3.MessagingFeeStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setEndpointConfig", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setEnforcedOptions", values: [IOFT.EnforcedOptionParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setInspector", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setPrecrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "sharedDecimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendAndCallFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteSendFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpointConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEnforcedOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInspector", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sharedDecimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "ReceiveOFT(bytes32,address,uint256)": EventFragment;
        "SendOFT(bytes32,address,uint256)": EventFragment;
        "SetEnforcedOption(tuple[])": EventFragment;
        "SetInspector(address)": EventFragment;
        "SetPeer(uint32,bytes32,bool)": EventFragment;
        "SetPrecrime(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendOFT"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetEnforcedOption"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetInspector"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPeer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPrecrime"): EventFragment;
}
interface OwnershipTransferredEventObject$c {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$c = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$c>;
type OwnershipTransferredEventFilter$c = TypedEventFilter<OwnershipTransferredEvent$c>;
interface ReceiveOFTEventObject {
    _guid: string;
    _toAddress: string;
    _amountLD: BigNumber;
}
type ReceiveOFTEvent = TypedEvent<[
    string,
    string,
    BigNumber
], ReceiveOFTEventObject>;
type ReceiveOFTEventFilter = TypedEventFilter<ReceiveOFTEvent>;
interface SendOFTEventObject {
    _guid: string;
    _fromAddress: string;
    _amountLD: BigNumber;
}
type SendOFTEvent = TypedEvent<[
    string,
    string,
    BigNumber
], SendOFTEventObject>;
type SendOFTEventFilter = TypedEventFilter<SendOFTEvent>;
interface SetEnforcedOptionEventObject {
    _enforcedOptions: IOFT.EnforcedOptionParamStructOutput[];
}
type SetEnforcedOptionEvent = TypedEvent<[
    IOFT.EnforcedOptionParamStructOutput[]
], SetEnforcedOptionEventObject>;
type SetEnforcedOptionEventFilter = TypedEventFilter<SetEnforcedOptionEvent>;
interface SetInspectorEventObject {
    _inspector: string;
}
type SetInspectorEvent = TypedEvent<[string], SetInspectorEventObject>;
type SetInspectorEventFilter = TypedEventFilter<SetInspectorEvent>;
interface SetPeerEventObject$1 {
    remoteEid: number;
    peer: string;
    active: boolean;
}
type SetPeerEvent$1 = TypedEvent<[
    number,
    string,
    boolean
], SetPeerEventObject$1>;
type SetPeerEventFilter$1 = TypedEventFilter<SetPeerEvent$1>;
interface SetPrecrimeEventObject$1 {
    precrime: string;
}
type SetPrecrimeEvent$1 = TypedEvent<[string], SetPrecrimeEventObject$1>;
type SetPrecrimeEventFilter$1 = TypedEventFilter<SetPrecrimeEvent$1>;
interface OFTCore extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OFTCoreInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        inspector(overrides?: CallOverrides): Promise<[string]>;
        lzReceive(_origin: IMessageOrigin$9.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$5.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrime(overrides?: CallOverrides): Promise<[string]>;
        quoteSendAndCallFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        send(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendAndCall(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEnforcedOptions(_enforcedOptions: IOFT.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<[number]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    inspector(overrides?: CallOverrides): Promise<string>;
    lzReceive(_origin: IMessageOrigin$9.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: IPreCrime$5.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrime(overrides?: CallOverrides): Promise<string>;
    quoteSendAndCallFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    quoteSendFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    }>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    send(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendAndCall(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEnforcedOptions(_enforcedOptions: IOFT.EnforcedOptionParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sharedDecimals(overrides?: CallOverrides): Promise<number>;
    token(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        inspector(overrides?: CallOverrides): Promise<string>;
        lzReceive(_origin: IMessageOrigin$9.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: IPreCrime$5.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrime(overrides?: CallOverrides): Promise<string>;
        quoteSendAndCallFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        quoteSendFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            lzTokenFee: BigNumber;
        }>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        send(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$3.MessagingReceiptStructOutput>;
        sendAndCall(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$3.MessagingReceiptStructOutput>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setEnforcedOptions(_enforcedOptions: IOFT.EnforcedOptionParamStruct[], overrides?: CallOverrides): Promise<void>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        sharedDecimals(overrides?: CallOverrides): Promise<number>;
        token(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$c;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$c;
        "ReceiveOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter;
        ReceiveOFT(_guid?: PromiseOrValue<BytesLike> | null, _toAddress?: PromiseOrValue<string> | null, _amountLD?: null): ReceiveOFTEventFilter;
        "SendOFT(bytes32,address,uint256)"(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter;
        SendOFT(_guid?: PromiseOrValue<BytesLike> | null, _fromAddress?: PromiseOrValue<string> | null, _amountLD?: null): SendOFTEventFilter;
        "SetEnforcedOption(tuple[])"(_enforcedOptions?: null): SetEnforcedOptionEventFilter;
        SetEnforcedOption(_enforcedOptions?: null): SetEnforcedOptionEventFilter;
        "SetInspector(address)"(_inspector?: null): SetInspectorEventFilter;
        SetInspector(_inspector?: null): SetInspectorEventFilter;
        "SetPeer(uint32,bytes32,bool)"(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$1;
        SetPeer(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter$1;
        "SetPrecrime(address)"(precrime?: null): SetPrecrimeEventFilter$1;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter$1;
    };
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        inspector(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: IMessageOrigin$9.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: IPreCrime$5.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrime(overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendAndCallFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        quoteSendFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendAndCall(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEnforcedOptions(_enforcedOptions: IOFT.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: IMessageOrigin$9.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$5.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendAndCallFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quoteSendFee(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _useLZToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendAndCall(_send: IOFT.SendParamStruct, _extraOptions: PromiseOrValue<BytesLike>, _msgFee: ILayerZeroEndpointV2$3.MessagingFeeStruct, _refundAddress: PromiseOrValue<string>, _composeMsg: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEnforcedOptions(_enforcedOptions: IOFT.EnforcedOptionParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setInspector(_inspector: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$8 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$4 {
    type PacketStruct = {
        origin: IMessageOrigin$8.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$8.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$8.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface OFTPrecrimeInterface extends utils.Interface {
    functions: {
        "EXPECTED_GLOBAL_SUPPLY()": FunctionFragment;
        "_simulateAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "getPrecrimeConfig(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "oft()": FunctionFragment;
        "pAdmin()": FunctionFragment;
        "pMaxBatchSize()": FunctionFragment;
        "precrime(((uint32,bytes32,uint64),bytes32,bytes,bytes)[],bytes[])": FunctionFragment;
        "precrimeEidToPeer(uint32)": FunctionFragment;
        "precrimeEids(uint256)": FunctionFragment;
        "precrimePeers(uint256)": FunctionFragment;
        "precrimeVersion()": FunctionFragment;
        "setGlobalSupply(uint256)": FunctionFragment;
        "setPrecrimeAdmin(address)": FunctionFragment;
        "setPrecrimeMaxBatchSize(uint64)": FunctionFragment;
        "setPrecrimePeers(uint32[],bytes32[])": FunctionFragment;
        "simulate(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulateView(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulationCallback()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "EXPECTED_GLOBAL_SUPPLY" | "_simulateAndRevert" | "getPrecrimeConfig" | "oft" | "pAdmin" | "pMaxBatchSize" | "precrime" | "precrimeEidToPeer" | "precrimeEids" | "precrimePeers" | "precrimeVersion" | "setGlobalSupply" | "setPrecrimeAdmin" | "setPrecrimeMaxBatchSize" | "setPrecrimePeers" | "simulate" | "simulateView" | "simulationCallback"): FunctionFragment;
    encodeFunctionData(functionFragment: "EXPECTED_GLOBAL_SUPPLY", values?: undefined): string;
    encodeFunctionData(functionFragment: "_simulateAndRevert", values: [IPreCrime$4.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "getPrecrimeConfig", values: [IPreCrime$4.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "oft", values?: undefined): string;
    encodeFunctionData(functionFragment: "pAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "pMaxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "precrime", values: [IPreCrime$4.PacketStruct[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "precrimeEidToPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeEids", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimePeers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setGlobalSupply", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrecrimeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPrecrimeMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrecrimePeers", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [IPreCrime$4.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulateView", values: [IPreCrime$4.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulationCallback", values?: undefined): string;
    decodeFunctionResult(functionFragment: "EXPECTED_GLOBAL_SUPPLY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_simulateAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrecrimeConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oft", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEidToPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEids", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGlobalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulationCallback", data: BytesLike): Result;
    events: {};
}
interface OFTPrecrime extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OFTPrecrimeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        EXPECTED_GLOBAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;
        _simulateAndRevert(_packets: IPreCrime$4.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getPrecrimeConfig(_packets: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<[string]>;
        oft(overrides?: CallOverrides): Promise<[string]>;
        pAdmin(overrides?: CallOverrides): Promise<[string]>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        precrime(_packets: IPreCrime$4.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrimeVersion(overrides?: CallOverrides): Promise<[number]>;
        setGlobalSupply(_globalSupply: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(_packets: IPreCrime$4.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulateView(arg0: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
        simulationCallback(overrides?: CallOverrides): Promise<[string] & {
            result: string;
        }>;
    };
    EXPECTED_GLOBAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;
    _simulateAndRevert(_packets: IPreCrime$4.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getPrecrimeConfig(_packets: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<string>;
    oft(overrides?: CallOverrides): Promise<string>;
    pAdmin(overrides?: CallOverrides): Promise<string>;
    pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    precrime(_packets: IPreCrime$4.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        reason: string;
    }>;
    precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeVersion(overrides?: CallOverrides): Promise<number>;
    setGlobalSupply(_globalSupply: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(_packets: IPreCrime$4.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulateView(arg0: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
    simulationCallback(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        EXPECTED_GLOBAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;
        _simulateAndRevert(_packets: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        getPrecrimeConfig(_packets: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<string>;
        oft(overrides?: CallOverrides): Promise<string>;
        pAdmin(overrides?: CallOverrides): Promise<string>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$4.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeVersion(overrides?: CallOverrides): Promise<number>;
        setGlobalSupply(_globalSupply: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        simulate(_packets: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            data: string;
        }>;
        simulateView(arg0: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
        simulationCallback(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        EXPECTED_GLOBAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;
        _simulateAndRevert(_packets: IPreCrime$4.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getPrecrimeConfig(_packets: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        oft(overrides?: CallOverrides): Promise<BigNumber>;
        pAdmin(overrides?: CallOverrides): Promise<BigNumber>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$4.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setGlobalSupply(_globalSupply: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(_packets: IPreCrime$4.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulateView(arg0: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        simulationCallback(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        EXPECTED_GLOBAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _simulateAndRevert(_packets: IPreCrime$4.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getPrecrimeConfig(_packets: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        oft(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(_packets: IPreCrime$4.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setGlobalSupply(_globalSupply: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(_packets: IPreCrime$4.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulateView(arg0: IPreCrime$4.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        simulationCallback(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$p_Fee = Fee;
type index$p_OFT = OFT;
type index$p_OFTAdapter = OFTAdapter;
type index$p_OFTCore = OFTCore;
type index$p_OFTPrecrime = OFTPrecrime;
declare namespace index$p {
  export {
    index$p_Fee as Fee,
    index$p_OFT as OFT,
    index$p_OFTAdapter as OFTAdapter,
    index$p_OFTCore as OFTCore,
    index$p_OFTPrecrime as OFTPrecrime,
    index$r as interfaces,
    index$q as mocks,
  };
}

declare namespace index$o {
  export {
    index$p as oft,
  };
}

interface ILayerZeroVerifierInterface extends utils.Interface {
    functions: {
        "assignJob(uint32,uint64,address,bytes)": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob" | "getFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    events: {};
}
interface ILayerZeroVerifier extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroVerifierInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
    };
    assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type UlnConfigStructStructOutput$1 = [
    BigNumber,
    boolean,
    boolean,
    number,
    number,
    number,
    string[],
    string[]
] & {
    inboundConfirmations: BigNumber;
    useCustomVerifiers: boolean;
    useCustomOptionalVerifiers: boolean;
    verifierCount: number;
    optionalVerifierCount: number;
    optionalVerifierThreshold: number;
    verifiers: string[];
    optionalVerifiers: string[];
};
type OutboundConfigStructStruct$1 = {
    maxMessageSize: PromiseOrValue<BigNumberish>;
    outboundConfirmations: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type OutboundConfigStructStructOutput$2 = [number, BigNumber, string] & {
    maxMessageSize: number;
    outboundConfirmations: BigNumber;
    executor: string;
};
type SetDefaultConfigParamStruct$1 = {
    eid: PromiseOrValue<BigNumberish>;
    outboundConfig: OutboundConfigStructStruct$1;
    inboundConfirmations: PromiseOrValue<BigNumberish>;
    verifiers: PromiseOrValue<string>[];
    optionalVerifiers: PromiseOrValue<string>[];
    optionalVerifierThreshold: PromiseOrValue<BigNumberish>;
};
interface IUlnConfigInterface extends utils.Interface {
    functions: {
        "getConfigByType(uint32,address,uint32)": FunctionFragment;
        "getDefaultConfigByType(uint32,uint32)": FunctionFragment;
        "getUlnAndOutboundConfig(address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "resetConfig(uint32[],address)": FunctionFragment;
        "setConfigByType(uint32,address,uint32,bytes)": FunctionFragment;
        "setDefaultConfig((uint32,(uint32,uint64,address),uint64,address[],address[],uint8)[])": FunctionFragment;
        "snapshotConfig(uint32[],address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getConfigByType" | "getDefaultConfigByType" | "getUlnAndOutboundConfig" | "getUlnConfig" | "isSupportedEid" | "resetConfig" | "setConfigByType" | "setDefaultConfig" | "snapshotConfig"): FunctionFragment;
    encodeFunctionData(functionFragment: "getConfigByType", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultConfigByType", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnAndOutboundConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setConfigByType", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultConfig", values: [SetDefaultConfigParamStruct$1[]]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "getConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnAndOutboundConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    events: {};
}
interface IUlnConfig extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IUlnConfigInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput$1, OutboundConfigStructStructOutput$2]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput$1]>;
        isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultConfig(_params: SetDefaultConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
    getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput$1, OutboundConfigStructStructOutput$2]>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructStructOutput$1>;
    isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultConfig(_params: SetDefaultConfigParamStruct$1[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput$1, OutboundConfigStructStructOutput$2]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructStructOutput$1>;
        isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultConfig(_params: SetDefaultConfigParamStruct$1[], overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultConfig(_params: SetDefaultConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultConfig(_params: SetDefaultConfigParamStruct$1[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IUltraLightNodeInterface extends utils.Interface {
    functions: {
        "deliver(bytes,bytes32)": FunctionFragment;
        "deliverable(bytes,bytes32)": FunctionFragment;
        "verify(bytes,bytes32,uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "deliver" | "deliverable" | "verify"): FunctionFragment;
    encodeFunctionData(functionFragment: "deliver", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deliverable", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "verify", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    events: {};
}
interface IUltraLightNode extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IUltraLightNodeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IVerifierInterface extends utils.Interface {
    functions: {
        "assignJob(uint32,uint64,address,bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "assignJob" | "defaultMultiplierBps" | "dstConfig" | "getFee" | "priceFeed" | "setDefaultMultiplierBps" | "setPriceFeed" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "assignJob", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "AssignJob(uint32,address,uint64,uint256)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetDstConfig(tuple[])": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AssignJob"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDstConfig"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface AssignJobEventObject$1 {
    dstEid: number;
    oapp: string;
    confirmations: BigNumber;
    totalFee: BigNumber;
}
type AssignJobEvent$1 = TypedEvent<[
    number,
    string,
    BigNumber,
    BigNumber
], AssignJobEventObject$1>;
type AssignJobEventFilter$1 = TypedEventFilter<AssignJobEvent$1>;
interface SetDefaultMultiplierBpsEventObject$4 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$4 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$4>;
type SetDefaultMultiplierBpsEventFilter$4 = TypedEventFilter<SetDefaultMultiplierBpsEvent$4>;
interface SetDstConfigEventObject$1 {
    params: IVerifier$3.DstConfigParamStructOutput[];
}
type SetDstConfigEvent$1 = TypedEvent<[
    IVerifier$3.DstConfigParamStructOutput[]
], SetDstConfigEventObject$1>;
type SetDstConfigEventFilter$1 = TypedEventFilter<SetDstConfigEvent$1>;
interface SetPriceFeedEventObject$4 {
    priceFeed: string;
}
type SetPriceFeedEvent$4 = TypedEvent<[string], SetPriceFeedEventObject$4>;
type SetPriceFeedEventFilter$4 = TypedEventFilter<SetPriceFeedEvent$4>;
interface SetWorkerLibEventObject$4 {
    workerLib: string;
}
type SetWorkerLibEvent$4 = TypedEvent<[string], SetWorkerLibEventObject$4>;
type SetWorkerLibEventFilter$4 = TypedEventFilter<SetWorkerLibEvent$4>;
interface WithdrawEventObject$4 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$4 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$4>;
type WithdrawEventFilter$4 = TypedEventFilter<WithdrawEvent$4>;
declare namespace IVerifier$3 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        gas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        BigNumber,
        number,
        BigNumber
    ] & {
        dstEid: number;
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    };
}
interface IVerifier$3 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IVerifierInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber]>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, number, BigNumber]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AssignJob(uint32,address,uint64,uint256)"(dstEid?: null, oapp?: null, confirmations?: null, totalFee?: null): AssignJobEventFilter$1;
        AssignJob(dstEid?: null, oapp?: null, confirmations?: null, totalFee?: null): AssignJobEventFilter$1;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$4;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$4;
        "SetDstConfig(tuple[])"(params?: null): SetDstConfigEventFilter$1;
        SetDstConfig(params?: null): SetDstConfigEventFilter$1;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$4;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$4;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$4;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$4;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$4;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$4;
    };
    estimateGas: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IVerifier$2 {
    type DstConfigStruct = {
        gas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [BigNumber, number, BigNumber] & {
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    };
}
interface IVerifierFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": FunctionFragment;
        "getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IVerifierFeeLib$1.FeeParamsStruct,
        IVerifier$2.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IVerifierFeeLib$1.FeeParamsStruct,
        IVerifier$2.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    events: {};
}
declare namespace IVerifierFeeLib$1 {
    type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        quorum: PromiseOrValue<BigNumberish>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type FeeParamsStructOutput = [
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        number
    ] & {
        priceFeed: string;
        dstEid: number;
        confirmations: BigNumber;
        sender: string;
        quorum: BigNumber;
        defaultMultiplierBps: number;
    };
}
interface IVerifierFeeLib$1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IVerifierFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getFeeOnSend(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getFee(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IVerifierFeeLib$1.FeeParamsStruct, _dstConfig: IVerifier$2.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$n_ILayerZeroVerifier = ILayerZeroVerifier;
type index$n_IUlnConfig = IUlnConfig;
type index$n_IUltraLightNode = IUltraLightNode;
declare namespace index$n {
  export {
    index$n_ILayerZeroVerifier as ILayerZeroVerifier,
    index$n_IUlnConfig as IUlnConfig,
    index$n_IUltraLightNode as IUltraLightNode,
    IVerifier$3 as IVerifier,
    IVerifierFeeLib$1 as IVerifierFeeLib,
  };
}

interface IMessageLibE1Interface extends utils.Interface {
    functions: {
        "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "getDefaultConfig(uint32,uint32)": FunctionFragment;
        "send(address,uint64,uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
        "setLayerZeroToken(address)": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "estimateFees" | "getConfig" | "getDefaultConfig" | "send" | "setConfig" | "setLayerZeroToken" | "setTreasury" | "version" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "estimateFees", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultConfig", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "send", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setLayerZeroToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "estimateFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLayerZeroToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {};
}
interface IMessageLibE1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessageLibE1Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLayerZeroToken(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLayerZeroToken(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setLayerZeroToken(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLayerZeroToken(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLayerZeroToken(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface ITreasuryFeeHandlerInterface extends utils.Interface {
    functions: {
        "payFee(address,address,address,uint256,uint256,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "payFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "payFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
    events: {};
}
interface ITreasuryFeeHandler extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ITreasuryFeeHandlerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface IUltraLightNode301Interface extends utils.Interface {
    functions: {
        "deliver(bytes,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "deliver"): FunctionFragment;
    encodeFunctionData(functionFragment: "deliver", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
    events: {};
}
interface IUltraLightNode301 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IUltraLightNode301Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$m_IMessageLibE1 = IMessageLibE1;
type index$m_ITreasuryFeeHandler = ITreasuryFeeHandler;
type index$m_IUltraLightNode301 = IUltraLightNode301;
declare namespace index$m {
  export {
    index$m_IMessageLibE1 as IMessageLibE1,
    index$m_ITreasuryFeeHandler as ITreasuryFeeHandler,
    index$m_IUltraLightNode301 as IUltraLightNode301,
  };
}

declare namespace IMessageOrigin$7 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
interface MessageLibBaseE1Interface extends utils.Interface {
    functions: {
        "addressSizes(uint32)": FunctionFragment;
        "defaultOptions(uint32)": FunctionFragment;
        "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "getDefaultConfig(uint32,uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send(address,uint64,uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
        "setAddressSize(uint16,uint256)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
        "setDefaultOptions(uint32,bytes)": FunctionFragment;
        "setLayerZeroToken(address)": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addressSizes" | "defaultOptions" | "estimateFees" | "fees" | "getConfig" | "getDefaultConfig" | "owner" | "renounceOwnership" | "send" | "setAddressSize" | "setConfig" | "setDefaultOptions" | "setLayerZeroToken" | "setTreasury" | "transferOwnership" | "treasury" | "version" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "addressSizes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultOptions", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "estimateFees", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultConfig", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddressSize", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setLayerZeroToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "addressSizes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddressSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLayerZeroToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "InvalidDst(uint16,bytes32,address,uint64,bytes32)": EventFragment;
        "NativeFeeWithdrawn(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketReceived(tuple,address)": EventFragment;
        "PacketSent(bytes,bytes,uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InvalidDst"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
}
interface ExecutorFeePaidEventObject$4 {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent$4 = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject$4>;
type ExecutorFeePaidEventFilter$4 = TypedEventFilter<ExecutorFeePaidEvent$4>;
interface InvalidDstEventObject$1 {
    srcChainId: number;
    srcAddress: string;
    dstAddress: string;
    nonce: BigNumber;
    payloadHash: string;
}
type InvalidDstEvent$1 = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], InvalidDstEventObject$1>;
type InvalidDstEventFilter$1 = TypedEventFilter<InvalidDstEvent$1>;
interface NativeFeeWithdrawnEventObject$1 {
    user: string;
    receiver: string;
    amount: BigNumber;
}
type NativeFeeWithdrawnEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], NativeFeeWithdrawnEventObject$1>;
type NativeFeeWithdrawnEventFilter$1 = TypedEventFilter<NativeFeeWithdrawnEvent$1>;
interface OwnershipTransferredEventObject$b {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$b = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$b>;
type OwnershipTransferredEventFilter$b = TypedEventFilter<OwnershipTransferredEvent$b>;
interface PacketReceivedEventObject$2 {
    origin: IMessageOrigin$7.MessageOriginStructOutput;
    receiver: string;
}
type PacketReceivedEvent$2 = TypedEvent<[
    IMessageOrigin$7.MessageOriginStructOutput,
    string
], PacketReceivedEventObject$2>;
type PacketReceivedEventFilter$2 = TypedEventFilter<PacketReceivedEvent$2>;
interface PacketSentEventObject$2 {
    encodedPayload: string;
    options: string;
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
}
type PacketSentEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], PacketSentEventObject$2>;
type PacketSentEventFilter$2 = TypedEventFilter<PacketSentEvent$2>;
interface MessageLibBaseE1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessageLibBaseE1Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            size: BigNumber;
        }>;
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            option: string;
        }>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter$4;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter$4;
        "InvalidDst(uint16,bytes32,address,uint64,bytes32)"(srcChainId?: PromiseOrValue<BigNumberish> | null, srcAddress?: null, dstAddress?: PromiseOrValue<string> | null, nonce?: null, payloadHash?: null): InvalidDstEventFilter$1;
        InvalidDst(srcChainId?: PromiseOrValue<BigNumberish> | null, srcAddress?: null, dstAddress?: PromiseOrValue<string> | null, nonce?: null, payloadHash?: null): InvalidDstEventFilter$1;
        "NativeFeeWithdrawn(address,address,uint256)"(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter$1;
        NativeFeeWithdrawn(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$b;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$b;
        "PacketReceived(tuple,address)"(origin?: null, receiver?: null): PacketReceivedEventFilter$2;
        PacketReceived(origin?: null, receiver?: null): PacketReceivedEventFilter$2;
        "PacketSent(bytes,bytes,uint256,uint256)"(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter$2;
        PacketSent(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter$2;
    };
    estimateGas: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface NonceContractInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "increment(uint16,address,bytes)": FunctionFragment;
        "outboundNonce(uint16,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "increment" | "outboundNonce"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "increment", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    events: {};
}
interface NonceContract extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: NonceContractInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        increment(_chainId: PromiseOrValue<BigNumberish>, _ua: PromiseOrValue<string>, _path: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        outboundNonce(dstEid: PromiseOrValue<BigNumberish>, path: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

interface TreasuryFeeHandlerInterface extends utils.Interface {
    functions: {
        "payFee(address,address,address,uint256,uint256,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "payFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "payFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
    events: {};
}
interface TreasuryFeeHandler extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TreasuryFeeHandlerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        payFee(_lzToken: PromiseOrValue<string>, _sender: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _required: PromiseOrValue<BigNumberish>, _supplied: PromiseOrValue<BigNumberish>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type UlnConfigStructStruct$2 = {
    inboundConfirmations: PromiseOrValue<BigNumberish>;
    useCustomVerifiers: PromiseOrValue<boolean>;
    useCustomOptionalVerifiers: PromiseOrValue<boolean>;
    verifierCount: PromiseOrValue<BigNumberish>;
    optionalVerifierCount: PromiseOrValue<BigNumberish>;
    optionalVerifierThreshold: PromiseOrValue<BigNumberish>;
    verifiers: PromiseOrValue<string>[];
    optionalVerifiers: PromiseOrValue<string>[];
};
declare namespace IMessageOrigin$6 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
interface UltraLightNode301Interface extends utils.Interface {
    functions: {
        "addressSizes(uint32)": FunctionFragment;
        "defaultOptions(uint32)": FunctionFragment;
        "deliver(bytes,uint256)": FunctionFragment;
        "deliverable(bytes,bytes32)": FunctionFragment;
        "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "getDefaultConfig(uint32,uint32)": FunctionFragment;
        "hashLookup(bytes32,bytes32,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "send(address,uint64,uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
        "setAddressSize(uint16,uint256)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
        "setDefaultOptions(uint32,bytes)": FunctionFragment;
        "setLayerZeroToken(address)": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "verified(address,bytes32,bytes32,uint64)": FunctionFragment;
        "verify(bytes,bytes32,uint64)": FunctionFragment;
        "verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addressSizes" | "defaultOptions" | "deliver" | "deliverable" | "estimateFees" | "fees" | "getConfig" | "getDefaultConfig" | "hashLookup" | "owner" | "renounceOwnership" | "send" | "setAddressSize" | "setConfig" | "setDefaultOptions" | "setLayerZeroToken" | "setTreasury" | "transferOwnership" | "treasury" | "verified" | "verify" | "verifyConditionMet" | "version" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "addressSizes", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultOptions", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "deliver", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "deliverable", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "estimateFees", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultConfig", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hashLookup", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "send", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setAddressSize", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setLayerZeroToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "verified", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "verify", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "verifyConditionMet", values: [
        UlnConfigStructStruct$2,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "addressSizes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAddressSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLayerZeroToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verified", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyConditionMet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "InvalidDst(uint16,bytes32,address,uint64,bytes32)": EventFragment;
        "NativeFeeWithdrawn(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketReceived(tuple,address)": EventFragment;
        "PacketSent(bytes,bytes,uint256,uint256)": EventFragment;
        "PayloadSigned(address,bytes,uint256,bytes32)": EventFragment;
        "VerifierFeePaid(address[],address[],uint256[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InvalidDst"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayloadSigned"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VerifierFeePaid"): EventFragment;
}
interface ExecutorFeePaidEventObject$3 {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent$3 = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject$3>;
type ExecutorFeePaidEventFilter$3 = TypedEventFilter<ExecutorFeePaidEvent$3>;
interface InvalidDstEventObject {
    srcChainId: number;
    srcAddress: string;
    dstAddress: string;
    nonce: BigNumber;
    payloadHash: string;
}
type InvalidDstEvent = TypedEvent<[
    number,
    string,
    string,
    BigNumber,
    string
], InvalidDstEventObject>;
type InvalidDstEventFilter = TypedEventFilter<InvalidDstEvent>;
interface NativeFeeWithdrawnEventObject {
    user: string;
    receiver: string;
    amount: BigNumber;
}
type NativeFeeWithdrawnEvent = TypedEvent<[
    string,
    string,
    BigNumber
], NativeFeeWithdrawnEventObject>;
type NativeFeeWithdrawnEventFilter = TypedEventFilter<NativeFeeWithdrawnEvent>;
interface OwnershipTransferredEventObject$a {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$a = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$a>;
type OwnershipTransferredEventFilter$a = TypedEventFilter<OwnershipTransferredEvent$a>;
interface PacketReceivedEventObject$1 {
    origin: IMessageOrigin$6.MessageOriginStructOutput;
    receiver: string;
}
type PacketReceivedEvent$1 = TypedEvent<[
    IMessageOrigin$6.MessageOriginStructOutput,
    string
], PacketReceivedEventObject$1>;
type PacketReceivedEventFilter$1 = TypedEventFilter<PacketReceivedEvent$1>;
interface PacketSentEventObject$1 {
    encodedPayload: string;
    options: string;
    nativeFee: BigNumber;
    lzTokenFee: BigNumber;
}
type PacketSentEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber,
    BigNumber
], PacketSentEventObject$1>;
type PacketSentEventFilter$1 = TypedEventFilter<PacketSentEvent$1>;
interface PayloadSignedEventObject$2 {
    verifier: string;
    header: string;
    confirmations: BigNumber;
    proofHash: string;
}
type PayloadSignedEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], PayloadSignedEventObject$2>;
type PayloadSignedEventFilter$2 = TypedEventFilter<PayloadSignedEvent$2>;
interface VerifierFeePaidEventObject$2 {
    verifiers: string[];
    optionalVerifiers: string[];
    fees: BigNumber[];
}
type VerifierFeePaidEvent$2 = TypedEvent<[
    string[],
    string[],
    BigNumber[]
], VerifierFeePaidEventObject$2>;
type VerifierFeePaidEventFilter$2 = TypedEventFilter<VerifierFeePaidEvent$2>;
interface UltraLightNode301 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: UltraLightNode301Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            size: BigNumber;
        }>;
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            option: string;
        }>;
        deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            config: string;
        }>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            confirmations: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifyConditionMet(_config: UlnConfigStructStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifyConditionMet(_config: UlnConfigStructStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        verifyConditionMet(_config: UlnConfigStructStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter$3;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter$3;
        "InvalidDst(uint16,bytes32,address,uint64,bytes32)"(srcChainId?: PromiseOrValue<BigNumberish> | null, srcAddress?: null, dstAddress?: PromiseOrValue<string> | null, nonce?: null, payloadHash?: null): InvalidDstEventFilter;
        InvalidDst(srcChainId?: PromiseOrValue<BigNumberish> | null, srcAddress?: null, dstAddress?: PromiseOrValue<string> | null, nonce?: null, payloadHash?: null): InvalidDstEventFilter;
        "NativeFeeWithdrawn(address,address,uint256)"(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter;
        NativeFeeWithdrawn(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$a;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$a;
        "PacketReceived(tuple,address)"(origin?: null, receiver?: null): PacketReceivedEventFilter$1;
        PacketReceived(origin?: null, receiver?: null): PacketReceivedEventFilter$1;
        "PacketSent(bytes,bytes,uint256,uint256)"(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter$1;
        PacketSent(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter$1;
        "PayloadSigned(address,bytes,uint256,bytes32)"(verifier?: null, header?: null, confirmations?: null, proofHash?: null): PayloadSignedEventFilter$2;
        PayloadSigned(verifier?: null, header?: null, confirmations?: null, proofHash?: null): PayloadSignedEventFilter$2;
        "VerifierFeePaid(address[],address[],uint256[])"(verifiers?: null, optionalVerifiers?: null, fees?: null): VerifierFeePaidEventFilter$2;
        VerifierFeePaid(verifiers?: null, optionalVerifiers?: null, fees?: null): VerifierFeePaidEventFilter$2;
    };
    estimateGas: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifyConditionMet(_config: UlnConfigStructStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliver(_packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFees(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_sender: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _dstEid: PromiseOrValue<BigNumberish>, _path: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _refundAddress: PromiseOrValue<string>, _lzTokenPaymentAddress: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setAddressSize(_eid: PromiseOrValue<BigNumberish>, _size: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifyConditionMet(_config: UlnConfigStructStruct$2, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$l_MessageLibBaseE1 = MessageLibBaseE1;
type index$l_NonceContract = NonceContract;
type index$l_TreasuryFeeHandler = TreasuryFeeHandler;
type index$l_UltraLightNode301 = UltraLightNode301;
declare namespace index$l {
  export {
    index$l_MessageLibBaseE1 as MessageLibBaseE1,
    index$l_NonceContract as NonceContract,
    index$l_TreasuryFeeHandler as TreasuryFeeHandler,
    index$l_UltraLightNode301 as UltraLightNode301,
    index$m as interfaces,
  };
}

type UlnConfigStructStruct$1 = {
    inboundConfirmations: PromiseOrValue<BigNumberish>;
    useCustomVerifiers: PromiseOrValue<boolean>;
    useCustomOptionalVerifiers: PromiseOrValue<boolean>;
    verifierCount: PromiseOrValue<BigNumberish>;
    optionalVerifierCount: PromiseOrValue<BigNumberish>;
    optionalVerifierThreshold: PromiseOrValue<BigNumberish>;
    verifiers: PromiseOrValue<string>[];
    optionalVerifiers: PromiseOrValue<string>[];
};
declare namespace IPacket$1 {
    type PacketForQuoteStruct = {
        sender: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        message: PromiseOrValue<BytesLike>;
    };
    type PacketForQuoteStructOutput = [string, number, string] & {
        sender: string;
        dstEid: number;
        message: string;
    };
    type PacketStruct = {
        nonce: PromiseOrValue<BigNumberish>;
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        receiver: PromiseOrValue<BytesLike>;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        BigNumber,
        number,
        string,
        number,
        string,
        string,
        string
    ] & {
        nonce: BigNumber;
        srcEid: number;
        sender: string;
        dstEid: number;
        receiver: string;
        guid: string;
        message: string;
    };
}
declare namespace ILayerZeroEndpointV2$2 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$2.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$2.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$2.MessagingFeeStructOutput;
    };
}
declare namespace IMessageLibManager$3 {
    type SetConfigParamStruct = {
        configType: PromiseOrValue<BigNumberish>;
        config: PromiseOrValue<BytesLike>;
    };
    type SetConfigParamStructOutput = [number, string] & {
        configType: number;
        config: string;
    };
}
interface UltraLightNode302Interface extends utils.Interface {
    functions: {
        "defaultOptions(uint32)": FunctionFragment;
        "deliver(bytes,bytes32)": FunctionFragment;
        "deliverable(bytes,bytes32)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "getDefaultConfig(uint32,uint32)": FunctionFragment;
        "hashLookup(bytes32,bytes32,address)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "quote((address,uint32,bytes),bool,bytes)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "resetConfig(uint32[],address)": FunctionFragment;
        "send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "setConfig(address,uint32,(uint32,bytes)[])": FunctionFragment;
        "setDefaultOptions(uint32,bytes)": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "snapshotConfig(uint32[],address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "verified(address,bytes32,bytes32,uint64)": FunctionFragment;
        "verify(bytes,bytes32,uint64)": FunctionFragment;
        "verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
        "withdrawLzTokenFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultOptions" | "deliver" | "deliverable" | "fees" | "getConfig" | "getDefaultConfig" | "hashLookup" | "isSupportedEid" | "owner" | "quote" | "renounceOwnership" | "resetConfig" | "send" | "setConfig" | "setDefaultOptions" | "setTreasury" | "snapshotConfig" | "supportsInterface" | "transferOwnership" | "treasury" | "verified" | "verify" | "verifyConditionMet" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultOptions", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "deliver", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "deliverable", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultConfig", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hashLookup", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [
        IPacket$1.PacketForQuoteStruct,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "send", values: [
        IPacket$1.PacketStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IMessageLibManager$3.SetConfigParamStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "verified", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "verify", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "verifyConditionMet", values: [
        UlnConfigStructStruct$1,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "defaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verified", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyConditionMet", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
    events: {
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "LzTokenFeeWithdrawn(address,address,uint256)": EventFragment;
        "NativeOrAltTokenFeeWithdrawn(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PayloadSigned(address,bytes,uint256,bytes32)": EventFragment;
        "VerifierFeePaid(address[],address[],uint256[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeOrAltTokenFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PayloadSigned"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VerifierFeePaid"): EventFragment;
}
interface ExecutorFeePaidEventObject$2 {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent$2 = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject$2>;
type ExecutorFeePaidEventFilter$2 = TypedEventFilter<ExecutorFeePaidEvent$2>;
interface LzTokenFeeWithdrawnEventObject$1 {
    lzToken: string;
    receiver: string;
    amount: BigNumber;
}
type LzTokenFeeWithdrawnEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], LzTokenFeeWithdrawnEventObject$1>;
type LzTokenFeeWithdrawnEventFilter$1 = TypedEventFilter<LzTokenFeeWithdrawnEvent$1>;
interface NativeOrAltTokenFeeWithdrawnEventObject$1 {
    worker: string;
    receiver: string;
    amount: BigNumber;
}
type NativeOrAltTokenFeeWithdrawnEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], NativeOrAltTokenFeeWithdrawnEventObject$1>;
type NativeOrAltTokenFeeWithdrawnEventFilter$1 = TypedEventFilter<NativeOrAltTokenFeeWithdrawnEvent$1>;
interface OwnershipTransferredEventObject$9 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$9 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$9>;
type OwnershipTransferredEventFilter$9 = TypedEventFilter<OwnershipTransferredEvent$9>;
interface PayloadSignedEventObject$1 {
    verifier: string;
    header: string;
    confirmations: BigNumber;
    proofHash: string;
}
type PayloadSignedEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], PayloadSignedEventObject$1>;
type PayloadSignedEventFilter$1 = TypedEventFilter<PayloadSignedEvent$1>;
interface VerifierFeePaidEventObject$1 {
    verifiers: string[];
    optionalVerifiers: string[];
    fees: BigNumber[];
}
type VerifierFeePaidEvent$1 = TypedEvent<[
    string[],
    string[],
    BigNumber[]
], VerifierFeePaidEventObject$1>;
type VerifierFeePaidEventFilter$1 = TypedEventFilter<VerifierFeePaidEvent$1>;
interface UltraLightNode302 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: UltraLightNode302Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            option: string;
        }>;
        deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            confirmations: BigNumber;
        }>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quote(_packet: IPacket$1.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[ILayerZeroEndpointV2$2.MessagingFeeStructOutput]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_packet: IPacket$1.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$3.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifyConditionMet(_config: UlnConfigStructStruct$1, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
    getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    owner(overrides?: CallOverrides): Promise<string>;
    quote(_packet: IPacket$1.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$2.MessagingFeeStructOutput>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_packet: IPacket$1.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$3.SetConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifyConditionMet(_config: UlnConfigStructStruct$1, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        owner(overrides?: CallOverrides): Promise<string>;
        quote(_packet: IPacket$1.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$2.MessagingFeeStructOutput>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        send(_packet: IPacket$1.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            ILayerZeroEndpointV2$2.MessagingReceiptStructOutput,
            string,
            string
        ]>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$3.SetConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        verifyConditionMet(_config: UlnConfigStructStruct$1, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter$2;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter$2;
        "LzTokenFeeWithdrawn(address,address,uint256)"(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter$1;
        LzTokenFeeWithdrawn(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter$1;
        "NativeOrAltTokenFeeWithdrawn(address,address,uint256)"(worker?: null, receiver?: null, amount?: null): NativeOrAltTokenFeeWithdrawnEventFilter$1;
        NativeOrAltTokenFeeWithdrawn(worker?: null, receiver?: null, amount?: null): NativeOrAltTokenFeeWithdrawnEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$9;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$9;
        "PayloadSigned(address,bytes,uint256,bytes32)"(verifier?: null, header?: null, confirmations?: null, proofHash?: null): PayloadSignedEventFilter$1;
        PayloadSigned(verifier?: null, header?: null, confirmations?: null, proofHash?: null): PayloadSignedEventFilter$1;
        "VerifierFeePaid(address[],address[],uint256[])"(verifiers?: null, optionalVerifiers?: null, fees?: null): VerifierFeePaidEventFilter$1;
        VerifierFeePaid(verifiers?: null, optionalVerifiers?: null, fees?: null): VerifierFeePaidEventFilter$1;
    };
    estimateGas: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_packet: IPacket$1.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_packet: IPacket$1.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$3.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifyConditionMet(_config: UlnConfigStructStruct$1, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliver(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliverable(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_packet: IPacket$1.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_packet: IPacket$1.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$3.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifyConditionMet(_config: UlnConfigStructStruct$1, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$k_UltraLightNode302 = UltraLightNode302;
declare namespace index$k {
  export {
    index$k_UltraLightNode302 as UltraLightNode302,
  };
}

interface MultiSigInterface extends utils.Interface {
    functions: {
        "quorum()": FunctionFragment;
        "signerSize()": FunctionFragment;
        "signers(address)": FunctionFragment;
        "verifySignatures(bytes32,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "quorum" | "signerSize" | "signers" | "verifySignatures"): FunctionFragment;
    encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
    encodeFunctionData(functionFragment: "signerSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "signers", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifySignatures", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signerSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySignatures", data: BytesLike): Result;
    events: {
        "UpdateQuorum(uint64)": EventFragment;
        "UpdateSigner(address,bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "UpdateQuorum"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateSigner"): EventFragment;
}
interface UpdateQuorumEventObject$2 {
    _quorum: BigNumber;
}
type UpdateQuorumEvent$2 = TypedEvent<[
    BigNumber
], UpdateQuorumEventObject$2>;
type UpdateQuorumEventFilter$2 = TypedEventFilter<UpdateQuorumEvent$2>;
interface UpdateSignerEventObject$2 {
    _signer: string;
    _active: boolean;
}
type UpdateSignerEvent$2 = TypedEvent<[
    string,
    boolean
], UpdateSignerEventObject$2>;
type UpdateSignerEventFilter$2 = TypedEventFilter<UpdateSignerEvent$2>;
interface MultiSig extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MultiSigInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        quorum(overrides?: CallOverrides): Promise<[BigNumber]>;
        signerSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            active: boolean;
        }>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    quorum(overrides?: CallOverrides): Promise<BigNumber>;
    signerSize(overrides?: CallOverrides): Promise<BigNumber>;
    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "UpdateQuorum(uint64)"(_quorum?: null): UpdateQuorumEventFilter$2;
        UpdateQuorum(_quorum?: null): UpdateQuorumEventFilter$2;
        "UpdateSigner(address,bool)"(_signer?: null, _active?: null): UpdateSignerEventFilter$2;
        UpdateSigner(_signer?: null, _active?: null): UpdateSignerEventFilter$2;
    };
    estimateGas: {
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        signerSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type UlnConfigStructStruct = {
    inboundConfirmations: PromiseOrValue<BigNumberish>;
    useCustomVerifiers: PromiseOrValue<boolean>;
    useCustomOptionalVerifiers: PromiseOrValue<boolean>;
    verifierCount: PromiseOrValue<BigNumberish>;
    optionalVerifierCount: PromiseOrValue<BigNumberish>;
    optionalVerifierThreshold: PromiseOrValue<BigNumberish>;
    verifiers: PromiseOrValue<string>[];
    optionalVerifiers: PromiseOrValue<string>[];
};
interface UlnBaseInterface extends utils.Interface {
    functions: {
        "hashLookup(bytes32,bytes32,address)": FunctionFragment;
        "verified(address,bytes32,bytes32,uint64)": FunctionFragment;
        "verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "hashLookup" | "verified" | "verifyConditionMet"): FunctionFragment;
    encodeFunctionData(functionFragment: "hashLookup", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "verified", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "verifyConditionMet", values: [
        UlnConfigStructStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "hashLookup", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verified", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyConditionMet", data: BytesLike): Result;
    events: {
        "PayloadSigned(address,bytes,uint256,bytes32)": EventFragment;
        "VerifierFeePaid(address[],address[],uint256[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "PayloadSigned"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "VerifierFeePaid"): EventFragment;
}
interface PayloadSignedEventObject {
    verifier: string;
    header: string;
    confirmations: BigNumber;
    proofHash: string;
}
type PayloadSignedEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], PayloadSignedEventObject>;
type PayloadSignedEventFilter = TypedEventFilter<PayloadSignedEvent>;
interface VerifierFeePaidEventObject {
    verifiers: string[];
    optionalVerifiers: string[];
    fees: BigNumber[];
}
type VerifierFeePaidEvent = TypedEvent<[
    string[],
    string[],
    BigNumber[]
], VerifierFeePaidEventObject>;
type VerifierFeePaidEventFilter = TypedEventFilter<VerifierFeePaidEvent>;
interface UlnBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: UlnBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            confirmations: BigNumber;
        }>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        verifyConditionMet(_config: UlnConfigStructStruct, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    verifyConditionMet(_config: UlnConfigStructStruct, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        verifyConditionMet(_config: UlnConfigStructStruct, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "PayloadSigned(address,bytes,uint256,bytes32)"(verifier?: null, header?: null, confirmations?: null, proofHash?: null): PayloadSignedEventFilter;
        PayloadSigned(verifier?: null, header?: null, confirmations?: null, proofHash?: null): PayloadSignedEventFilter;
        "VerifierFeePaid(address[],address[],uint256[])"(verifiers?: null, optionalVerifiers?: null, fees?: null): VerifierFeePaidEventFilter;
        VerifierFeePaid(verifiers?: null, optionalVerifiers?: null, fees?: null): VerifierFeePaidEventFilter;
    };
    estimateGas: {
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        verifyConditionMet(_config: UlnConfigStructStruct, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        hashLookup(headerHash: PromiseOrValue<BytesLike>, payloadHash: PromiseOrValue<BytesLike>, verifier: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verified(_verifier: PromiseOrValue<string>, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _requiredConfirmation: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifyConditionMet(_config: UlnConfigStructStruct, _headerHash: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type UlnConfigStructStructOutput = [
    BigNumber,
    boolean,
    boolean,
    number,
    number,
    number,
    string[],
    string[]
] & {
    inboundConfirmations: BigNumber;
    useCustomVerifiers: boolean;
    useCustomOptionalVerifiers: boolean;
    verifierCount: number;
    optionalVerifierCount: number;
    optionalVerifierThreshold: number;
    verifiers: string[];
    optionalVerifiers: string[];
};
type OutboundConfigStructStruct = {
    maxMessageSize: PromiseOrValue<BigNumberish>;
    outboundConfirmations: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
};
type OutboundConfigStructStructOutput$1 = [number, BigNumber, string] & {
    maxMessageSize: number;
    outboundConfirmations: BigNumber;
    executor: string;
};
type SetDefaultConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>;
    outboundConfig: OutboundConfigStructStruct;
    inboundConfirmations: PromiseOrValue<BigNumberish>;
    verifiers: PromiseOrValue<string>[];
    optionalVerifiers: PromiseOrValue<string>[];
    optionalVerifierThreshold: PromiseOrValue<BigNumberish>;
};
interface UlnConfigInterface extends utils.Interface {
    functions: {
        "defaultOutboundConfig(uint32)": FunctionFragment;
        "getConfigByType(uint32,address,uint32)": FunctionFragment;
        "getDefaultConfigByType(uint32,uint32)": FunctionFragment;
        "getDefaultOutboundConfigByType(uint32,uint32)": FunctionFragment;
        "getDefaultUlnConfig(uint32)": FunctionFragment;
        "getOutboundConfig(address,uint32)": FunctionFragment;
        "getOutboundConfigByType(uint32,address,uint256)": FunctionFragment;
        "getRawUlnConfig(address,uint32)": FunctionFragment;
        "getUlnAndOutboundConfig(address,uint32)": FunctionFragment;
        "getUlnConfig(address,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "outboundConfig(address,uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "resetConfig(uint32[],address)": FunctionFragment;
        "setConfigByType(uint32,address,uint32,bytes)": FunctionFragment;
        "setDefaultConfig((uint32,(uint32,uint64,address),uint64,address[],address[],uint8)[])": FunctionFragment;
        "setUln(address)": FunctionFragment;
        "snapshotConfig(uint32[],address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "uln()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultOutboundConfig" | "getConfigByType" | "getDefaultConfigByType" | "getDefaultOutboundConfigByType" | "getDefaultUlnConfig" | "getOutboundConfig" | "getOutboundConfigByType" | "getRawUlnConfig" | "getUlnAndOutboundConfig" | "getUlnConfig" | "isSupportedEid" | "outboundConfig" | "owner" | "renounceOwnership" | "resetConfig" | "setConfigByType" | "setDefaultConfig" | "setUln" | "snapshotConfig" | "transferOwnership" | "uln"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultOutboundConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfigByType", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultConfigByType", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getDefaultOutboundConfigByType", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getDefaultUlnConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getOutboundConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getOutboundConfigByType", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getRawUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnAndOutboundConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getUlnConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "outboundConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setConfigByType", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultConfig", values: [SetDefaultConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setUln", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "uln", values?: undefined): string;
    decodeFunctionResult(functionFragment: "defaultOutboundConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultOutboundConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOutboundConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOutboundConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRawUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnAndOutboundConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getUlnConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUln", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uln", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$8 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$8 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$8>;
type OwnershipTransferredEventFilter$8 = TypedEventFilter<OwnershipTransferredEvent$8>;
interface UlnConfig extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: UlnConfigInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            maxMessageSize: number;
            outboundConfirmations: BigNumber;
            executor: string;
        }>;
        getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getDefaultUlnConfig(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput]>;
        getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[OutboundConfigStructStructOutput$1]>;
        getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        getRawUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput]>;
        getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput, OutboundConfigStructStructOutput$1]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput]>;
        isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            maxMessageSize: number;
            outboundConfirmations: BigNumber;
            executor: string;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultConfig(_params: SetDefaultConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setUln(_uln: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        uln(overrides?: CallOverrides): Promise<[string]>;
    };
    defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        number,
        BigNumber,
        string
    ] & {
        maxMessageSize: number;
        outboundConfirmations: BigNumber;
        executor: string;
    }>;
    getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
    getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getDefaultUlnConfig(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructStructOutput>;
    getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<OutboundConfigStructStructOutput$1>;
    getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
    getRawUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructStructOutput>;
    getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput, OutboundConfigStructStructOutput$1]>;
    getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructStructOutput>;
    isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        number,
        BigNumber,
        string
    ] & {
        maxMessageSize: number;
        outboundConfirmations: BigNumber;
        executor: string;
    }>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultConfig(_params: SetDefaultConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setUln(_uln: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    uln(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            maxMessageSize: number;
            outboundConfirmations: BigNumber;
            executor: string;
        }>;
        getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getDefaultUlnConfig(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructStructOutput>;
        getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<OutboundConfigStructStructOutput$1>;
        getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        getRawUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructStructOutput>;
        getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[UlnConfigStructStructOutput, OutboundConfigStructStructOutput$1]>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<UlnConfigStructStructOutput>;
        isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            maxMessageSize: number;
            outboundConfirmations: BigNumber;
            executor: string;
        }>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultConfig(_params: SetDefaultConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setUln(_uln: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        uln(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$8;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$8;
    };
    estimateGas: {
        defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultUlnConfig(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRawUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultConfig(_params: SetDefaultConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setUln(_uln: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        uln(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultUlnConfig(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRawUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnAndOutboundConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getUlnConfig(_oapp: PromiseOrValue<string>, _remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_remoteEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfigByType(_remoteEid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultConfig(_params: SetDefaultConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setUln(_uln: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        uln(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IVerifierFeeLib {
    type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        confirmations: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        quorum: PromiseOrValue<BigNumberish>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type FeeParamsStructOutput = [
        string,
        number,
        BigNumber,
        string,
        BigNumber,
        number
    ] & {
        priceFeed: string;
        dstEid: number;
        confirmations: BigNumber;
        sender: string;
        quorum: BigNumber;
        defaultMultiplierBps: number;
    };
}
declare namespace IVerifier$1 {
    type DstConfigStruct = {
        gas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [BigNumber, number, BigNumber] & {
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    };
}
interface VerifierFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": FunctionFragment;
        "getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IVerifierFeeLib.FeeParamsStruct,
        IVerifier$1.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IVerifierFeeLib.FeeParamsStruct,
        IVerifier$1.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    events: {};
}
interface VerifierFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: VerifierFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getFeeOnSend(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getFee(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IVerifierFeeLib.FeeParamsStruct, _dstConfig: IVerifier$1.DstConfigStruct, arg2: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type ExecuteParamStruct = {
    target: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
    expiration: PromiseOrValue<BigNumberish>;
    signatures: PromiseOrValue<BytesLike>;
};
type ExecuteParamStructOutput = [string, string, BigNumber, string] & {
    target: string;
    callData: string;
    expiration: BigNumber;
    signatures: string;
};
declare namespace IVerifier {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        gas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        BigNumber,
        number,
        BigNumber
    ] & {
        dstEid: number;
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    };
}
interface VerifierNetworkInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob(uint16,uint16,uint64,address)": FunctionFragment;
        "assignJob(uint32,uint64,address,bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "execute((address,bytes,uint256,bytes)[])": FunctionFragment;
        "getFee(uint32,uint64,address,bytes)": FunctionFragment;
        "getFee(uint16,uint16,uint64,address)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "hashCallData(address,bytes,uint256)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "quorum()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setDstConfig((uint32,uint64,uint16,uint128)[])": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setQuorum(uint64)": FunctionFragment;
        "setSigner(address,bool)": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "signerSize()": FunctionFragment;
        "signers(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "usedHashes(bytes32)": FunctionFragment;
        "verifyAndDeliver(address,bytes,bytes32,uint64)": FunctionFragment;
        "verifySignatures(bytes32,bytes)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "withdrawFeeFromUlnV2(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "assignJob(uint16,uint16,uint64,address)" | "assignJob(uint32,uint64,address,bytes)" | "defaultMultiplierBps" | "dstConfig" | "execute" | "getFee(uint32,uint64,address,bytes)" | "getFee(uint16,uint16,uint64,address)" | "getRoleAdmin" | "grantRole" | "hasRole" | "hashCallData" | "paused" | "priceFeed" | "quorum" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setDstConfig" | "setPaused" | "setPriceFeed" | "setQuorum" | "setSigner" | "setWorkerFeeLib" | "signerSize" | "signers" | "supportsInterface" | "usedHashes" | "verifyAndDeliver" | "verifySignatures" | "withdrawFee" | "withdrawFeeFromUlnV2" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob(uint16,uint16,uint64,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "assignJob(uint32,uint64,address,bytes)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "execute", values: [ExecuteParamStruct[]]): string;
    encodeFunctionData(functionFragment: "getFee(uint32,uint64,address,bytes)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFee(uint16,uint16,uint64,address)", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hashCallData", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [IVerifier.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setQuorum", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setSigner", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "signerSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "signers", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "usedHashes", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "verifyAndDeliver", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "verifySignatures", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawFeeFromUlnV2", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob(uint16,uint16,uint64,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob(uint32,uint64,address,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee(uint32,uint64,address,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee(uint16,uint16,uint64,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashCallData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setQuorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signerSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usedHashes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyAndDeliver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySignatures", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFeeFromUlnV2", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "AssignJob(uint32,address,uint64,uint256)": EventFragment;
        "ExecuteFailed(uint256,bytes)": EventFragment;
        "HashAlreadyUsed(tuple,bytes32)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetDstConfig(tuple[])": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "UpdateQuorum(uint64)": EventFragment;
        "UpdateSigner(address,bool)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AssignJob"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecuteFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "HashAlreadyUsed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDstConfig"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateQuorum"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateSigner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface AssignJobEventObject {
    dstEid: number;
    oapp: string;
    confirmations: BigNumber;
    totalFee: BigNumber;
}
type AssignJobEvent = TypedEvent<[
    number,
    string,
    BigNumber,
    BigNumber
], AssignJobEventObject>;
type AssignJobEventFilter = TypedEventFilter<AssignJobEvent>;
interface ExecuteFailedEventObject {
    _index: BigNumber;
    _data: string;
}
type ExecuteFailedEvent = TypedEvent<[
    BigNumber,
    string
], ExecuteFailedEventObject>;
type ExecuteFailedEventFilter = TypedEventFilter<ExecuteFailedEvent>;
interface HashAlreadyUsedEventObject {
    param: ExecuteParamStructOutput;
    _hash: string;
}
type HashAlreadyUsedEvent = TypedEvent<[
    ExecuteParamStructOutput,
    string
], HashAlreadyUsedEventObject>;
type HashAlreadyUsedEventFilter = TypedEventFilter<HashAlreadyUsedEvent>;
interface RoleAdminChangedEventObject$3 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$3 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$3>;
type RoleAdminChangedEventFilter$3 = TypedEventFilter<RoleAdminChangedEvent$3>;
interface RoleGrantedEventObject$3 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$3 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$3>;
type RoleGrantedEventFilter$3 = TypedEventFilter<RoleGrantedEvent$3>;
interface RoleRevokedEventObject$3 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$3 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$3>;
type RoleRevokedEventFilter$3 = TypedEventFilter<RoleRevokedEvent$3>;
interface SetDefaultMultiplierBpsEventObject$3 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$3 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$3>;
type SetDefaultMultiplierBpsEventFilter$3 = TypedEventFilter<SetDefaultMultiplierBpsEvent$3>;
interface SetDstConfigEventObject {
    params: IVerifier.DstConfigParamStructOutput[];
}
type SetDstConfigEvent = TypedEvent<[
    IVerifier.DstConfigParamStructOutput[]
], SetDstConfigEventObject>;
type SetDstConfigEventFilter = TypedEventFilter<SetDstConfigEvent>;
interface SetPriceFeedEventObject$3 {
    priceFeed: string;
}
type SetPriceFeedEvent$3 = TypedEvent<[string], SetPriceFeedEventObject$3>;
type SetPriceFeedEventFilter$3 = TypedEventFilter<SetPriceFeedEvent$3>;
interface SetWorkerLibEventObject$3 {
    workerLib: string;
}
type SetWorkerLibEvent$3 = TypedEvent<[string], SetWorkerLibEventObject$3>;
type SetWorkerLibEventFilter$3 = TypedEventFilter<SetWorkerLibEvent$3>;
interface UpdateQuorumEventObject$1 {
    _quorum: BigNumber;
}
type UpdateQuorumEvent$1 = TypedEvent<[
    BigNumber
], UpdateQuorumEventObject$1>;
type UpdateQuorumEventFilter$1 = TypedEventFilter<UpdateQuorumEvent$1>;
interface UpdateSignerEventObject$1 {
    _signer: string;
    _active: boolean;
}
type UpdateSignerEvent$1 = TypedEvent<[
    string,
    boolean
], UpdateSignerEventObject$1>;
type UpdateSignerEventFilter$1 = TypedEventFilter<UpdateSignerEvent$1>;
interface WithdrawEventObject$3 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$3 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$3>;
type WithdrawEventFilter$3 = TypedEventFilter<WithdrawEvent$3>;
interface VerifierNetwork extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: VerifierNetworkInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "assignJob(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            BigNumber
        ] & {
            gas: BigNumber;
            multiplierBps: number;
            floorMarginUSD: BigNumber;
        }>;
        execute(_params: ExecuteParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        hashCallData(_target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        quorum(overrides?: CallOverrides): Promise<[BigNumber]>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_params: IVerifier.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        signerSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            active: boolean;
        }>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean] & {
            used: boolean;
        }>;
        verifyAndDeliver(_uln: PromiseOrValue<string>, _packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "assignJob(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        BigNumber
    ] & {
        gas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
    }>;
    execute(_params: ExecuteParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    hashCallData(_target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    quorum(overrides?: CallOverrides): Promise<BigNumber>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_params: IVerifier.DstConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    signerSize(overrides?: CallOverrides): Promise<BigNumber>;
    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    verifyAndDeliver(_uln: PromiseOrValue<string>, _packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        "assignJob(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            BigNumber
        ] & {
            gas: BigNumber;
            multiplierBps: number;
            floorMarginUSD: BigNumber;
        }>;
        execute(_params: ExecuteParamStruct[], overrides?: CallOverrides): Promise<void>;
        "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        hashCallData(_target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDstConfig(_params: IVerifier.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        verifyAndDeliver(_uln: PromiseOrValue<string>, _packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "AssignJob(uint32,address,uint64,uint256)"(dstEid?: null, oapp?: null, confirmations?: null, totalFee?: null): AssignJobEventFilter;
        AssignJob(dstEid?: null, oapp?: null, confirmations?: null, totalFee?: null): AssignJobEventFilter;
        "ExecuteFailed(uint256,bytes)"(_index?: null, _data?: null): ExecuteFailedEventFilter;
        ExecuteFailed(_index?: null, _data?: null): ExecuteFailedEventFilter;
        "HashAlreadyUsed(tuple,bytes32)"(param?: null, _hash?: null): HashAlreadyUsedEventFilter;
        HashAlreadyUsed(param?: null, _hash?: null): HashAlreadyUsedEventFilter;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$3;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$3;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$3;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$3;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$3;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$3;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$3;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$3;
        "SetDstConfig(tuple[])"(params?: null): SetDstConfigEventFilter;
        SetDstConfig(params?: null): SetDstConfigEventFilter;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$3;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$3;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$3;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$3;
        "UpdateQuorum(uint64)"(_quorum?: null): UpdateQuorumEventFilter$1;
        UpdateQuorum(_quorum?: null): UpdateQuorumEventFilter$1;
        "UpdateSigner(address,bool)"(_signer?: null, _active?: null): UpdateSignerEventFilter$1;
        UpdateSigner(_signer?: null, _active?: null): UpdateSignerEventFilter$1;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$3;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$3;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "assignJob(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        execute(_params: ExecuteParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        hashCallData(_target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_params: IVerifier.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        verifyAndDeliver(_uln: PromiseOrValue<string>, _packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "assignJob(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "assignJob(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute(_params: ExecuteParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "getFee(uint32,uint64,address,bytes)"(_dstEid: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getFee(uint16,uint16,uint64,address)"(_dstEid: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, _confirmations: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hashCallData(_target: PromiseOrValue<string>, _callData: PromiseOrValue<BytesLike>, _expiration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(_role: PromiseOrValue<BytesLike>, _account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_params: IVerifier.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSigner(_signer: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        signerSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifyAndDeliver(_uln: PromiseOrValue<string>, _packetHeader: PromiseOrValue<BytesLike>, _payloadHash: PromiseOrValue<BytesLike>, _confirmations: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFeeFromUlnV2(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$j_MultiSig = MultiSig;
type index$j_UlnBase = UlnBase;
type index$j_UlnConfig = UlnConfig;
type index$j_VerifierFeeLib = VerifierFeeLib;
type index$j_VerifierNetwork = VerifierNetwork;
declare namespace index$j {
  export {
    index$j_MultiSig as MultiSig,
    index$j_UlnBase as UlnBase,
    index$j_UlnConfig as UlnConfig,
    index$j_VerifierFeeLib as VerifierFeeLib,
    index$j_VerifierNetwork as VerifierNetwork,
    index$n as interfaces,
    index$l as uln301,
    index$k as uln302,
  };
}

interface ProxyAdminInterface extends utils.Interface {
    functions: {
        "changeProxyAdmin(address,address)": FunctionFragment;
        "getProxyAdmin(address)": FunctionFragment;
        "getProxyImplementation(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "upgrade(address,address)": FunctionFragment;
        "upgradeAndCall(address,address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "changeProxyAdmin" | "getProxyAdmin" | "getProxyImplementation" | "owner" | "renounceOwnership" | "transferOwnership" | "upgrade" | "upgradeAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "changeProxyAdmin", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getProxyAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getProxyImplementation", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgrade", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeAndCall", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "changeProxyAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProxyImplementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeAndCall", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject$7 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$7 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$7>;
type OwnershipTransferredEventFilter$7 = TypedEventFilter<OwnershipTransferredEvent$7>;
interface ProxyAdmin extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ProxyAdminInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$7;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$7;
    };
    estimateGas: {
        changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        changeProxyAdmin(proxy: PromiseOrValue<string>, newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getProxyAdmin(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getProxyImplementation(proxy: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgrade(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeAndCall(proxy: PromiseOrValue<string>, implementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface TransparentUpgradeableProxyInterface extends utils.Interface {
    functions: {
        "admin()": FunctionFragment;
        "changeAdmin(address)": FunctionFragment;
        "implementation()": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "admin" | "changeAdmin" | "implementation" | "upgradeTo" | "upgradeToAndCall"): FunctionFragment;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "changeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "changeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
interface AdminChangedEventObject {
    previousAdmin: string;
    newAdmin: string;
}
type AdminChangedEvent = TypedEvent<[
    string,
    string
], AdminChangedEventObject>;
type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;
interface BeaconUpgradedEventObject {
    beacon: string;
}
type BeaconUpgradedEvent = TypedEvent<[
    string
], BeaconUpgradedEventObject>;
type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;
interface UpgradedEventObject {
    implementation: string;
}
type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;
type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
interface TransparentUpgradeableProxy extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TransparentUpgradeableProxyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    admin(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    implementation(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        admin(overrides?: CallOverrides): Promise<string>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        implementation(overrides?: CallOverrides): Promise<string>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AdminChanged(address,address)"(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        AdminChanged(previousAdmin?: null, newAdmin?: null): AdminChangedEventFilter;
        "BeaconUpgraded(address)"(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        BeaconUpgraded(beacon?: PromiseOrValue<string> | null): BeaconUpgradedEventFilter;
        "Upgraded(address)"(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        Upgraded(implementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    };
    estimateGas: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        admin(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        changeAdmin(newAdmin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        implementation(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeTo(newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeToAndCall(newImplementation: PromiseOrValue<string>, data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

type index$i_ProxyAdmin = ProxyAdmin;
type index$i_TransparentUpgradeableProxy = TransparentUpgradeableProxy;
declare namespace index$i {
  export {
    index$i_ProxyAdmin as ProxyAdmin,
    index$i_TransparentUpgradeableProxy as TransparentUpgradeableProxy,
  };
}

interface MultiSigUpgradeableInterface extends utils.Interface {
    functions: {
        "quorum()": FunctionFragment;
        "signerSize()": FunctionFragment;
        "signers(address)": FunctionFragment;
        "verifySignatures(bytes32,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "quorum" | "signerSize" | "signers" | "verifySignatures"): FunctionFragment;
    encodeFunctionData(functionFragment: "quorum", values?: undefined): string;
    encodeFunctionData(functionFragment: "signerSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "signers", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "verifySignatures", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signerSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifySignatures", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "UpdateQuorum(uint64)": EventFragment;
        "UpdateSigner(address,bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateQuorum"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateSigner"): EventFragment;
}
interface InitializedEventObject$3 {
    version: number;
}
type InitializedEvent$3 = TypedEvent<[number], InitializedEventObject$3>;
type InitializedEventFilter$3 = TypedEventFilter<InitializedEvent$3>;
interface UpdateQuorumEventObject {
    _quorum: BigNumber;
}
type UpdateQuorumEvent = TypedEvent<[
    BigNumber
], UpdateQuorumEventObject>;
type UpdateQuorumEventFilter = TypedEventFilter<UpdateQuorumEvent>;
interface UpdateSignerEventObject {
    _signer: string;
    _active: boolean;
}
type UpdateSignerEvent = TypedEvent<[
    string,
    boolean
], UpdateSignerEventObject>;
type UpdateSignerEventFilter = TypedEventFilter<UpdateSignerEvent>;
interface MultiSigUpgradeable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MultiSigUpgradeableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        quorum(overrides?: CallOverrides): Promise<[BigNumber]>;
        signerSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            active: boolean;
        }>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
    };
    quorum(overrides?: CallOverrides): Promise<BigNumber>;
    signerSize(overrides?: CallOverrides): Promise<BigNumber>;
    signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$3;
        Initialized(version?: null): InitializedEventFilter$3;
        "UpdateQuorum(uint64)"(_quorum?: null): UpdateQuorumEventFilter;
        UpdateQuorum(_quorum?: null): UpdateQuorumEventFilter;
        "UpdateSigner(address,bool)"(_signer?: null, _active?: null): UpdateSignerEventFilter;
        UpdateSigner(_signer?: null, _active?: null): UpdateSignerEventFilter;
    };
    estimateGas: {
        quorum(overrides?: CallOverrides): Promise<BigNumber>;
        signerSize(overrides?: CallOverrides): Promise<BigNumber>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        signerSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        signers(signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifySignatures(_hash: PromiseOrValue<BytesLike>, _signatures: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$h_MultiSigUpgradeable = MultiSigUpgradeable;
declare namespace index$h {
  export {
    index$h_MultiSigUpgradeable as MultiSigUpgradeable,
  };
}

interface WorkerUpgradeableInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "defaultMultiplierBps" | "getRoleAdmin" | "grantRole" | "hasRole" | "paused" | "priceFeed" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPriceFeed" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface InitializedEventObject$2 {
    version: number;
}
type InitializedEvent$2 = TypedEvent<[number], InitializedEventObject$2>;
type InitializedEventFilter$2 = TypedEventFilter<InitializedEvent$2>;
interface RoleAdminChangedEventObject$2 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$2 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$2>;
type RoleAdminChangedEventFilter$2 = TypedEventFilter<RoleAdminChangedEvent$2>;
interface RoleGrantedEventObject$2 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$2 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$2>;
type RoleGrantedEventFilter$2 = TypedEventFilter<RoleGrantedEvent$2>;
interface RoleRevokedEventObject$2 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$2 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$2>;
type RoleRevokedEventFilter$2 = TypedEventFilter<RoleRevokedEvent$2>;
interface SetDefaultMultiplierBpsEventObject$2 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$2 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$2>;
type SetDefaultMultiplierBpsEventFilter$2 = TypedEventFilter<SetDefaultMultiplierBpsEvent$2>;
interface SetPriceFeedEventObject$2 {
    priceFeed: string;
}
type SetPriceFeedEvent$2 = TypedEvent<[string], SetPriceFeedEventObject$2>;
type SetPriceFeedEventFilter$2 = TypedEventFilter<SetPriceFeedEvent$2>;
interface SetWorkerLibEventObject$2 {
    workerLib: string;
}
type SetWorkerLibEvent$2 = TypedEvent<[string], SetWorkerLibEventObject$2>;
type SetWorkerLibEventFilter$2 = TypedEventFilter<SetWorkerLibEvent$2>;
interface WithdrawEventObject$2 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$2 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$2>;
type WithdrawEventFilter$2 = TypedEventFilter<WithdrawEvent$2>;
interface WorkerUpgradeable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WorkerUpgradeableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter$2;
        Initialized(version?: null): InitializedEventFilter$2;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$2;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$2;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$2;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$2;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$2;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$2;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$2;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$2;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$2;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$2;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$2;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$2;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$2;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$2;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type index$g_WorkerUpgradeable = WorkerUpgradeable;
declare namespace index$g {
  export {
    index$g_WorkerUpgradeable as WorkerUpgradeable,
    index$i as proxy,
    index$h as uln,
  };
}

declare namespace ILayerZeroEndpointV2$1 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingParamsStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        receiver: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        options: PromiseOrValue<BytesLike>;
    };
    type MessagingParamsStructOutput = [number, string, string, string] & {
        dstEid: number;
        receiver: string;
        message: string;
        options: string;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2$1.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2$1.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2$1.MessagingFeeStructOutput;
    };
}
declare namespace IMessageOrigin$5 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IMessageLibManager$2 {
    type SetConfigParamStruct = {
        configType: PromiseOrValue<BigNumberish>;
        config: PromiseOrValue<BytesLike>;
    };
    type SetConfigParamStructOutput = [number, string] & {
        configType: number;
        config: string;
    };
}
interface EndpointV2Interface extends utils.Interface {
    functions: {
        "altFeeToken()": FunctionFragment;
        "blockedLibrary()": FunctionFragment;
        "clear((uint32,bytes32,uint64),bytes32,bytes)": FunctionFragment;
        "composedMessages(address,address,bytes32)": FunctionFragment;
        "defaultConfig(address,uint32,uint32)": FunctionFragment;
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "deliver((uint32,bytes32,uint64),address,bytes32)": FunctionFragment;
        "deliverComposedMessage(address,bytes32,bytes)": FunctionFragment;
        "deliverable((uint32,bytes32,uint64),address,address)": FunctionFragment;
        "eid()": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendContext()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "hasPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "isValidReceiveLibrary(address,uint32,address)": FunctionFragment;
        "layerZeroToken()": FunctionFragment;
        "lzCompose(address,address,bytes32,bytes,bytes)": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "quote(address,uint32,bytes,bool,bytes)": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "recoverToken(address,address,uint256)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "resetConfig(address,uint32[])": FunctionFragment;
        "send((uint32,bytes32,bytes,bytes),uint256,address)": FunctionFragment;
        "sendWithAlt((uint32,bytes32,bytes,bytes),uint256,uint256)": FunctionFragment;
        "setConfig(address,uint32,(uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setLayerZeroToken(address)": FunctionFragment;
        "setReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(uint32,address)": FunctionFragment;
        "skip(uint32,bytes32,uint64)": FunctionFragment;
        "snapshotConfig(address,uint32[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "altFeeToken" | "blockedLibrary" | "clear" | "composedMessages" | "defaultConfig" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "deliver" | "deliverComposedMessage" | "deliverable" | "eid" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendContext" | "getSendLibrary" | "hasPayloadHash" | "inboundNonce" | "inboundPayloadHash" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSendingMessage" | "isSupportedEid" | "isValidReceiveLibrary" | "layerZeroToken" | "lzCompose" | "lzReceive" | "nextGuid" | "outboundNonce" | "owner" | "quote" | "receiveLibraryTimeout" | "recoverToken" | "registerLibrary" | "renounceOwnership" | "resetConfig" | "send" | "sendWithAlt" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setLayerZeroToken" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "skip" | "snapshotConfig" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "altFeeToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "blockedLibrary", values?: undefined): string;
    encodeFunctionData(functionFragment: "clear", values: [
        IMessageOrigin$5.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "composedMessages", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "defaultConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "deliver", values: [
        IMessageOrigin$5.MessageOriginStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "deliverComposedMessage", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "deliverable", values: [
        IMessageOrigin$5.MessageOriginStruct,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hasPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "layerZeroToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$5.MessageOriginStruct,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "recoverToken", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "send", values: [
        ILayerZeroEndpointV2$1.MessagingParamsStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "sendWithAlt", values: [
        ILayerZeroEndpointV2$1.MessagingParamsStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IMessageLibManager$2.SetConfigParamStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setLayerZeroToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "altFeeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "blockedLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "composedMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliver", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverComposedMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "layerZeroToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "recoverToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendWithAlt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLayerZeroToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "ComposedMessageDelivered(address,address,bytes32,bytes)": EventFragment;
        "ComposedMessageReceived(address,address,bytes32,bytes32,address)": EventFragment;
        "DefaultReceiveLibrarySet(uint32,address,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "FeePaid(tuple)": EventFragment;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
        "LayerZeroTokenSet(address)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "LzComposeFailed(address,address,bytes32,bytes32,address,bytes)": EventFragment;
        "LzReceiveFailed(tuple,address,bytes)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PacketDelivered(tuple,address,bytes32)": EventFragment;
        "PacketReceived(tuple,address)": EventFragment;
        "PacketSent(bytes,bytes,address)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address,address)": EventFragment;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposedMessageDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposedMessageReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LayerZeroTokenSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzReceiveFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface ComposedMessageDeliveredEventObject$1 {
    receiver: string;
    composer: string;
    guid: string;
    message: string;
}
type ComposedMessageDeliveredEvent$1 = TypedEvent<[
    string,
    string,
    string,
    string
], ComposedMessageDeliveredEventObject$1>;
type ComposedMessageDeliveredEventFilter$1 = TypedEventFilter<ComposedMessageDeliveredEvent$1>;
interface ComposedMessageReceivedEventObject$1 {
    receiver: string;
    composer: string;
    guid: string;
    messageHash: string;
    caller: string;
}
type ComposedMessageReceivedEvent$1 = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], ComposedMessageReceivedEventObject$1>;
type ComposedMessageReceivedEventFilter$1 = TypedEventFilter<ComposedMessageReceivedEvent$1>;
interface DefaultReceiveLibrarySetEventObject$1 {
    eid: number;
    oldLib: string;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent$1 = TypedEvent<[
    number,
    string,
    string
], DefaultReceiveLibrarySetEventObject$1>;
type DefaultReceiveLibrarySetEventFilter$1 = TypedEventFilter<DefaultReceiveLibrarySetEvent$1>;
interface DefaultReceiveLibraryTimeoutSetEventObject$1 {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent$1 = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject$1>;
type DefaultReceiveLibraryTimeoutSetEventFilter$1 = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent$1>;
interface DefaultSendLibrarySetEventObject$1 {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent$1 = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject$1>;
type DefaultSendLibrarySetEventFilter$1 = TypedEventFilter<DefaultSendLibrarySetEvent$1>;
interface FeePaidEventObject {
    fee: ILayerZeroEndpointV2$1.MessagingFeeStructOutput;
}
type FeePaidEvent = TypedEvent<[
    ILayerZeroEndpointV2$1.MessagingFeeStructOutput
], FeePaidEventObject>;
type FeePaidEventFilter = TypedEventFilter<FeePaidEvent>;
interface InboundNonceSkippedEventObject$1 {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent$1 = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject$1>;
type InboundNonceSkippedEventFilter$1 = TypedEventFilter<InboundNonceSkippedEvent$1>;
interface LayerZeroTokenSetEventObject {
    token: string;
}
type LayerZeroTokenSetEvent = TypedEvent<[
    string
], LayerZeroTokenSetEventObject>;
type LayerZeroTokenSetEventFilter = TypedEventFilter<LayerZeroTokenSetEvent>;
interface LibraryRegisteredEventObject$1 {
    newLib: string;
}
type LibraryRegisteredEvent$1 = TypedEvent<[
    string
], LibraryRegisteredEventObject$1>;
type LibraryRegisteredEventFilter$1 = TypedEventFilter<LibraryRegisteredEvent$1>;
interface LzComposeFailedEventObject$1 {
    sender: string;
    receiver: string;
    guid: string;
    messageHash: string;
    caller: string;
    reason: string;
}
type LzComposeFailedEvent$1 = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    string
], LzComposeFailedEventObject$1>;
type LzComposeFailedEventFilter$1 = TypedEventFilter<LzComposeFailedEvent$1>;
interface LzReceiveFailedEventObject {
    origin: IMessageOrigin$5.MessageOriginStructOutput;
    receiver: string;
    reason: string;
}
type LzReceiveFailedEvent = TypedEvent<[
    IMessageOrigin$5.MessageOriginStructOutput,
    string,
    string
], LzReceiveFailedEventObject>;
type LzReceiveFailedEventFilter = TypedEventFilter<LzReceiveFailedEvent>;
interface OwnershipTransferredEventObject$6 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$6 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$6>;
type OwnershipTransferredEventFilter$6 = TypedEventFilter<OwnershipTransferredEvent$6>;
interface PacketDeliveredEventObject {
    origin: IMessageOrigin$5.MessageOriginStructOutput;
    receiver: string;
    payloadHash: string;
}
type PacketDeliveredEvent = TypedEvent<[
    IMessageOrigin$5.MessageOriginStructOutput,
    string,
    string
], PacketDeliveredEventObject>;
type PacketDeliveredEventFilter = TypedEventFilter<PacketDeliveredEvent>;
interface PacketReceivedEventObject {
    origin: IMessageOrigin$5.MessageOriginStructOutput;
    receiver: string;
}
type PacketReceivedEvent = TypedEvent<[
    IMessageOrigin$5.MessageOriginStructOutput,
    string
], PacketReceivedEventObject>;
type PacketReceivedEventFilter = TypedEventFilter<PacketReceivedEvent>;
interface PacketSentEventObject {
    encodedPayload: string;
    options: string;
    sendLibrary: string;
}
type PacketSentEvent = TypedEvent<[
    string,
    string,
    string
], PacketSentEventObject>;
type PacketSentEventFilter = TypedEventFilter<PacketSentEvent>;
interface ReceiveLibrarySetEventObject$1 {
    receiver: string;
    eid: number;
    oldLib: string;
    newLib: string;
}
type ReceiveLibrarySetEvent$1 = TypedEvent<[
    string,
    number,
    string,
    string
], ReceiveLibrarySetEventObject$1>;
type ReceiveLibrarySetEventFilter$1 = TypedEventFilter<ReceiveLibrarySetEvent$1>;
interface ReceiveLibraryTimoutSetEventObject$1 {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimoutSetEvent$1 = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimoutSetEventObject$1>;
type ReceiveLibraryTimoutSetEventFilter$1 = TypedEventFilter<ReceiveLibraryTimoutSetEvent$1>;
interface SendLibrarySetEventObject$1 {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent$1 = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject$1>;
type SendLibrarySetEventFilter$1 = TypedEventFilter<SendLibrarySetEvent$1>;
interface EndpointV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: EndpointV2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        altFeeToken(overrides?: CallOverrides): Promise<[string]>;
        blockedLibrary(overrides?: CallOverrides): Promise<[string]>;
        clear(_origin: IMessageOrigin$5.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string] & {
            messageHash: string;
        }>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        deliver(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        deliverable(_origin: IMessageOrigin$5.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        eid(overrides?: CallOverrides): Promise<[number]>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            payloadHash: string;
        }>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        layerZeroToken(overrides?: CallOverrides): Promise<[string]>;
        lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceive(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[ILayerZeroEndpointV2$1.MessagingFeeStructOutput]>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        sendWithAlt(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _altTokenFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$2.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    altFeeToken(overrides?: CallOverrides): Promise<string>;
    blockedLibrary(overrides?: CallOverrides): Promise<string>;
    clear(_origin: IMessageOrigin$5.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    deliver(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    deliverable(_origin: IMessageOrigin$5.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    eid(overrides?: CallOverrides): Promise<number>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        config: string;
        isDefault: boolean;
    }>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
    getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    layerZeroToken(overrides?: CallOverrides): Promise<string>;
    lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceive(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$1.MessagingFeeStructOutput>;
    receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    sendWithAlt(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _altTokenFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$2.SetConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        altFeeToken(overrides?: CallOverrides): Promise<string>;
        blockedLibrary(overrides?: CallOverrides): Promise<string>;
        clear(_origin: IMessageOrigin$5.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        deliver(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        deliverable(_origin: IMessageOrigin$5.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        eid(overrides?: CallOverrides): Promise<number>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        layerZeroToken(overrides?: CallOverrides): Promise<string>;
        lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            reason: string;
        }>;
        lzReceive(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            reason: string;
        }>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$1.MessagingFeeStructOutput>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        send(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$1.MessagingReceiptStructOutput>;
        sendWithAlt(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _altTokenFeeCap: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2$1.MessagingReceiptStructOutput>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$2.SetConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ComposedMessageDelivered(address,address,bytes32,bytes)"(receiver?: null, composer?: null, guid?: null, message?: null): ComposedMessageDeliveredEventFilter$1;
        ComposedMessageDelivered(receiver?: null, composer?: null, guid?: null, message?: null): ComposedMessageDeliveredEventFilter$1;
        "ComposedMessageReceived(address,address,bytes32,bytes32,address)"(receiver?: null, composer?: null, guid?: null, messageHash?: null, caller?: null): ComposedMessageReceivedEventFilter$1;
        ComposedMessageReceived(receiver?: null, composer?: null, guid?: null, messageHash?: null, caller?: null): ComposedMessageReceivedEventFilter$1;
        "DefaultReceiveLibrarySet(uint32,address,address)"(eid?: null, oldLib?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$1;
        DefaultReceiveLibrarySet(eid?: null, oldLib?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter$1;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$1;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter$1;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$1;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter$1;
        "FeePaid(tuple)"(fee?: null): FeePaidEventFilter;
        FeePaid(fee?: null): FeePaidEventFilter;
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$1;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter$1;
        "LayerZeroTokenSet(address)"(token?: null): LayerZeroTokenSetEventFilter;
        LayerZeroTokenSet(token?: null): LayerZeroTokenSetEventFilter;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter$1;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter$1;
        "LzComposeFailed(address,address,bytes32,bytes32,address,bytes)"(sender?: null, receiver?: null, guid?: null, messageHash?: null, caller?: null, reason?: null): LzComposeFailedEventFilter$1;
        LzComposeFailed(sender?: null, receiver?: null, guid?: null, messageHash?: null, caller?: null, reason?: null): LzComposeFailedEventFilter$1;
        "LzReceiveFailed(tuple,address,bytes)"(origin?: null, receiver?: null, reason?: null): LzReceiveFailedEventFilter;
        LzReceiveFailed(origin?: null, receiver?: null, reason?: null): LzReceiveFailedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$6;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$6;
        "PacketDelivered(tuple,address,bytes32)"(origin?: null, receiver?: null, payloadHash?: null): PacketDeliveredEventFilter;
        PacketDelivered(origin?: null, receiver?: null, payloadHash?: null): PacketDeliveredEventFilter;
        "PacketReceived(tuple,address)"(origin?: null, receiver?: null): PacketReceivedEventFilter;
        PacketReceived(origin?: null, receiver?: null): PacketReceivedEventFilter;
        "PacketSent(bytes,bytes,address)"(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter;
        PacketSent(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter;
        "ReceiveLibrarySet(address,uint32,address,address)"(receiver?: null, eid?: null, oldLib?: null, newLib?: null): ReceiveLibrarySetEventFilter$1;
        ReceiveLibrarySet(receiver?: null, eid?: null, oldLib?: null, newLib?: null): ReceiveLibrarySetEventFilter$1;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimoutSetEventFilter$1;
        ReceiveLibraryTimoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimoutSetEventFilter$1;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$1;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter$1;
    };
    estimateGas: {
        altFeeToken(overrides?: CallOverrides): Promise<BigNumber>;
        blockedLibrary(overrides?: CallOverrides): Promise<BigNumber>;
        clear(_origin: IMessageOrigin$5.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        deliver(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        deliverable(_origin: IMessageOrigin$5.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        layerZeroToken(overrides?: CallOverrides): Promise<BigNumber>;
        lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceive(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        sendWithAlt(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _altTokenFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$2.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        altFeeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        blockedLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        clear(_origin: IMessageOrigin$5.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliver(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _payloadHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        deliverable(_origin: IMessageOrigin$5.MessageOriginStruct, _receiveLib: PromiseOrValue<string>, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        layerZeroToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceive(_origin: IMessageOrigin$5.MessageOriginStruct, _receiver: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _message: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        recoverToken(_token: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _refundAddress: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        sendWithAlt(_params: ILayerZeroEndpointV2$1.MessagingParamsStruct, _lzTokenFeeCap: PromiseOrValue<BigNumberish>, _altTokenFeeCap: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager$2.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLayerZeroToken(_layerZeroToken: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IExecutor$1 {
    type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>;
        baseGas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
        airdropCap: PromiseOrValue<BigNumberish>;
    };
    type DstConfigParamStructOutput = [
        number,
        BigNumber,
        number,
        BigNumber,
        BigNumber
    ] & {
        dstEid: number;
        baseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        airdropCap: BigNumber;
    };
    type AirdropParamsStruct = {
        receiver: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
        gasLimit: PromiseOrValue<BigNumberish>;
    };
    type AirdropParamsStructOutput = [string, BigNumber, BigNumber] & {
        receiver: string;
        amount: BigNumber;
        gasLimit: BigNumber;
    };
    type ExecutionParamsStruct = {
        receiver: PromiseOrValue<string>;
        origin: IMessageOrigin$4.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        extraData: PromiseOrValue<BytesLike>;
        gasLimit: PromiseOrValue<BigNumberish>;
    };
    type ExecutionParamsStructOutput = [
        string,
        IMessageOrigin$4.MessageOriginStructOutput,
        string,
        string,
        string,
        BigNumber
    ] & {
        receiver: string;
        origin: IMessageOrigin$4.MessageOriginStructOutput;
        guid: string;
        message: string;
        extraData: string;
        gasLimit: BigNumber;
    };
}
declare namespace IMessageOrigin$4 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
interface ExecutorInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "airdrop((address,uint256,uint256))": FunctionFragment;
        "airdropAndExecute301((address,uint256,uint256),bytes,uint256)": FunctionFragment;
        "airdropAndExecute302((address,uint256,uint256),(address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "assignJob(uint32,address,uint256,bytes)": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "dstConfig(uint32)": FunctionFragment;
        "endpoint()": FunctionFragment;
        "getFee(uint32,address,uint256,bytes)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "initialize(address,address,address[],address,address,address[])": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setDstConfig((uint32,uint64,uint16,uint128,uint128)[])": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "uln301()": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "airdrop" | "airdropAndExecute301" | "airdropAndExecute302" | "allowlistSize" | "assignJob" | "defaultMultiplierBps" | "dstConfig" | "endpoint" | "getFee" | "getRoleAdmin" | "grantRole" | "hasRole" | "initialize" | "paused" | "priceFeed" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setDstConfig" | "setPaused" | "setPriceFeed" | "setWorkerFeeLib" | "supportsInterface" | "uln301" | "withdrawFee" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "airdrop", values: [IExecutor$1.AirdropParamsStruct]): string;
    encodeFunctionData(functionFragment: "airdropAndExecute301", values: [
        IExecutor$1.AirdropParamsStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "airdropAndExecute302", values: [IExecutor$1.AirdropParamsStruct, IExecutor$1.ExecutionParamsStruct]): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "assignJob", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "dstConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>[],
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>[]
    ]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setDstConfig", values: [IExecutor$1.DstConfigParamStruct[]]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "uln301", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airdropAndExecute301", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airdropAndExecute302", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDstConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "uln301", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "AirdropFailed(address,uint256)": EventFragment;
        "AirdropSucceeded(address,uint256)": EventFragment;
        "DstConfigSet(tuple[])": EventFragment;
        "Initialized(uint8)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AirdropFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AirdropSucceeded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface AirdropFailedEventObject {
    receiver: string;
    amount: BigNumber;
}
type AirdropFailedEvent = TypedEvent<[
    string,
    BigNumber
], AirdropFailedEventObject>;
type AirdropFailedEventFilter = TypedEventFilter<AirdropFailedEvent>;
interface AirdropSucceededEventObject {
    receiver: string;
    amount: BigNumber;
}
type AirdropSucceededEvent = TypedEvent<[
    string,
    BigNumber
], AirdropSucceededEventObject>;
type AirdropSucceededEventFilter = TypedEventFilter<AirdropSucceededEvent>;
interface DstConfigSetEventObject {
    params: IExecutor$1.DstConfigParamStructOutput[];
}
type DstConfigSetEvent = TypedEvent<[
    IExecutor$1.DstConfigParamStructOutput[]
], DstConfigSetEventObject>;
type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>;
interface InitializedEventObject$1 {
    version: number;
}
type InitializedEvent$1 = TypedEvent<[number], InitializedEventObject$1>;
type InitializedEventFilter$1 = TypedEventFilter<InitializedEvent$1>;
interface RoleAdminChangedEventObject$1 {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent$1 = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject$1>;
type RoleAdminChangedEventFilter$1 = TypedEventFilter<RoleAdminChangedEvent$1>;
interface RoleGrantedEventObject$1 {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent$1 = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject$1>;
type RoleGrantedEventFilter$1 = TypedEventFilter<RoleGrantedEvent$1>;
interface RoleRevokedEventObject$1 {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent$1 = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject$1>;
type RoleRevokedEventFilter$1 = TypedEventFilter<RoleRevokedEvent$1>;
interface SetDefaultMultiplierBpsEventObject$1 {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent$1 = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject$1>;
type SetDefaultMultiplierBpsEventFilter$1 = TypedEventFilter<SetDefaultMultiplierBpsEvent$1>;
interface SetPriceFeedEventObject$1 {
    priceFeed: string;
}
type SetPriceFeedEvent$1 = TypedEvent<[string], SetPriceFeedEventObject$1>;
type SetPriceFeedEventFilter$1 = TypedEventFilter<SetPriceFeedEvent$1>;
interface SetWorkerLibEventObject$1 {
    workerLib: string;
}
type SetWorkerLibEvent$1 = TypedEvent<[string], SetWorkerLibEventObject$1>;
type SetWorkerLibEventFilter$1 = TypedEventFilter<SetWorkerLibEvent$1>;
interface WithdrawEventObject$1 {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent$1 = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject$1>;
type WithdrawEventFilter$1 = TypedEventFilter<WithdrawEvent$1>;
interface Executor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ExecutorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        airdrop(_airdropParams: IExecutor$1.AirdropParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        airdropAndExecute301(_airdropParams: IExecutor$1.AirdropParamsStruct, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        airdropAndExecute302(_airdropParams: IExecutor$1.AirdropParamsStruct, _executionParams: IExecutor$1.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            BigNumber,
            BigNumber
        ] & {
            baseGas: BigNumber;
            multiplierBps: number;
            floorMarginUSD: BigNumber;
            airdropCap: BigNumber;
        }>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        initialize(_endpoint: PromiseOrValue<string>, _uln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDstConfig(_params: IExecutor$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        uln301(overrides?: CallOverrides): Promise<[string]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    airdrop(_airdropParams: IExecutor$1.AirdropParamsStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    airdropAndExecute301(_airdropParams: IExecutor$1.AirdropParamsStruct, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    airdropAndExecute302(_airdropParams: IExecutor$1.AirdropParamsStruct, _executionParams: IExecutor$1.ExecutionParamsStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        BigNumber,
        BigNumber
    ] & {
        baseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        airdropCap: BigNumber;
    }>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    initialize(_endpoint: PromiseOrValue<string>, _uln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDstConfig(_params: IExecutor$1.DstConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    uln301(overrides?: CallOverrides): Promise<string>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        airdrop(_airdropParams: IExecutor$1.AirdropParamsStruct, overrides?: CallOverrides): Promise<void>;
        airdropAndExecute301(_airdropParams: IExecutor$1.AirdropParamsStruct, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        airdropAndExecute302(_airdropParams: IExecutor$1.AirdropParamsStruct, _executionParams: IExecutor$1.ExecutionParamsStruct, overrides?: CallOverrides): Promise<void>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            BigNumber,
            BigNumber
        ] & {
            baseGas: BigNumber;
            multiplierBps: number;
            floorMarginUSD: BigNumber;
            airdropCap: BigNumber;
        }>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        initialize(_endpoint: PromiseOrValue<string>, _uln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDstConfig(_params: IExecutor$1.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        uln301(overrides?: CallOverrides): Promise<string>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "AirdropFailed(address,uint256)"(receiver?: null, amount?: null): AirdropFailedEventFilter;
        AirdropFailed(receiver?: null, amount?: null): AirdropFailedEventFilter;
        "AirdropSucceeded(address,uint256)"(receiver?: null, amount?: null): AirdropSucceededEventFilter;
        AirdropSucceeded(receiver?: null, amount?: null): AirdropSucceededEventFilter;
        "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter;
        DstConfigSet(params?: null): DstConfigSetEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter$1;
        Initialized(version?: null): InitializedEventFilter$1;
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$1;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter$1;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$1;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter$1;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$1;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter$1;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$1;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter$1;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter$1;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter$1;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter$1;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter$1;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter$1;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter$1;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        airdrop(_airdropParams: IExecutor$1.AirdropParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        airdropAndExecute301(_airdropParams: IExecutor$1.AirdropParamsStruct, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        airdropAndExecute302(_airdropParams: IExecutor$1.AirdropParamsStruct, _executionParams: IExecutor$1.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_endpoint: PromiseOrValue<string>, _uln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDstConfig(_params: IExecutor$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        uln301(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        airdrop(_airdropParams: IExecutor$1.AirdropParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        airdropAndExecute301(_airdropParams: IExecutor$1.AirdropParamsStruct, _packet: PromiseOrValue<BytesLike>, _gasLimit: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        airdropAndExecute302(_airdropParams: IExecutor$1.AirdropParamsStruct, _executionParams: IExecutor$1.ExecutionParamsStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        assignJob(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFee(_dstEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<string>, _calldataSize: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_endpoint: PromiseOrValue<string>, _uln301: PromiseOrValue<string>, _messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _roleAdmin: PromiseOrValue<string>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDstConfig(_params: IExecutor$1.DstConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        uln301(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IExecutorFeeLib {
    type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        calldataSize: PromiseOrValue<BigNumberish>;
        defaultMultiplierBps: PromiseOrValue<BigNumberish>;
    };
    type FeeParamsStructOutput = [
        string,
        number,
        string,
        BigNumber,
        number
    ] & {
        priceFeed: string;
        dstEid: number;
        sender: string;
        calldataSize: BigNumber;
        defaultMultiplierBps: number;
    };
}
declare namespace IExecutor {
    type DstConfigStruct = {
        baseGas: PromiseOrValue<BigNumberish>;
        multiplierBps: PromiseOrValue<BigNumberish>;
        floorMarginUSD: PromiseOrValue<BigNumberish>;
        airdropCap: PromiseOrValue<BigNumberish>;
    };
    type DstConfigStructOutput = [
        BigNumber,
        number,
        BigNumber,
        BigNumber
    ] & {
        baseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        airdropCap: BigNumber;
    };
}
interface ExecutorFeeLibInterface extends utils.Interface {
    functions: {
        "getFee((address,uint32,address,uint256,uint16),(uint64,uint16,uint128,uint128),bytes)": FunctionFragment;
        "getFeeOnSend((address,uint32,address,uint256,uint16),(uint64,uint16,uint128,uint128),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "getFeeOnSend"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        IExecutorFeeLib.FeeParamsStruct,
        IExecutor.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getFeeOnSend", values: [
        IExecutorFeeLib.FeeParamsStruct,
        IExecutor.DstConfigStruct,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeOnSend", data: BytesLike): Result;
    events: {};
}
interface ExecutorFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ExecutorFeeLibInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            fee: BigNumber;
        }>;
        getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {};
    estimateGas: {
        getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getFeeOnSend(_params: IExecutorFeeLib.FeeParamsStruct, _dstConfig: IExecutor.DstConfigStruct, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface MessageLibBaseInterface extends utils.Interface {
    functions: {
        "defaultOptions(uint32)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setDefaultOptions(uint32,bytes)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultOptions" | "fees" | "owner" | "renounceOwnership" | "setDefaultOptions" | "transferOwnership" | "treasury"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultOptions", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setDefaultOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    decodeFunctionResult(functionFragment: "defaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    events: {
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface ExecutorFeePaidEventObject$1 {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent$1 = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject$1>;
type ExecutorFeePaidEventFilter$1 = TypedEventFilter<ExecutorFeePaidEvent$1>;
interface OwnershipTransferredEventObject$5 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$5 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$5>;
type OwnershipTransferredEventFilter$5 = TypedEventFilter<OwnershipTransferredEvent$5>;
interface MessageLibBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessageLibBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            option: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
    };
    defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter$1;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter$1;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$5;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$5;
    };
    estimateGas: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IPacket {
    type PacketForQuoteStruct = {
        sender: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        message: PromiseOrValue<BytesLike>;
    };
    type PacketForQuoteStructOutput = [string, number, string] & {
        sender: string;
        dstEid: number;
        message: string;
    };
    type PacketStruct = {
        nonce: PromiseOrValue<BigNumberish>;
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<string>;
        dstEid: PromiseOrValue<BigNumberish>;
        receiver: PromiseOrValue<BytesLike>;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        BigNumber,
        number,
        string,
        number,
        string,
        string,
        string
    ] & {
        nonce: BigNumber;
        srcEid: number;
        sender: string;
        dstEid: number;
        receiver: string;
        guid: string;
        message: string;
    };
}
declare namespace ILayerZeroEndpointV2 {
    type MessagingFeeStruct = {
        nativeFee: PromiseOrValue<BigNumberish>;
        lzTokenFee: PromiseOrValue<BigNumberish>;
    };
    type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
        nativeFee: BigNumber;
        lzTokenFee: BigNumber;
    };
    type MessagingReceiptStruct = {
        guid: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
        fee: ILayerZeroEndpointV2.MessagingFeeStruct;
    };
    type MessagingReceiptStructOutput = [
        string,
        BigNumber,
        ILayerZeroEndpointV2.MessagingFeeStructOutput
    ] & {
        guid: string;
        nonce: BigNumber;
        fee: ILayerZeroEndpointV2.MessagingFeeStructOutput;
    };
}
declare namespace IMessageLibManager$1 {
    type SetConfigParamStruct = {
        configType: PromiseOrValue<BigNumberish>;
        config: PromiseOrValue<BytesLike>;
    };
    type SetConfigParamStructOutput = [number, string] & {
        configType: number;
        config: string;
    };
}
interface MessageLibBaseE2Interface extends utils.Interface {
    functions: {
        "defaultOptions(uint32)": FunctionFragment;
        "fees(address)": FunctionFragment;
        "getConfig(uint32,address,uint32)": FunctionFragment;
        "getDefaultConfig(uint32,uint32)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "owner()": FunctionFragment;
        "quote((address,uint32,bytes),bool,bytes)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "resetConfig(uint32[],address)": FunctionFragment;
        "send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)": FunctionFragment;
        "setConfig(address,uint32,(uint32,bytes)[])": FunctionFragment;
        "setDefaultOptions(uint32,bytes)": FunctionFragment;
        "setTreasury(address)": FunctionFragment;
        "snapshotConfig(uint32[],address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "version()": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
        "withdrawLzTokenFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultOptions" | "fees" | "getConfig" | "getDefaultConfig" | "isSupportedEid" | "owner" | "quote" | "renounceOwnership" | "resetConfig" | "send" | "setConfig" | "setDefaultOptions" | "setTreasury" | "snapshotConfig" | "supportsInterface" | "transferOwnership" | "treasury" | "version" | "withdrawFee" | "withdrawLzTokenFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultOptions", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "fees", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getDefaultConfig", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "quote", values: [
        IPacket.PacketForQuoteStruct,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "send", values: [
        IPacket.PacketStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IMessageLibManager$1.SetConfigParamStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultOptions", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setTreasury", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "withdrawLzTokenFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "defaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultOptions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzTokenFee", data: BytesLike): Result;
    events: {
        "ExecutorFeePaid(address,uint256)": EventFragment;
        "LzTokenFeeWithdrawn(address,address,uint256)": EventFragment;
        "NativeOrAltTokenFeeWithdrawn(address,address,uint256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ExecutorFeePaid"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzTokenFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NativeOrAltTokenFeeWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface ExecutorFeePaidEventObject {
    executor: string;
    fee: BigNumber;
}
type ExecutorFeePaidEvent = TypedEvent<[
    string,
    BigNumber
], ExecutorFeePaidEventObject>;
type ExecutorFeePaidEventFilter = TypedEventFilter<ExecutorFeePaidEvent>;
interface LzTokenFeeWithdrawnEventObject {
    lzToken: string;
    receiver: string;
    amount: BigNumber;
}
type LzTokenFeeWithdrawnEvent = TypedEvent<[
    string,
    string,
    BigNumber
], LzTokenFeeWithdrawnEventObject>;
type LzTokenFeeWithdrawnEventFilter = TypedEventFilter<LzTokenFeeWithdrawnEvent>;
interface NativeOrAltTokenFeeWithdrawnEventObject {
    worker: string;
    receiver: string;
    amount: BigNumber;
}
type NativeOrAltTokenFeeWithdrawnEvent = TypedEvent<[
    string,
    string,
    BigNumber
], NativeOrAltTokenFeeWithdrawnEventObject>;
type NativeOrAltTokenFeeWithdrawnEventFilter = TypedEventFilter<NativeOrAltTokenFeeWithdrawnEvent>;
interface OwnershipTransferredEventObject$4 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$4 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$4>;
type OwnershipTransferredEventFilter$4 = TypedEventFilter<OwnershipTransferredEvent$4>;
interface MessageLibBaseE2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessageLibBaseE2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            option: string;
        }>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        quote(_packet: IPacket.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[ILayerZeroEndpointV2.MessagingFeeStructOutput]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        send(_packet: IPacket.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$1.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        treasury(overrides?: CallOverrides): Promise<[string]>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        config: string;
        isDefault: boolean;
    }>;
    getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    owner(overrides?: CallOverrides): Promise<string>;
    quote(_packet: IPacket.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2.MessagingFeeStructOutput>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    send(_packet: IPacket.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$1.SetConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    treasury(overrides?: CallOverrides): Promise<string>;
    version(overrides?: CallOverrides): Promise<[
        BigNumber,
        number,
        number
    ] & {
        major: BigNumber;
        minor: number;
        endpointVersion: number;
    }>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        owner(overrides?: CallOverrides): Promise<string>;
        quote(_packet: IPacket.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ILayerZeroEndpointV2.MessagingFeeStructOutput>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        send(_packet: IPacket.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[
            ILayerZeroEndpointV2.MessagingReceiptStructOutput,
            string,
            string
        ]>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$1.SetConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        treasury(overrides?: CallOverrides): Promise<string>;
        version(overrides?: CallOverrides): Promise<[
            BigNumber,
            number,
            number
        ] & {
            major: BigNumber;
            minor: number;
            endpointVersion: number;
        }>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ExecutorFeePaid(address,uint256)"(executor?: null, fee?: null): ExecutorFeePaidEventFilter;
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter;
        "LzTokenFeeWithdrawn(address,address,uint256)"(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter;
        LzTokenFeeWithdrawn(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter;
        "NativeOrAltTokenFeeWithdrawn(address,address,uint256)"(worker?: null, receiver?: null, amount?: null): NativeOrAltTokenFeeWithdrawnEventFilter;
        NativeOrAltTokenFeeWithdrawn(worker?: null, receiver?: null, amount?: null): NativeOrAltTokenFeeWithdrawnEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$4;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$4;
    };
    estimateGas: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        quote(_packet: IPacket.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        send(_packet: IPacket.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$1.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        treasury(overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultOptions(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultConfig(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        quote(_packet: IPacket.PacketForQuoteStruct, _payInLzToken: PromiseOrValue<boolean>, _options: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resetConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        send(_packet: IPacket.PacketStruct, _options: PromiseOrValue<BytesLike>, _payInLzToken: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_oapp: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _config: IMessageLibManager$1.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultOptions(_dstEid: PromiseOrValue<BigNumberish>, _options: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setTreasury(_treasury: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_eids: PromiseOrValue<BigNumberish>[], _oapp: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawLzTokenFee(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageLibManager {
    type SetConfigParamStruct = {
        configType: PromiseOrValue<BigNumberish>;
        config: PromiseOrValue<BytesLike>;
    };
    type SetConfigParamStructOutput = [number, string] & {
        configType: number;
        config: string;
    };
}
interface MessageLibManagerInterface extends utils.Interface {
    functions: {
        "blockedLibrary()": FunctionFragment;
        "defaultConfig(address,uint32,uint32)": FunctionFragment;
        "defaultReceiveLibrary(uint32)": FunctionFragment;
        "defaultReceiveLibraryTimeout(uint32)": FunctionFragment;
        "defaultSendLibrary(uint32)": FunctionFragment;
        "getConfig(address,address,uint32,uint32)": FunctionFragment;
        "getReceiveLibrary(address,uint32)": FunctionFragment;
        "getRegisteredLibraries()": FunctionFragment;
        "getSendLibrary(address,uint32)": FunctionFragment;
        "isDefaultSendLibrary(address,uint32)": FunctionFragment;
        "isRegisteredLibrary(address)": FunctionFragment;
        "isSupportedEid(uint32)": FunctionFragment;
        "isValidReceiveLibrary(address,uint32,address)": FunctionFragment;
        "owner()": FunctionFragment;
        "receiveLibraryTimeout(address,uint32)": FunctionFragment;
        "registerLibrary(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "resetConfig(address,uint32[])": FunctionFragment;
        "setConfig(address,uint32,(uint32,bytes)[])": FunctionFragment;
        "setDefaultReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setDefaultReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setDefaultSendLibrary(uint32,address)": FunctionFragment;
        "setReceiveLibrary(uint32,address,uint256)": FunctionFragment;
        "setReceiveLibraryTimeout(uint32,address,uint256)": FunctionFragment;
        "setSendLibrary(uint32,address)": FunctionFragment;
        "snapshotConfig(address,uint32[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "blockedLibrary" | "defaultConfig" | "defaultReceiveLibrary" | "defaultReceiveLibraryTimeout" | "defaultSendLibrary" | "getConfig" | "getReceiveLibrary" | "getRegisteredLibraries" | "getSendLibrary" | "isDefaultSendLibrary" | "isRegisteredLibrary" | "isSupportedEid" | "isValidReceiveLibrary" | "owner" | "receiveLibraryTimeout" | "registerLibrary" | "renounceOwnership" | "resetConfig" | "setConfig" | "setDefaultReceiveLibrary" | "setDefaultReceiveLibraryTimeout" | "setDefaultSendLibrary" | "setReceiveLibrary" | "setReceiveLibraryTimeout" | "setSendLibrary" | "snapshotConfig" | "transferOwnership"): FunctionFragment;
    encodeFunctionData(functionFragment: "blockedLibrary", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultReceiveLibraryTimeout", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "defaultSendLibrary", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getReceiveLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getRegisteredLibraries", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isDefaultSendLibrary", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isRegisteredLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "isSupportedEid", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "isValidReceiveLibrary", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveLibraryTimeout", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "registerLibrary", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "resetConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        IMessageLibManager.SetConfigParamStruct[]
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setDefaultSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setReceiveLibrary", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveLibraryTimeout", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "setSendLibrary", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "snapshotConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "blockedLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRegisteredLibraries", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegisteredLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSupportedEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isValidReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "resetConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveLibraryTimeout", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendLibrary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "snapshotConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    events: {
        "DefaultReceiveLibrarySet(uint32,address,address)": EventFragment;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)": EventFragment;
        "DefaultSendLibrarySet(uint32,address)": EventFragment;
        "LibraryRegistered(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "ReceiveLibrarySet(address,uint32,address,address)": EventFragment;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)": EventFragment;
        "SendLibrarySet(address,uint32,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultReceiveLibraryTimeoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DefaultSendLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LibraryRegistered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibrarySet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReceiveLibraryTimoutSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SendLibrarySet"): EventFragment;
}
interface DefaultReceiveLibrarySetEventObject {
    eid: number;
    oldLib: string;
    newLib: string;
}
type DefaultReceiveLibrarySetEvent = TypedEvent<[
    number,
    string,
    string
], DefaultReceiveLibrarySetEventObject>;
type DefaultReceiveLibrarySetEventFilter = TypedEventFilter<DefaultReceiveLibrarySetEvent>;
interface DefaultReceiveLibraryTimeoutSetEventObject {
    eid: number;
    oldLib: string;
    expiry: BigNumber;
}
type DefaultReceiveLibraryTimeoutSetEvent = TypedEvent<[
    number,
    string,
    BigNumber
], DefaultReceiveLibraryTimeoutSetEventObject>;
type DefaultReceiveLibraryTimeoutSetEventFilter = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent>;
interface DefaultSendLibrarySetEventObject {
    eid: number;
    newLib: string;
}
type DefaultSendLibrarySetEvent = TypedEvent<[
    number,
    string
], DefaultSendLibrarySetEventObject>;
type DefaultSendLibrarySetEventFilter = TypedEventFilter<DefaultSendLibrarySetEvent>;
interface LibraryRegisteredEventObject {
    newLib: string;
}
type LibraryRegisteredEvent = TypedEvent<[
    string
], LibraryRegisteredEventObject>;
type LibraryRegisteredEventFilter = TypedEventFilter<LibraryRegisteredEvent>;
interface OwnershipTransferredEventObject$3 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$3 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$3>;
type OwnershipTransferredEventFilter$3 = TypedEventFilter<OwnershipTransferredEvent$3>;
interface ReceiveLibrarySetEventObject {
    receiver: string;
    eid: number;
    oldLib: string;
    newLib: string;
}
type ReceiveLibrarySetEvent = TypedEvent<[
    string,
    number,
    string,
    string
], ReceiveLibrarySetEventObject>;
type ReceiveLibrarySetEventFilter = TypedEventFilter<ReceiveLibrarySetEvent>;
interface ReceiveLibraryTimoutSetEventObject {
    receiver: string;
    eid: number;
    oldLib: string;
    timeout: BigNumber;
}
type ReceiveLibraryTimoutSetEvent = TypedEvent<[
    string,
    number,
    string,
    BigNumber
], ReceiveLibraryTimoutSetEventObject>;
type ReceiveLibraryTimoutSetEventFilter = TypedEventFilter<ReceiveLibraryTimoutSetEvent>;
interface SendLibrarySetEventObject {
    sender: string;
    eid: number;
    newLib: string;
}
type SendLibrarySetEvent = TypedEvent<[
    string,
    number,
    string
], SendLibrarySetEventObject>;
type SendLibrarySetEventFilter = TypedEventFilter<SendLibrarySetEvent>;
interface MessageLibManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessageLibManagerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        blockedLibrary(overrides?: CallOverrides): Promise<[string]>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            lib: string;
        }>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    blockedLibrary(overrides?: CallOverrides): Promise<string>;
    defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        config: string;
        isDefault: boolean;
    }>;
    getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
        lib: string;
        isDefault: boolean;
    }>;
    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
    getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    owner(overrides?: CallOverrides): Promise<string>;
    receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
        lib: string;
        expiry: BigNumber;
    }>;
    registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager.SetConfigParamStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        blockedLibrary(overrides?: CallOverrides): Promise<string>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            config: string;
            isDefault: boolean;
        }>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean] & {
            lib: string;
            isDefault: boolean;
        }>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        owner(overrides?: CallOverrides): Promise<string>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, BigNumber] & {
            lib: string;
            expiry: BigNumber;
        }>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager.SetConfigParamStruct[], overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DefaultReceiveLibrarySet(uint32,address,address)"(eid?: null, oldLib?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter;
        DefaultReceiveLibrarySet(eid?: null, oldLib?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter;
        "DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)"(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter;
        DefaultReceiveLibraryTimeoutSet(eid?: null, oldLib?: null, expiry?: null): DefaultReceiveLibraryTimeoutSetEventFilter;
        "DefaultSendLibrarySet(uint32,address)"(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter;
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter;
        "LibraryRegistered(address)"(newLib?: null): LibraryRegisteredEventFilter;
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$3;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$3;
        "ReceiveLibrarySet(address,uint32,address,address)"(receiver?: null, eid?: null, oldLib?: null, newLib?: null): ReceiveLibrarySetEventFilter;
        ReceiveLibrarySet(receiver?: null, eid?: null, oldLib?: null, newLib?: null): ReceiveLibrarySetEventFilter;
        "ReceiveLibraryTimoutSet(address,uint32,address,uint256)"(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimoutSetEventFilter;
        ReceiveLibraryTimoutSet(receiver?: null, eid?: null, oldLib?: null, timeout?: null): ReceiveLibraryTimoutSetEventFilter;
        "SendLibrarySet(address,uint32,address)"(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter;
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter;
    };
    estimateGas: {
        blockedLibrary(overrides?: CallOverrides): Promise<BigNumber>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        blockedLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultReceiveLibraryTimeout(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_oapp: PromiseOrValue<string>, _lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isDefaultSendLibrary(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isValidReceiveLibrary(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _actualReceiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveLibraryTimeout(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        registerLibrary(_lib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        resetConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_lib: PromiseOrValue<string>, _eid: PromiseOrValue<BigNumberish>, _params: IMessageLibManager.SetConfigParamStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, _gracePeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveLibraryTimeout(_eid: PromiseOrValue<BigNumberish>, _lib: PromiseOrValue<string>, _expiry: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendLibrary(_eid: PromiseOrValue<BigNumberish>, _newLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        snapshotConfig(_lib: PromiseOrValue<string>, _eids: PromiseOrValue<BigNumberish>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface MessagingChannelInterface extends utils.Interface {
    functions: {
        "eid()": FunctionFragment;
        "hasPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "inboundNonce(address,uint32,bytes32)": FunctionFragment;
        "inboundPayloadHash(address,uint32,bytes32,uint64)": FunctionFragment;
        "nextGuid(address,uint32,bytes32)": FunctionFragment;
        "outboundNonce(address,uint32,bytes32)": FunctionFragment;
        "skip(uint32,bytes32,uint64)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "eid" | "hasPayloadHash" | "inboundNonce" | "inboundPayloadHash" | "nextGuid" | "outboundNonce" | "skip"): FunctionFragment;
    encodeFunctionData(functionFragment: "eid", values?: undefined): string;
    encodeFunctionData(functionFragment: "hasPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "inboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "inboundPayloadHash", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "nextGuid", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "outboundNonce", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "skip", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "inboundPayloadHash", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextGuid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "skip", data: BytesLike): Result;
    events: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "InboundNonceSkipped"): EventFragment;
}
interface InboundNonceSkippedEventObject {
    srcEid: number;
    sender: string;
    receiver: string;
    nonce: BigNumber;
}
type InboundNonceSkippedEvent = TypedEvent<[
    number,
    string,
    string,
    BigNumber
], InboundNonceSkippedEventObject>;
type InboundNonceSkippedEventFilter = TypedEventFilter<InboundNonceSkippedEvent>;
interface MessagingChannel extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessagingChannelInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        eid(overrides?: CallOverrides): Promise<[number]>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            payloadHash: string;
        }>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber] & {
            nonce: BigNumber;
        }>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    eid(overrides?: CallOverrides): Promise<number>;
    hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        eid(overrides?: CallOverrides): Promise<number>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "InboundNonceSkipped(uint32,bytes32,address,uint64)"(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter;
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter;
    };
    estimateGas: {
        eid(overrides?: CallOverrides): Promise<BigNumber>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasPayloadHash(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundNonce(_receiver: PromiseOrValue<string>, _srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        inboundPayloadHash(receiver: PromiseOrValue<string>, srcEid: PromiseOrValue<BigNumberish>, sender: PromiseOrValue<BytesLike>, inboundNonce: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nextGuid(_sender: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, _receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundNonce(sender: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, receiver: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        skip(_srcEid: PromiseOrValue<BigNumberish>, _sender: PromiseOrValue<BytesLike>, _nonce: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface MessagingComposerInterface extends utils.Interface {
    functions: {
        "composedMessages(address,address,bytes32)": FunctionFragment;
        "deliverComposedMessage(address,bytes32,bytes)": FunctionFragment;
        "lzCompose(address,address,bytes32,bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "composedMessages" | "deliverComposedMessage" | "lzCompose"): FunctionFragment;
    encodeFunctionData(functionFragment: "composedMessages", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "deliverComposedMessage", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzCompose", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "composedMessages", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deliverComposedMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
    events: {
        "ComposedMessageDelivered(address,address,bytes32,bytes)": EventFragment;
        "ComposedMessageReceived(address,address,bytes32,bytes32,address)": EventFragment;
        "LzComposeFailed(address,address,bytes32,bytes32,address,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ComposedMessageDelivered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ComposedMessageReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LzComposeFailed"): EventFragment;
}
interface ComposedMessageDeliveredEventObject {
    receiver: string;
    composer: string;
    guid: string;
    message: string;
}
type ComposedMessageDeliveredEvent = TypedEvent<[
    string,
    string,
    string,
    string
], ComposedMessageDeliveredEventObject>;
type ComposedMessageDeliveredEventFilter = TypedEventFilter<ComposedMessageDeliveredEvent>;
interface ComposedMessageReceivedEventObject {
    receiver: string;
    composer: string;
    guid: string;
    messageHash: string;
    caller: string;
}
type ComposedMessageReceivedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string
], ComposedMessageReceivedEventObject>;
type ComposedMessageReceivedEventFilter = TypedEventFilter<ComposedMessageReceivedEvent>;
interface LzComposeFailedEventObject {
    sender: string;
    receiver: string;
    guid: string;
    messageHash: string;
    caller: string;
    reason: string;
}
type LzComposeFailedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    string,
    string
], LzComposeFailedEventObject>;
type LzComposeFailedEventFilter = TypedEventFilter<LzComposeFailedEvent>;
interface MessagingComposer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessagingComposerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string] & {
            messageHash: string;
        }>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            reason: string;
        }>;
    };
    filters: {
        "ComposedMessageDelivered(address,address,bytes32,bytes)"(receiver?: null, composer?: null, guid?: null, message?: null): ComposedMessageDeliveredEventFilter;
        ComposedMessageDelivered(receiver?: null, composer?: null, guid?: null, message?: null): ComposedMessageDeliveredEventFilter;
        "ComposedMessageReceived(address,address,bytes32,bytes32,address)"(receiver?: null, composer?: null, guid?: null, messageHash?: null, caller?: null): ComposedMessageReceivedEventFilter;
        ComposedMessageReceived(receiver?: null, composer?: null, guid?: null, messageHash?: null, caller?: null): ComposedMessageReceivedEventFilter;
        "LzComposeFailed(address,address,bytes32,bytes32,address,bytes)"(sender?: null, receiver?: null, guid?: null, messageHash?: null, caller?: null, reason?: null): LzComposeFailedEventFilter;
        LzComposeFailed(sender?: null, receiver?: null, guid?: null, messageHash?: null, caller?: null, reason?: null): LzComposeFailedEventFilter;
    };
    estimateGas: {
        composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        composedMessages(receiver: PromiseOrValue<string>, composer: PromiseOrValue<string>, guid: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deliverComposedMessage(_composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzCompose(_sender: PromiseOrValue<string>, _composer: PromiseOrValue<string>, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface MessagingContextInterface extends utils.Interface {
    functions: {
        "getSendContext()": FunctionFragment;
        "isSendingMessage()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getSendContext" | "isSendingMessage"): FunctionFragment;
    encodeFunctionData(functionFragment: "getSendContext", values?: undefined): string;
    encodeFunctionData(functionFragment: "isSendingMessage", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getSendContext", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isSendingMessage", data: BytesLike): Result;
    events: {};
}
interface MessagingContext extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MessagingContextInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>;
    };
    getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
    isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        getSendContext(overrides?: CallOverrides): Promise<[number, string]>;
        isSendingMessage(overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        getSendContext(overrides?: CallOverrides): Promise<BigNumber>;
        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$3 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$3 {
    type PacketStruct = {
        origin: IMessageOrigin$3.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$3.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$3.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface OAppInterface extends utils.Interface {
    functions: {
        "endpoint()": FunctionFragment;
        "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
        "lzReceiveAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "nextNonce(uint32,bytes32)": FunctionFragment;
        "owner()": FunctionFragment;
        "peers(uint32)": FunctionFragment;
        "precrime()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "safeGetPeer(uint32)": FunctionFragment;
        "setEndpointConfig(bytes)": FunctionFragment;
        "setPeer(uint32,bytes32,bool)": FunctionFragment;
        "setPrecrime(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "endpoint" | "lzReceive" | "lzReceiveAndRevert" | "nextNonce" | "owner" | "peers" | "precrime" | "renounceOwnership" | "safeGetPeer" | "setEndpointConfig" | "setPeer" | "setPrecrime" | "transferOwnership" | "version"): FunctionFragment;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        IMessageOrigin$3.MessageOriginStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "lzReceiveAndRevert", values: [IPreCrime$3.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "nextNonce", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "peers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrime", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "safeGetPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setEndpointConfig", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setPeer", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setPrecrime", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceiveAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeGetPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpointConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "SetPeer(uint32,bytes32,bool)": EventFragment;
        "SetPrecrime(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPeer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPrecrime"): EventFragment;
}
interface OwnershipTransferredEventObject$2 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$2 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$2>;
type OwnershipTransferredEventFilter$2 = TypedEventFilter<OwnershipTransferredEvent$2>;
interface SetPeerEventObject {
    remoteEid: number;
    peer: string;
    active: boolean;
}
type SetPeerEvent = TypedEvent<[
    number,
    string,
    boolean
], SetPeerEventObject>;
type SetPeerEventFilter = TypedEventFilter<SetPeerEvent>;
interface SetPrecrimeEventObject {
    precrime: string;
}
type SetPrecrimeEvent = TypedEvent<[string], SetPrecrimeEventObject>;
type SetPrecrimeEventFilter = TypedEventFilter<SetPrecrimeEvent>;
interface OApp extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OAppInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        lzReceive(_origin: IMessageOrigin$3.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$3.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrime(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        version(overrides?: CallOverrides): Promise<[BigNumber]>;
    };
    endpoint(overrides?: CallOverrides): Promise<string>;
    lzReceive(_origin: IMessageOrigin$3.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    lzReceiveAndRevert(_packets: IPreCrime$3.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrime(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    version(overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>;
        lzReceive(_origin: IMessageOrigin$3.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        lzReceiveAndRevert(_packets: IPreCrime$3.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrime(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$2;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$2;
        "SetPeer(uint32,bytes32,bool)"(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter;
        SetPeer(remoteEid?: null, peer?: null, active?: null): SetPeerEventFilter;
        "SetPrecrime(address)"(precrime?: null): SetPrecrimeEventFilter;
        SetPrecrime(precrime?: null): SetPrecrimeEventFilter;
    };
    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(_origin: IMessageOrigin$3.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        lzReceiveAndRevert(_packets: IPreCrime$3.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrime(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(_origin: IMessageOrigin$3.MessageOriginStruct, _guid: PromiseOrValue<BytesLike>, _message: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _extraData: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        lzReceiveAndRevert(_packets: IPreCrime$3.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nextNonce(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        peers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        safeGetPeer(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setEndpointConfig(_config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPeer(_eid: PromiseOrValue<BigNumberish>, _peer: PromiseOrValue<BytesLike>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrime(_precrime: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type OutboundConfigStructStructOutput = [number, BigNumber, string] & {
    maxMessageSize: number;
    outboundConfirmations: BigNumber;
    executor: string;
};
interface OutboundConfigInterface extends utils.Interface {
    functions: {
        "defaultOutboundConfig(uint32)": FunctionFragment;
        "getDefaultOutboundConfigByType(uint32,uint32)": FunctionFragment;
        "getOutboundConfig(address,uint32)": FunctionFragment;
        "getOutboundConfigByType(uint32,address,uint256)": FunctionFragment;
        "outboundConfig(address,uint32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "defaultOutboundConfig" | "getDefaultOutboundConfigByType" | "getOutboundConfig" | "getOutboundConfigByType" | "outboundConfig"): FunctionFragment;
    encodeFunctionData(functionFragment: "defaultOutboundConfig", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getDefaultOutboundConfigByType", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getOutboundConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getOutboundConfigByType", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "outboundConfig", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "defaultOutboundConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultOutboundConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOutboundConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOutboundConfigByType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "outboundConfig", data: BytesLike): Result;
    events: {};
}
interface OutboundConfig extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OutboundConfigInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            maxMessageSize: number;
            outboundConfirmations: BigNumber;
            executor: string;
        }>;
        getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[OutboundConfigStructStructOutput]>;
        getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            maxMessageSize: number;
            outboundConfirmations: BigNumber;
            executor: string;
        }>;
    };
    defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        number,
        BigNumber,
        string
    ] & {
        maxMessageSize: number;
        outboundConfirmations: BigNumber;
        executor: string;
    }>;
    getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<OutboundConfigStructStructOutput>;
    getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
    outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        number,
        BigNumber,
        string
    ] & {
        maxMessageSize: number;
        outboundConfirmations: BigNumber;
        executor: string;
    }>;
    callStatic: {
        defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            maxMessageSize: number;
            outboundConfirmations: BigNumber;
            executor: string;
        }>;
        getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<OutboundConfigStructStructOutput>;
        getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string, boolean]>;
        outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            number,
            BigNumber,
            string
        ] & {
            maxMessageSize: number;
            outboundConfirmations: BigNumber;
            executor: string;
        }>;
    };
    filters: {};
    estimateGas: {
        defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        defaultOutboundConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getOutboundConfig(_oapp: PromiseOrValue<string>, _dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getOutboundConfigByType(_eid: PromiseOrValue<BigNumberish>, _oapp: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        outboundConfig(oapp: PromiseOrValue<string>, dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$2 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$2 {
    type PacketStruct = {
        origin: IMessageOrigin$2.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$2.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$2.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface PreCrimeInterface extends utils.Interface {
    functions: {
        "_simulateAndRevert(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "getPrecrimeConfig(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "pAdmin()": FunctionFragment;
        "pMaxBatchSize()": FunctionFragment;
        "precrime(((uint32,bytes32,uint64),bytes32,bytes,bytes)[],bytes[])": FunctionFragment;
        "precrimeEidToPeer(uint32)": FunctionFragment;
        "precrimeEids(uint256)": FunctionFragment;
        "precrimePeers(uint256)": FunctionFragment;
        "precrimeVersion()": FunctionFragment;
        "setPrecrimeAdmin(address)": FunctionFragment;
        "setPrecrimeMaxBatchSize(uint64)": FunctionFragment;
        "setPrecrimePeers(uint32[],bytes32[])": FunctionFragment;
        "simulate(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulateView(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulationCallback()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "_simulateAndRevert" | "getPrecrimeConfig" | "pAdmin" | "pMaxBatchSize" | "precrime" | "precrimeEidToPeer" | "precrimeEids" | "precrimePeers" | "precrimeVersion" | "setPrecrimeAdmin" | "setPrecrimeMaxBatchSize" | "setPrecrimePeers" | "simulate" | "simulateView" | "simulationCallback"): FunctionFragment;
    encodeFunctionData(functionFragment: "_simulateAndRevert", values: [IPreCrime$2.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "getPrecrimeConfig", values: [IPreCrime$2.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "pAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "pMaxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "precrime", values: [IPreCrime$2.PacketStruct[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "precrimeEidToPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeEids", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimePeers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPrecrimeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPrecrimeMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrecrimePeers", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [IPreCrime$2.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulateView", values: [IPreCrime$2.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulationCallback", values?: undefined): string;
    decodeFunctionResult(functionFragment: "_simulateAndRevert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrecrimeConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEidToPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEids", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulationCallback", data: BytesLike): Result;
    events: {};
}
interface PreCrime extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PreCrimeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        _simulateAndRevert(_packets: IPreCrime$2.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getPrecrimeConfig(_packets: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<[string]>;
        pAdmin(overrides?: CallOverrides): Promise<[string]>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        precrime(_packets: IPreCrime$2.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrimeVersion(overrides?: CallOverrides): Promise<[number]>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(_packets: IPreCrime$2.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulateView(arg0: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
        simulationCallback(overrides?: CallOverrides): Promise<[string]>;
    };
    _simulateAndRevert(_packets: IPreCrime$2.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getPrecrimeConfig(_packets: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<string>;
    pAdmin(overrides?: CallOverrides): Promise<string>;
    pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    precrime(_packets: IPreCrime$2.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        reason: string;
    }>;
    precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeVersion(overrides?: CallOverrides): Promise<number>;
    setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(_packets: IPreCrime$2.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulateView(arg0: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
    simulationCallback(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        _simulateAndRevert(_packets: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<void>;
        getPrecrimeConfig(_packets: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<string>;
        pAdmin(overrides?: CallOverrides): Promise<string>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$2.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeVersion(overrides?: CallOverrides): Promise<number>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        simulate(_packets: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            data: string;
        }>;
        simulateView(arg0: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
        simulationCallback(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        _simulateAndRevert(_packets: IPreCrime$2.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getPrecrimeConfig(_packets: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        pAdmin(overrides?: CallOverrides): Promise<BigNumber>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$2.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(_packets: IPreCrime$2.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulateView(arg0: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        simulationCallback(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        _simulateAndRevert(_packets: IPreCrime$2.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getPrecrimeConfig(_packets: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(_packets: IPreCrime$2.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(_packets: IPreCrime$2.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulateView(arg0: IPreCrime$2.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        simulationCallback(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin$1 {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime$1 {
    type PacketStruct = {
        origin: IMessageOrigin$1.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin$1.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin$1.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface PreCrimeBaseInterface extends utils.Interface {
    functions: {
        "getPrecrimeConfig(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "pAdmin()": FunctionFragment;
        "pMaxBatchSize()": FunctionFragment;
        "precrime(((uint32,bytes32,uint64),bytes32,bytes,bytes)[],bytes[])": FunctionFragment;
        "precrimeEidToPeer(uint32)": FunctionFragment;
        "precrimeEids(uint256)": FunctionFragment;
        "precrimePeers(uint256)": FunctionFragment;
        "precrimeVersion()": FunctionFragment;
        "setPrecrimeAdmin(address)": FunctionFragment;
        "setPrecrimeMaxBatchSize(uint64)": FunctionFragment;
        "setPrecrimePeers(uint32[],bytes32[])": FunctionFragment;
        "simulate(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulateView(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulationCallback()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getPrecrimeConfig" | "pAdmin" | "pMaxBatchSize" | "precrime" | "precrimeEidToPeer" | "precrimeEids" | "precrimePeers" | "precrimeVersion" | "setPrecrimeAdmin" | "setPrecrimeMaxBatchSize" | "setPrecrimePeers" | "simulate" | "simulateView" | "simulationCallback"): FunctionFragment;
    encodeFunctionData(functionFragment: "getPrecrimeConfig", values: [IPreCrime$1.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "pAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "pMaxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "precrime", values: [IPreCrime$1.PacketStruct[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "precrimeEidToPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeEids", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimePeers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPrecrimeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPrecrimeMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrecrimePeers", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [IPreCrime$1.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulateView", values: [IPreCrime$1.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulationCallback", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getPrecrimeConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEidToPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEids", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulationCallback", data: BytesLike): Result;
    events: {};
}
interface PreCrimeBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PreCrimeBaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getPrecrimeConfig(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<[string]>;
        pAdmin(overrides?: CallOverrides): Promise<[string]>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        precrime(_packets: IPreCrime$1.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrimeVersion(overrides?: CallOverrides): Promise<[number]>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(_packets: IPreCrime$1.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulateView(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            result: string;
        }>;
        simulationCallback(overrides?: CallOverrides): Promise<[string]>;
    };
    getPrecrimeConfig(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<string>;
    pAdmin(overrides?: CallOverrides): Promise<string>;
    pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    precrime(_packets: IPreCrime$1.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        reason: string;
    }>;
    precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeVersion(overrides?: CallOverrides): Promise<number>;
    setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(_packets: IPreCrime$1.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulateView(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        result: string;
    }>;
    simulationCallback(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        getPrecrimeConfig(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<string>;
        pAdmin(overrides?: CallOverrides): Promise<string>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$1.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeVersion(overrides?: CallOverrides): Promise<number>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        simulate(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            result: string;
        }>;
        simulateView(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            result: string;
        }>;
        simulationCallback(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        getPrecrimeConfig(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        pAdmin(overrides?: CallOverrides): Promise<BigNumber>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime$1.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(_packets: IPreCrime$1.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulateView(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        simulationCallback(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getPrecrimeConfig(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(_packets: IPreCrime$1.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(_packets: IPreCrime$1.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulateView(_packets: IPreCrime$1.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        simulationCallback(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace IMessageOrigin {
    type MessageOriginStruct = {
        srcEid: PromiseOrValue<BigNumberish>;
        sender: PromiseOrValue<BytesLike>;
        nonce: PromiseOrValue<BigNumberish>;
    };
    type MessageOriginStructOutput = [number, string, BigNumber] & {
        srcEid: number;
        sender: string;
        nonce: BigNumber;
    };
}
declare namespace IPreCrime {
    type PacketStruct = {
        origin: IMessageOrigin.MessageOriginStruct;
        guid: PromiseOrValue<BytesLike>;
        message: PromiseOrValue<BytesLike>;
        callParams: PromiseOrValue<BytesLike>;
    };
    type PacketStructOutput = [
        IMessageOrigin.MessageOriginStructOutput,
        string,
        string,
        string
    ] & {
        origin: IMessageOrigin.MessageOriginStructOutput;
        guid: string;
        message: string;
        callParams: string;
    };
}
interface PreCrimeViewInterface extends utils.Interface {
    functions: {
        "getPrecrimeConfig(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "pAdmin()": FunctionFragment;
        "pMaxBatchSize()": FunctionFragment;
        "precrime(((uint32,bytes32,uint64),bytes32,bytes,bytes)[],bytes[])": FunctionFragment;
        "precrimeEidToPeer(uint32)": FunctionFragment;
        "precrimeEids(uint256)": FunctionFragment;
        "precrimePeers(uint256)": FunctionFragment;
        "precrimeVersion()": FunctionFragment;
        "setPrecrimeAdmin(address)": FunctionFragment;
        "setPrecrimeMaxBatchSize(uint64)": FunctionFragment;
        "setPrecrimePeers(uint32[],bytes32[])": FunctionFragment;
        "simulate(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulateView(((uint32,bytes32,uint64),bytes32,bytes,bytes)[])": FunctionFragment;
        "simulationCallback()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getPrecrimeConfig" | "pAdmin" | "pMaxBatchSize" | "precrime" | "precrimeEidToPeer" | "precrimeEids" | "precrimePeers" | "precrimeVersion" | "setPrecrimeAdmin" | "setPrecrimeMaxBatchSize" | "setPrecrimePeers" | "simulate" | "simulateView" | "simulationCallback"): FunctionFragment;
    encodeFunctionData(functionFragment: "getPrecrimeConfig", values: [IPreCrime.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "pAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "pMaxBatchSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "precrime", values: [IPreCrime.PacketStruct[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "precrimeEidToPeer", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeEids", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimePeers", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "precrimeVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "setPrecrimeAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPrecrimeMaxBatchSize", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrecrimePeers", values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]): string;
    encodeFunctionData(functionFragment: "simulate", values: [IPreCrime.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulateView", values: [IPreCrime.PacketStruct[]]): string;
    encodeFunctionData(functionFragment: "simulationCallback", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getPrecrimeConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEidToPeer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeEids", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "precrimeVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimeMaxBatchSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrecrimePeers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulateView", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "simulationCallback", data: BytesLike): Result;
    events: {};
}
interface PreCrimeView extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PreCrimeViewInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getPrecrimeConfig(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<[string]>;
        pAdmin(overrides?: CallOverrides): Promise<[string]>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        precrime(_packets: IPreCrime.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & {
            peer: string;
        }>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        precrimeVersion(overrides?: CallOverrides): Promise<[number]>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulate(arg0: IPreCrime.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        simulateView(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            data: string;
        }>;
        simulationCallback(overrides?: CallOverrides): Promise<[string]>;
    };
    getPrecrimeConfig(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<string>;
    pAdmin(overrides?: CallOverrides): Promise<string>;
    pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
    precrime(_packets: IPreCrime.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        reason: string;
    }>;
    precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    precrimeVersion(overrides?: CallOverrides): Promise<number>;
    setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulate(arg0: IPreCrime.PacketStruct[], overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    simulateView(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
        code: number;
        data: string;
    }>;
    simulationCallback(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        getPrecrimeConfig(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<string>;
        pAdmin(overrides?: CallOverrides): Promise<string>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            reason: string;
        }>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        precrimeVersion(overrides?: CallOverrides): Promise<number>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        simulate(arg0: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<[number, string]>;
        simulateView(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<[number, string] & {
            code: number;
            data: string;
        }>;
        simulationCallback(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        getPrecrimeConfig(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        pAdmin(overrides?: CallOverrides): Promise<BigNumber>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<BigNumber>;
        precrime(_packets: IPreCrime.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        precrimeVersion(overrides?: CallOverrides): Promise<BigNumber>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulate(arg0: IPreCrime.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        simulateView(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<BigNumber>;
        simulationCallback(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getPrecrimeConfig(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pMaxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrime(_packets: IPreCrime.PacketStruct[], _simulation: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEidToPeer(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeEids(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimePeers(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        precrimeVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setPrecrimeAdmin(_admin: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimeMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrecrimePeers(_eids: PromiseOrValue<BigNumberish>[], _peers: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulate(arg0: IPreCrime.PacketStruct[], overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        simulateView(_packets: IPreCrime.PacketStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        simulationCallback(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare namespace ILayerZeroPriceFeed {
    type ArbitrumPriceExtStruct = {
        gasPerL2Tx: PromiseOrValue<BigNumberish>;
        gasPerL1CallDataByte: PromiseOrValue<BigNumberish>;
    };
    type ArbitrumPriceExtStructOutput = [BigNumber, number] & {
        gasPerL2Tx: BigNumber;
        gasPerL1CallDataByte: number;
    };
    type PriceStruct = {
        priceRatio: PromiseOrValue<BigNumberish>;
        gasPriceInUnit: PromiseOrValue<BigNumberish>;
        gasPerByte: PromiseOrValue<BigNumberish>;
    };
    type PriceStructOutput = [BigNumber, BigNumber, number] & {
        priceRatio: BigNumber;
        gasPriceInUnit: BigNumber;
        gasPerByte: number;
    };
    type UpdatePriceStruct = {
        eid: PromiseOrValue<BigNumberish>;
        price: ILayerZeroPriceFeed.PriceStruct;
    };
    type UpdatePriceStructOutput = [
        number,
        ILayerZeroPriceFeed.PriceStructOutput
    ] & {
        eid: number;
        price: ILayerZeroPriceFeed.PriceStructOutput;
    };
    type UpdatePriceExtStruct = {
        eid: PromiseOrValue<BigNumberish>;
        price: ILayerZeroPriceFeed.PriceStruct;
        extend: ILayerZeroPriceFeed.ArbitrumPriceExtStruct;
    };
    type UpdatePriceExtStructOutput = [
        number,
        ILayerZeroPriceFeed.PriceStructOutput,
        ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput
    ] & {
        eid: number;
        price: ILayerZeroPriceFeed.PriceStructOutput;
        extend: ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput;
    };
}
interface PriceFeedInterface extends utils.Interface {
    functions: {
        "ARBITRUM_COMPRESSION_PERCENT()": FunctionFragment;
        "arbitrumPriceExt()": FunctionFragment;
        "endpoint()": FunctionFragment;
        "estimateFeeByChain(uint16,uint256,uint256)": FunctionFragment;
        "estimateFeeByEid(uint32,uint256,uint256)": FunctionFragment;
        "estimateFeeOnSend(uint32,uint256,uint256)": FunctionFragment;
        "getFee(uint32,uint256,uint256)": FunctionFragment;
        "getPrice(uint32)": FunctionFragment;
        "getPrice(uint16)": FunctionFragment;
        "getPriceRatioDenominator()": FunctionFragment;
        "initialize(address)": FunctionFragment;
        "nativeTokenPriceUSD()": FunctionFragment;
        "owner()": FunctionFragment;
        "priceUpdater(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setArbitrumCompressionPercent(uint128)": FunctionFragment;
        "setEndpoint(address)": FunctionFragment;
        "setNativeTokenPriceUSD(uint128)": FunctionFragment;
        "setPrice((uint32,(uint128,uint64,uint32))[])": FunctionFragment;
        "setPriceForArbitrum((uint32,(uint128,uint64,uint32),(uint64,uint32)))": FunctionFragment;
        "setPriceRatioDenominator(uint128)": FunctionFragment;
        "setPriceUpdater(address,bool)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdrawFee(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "ARBITRUM_COMPRESSION_PERCENT" | "arbitrumPriceExt" | "endpoint" | "estimateFeeByChain" | "estimateFeeByEid" | "estimateFeeOnSend" | "getFee" | "getPrice(uint32)" | "getPrice(uint16)" | "getPriceRatioDenominator" | "initialize" | "nativeTokenPriceUSD" | "owner" | "priceUpdater" | "renounceOwnership" | "setArbitrumCompressionPercent" | "setEndpoint" | "setNativeTokenPriceUSD" | "setPrice" | "setPriceForArbitrum" | "setPriceRatioDenominator" | "setPriceUpdater" | "transferOwnership" | "withdrawFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "ARBITRUM_COMPRESSION_PERCENT", values?: undefined): string;
    encodeFunctionData(functionFragment: "arbitrumPriceExt", values?: undefined): string;
    encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "estimateFeeByChain", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "estimateFeeByEid", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "estimateFeeOnSend", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "getPrice(uint32)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPrice(uint16)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getPriceRatioDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "nativeTokenPriceUSD", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceUpdater", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setArbitrumCompressionPercent", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setEndpoint", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setNativeTokenPriceUSD", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPrice", values: [ILayerZeroPriceFeed.UpdatePriceStruct[]]): string;
    encodeFunctionData(functionFragment: "setPriceForArbitrum", values: [ILayerZeroPriceFeed.UpdatePriceExtStruct]): string;
    encodeFunctionData(functionFragment: "setPriceRatioDenominator", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPriceUpdater", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "ARBITRUM_COMPRESSION_PERCENT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "arbitrumPriceExt", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeByChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeByEid", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateFeeOnSend", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice(uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPrice(uint16)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeTokenPriceUSD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceUpdater", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setArbitrumCompressionPercent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNativeTokenPriceUSD", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceForArbitrum", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceUpdater", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface InitializedEventObject {
    version: number;
}
type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
interface OwnershipTransferredEventObject$1 {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent$1 = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject$1>;
type OwnershipTransferredEventFilter$1 = TypedEventFilter<OwnershipTransferredEvent$1>;
interface PriceFeed extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: PriceFeedInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;
        arbitrumPriceExt(overrides?: CallOverrides): Promise<[ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput]>;
        endpoint(overrides?: CallOverrides): Promise<[string]>;
        estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
        }>;
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ILayerZeroPriceFeed.PriceStructOutput
        ] & {
            price: ILayerZeroPriceFeed.PriceStructOutput;
        }>;
        "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            ILayerZeroPriceFeed.PriceStructOutput
        ] & {
            price: ILayerZeroPriceFeed.PriceStructOutput;
        }>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;
        initialize(_priceUpdater: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & {
            active: boolean;
        }>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
    arbitrumPriceExt(overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput>;
    endpoint(overrides?: CallOverrides): Promise<string>;
    estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        fee: BigNumber;
        priceRatio: BigNumber;
    }>;
    estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
    estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.PriceStructOutput>;
    "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.PriceStructOutput>;
    getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
    initialize(_priceUpdater: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        arbitrumPriceExt(overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.ArbitrumPriceExtStructOutput>;
        endpoint(overrides?: CallOverrides): Promise<string>;
        estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            fee: BigNumber;
            priceRatio: BigNumber;
        }>;
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.PriceStructOutput>;
        "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<ILayerZeroPriceFeed.PriceStructOutput>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_priceUpdater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: CallOverrides): Promise<void>;
        setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: CallOverrides): Promise<void>;
        setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$1;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter$1;
    };
    estimateGas: {
        ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;
        arbitrumPriceExt(overrides?: CallOverrides): Promise<BigNumber>;
        endpoint(overrides?: CallOverrides): Promise<BigNumber>;
        estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_priceUpdater: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        ARBITRUM_COMPRESSION_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        arbitrumPriceExt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFeeByChain(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFeeByEid(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        estimateFeeOnSend(_dstEid: PromiseOrValue<BigNumberish>, _callDataSize: PromiseOrValue<BigNumberish>, _gas: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getFee(arg0: PromiseOrValue<BigNumberish>, arg1: PromiseOrValue<BigNumberish>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPrice(uint32)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getPrice(uint16)"(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getPriceRatioDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_priceUpdater: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceUpdater(updater: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setArbitrumCompressionPercent(_compressionPercent: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setEndpoint(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setNativeTokenPriceUSD(_nativeTokenPriceUSD: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPrice(_price: ILayerZeroPriceFeed.UpdatePriceStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceForArbitrum(_update: ILayerZeroPriceFeed.UpdatePriceExtStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceRatioDenominator(_denominator: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceUpdater(_addr: PromiseOrValue<string>, _active: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFee(_to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface TreasuryInterface extends utils.Interface {
    functions: {
        "getFee(address,uint32,uint256,bool)": FunctionFragment;
        "lzTokenEnabled()": FunctionFragment;
        "lzTokenFee()": FunctionFragment;
        "nativeBP()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setLzToken(uint256)": FunctionFragment;
        "setLzTokenEnabled(bool)": FunctionFragment;
        "setNativeFeeBP(uint256)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdrawLzToken(address,address,address,uint256)": FunctionFragment;
        "withdrawLzToken(address,address,uint256)": FunctionFragment;
        "withdrawNativeFee(address,address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getFee" | "lzTokenEnabled" | "lzTokenFee" | "nativeBP" | "owner" | "renounceOwnership" | "setLzToken" | "setLzTokenEnabled" | "setNativeFeeBP" | "transferOwnership" | "withdrawLzToken(address,address,address,uint256)" | "withdrawLzToken(address,address,uint256)" | "withdrawNativeFee"): FunctionFragment;
    encodeFunctionData(functionFragment: "getFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "lzTokenEnabled", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzTokenFee", values?: undefined): string;
    encodeFunctionData(functionFragment: "nativeBP", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "setLzToken", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setLzTokenEnabled", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setNativeFeeBP", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawLzToken(address,address,address,uint256)", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawLzToken(address,address,uint256)", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawNativeFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzTokenFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nativeBP", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLzTokenEnabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setNativeFeeBP", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzToken(address,address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawLzToken(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawNativeFee", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}
interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
interface Treasury extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TreasuryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<[BigNumber]>;
        lzTokenEnabled(overrides?: CallOverrides): Promise<[boolean]>;
        lzTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>;
        nativeBP(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzToken(_zroFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setLzTokenEnabled(_zroEnabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "withdrawLzToken(address,address,address,uint256)"(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "withdrawLzToken(address,address,uint256)"(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
    lzTokenEnabled(overrides?: CallOverrides): Promise<boolean>;
    lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
    nativeBP(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzToken(_zroFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setLzTokenEnabled(_zroEnabled: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "withdrawLzToken(address,address,address,uint256)"(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "withdrawLzToken(address,address,uint256)"(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        lzTokenEnabled(overrides?: CallOverrides): Promise<boolean>;
        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
        nativeBP(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        setLzToken(_zroFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setLzTokenEnabled(_zroEnabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        "withdrawLzToken(address,address,address,uint256)"(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        "withdrawLzToken(address,address,uint256)"(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
    };
    estimateGas: {
        getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        lzTokenEnabled(overrides?: CallOverrides): Promise<BigNumber>;
        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>;
        nativeBP(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzToken(_zroFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setLzTokenEnabled(_zroEnabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "withdrawLzToken(address,address,address,uint256)"(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "withdrawLzToken(address,address,uint256)"(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        getFee(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, _totalFee: PromiseOrValue<BigNumberish>, _payInLzToken: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzTokenEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzTokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        nativeBP(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzToken(_zroFee: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setLzTokenEnabled(_zroEnabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "withdrawLzToken(address,address,address,uint256)"(_messageLib: PromiseOrValue<string>, _lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "withdrawLzToken(address,address,uint256)"(_lzToken: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawNativeFee(_messageLib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

interface WorkerInterface extends utils.Interface {
    functions: {
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "allowlistSize()": FunctionFragment;
        "defaultMultiplierBps()": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "paused()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "setDefaultMultiplierBps(uint16)": FunctionFragment;
        "setPaused(bool)": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setWorkerFeeLib(address)": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "withdrawFee(address,address,uint256)": FunctionFragment;
        "workerFeeLib()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "DEFAULT_ADMIN_ROLE" | "allowlistSize" | "defaultMultiplierBps" | "getRoleAdmin" | "grantRole" | "hasRole" | "paused" | "priceFeed" | "renounceRole" | "revokeRole" | "setDefaultMultiplierBps" | "setPaused" | "setPriceFeed" | "setWorkerFeeLib" | "supportsInterface" | "withdrawFee" | "workerFeeLib"): FunctionFragment;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowlistSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "defaultMultiplierBps", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDefaultMultiplierBps", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setPaused", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setWorkerFeeLib", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "withdrawFee", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "workerFeeLib", values?: undefined): string;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowlistSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "defaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultMultiplierBps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setWorkerFeeLib", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "workerFeeLib", data: BytesLike): Result;
    events: {
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
        "SetDefaultMultiplierBps(uint16)": EventFragment;
        "SetPriceFeed(address)": EventFragment;
        "SetWorkerLib(address)": EventFragment;
        "Withdraw(address,address,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}
interface RoleAdminChangedEventObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
}
type RoleAdminChangedEvent = TypedEvent<[
    string,
    string,
    string
], RoleAdminChangedEventObject>;
type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;
interface RoleGrantedEventObject {
    role: string;
    account: string;
    sender: string;
}
type RoleGrantedEvent = TypedEvent<[
    string,
    string,
    string
], RoleGrantedEventObject>;
type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;
interface RoleRevokedEventObject {
    role: string;
    account: string;
    sender: string;
}
type RoleRevokedEvent = TypedEvent<[
    string,
    string,
    string
], RoleRevokedEventObject>;
type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;
interface SetDefaultMultiplierBpsEventObject {
    multiplierBps: number;
}
type SetDefaultMultiplierBpsEvent = TypedEvent<[
    number
], SetDefaultMultiplierBpsEventObject>;
type SetDefaultMultiplierBpsEventFilter = TypedEventFilter<SetDefaultMultiplierBpsEvent>;
interface SetPriceFeedEventObject {
    priceFeed: string;
}
type SetPriceFeedEvent = TypedEvent<[string], SetPriceFeedEventObject>;
type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>;
interface SetWorkerLibEventObject {
    workerLib: string;
}
type SetWorkerLibEvent = TypedEvent<[string], SetWorkerLibEventObject>;
type SetWorkerLibEventFilter = TypedEventFilter<SetWorkerLibEvent>;
interface WithdrawEventObject {
    lib: string;
    to: string;
    amount: BigNumber;
}
type WithdrawEvent = TypedEvent<[
    string,
    string,
    BigNumber
], WithdrawEventObject>;
type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;
interface Worker extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: WorkerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        priceFeed(overrides?: CallOverrides): Promise<[string]>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
    };
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    priceFeed(overrides?: CallOverrides): Promise<string>;
    renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    workerFeeLib(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        priceFeed(overrides?: CallOverrides): Promise<string>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        workerFeeLib(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "RoleAdminChanged(bytes32,bytes32,bytes32)"(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter;
        RoleAdminChanged(role?: PromiseOrValue<BytesLike> | null, previousAdminRole?: PromiseOrValue<BytesLike> | null, newAdminRole?: PromiseOrValue<BytesLike> | null): RoleAdminChangedEventFilter;
        "RoleGranted(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter;
        RoleGranted(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleGrantedEventFilter;
        "RoleRevoked(bytes32,address,address)"(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter;
        RoleRevoked(role?: PromiseOrValue<BytesLike> | null, account?: PromiseOrValue<string> | null, sender?: PromiseOrValue<string> | null): RoleRevokedEventFilter;
        "SetDefaultMultiplierBps(uint16)"(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter;
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter;
        "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter;
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter;
        "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter;
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter;
        "Withdraw(address,address,uint256)"(lib?: null, to?: null, amount?: null): WithdrawEventFilter;
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter;
    };
    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        grantRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        hasRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceRole(arg0: PromiseOrValue<BytesLike>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revokeRole(role: PromiseOrValue<BytesLike>, account: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPaused(_paused: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdrawFee(_lib: PromiseOrValue<string>, _to: PromiseOrValue<string>, _amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

type OmniCounterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OmniCounter__factory extends ContractFactory {
    constructor(...args: OmniCounterConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OmniCounter>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OmniCounter;
    connect(signer: Signer): OmniCounter__factory;
    static readonly bytecode = "0x60a06040523480156200001157600080fd5b506040516200307138038062003071833981016040819052620000349162000139565b806200004033620000e9565b6001600160a01b03166080819052600580546001600160a01b031916331790556040805163416ecebf60e01b8152905163416ecebf916004808201926020929091908290030181865afa1580156200009c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c291906200016b565b600560146101000a81548163ffffffff021916908363ffffffff1602179055505062000193565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200014c57600080fd5b81516001600160a01b03811681146200016457600080fd5b9392505050565b6000602082840312156200017e57600080fd5b815163ffffffff811681146200016457600080fd5b608051612e91620001e0600039600081816102fa015281816105d101528181610bf001528181610dab01528181611199015281816119db01528181611c060152611eb70152612e916000f3fe6080604052600436106101ae5760003560e01c8063715018a6116100eb578063bb0b6a531161008f578063f2fde38b11610061578063f2fde38b1461054f578063f3fef3a31461056f578063f5c6ba5a1461058f578063f851a440146105a257005b8063bb0b6a53146104c7578063c95c55be146104f4578063d0a1026014610507578063d22446ce1461051a57005b80638da5cb5b116100c85780638da5cb5b1461043c578063950c8a7414610467578063b7abbb5d14610494578063baf3292d146104a757005b8063715018a6146103ce5780637624f505146103e35780637d25a05e1461040357005b806356a4728911610152578063622f17f61161012f578063622f17f614610341578063655f06381461036e578063704b6c021461038e5780637112f86f146103ae57005b806356a472891461029b5780635b849af6146102c85780635e280f11146102e857005b806326b27f841161018b57806326b27f8414610209578063416ecebf14610229578063542e7b561461027357806354fd4d501461028657005b806306661abd146101b757806313137d65146101e0578063257f4e05146101f357005b366101b557005b005b3480156101c357600080fd5b506101cd60035481565b6040519081526020015b60405180910390f35b6101b56101ee3660046122e6565b6105cf565b3480156101ff57600080fd5b506101cd60045481565b34801561021557600080fd5b506101cd6102243660046123a1565b6106d9565b34801561023557600080fd5b5060055461025e9074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016101d7565b6101b5610281366004612401565b610733565b34801561029257600080fd5b506101cd600181565b3480156102a757600080fd5b506101cd6102b63660046123a1565b60086020526000908152604090205481565b3480156102d457600080fd5b506101b56102e33660046124ab565b610975565b3480156102f457600080fd5b5061031c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d7565b34801561034d57600080fd5b506101cd61035c3660046123a1565b60096020526000908152604090205481565b34801561037a57600080fd5b506101b56103893660046124c6565b6109ae565b34801561039a57600080fd5b506101b56103a9366004612508565b610c90565b3480156103ba57600080fd5b506101b56103c936600461253b565b610d58565b3480156103da57600080fd5b506101b5610e8c565b3480156103ef57600080fd5b506101b56103fe36600461257b565b610ea0565b34801561040f57600080fd5b5061042361041e3660046125b7565b610f59565b60405167ffffffffffffffff90911681526020016101d7565b34801561044857600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661031c565b34801561047357600080fd5b5060025461031c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101b56104a23660046125f2565b610fae565b3480156104b357600080fd5b506101b56104c2366004612508565b61105c565b3480156104d357600080fd5b506101cd6104e23660046123a1565b60016020526000908152604090205481565b6101b56105023660046125f2565b6110dd565b6101b5610515366004612653565b611181565b34801561052657600080fd5b5061053a6105353660046125f2565b611403565b604080519283526020830191909152016101d7565b34801561055b57600080fd5b506101b561056a366004612508565b611471565b34801561057b57600080fd5b506101b561058a3660046126d4565b611528565b6101b561059d3660046126f2565b6115ec565b3480156105ae57600080fd5b5060055461031c9073ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610645576040517fab08c09e0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b6020870180359061065a90610224908a6123a1565b14610697576040517fc59a4f640000000000000000000000000000000000000000000000000000000081526020880135600482015260240161063c565b6106c16106a760208901896123a1565b60208901356106bc60608b0160408c01612728565b6117c0565b6106d0878787878787876118f6565b50505050505050565b63ffffffff81166000908152600160205260409020548061072e576040517f196fb6c000000000000000000000000000000000000000000000000000000000815263ffffffff8316600482015260240161063c565b919050565b848114801561074157508483145b6107a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f6d6e69436f756e7465723a206c656e677468206d69736d6174636800000000604482015260640161063c565b6107af612233565b3460005b8781101561096a5760006107c860018a612774565b82146107d457306107d6565b335b905061091360405180608001604052808c8c868181106107f8576107f8612787565b905060200201602081019061080d91906123a1565b63ffffffff1681526020016108428d8d8781811061082d5761082d612787565b905060200201602081019061022491906123a1565b81526020016108978b8b8781811061085c5761085c612787565b905060200201602081019061087191906127b6565b60055474010000000000000000000000000000000000000000900463ffffffff16611b3e565b81526020018888868181106108ae576108ae612787565b90506020028101906108c091906127d1565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050604080518082019091528781526020810191909152905083611bb7565b93506109448a8a8481811061092a5761092a612787565b905060200201602081019061093f91906123a1565b611c89565b6040840151516109549084612774565b925050808061096290612836565b9150506107b3565b505050505050505050565b61097d611cb2565b600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6109b6611cb2565b60006109c2828461286e565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167fb8007ff6000000000000000000000000000000000000000000000000000000001480610a5557507fffffffff0000000000000000000000000000000000000000000000000000000081167f9e7fffcc00000000000000000000000000000000000000000000000000000000145b80610aa157507fffffffff0000000000000000000000000000000000000000000000000000000081167f0678327f00000000000000000000000000000000000000000000000000000000145b80610aed57507fffffffff0000000000000000000000000000000000000000000000000000000081167fb8849ac900000000000000000000000000000000000000000000000000000000145b80610b3957507fffffffff0000000000000000000000000000000000000000000000000000000081167fe16f964d00000000000000000000000000000000000000000000000000000000145b80610b8557507fffffffff0000000000000000000000000000000000000000000000000000000081167f66bf43d600000000000000000000000000000000000000000000000000000000145b610beb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f4170703a2066756e6374696f6e206e6f7420616c6c6f776564000000000000604482015260640161063c565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585604051610c359291906128b6565b6000604051808303816000865af19150503d8060008114610c72576040519150601f19603f3d011682016040523d82523d6000602084013e610c77565b606091505b509150915081610c8957805160208201fd5b5050505050565b60055473ffffffffffffffffffffffffffffffffffffffff163314610d11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e00000000000000000000000000000000000000000000604482015260640161063c565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610d60611cb2565b6040517feaeacd6300000000000000000000000000000000000000000000000000000000815263ffffffff841660048201526024810183905267ffffffffffffffff821660448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063eaeacd6390606401600060405180830381600087803b158015610e0457600080fd5b505af1158015610e18573d6000803e3d6000fd5b505060075460ff16159150610e8790505763ffffffff831660009081526006602090815260408083208584529091528120805467ffffffffffffffff1691610e5f836128c6565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505b505050565b610e94611cb2565b610e9e6000611d33565b565b610ea8611cb2565b63ffffffff831660009081526001602052604090205415158115158103610efb576040517f9556766100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff84166000818152600160209081526040918290208690558151928352820185905283151582820152517fc55181d68816686be8ec55890d24aefed84c9a6a875145822aad2b2c950f027f9181900360600190a150505050565b60075460009060ff1615610fa45763ffffffff83166000908152600660209081526040808320858452909152902054610f9d9067ffffffffffffffff1660016128ed565b9050610fa8565b5060005b92915050565b61104c60405180608001604052808663ffffffff168152602001610fd1876106d9565b8152602001610ff286600560149054906101000a900463ffffffff16611b3e565b815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050604080518082019091523481526020810191909152905033611bb7565b5061105684611c89565b50505050565b611064611cb2565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b9060200160405180910390a150565b60055473ffffffffffffffffffffffffffffffffffffffff16331461115e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e00000000000000000000000000000000000000000000604482015260640161063c565b610c8960405180608001604052808663ffffffff168152602001610fd1876106d9565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f21656e64706f696e740000000000000000000000000000000000000000000000604482015260640161063c565b600061122c8686611da8565b90507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff8216016112765760016004600082825461126b9190612915565b909155506113f99050565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff821601611397576001600460008282546112b39190612915565b90915550600090506112c58787611dca565b90506112d081611c89565b600061132362030d40600061131c604080517e03000000000000000000000000000000000000000000000000000000000000602082015281516002818303018152602290910190915290565b9190611dec565b905061138f60405180608001604052808463ffffffff168152602001611348856106d9565b815260200161136a6001600560149054906101000a900463ffffffff16611b3e565b8152602001838152506040518060400160405280348152602001600081525030611bb7565b5050506113f9565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f696e76616c6964206d6573736167652074797065000000000000000000000000604482015260640161063c565b5050505050505050565b6000806114648661142687600560149054906101000a900463ffffffff16611b3e565b600087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611eb092505050565b9150915094509492505050565b611479611cb2565b73ffffffffffffffffffffffffffffffffffffffff811661151c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161063c565b61152581611d33565b50565b60055473ffffffffffffffffffffffffffffffffffffffff1633146115a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e00000000000000000000000000000000000000000000604482015260640161063c565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610e87573d6000803e3d6000fd5b60025473ffffffffffffffffffffffffffffffffffffffff16331461163f576040517fc023811c00000000000000000000000000000000000000000000000000000000815233600482015260240161063c565b60005b818110156116d5573683838381811061165d5761165d612787565b905060200281019061166f9190612928565b9050600061168361022460208401846123a1565b9050602082013581146116975750506116c3565b6116c08260608101356116ad60808301836127d1565b336116bb60a08901896127d1565b6118f6565b50505b806116cd81612836565b915050611642565b50600254604080517fd2968d57000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163d2968d579160048083019260009291908290030181865afa158015611746573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261178c91908101906129b9565b6040517f0a78da8f00000000000000000000000000000000000000000000000000000000815260040161063c929190612ace565b63ffffffff8316600090815260066020908152604080832085845290915290205460075467ffffffffffffffff9091169060ff1615611880576118048160016128ed565b67ffffffffffffffff168267ffffffffffffffff1614611880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f4170703a20696e76616c6964206e6f6e636500000000000000000000000000604482015260640161063c565b8067ffffffffffffffff168267ffffffffffffffff1611156110565763ffffffff841660009081526006602090815260408083208684529091529020805467ffffffffffffffff84167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090911617905550505050565b60006119028686611da8565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff82160161195e576003805490600061193e83612836565b90915550611959905061195460208a018a6123a1565b611f6c565b6113f9565b60ff811660021480611973575060ff81166004145b15611a4d576003805490600061198883612836565b9091555061199e905061195460208a018a6123a1565b6040517f754d3b9c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063754d3b9c90611a169030908b908b908b90600401612af3565b600060405180830381600087803b158015611a3057600080fd5b505af1158015611a44573d6000803e3d6000fd5b505050506113f9565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff8216016113975760038054906000611a8783612836565b90915550611a9d905061195460208a018a6123a1565b611aad61093f60208a018a6123a1565b6000611af962030d40600061131c604080517e03000000000000000000000000000000000000000000000000000000000000602082015281516002818303018152602290910190915290565b6040805160808101909152909150611b379080611b1960208d018d6123a1565b63ffffffff16815260209081019061134890610224908e018e6123a1565b50506113f9565b6040517fff0000000000000000000000000000000000000000000000000000000000000060f884901b1660208201527fffffffff0000000000000000000000000000000000000000000000000000000060e083901b1660218201526060906025015b604051602081830303815290604052905092915050565b611bbf612233565b825160208401516040517faca1b45a00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263aca1b45a92611c3d918a918990600401612b64565b60806040518083038185885af1158015611c5b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c809190612c52565b95945050505050565b63ffffffff81166000908152600960205260408120805491611caa83612836565b919050555050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161063c565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611db76001828486612cba565b611dc091612ce4565b60f81c9392505050565b6000611dd98260018186612cba565b611de29161286e565b60e01c9392505050565b6060836003611dfc826000611f8d565b61ffff1614611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f7074696f6e734275696c6465723a20696e76616c6964206f7074696f6e732060448201527f7479706500000000000000000000000000000000000000000000000000000000606482015260840161063c565b6000611e98858561200d565b9050611ea6866001836120b4565b9695505050505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166383c4755930898989896040518663ffffffff1660e01b8152600401611f16959493929190612d2a565b6040805180830381865afa158015611f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f569190612d8b565b8051602090910151909890975095505050505050565b63ffffffff81166000908152600860205260408120805491611caa83612836565b6000611f9a826002612915565b83511015612004576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e6473000000000000000000000000604482015260640161063c565b50016002015190565b60606fffffffffffffffffffffffffffffffff82161561207657604080517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608086811b8216602084015285901b166030820152016040516020818303038152906040526120ad565b6040517fffffffffffffffffffffffffffffffff00000000000000000000000000000000608085901b166020820152603001611ba0565b9392505050565b60608360036120c4826000611f8d565b61ffff1614612154576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4f7074696f6e734275696c6465723a20696e76616c6964206f7074696f6e732060448201527f7479706500000000000000000000000000000000000000000000000000000000606482015260840161063c565b846001612161855161219b565b61216c906001612da7565b8686604051602001612182959493929190612dc2565b6040516020818303038152906040529150509392505050565b600061ffff82111561222f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f3620626974730000000000000000000000000000000000000000000000000000606482015260840161063c565b5090565b604051806060016040528060008019168152602001600067ffffffffffffffff168152602001612276604051806040016040528060008152602001600081525090565b905290565b60008083601f84011261228d57600080fd5b50813567ffffffffffffffff8111156122a557600080fd5b6020830191508360208285010111156122bd57600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461152557600080fd5b600080600080600080600087890360e081121561230257600080fd5b606081121561231057600080fd5b5087965060608801359550608088013567ffffffffffffffff8082111561233657600080fd5b6123428b838c0161227b565b909750955060a08a01359150612357826122c4565b90935060c0890135908082111561236d57600080fd5b5061237a8a828b0161227b565b989b979a50959850939692959293505050565b803563ffffffff8116811461072e57600080fd5b6000602082840312156123b357600080fd5b6120ad8261238d565b60008083601f8401126123ce57600080fd5b50813567ffffffffffffffff8111156123e657600080fd5b6020830191508360208260051b85010111156122bd57600080fd5b6000806000806000806060878903121561241a57600080fd5b863567ffffffffffffffff8082111561243257600080fd5b61243e8a838b016123bc565b9098509650602089013591508082111561245757600080fd5b6124638a838b016123bc565b9096509450604089013591508082111561247c57600080fd5b5061248989828a016123bc565b979a9699509497509295939492505050565b8035801515811461072e57600080fd5b6000602082840312156124bd57600080fd5b6120ad8261249b565b600080602083850312156124d957600080fd5b823567ffffffffffffffff8111156124f057600080fd5b6124fc8582860161227b565b90969095509350505050565b60006020828403121561251a57600080fd5b81356120ad816122c4565b67ffffffffffffffff8116811461152557600080fd5b60008060006060848603121561255057600080fd5b6125598461238d565b925060208401359150604084013561257081612525565b809150509250925092565b60008060006060848603121561259057600080fd5b6125998461238d565b9250602084013591506125ae6040850161249b565b90509250925092565b600080604083850312156125ca57600080fd5b6125d38361238d565b946020939093013593505050565b803560ff8116811461072e57600080fd5b6000806000806060858703121561260857600080fd5b6126118561238d565b935061261f602086016125e1565b9250604085013567ffffffffffffffff81111561263b57600080fd5b6126478782880161227b565b95989497509550505050565b600080600080600080600060a0888a03121561266e57600080fd5b8735612679816122c4565b965060208801359550604088013567ffffffffffffffff8082111561269d57600080fd5b6126a98b838c0161227b565b909750955060608a013591506126be826122c4565b9093506080890135908082111561236d57600080fd5b600080604083850312156126e757600080fd5b82356125d3816122c4565b6000806020838503121561270557600080fd5b823567ffffffffffffffff81111561271c57600080fd5b6124fc858286016123bc565b60006020828403121561273a57600080fd5b81356120ad81612525565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610fa857610fa8612745565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156127c857600080fd5b6120ad826125e1565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261280657600080fd5b83018035915067ffffffffffffffff82111561282157600080fd5b6020019150368190038213156122bd57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361286757612867612745565b5060010190565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156128ae5780818660040360031b1b83161692505b505092915050565b8183823760009101908152919050565b600067ffffffffffffffff8083168181036128e3576128e3612745565b6001019392505050565b67ffffffffffffffff81811683821601908082111561290e5761290e612745565b5092915050565b80820180821115610fa857610fa8612745565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261295c57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60005b838110156129b0578181015183820152602001612998565b50506000910152565b6000602082840312156129cb57600080fd5b815167ffffffffffffffff808211156129e357600080fd5b818401915084601f8301126129f757600080fd5b815181811115612a0957612a09612966565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715612a4f57612a4f612966565b81604052828152876020848701011115612a6857600080fd5b612a79836020830160208801612995565b979650505050505050565b60008151808452612a9c816020860160208601612995565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b61ffff83168152604060208201526000612aeb6040830184612a84565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019392505050565b6060815263ffffffff84511660608201526020840151608082015260006040850151608060a0840152612b9a60e0840182612a84565b905060608601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08483030160c0850152612bd58282612a84565b9250505083602083015273ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b600060408284031215612c1557600080fd5b6040516040810181811067ffffffffffffffff82111715612c3857612c38612966565b604052825181526020928301519281019290925250919050565b600060808284031215612c6457600080fd5b6040516060810181811067ffffffffffffffff82111715612c8757612c87612966565b604052825181526020830151612c9c81612525565b6020820152612cae8460408501612c03565b60408201529392505050565b60008085851115612cca57600080fd5b83861115612cd757600080fd5b5050820193919092039150565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156128ae5760019490940360031b84901b1690921692915050565b73ffffffffffffffffffffffffffffffffffffffff8616815263ffffffff8516602082015260a060408201526000612d6560a0830186612a84565b84151560608401528281036080840152612d7f8185612a84565b98975050505050505050565b600060408284031215612d9d57600080fd5b6120ad8383612c03565b61ffff81811683821601908082111561290e5761290e612745565b60008651612dd4818460208b01612995565b80830190507fff00000000000000000000000000000000000000000000000000000000000000808860f81b1682527fffff0000000000000000000000000000000000000000000000000000000000008760f01b166001830152808660f81b166003830152508351612e4c816004840160208801612995565b0160040197965050505050505056fea264697066735822122059865556085428d89bf9ffe92d585666c056dc992b6c31f04fc27710a2cfbf6e64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "PreCrimeOnly";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPrecrime";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "admin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "uint8[]";
            readonly name: "_types";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_options";
            readonly type: "bytes[]";
        }];
        readonly name: "batchIncrement";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "brokenIncrement";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "composedCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "count";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "inboundCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "increment";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "outboundCount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "count";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "contract IPreCrime";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint8";
            readonly name: "_type";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "zroFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setEndpointConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_orderedNonce";
            readonly type: "bool";
        }];
        readonly name: "setOrderedNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPrecrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skipInboundNonce";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OmniCounterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OmniCounter;
}

type OmniCounterPreCrimeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OmniCounterPreCrime__factory extends ContractFactory {
    constructor(...args: OmniCounterPreCrimeConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _counter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OmniCounterPreCrime>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _counter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OmniCounterPreCrime;
    connect(signer: Signer): OmniCounterPreCrime__factory;
    static readonly bytecode = "0x60c06040523480156200001157600080fd5b5060405162002edd38038062002edd833981016040819052620000349162000110565b8180806001600160a01b03166080816001600160a01b0316815250506080516001600160a01b031663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b791906200014f565b63ffffffff1660a052505060008054336001600160a01b031991821617909155600480549091166001600160a01b0392909216919091179055506200017e565b6001600160a01b03811681146200010d57600080fd5b50565b600080604083850312156200012457600080fd5b82516200013181620000f7565b60208401519092506200014481620000f7565b809150509250929050565b6000602082840312156200016257600080fd5b815163ffffffff811681146200017757600080fd5b9392505050565b60805160a051612d1d620001c060003960008181610a7901528181610d1701528181610f710152818161111d01526111f4015260006113a30152612d1d6000f3fe6080604052600436106100e85760003560e01c80636ece7d361161008a578063d2968d5711610059578063d2968d57146102b3578063e51ac4b0146102d5578063e780f25414610327578063fd4c212e1461034757600080fd5b80636ece7d36146102405780637a4359d51461026057806392d99a7f1461028057806399877564146102a057600080fd5b80632c79305d116100c65780632c79305d1461018357806330515e561461019f57806354b3ab69146101f15780635bf88a001461021e57600080fd5b806312fb9ea5146100ed57806328318b621461012057806329c246281461014e575b600080fd5b3480156100f957600080fd5b5061010d610108366004611e79565b61035a565b6040519081526020015b60405180910390f35b34801561012c57600080fd5b5061014061013b366004611ed7565b61037b565b604051610117929190611fb1565b34801561015a57600080fd5b5061016e610169366004611e79565b6104f5565b60405163ffffffff9091168152602001610117565b34801561018f57600080fd5b5060405160018152602001610117565b3480156101ab57600080fd5b506000546101d89074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610117565b3480156101fd57600080fd5b5061010d61020c366004611feb565b60036020526000908152604090205481565b34801561022a57600080fd5b5061023e61023936600461218b565b61052f565b005b34801561024c57600080fd5b5061023e61025b366004612263565b610657565b34801561026c57600080fd5b5061014061027b366004612280565b61072b565b34801561028c57600080fd5b5061023e61029b3660046122c2565b610793565b6101406102ae366004612280565b61085b565b3480156102bf57600080fd5b506102c8610ac6565b60405161011791906122f8565b3480156102e157600080fd5b506000546103029073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610117565b34801561033357600080fd5b506102c8610342366004612280565b610d62565b61023e610355366004612280565b610dbf565b6002818154811061036a57600080fd5b600091825260209091200154905081565b60006060818367ffffffffffffffff8111156103995761039961200f565b6040519080825280602002602001820160405280156103cc57816020015b60608152602001906001900390816103b75790505b50905060008467ffffffffffffffff8111156103ea576103ea61200f565b604051908082528060200260200182016040528015610413578160200160208202803683370190505b50905060005b858110156104b9576000808888848181106104365761043661230b565b9050602002810190610448919061233a565b8101906104559190612436565b915091508184848151811061046c5761046c61230b565b602002602001019063ffffffff16908163ffffffff1681525050808584815181106104995761049961230b565b6020026020010181905250505080806104b1906124ab565b915050610419565b506104c5888883610e6f565b909450925061ffff8416156104db5750506104ec565b6104e482611039565b909450925050505b94509492505050565b6001818154811061050557600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b81516105c8906001906020850190611d7a565b5080516105dc906002906020840190611e29565b5060005b8251811015610652578181815181106105fb576105fb61230b565b6020026020010151600360008584815181106106195761061961230b565b602002602001015163ffffffff1663ffffffff16815260200190815260200160002081905550808061064a906124ab565b9150506105e0565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064016105ac565b6000805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420696d706c656d656e746564000000000000000000000000000000000060448201526000906060906064016105ac565b60005473ffffffffffffffffffffffffffffffffffffffff163314610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064016105ac565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006060610869848461127f565b909250905061ffff8216610abf576000803073ffffffffffffffffffffffffffffffffffffffff163463fd4c212e60e01b88886040516024016108ad929190612590565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161093691906126c0565b60006040518083038185875af1925050503d8060008114610973576040519150601f19603f3d011682016040523d82523d6000602084013e610978565b606091505b50909250905034156109b25760405133903480156108fc02916000818181858888f193505050501580156109b0573d6000803e3d6000fd5b505b8115610a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f73696d756c6174652073686f756c64206e657665722072657475726e2073756360448201527f636573730000000000000000000000000000000000000000000000000000000060648201526084016105ac565b610a69817f3ef0530200000000000000000000000000000000000000000000000000000000611588565b909450925061ffff8416610abc577f000000000000000000000000000000000000000000000000000000000000000083604051602001610aaa9291906126dc565b60405160208183030381529060405292505b50505b9250929050565b60015460609060009067ffffffffffffffff811115610ae757610ae761200f565b604051908082528060200260200182016040528015610b4257816020015b610b2f6040518060600160405280600063ffffffff16815260200160008152602001600081525090565b815260200190600190039081610b055790505b50905060005b600154811015610d0657600060018281548110610b6757610b6761230b565b600091825260209182902060088204015460408051606081018252600790931660049081026101000a90920463ffffffff16808452825491517f56a472890000000000000000000000000000000000000000000000000000000081529283018190529450919283019173ffffffffffffffffffffffffffffffffffffffff16906356a4728990602401602060405180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3191906126fb565b8152600480546040517f622f17f600000000000000000000000000000000000000000000000000000000815263ffffffff86169281019290925260209092019173ffffffffffffffffffffffffffffffffffffffff169063622f17f690602401602060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd291906126fb565b815250838381518110610ce757610ce761230b565b6020026020010181905250508080610cfe906124ab565b915050610b48565b5060408051808201825263ffffffff7f000000000000000000000000000000000000000000000000000000000000000016815260208082018490529151610d4d9201612714565b60405160208183030381529060405291505090565b6060600080610d71858561160c565b915091506001600060149054906101000a900467ffffffffffffffff1683518484604051602001610da695949392919061278f565b6040516020818303038152906040529250505092915050565b333014610e28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5072656372696d653a206f6e6c792073656c660000000000000000000000000060448201526064016105ac565b600080610e3584846116ff565b9150915081816040517f3ef053020000000000000000000000000000000000000000000000000000000081526004016105ac929190611fb1565b600060608315610f62576000610e85868661160c565b50905060005b8151811015610f5f576000805b8651811015610f0157838381518110610eb357610eb361230b565b602002602001015163ffffffff16878281518110610ed357610ed361230b565b602002602001015163ffffffff1603610eef5760019150610f01565b80610ef9816124ab565b915050610e98565b5080610f4c576101926040518060400160405280601e81526020017f6d697373696e6720706565722073696d756c6174696f6e20726573756c74000081525094509450505050611031565b5080610f57816124ab565b915050610e8b565b50505b6000805b8451811015610fd6577f000000000000000000000000000000000000000000000000000000000000000063ffffffff16858281518110610fa857610fa861230b565b602002602001015163ffffffff1603610fc45760019150610fd6565b80610fce816124ab565b915050610f66565b508061101c57505060408051808201909152601f81527f6d697373696e67206c6f63616c2073696d756c6174696f6e20726573756c740060208201526101929150611031565b50506040805160208101909152600080825291505b935093915050565b600060606110606040518060400160405280600063ffffffff168152602001606081525090565b6000845167ffffffffffffffff81111561107c5761107c61200f565b6040519080825280602002602001820160405280156110c257816020015b60408051808201909152600081526060602082015281526020019060019003908161109a5790505b50905060005b855181101561119a578581815181106110e3576110e361230b565b60200260200101518060200190518101906110fe9190612853565b8282815181106111105761111061230b565b60200260200101819052507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168282815181106111545761115461230b565b60200260200101516000015163ffffffff16036111885781818151811061117d5761117d61230b565b602002602001015192505b80611192816124ab565b9150506110c8565b5060005b81518110156112615760006111d0848484815181106111bf576111bf61230b565b602002602001015160000151611919565b50905060006112188484815181106111ea576111ea61230b565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000611919565b9150508082111561124c576001604051806060016040528060318152602001612cb760319139965096505050505050915091565b50508080611259906124ab565b91505061119e565b50600060405180602001604052806000815250935093505050915091565b6000805460609074010000000000000000000000000000000000000000900467ffffffffffffffff1683111561130957600054610190906112e19074010000000000000000000000000000000000000000900467ffffffffffffffff166119cd565b6040516020016112f19190612962565b60405160208183030381529060405291509150610abf565b821561156e5760008080805b868110156115695760008888838181106113315761133161230b565b905060200281019061134391906129a7565b61134c906129db565b80515190915063ffffffff868116911614158061136e57508051602001518414155b156114ef578051805160208201516040909201519096509094509250600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a0dd43fc6113e760045473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015263ffffffff8916602482015260448101889052606401602060405180830381865afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190612a9f565b611492906001612abc565b90508067ffffffffffffffff168467ffffffffffffffff16146114e9576101916114bb846119cd565b6040516020016114cb9190612ae4565b60405160208183030381529060405297509750505050505050610abf565b50611556565b6114f883612b4f565b92508267ffffffffffffffff1681600001516040015167ffffffffffffffff161461155657610191611529836119cd565b6040516020016115399190612b76565b604051602081830303815290604052965096505050505050610abf565b5080611561816124ab565b915050611315565b505050505b505060408051602081019091526000808252909250929050565b600060607fffffffff0000000000000000000000000000000000000000000000000000000083166115b885612bbb565b7fffffffff0000000000000000000000000000000000000000000000000000000016146115e757835160208501fd5b600484019350838060200190518101906116019190612c0b565b915091509250929050565b60608060008390036116f557600160028180548060200260200160405190810160405280929190818152602001828054801561169357602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116116565790505b50505050509150808054806020026020016040519081016040528092919081815260200182805480156116e557602002820191906000526020600020905b8154815260200190600101908083116116d1575b5050505050905091509150610abf565b6116018484611a8b565b6004546040516000916060918391829173ffffffffffffffffffffffffffffffffffffffff9091169034907ff5c6ba5a000000000000000000000000000000000000000000000000000000009061175c908a908a90602401612590565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516117e591906126c0565b60006040518083038185875af1925050503d8060008114611822576040519150601f19603f3d011682016040523d82523d6000602084013e611827565b606091505b509150915081156118e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604360248201527f4f6d6e69436f756e7465725072654372696d653a2073696d756c6174696f6e4360448201527f616c6c6261636b2073686f756c642062652063616c6c6564207669612072657660648201527f6572740000000000000000000000000000000000000000000000000000000000608482015260a4016105ac565b61190a817f0a78da8f00000000000000000000000000000000000000000000000000000000611588565b60009890975095505050505050565b60008060005b8460200151518110156119c0578363ffffffff16856020015182815181106119495761194961230b565b60200260200101516000015163ffffffff16036119ae57846020015181815181106119765761197661230b565b602002602001015160200151856020015182815181106119985761199861230b565b6020026020010151604001519250925050610abf565b806119b8816124ab565b91505061191f565b5060009485945092505050565b606060006119da83611c97565b600101905060008167ffffffffffffffff8111156119fa576119fa61200f565b6040519080825280601f01601f191660200182016040528015611a24576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611a2e57509392505050565b6060806000805b84811015611b11576000600381888885818110611ab157611ab161230b565b9050602002810190611ac391906129a7565b611ad1906020810190611feb565b63ffffffff1663ffffffff1681526020019081526020016000205414611aff5781611afb81612c9f565b9250505b80611b09816124ab565b915050611a92565b508061ffff1667ffffffffffffffff811115611b2f57611b2f61200f565b604051908082528060200260200182016040528015611b58578160200160208202803683370190505b5092508061ffff1667ffffffffffffffff811115611b7857611b7861200f565b604051908082528060200260200182016040528015611ba1578160200160208202803683370190505b50915060005b84811015610abc57600060036000888885818110611bc757611bc761230b565b9050602002810190611bd991906129a7565b611be7906020810190611feb565b63ffffffff16815260208101919091526040016000205490508015611c8457868683818110611c1857611c1861230b565b9050602002810190611c2a91906129a7565b611c38906020810190611feb565b858381518110611c4a57611c4a61230b565b602002602001019063ffffffff16908163ffffffff168152505080848381518110611c7757611c7761230b565b6020026020010181815250505b5080611c8f816124ab565b915050611ba7565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ce0577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611d0c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611d2a57662386f26fc10000830492506010015b6305f5e1008310611d42576305f5e100830492506008015b6127108310611d5657612710830492506004015b60648310611d68576064830492506002015b600a8310611d74576001015b92915050565b82805482825590600052602060002090600701600890048101928215611e195791602002820160005b83821115611de757835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611da3565b8015611e175782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611de7565b505b50611e25929150611e64565b5090565b828054828255906000526020600020908101928215611e19579160200282015b82811115611e19578251825591602001919060010190611e49565b5b80821115611e255760008155600101611e65565b600060208284031215611e8b57600080fd5b5035919050565b60008083601f840112611ea457600080fd5b50813567ffffffffffffffff811115611ebc57600080fd5b6020830191508360208260051b8501011115610abf57600080fd5b60008060008060408587031215611eed57600080fd5b843567ffffffffffffffff80821115611f0557600080fd5b611f1188838901611e92565b90965094506020870135915080821115611f2a57600080fd5b50611f3787828801611e92565b95989497509550505050565b60005b83811015611f5e578181015183820152602001611f46565b50506000910152565b60008151808452611f7f816020860160208601611f43565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b61ffff83168152604060208201526000611fce6040830184611f67565b949350505050565b63ffffffff81168114611fe857600080fd5b50565b600060208284031215611ffd57600080fd5b813561200881611fd6565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156120615761206161200f565b60405290565b6040516060810167ffffffffffffffff811182821017156120615761206161200f565b6040516080810167ffffffffffffffff811182821017156120615761206161200f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156120f4576120f461200f565b604052919050565b600067ffffffffffffffff8211156121165761211661200f565b5060051b60200190565b600082601f83011261213157600080fd5b81356020612146612141836120fc565b6120ad565b82815260059290921b8401810191818101908684111561216557600080fd5b8286015b848110156121805780358352918301918301612169565b509695505050505050565b6000806040838503121561219e57600080fd5b823567ffffffffffffffff808211156121b657600080fd5b818501915085601f8301126121ca57600080fd5b813560206121da612141836120fc565b82815260059290921b840181019181810190898411156121f957600080fd5b948201945b8386101561222057853561221181611fd6565b825294820194908201906121fe565b9650508601359250508082111561223657600080fd5b5061224385828601612120565b9150509250929050565b67ffffffffffffffff81168114611fe857600080fd5b60006020828403121561227557600080fd5b81356120088161224d565b6000806020838503121561229357600080fd5b823567ffffffffffffffff8111156122aa57600080fd5b6122b685828601611e92565b90969095509350505050565b6000602082840312156122d457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461200857600080fd5b6020815260006120086020830184611f67565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261236f57600080fd5b83018035915067ffffffffffffffff82111561238a57600080fd5b602001915036819003821315610abf57600080fd5b600067ffffffffffffffff8211156123b9576123b961200f565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126123f657600080fd5b81356124046121418261239f565b81815284602083860101111561241957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561244957600080fd5b823561245481611fd6565b9150602083013567ffffffffffffffff81111561247057600080fd5b612243858286016123e5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124dc576124dc61247c565b5060010190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261251857600080fd5b830160208101925035905067ffffffffffffffff81111561253857600080fd5b803603821315610abf57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60208082528181018390526000906040808401600586901b850182018785805b898110156126b1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff418c3603018112612610578283fd5b8b0160c0813561261f81611fd6565b63ffffffff16865281890135898701528782013561263c8161224d565b67ffffffffffffffff1686890152606082810135908701526080612662818401846124e3565b83838a0152612674848a018284612547565b935050505060a0612687818401846124e3565b93508783038289015261269b838583612547565b988b0198975050509388019350506001016125b0565b50919998505050505050505050565b600082516126d2818460208701611f43565b9190910192915050565b63ffffffff83168152604060208201526000611fce6040830184611f67565b60006020828403121561270d57600080fd5b5051919050565b60006020808352606080840163ffffffff8087511684870152838701516040808189015283825180865260808a0191508784019550600093505b8084101561278157855180518616835288810151898401528301518383015294870194600193909301929086019061274e565b509998505050505050505050565b7fffff0000000000000000000000000000000000000000000000000000000000008660f01b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b16600282015283600a8201526000602a82018451602080870160005b8381101561281a57815163ffffffff16855293820193908201906001016127f8565b5050855181870193925060005b8181101561284357845184529382019392820192600101612827565b50919a9950505050505050505050565b6000602080838503121561286657600080fd5b825167ffffffffffffffff8082111561287e57600080fd5b8185019150604080838803121561289457600080fd5b61289c61203e565b83516128a781611fd6565b815283850151838111156128ba57600080fd5b80850194505087601f8501126128cf57600080fd5b835192506128df612141846120fc565b8381526060938402850186019386820191908a8611156128fe57600080fd5b958701955b8587101561294f5780878c03121561291b5760008081fd5b612923612067565b875161292e81611fd6565b81528789015189820152858801518682015283529586019591870191612903565b5095820195909552979650505050505050565b7f7061636b6574732073697a6520657863656564206c696d69746564200000000081526000825161299a81601c850160208701611f43565b91909101601c0192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff418336030181126126d257600080fd5b600081360360c08112156129ee57600080fd5b6129f661208a565b6060821215612a0457600080fd5b612a0c612067565b91508335612a1981611fd6565b8252602084810135908301526040840135612a338161224d565b60408301529081526060830135602082015260808301359067ffffffffffffffff80831115612a6157600080fd5b612a6d368487016123e5565b604083015260a0850135925080831115612a8657600080fd5b50612a93368386016123e5565b60608201529392505050565b600060208284031215612ab157600080fd5b81516120088161224d565b67ffffffffffffffff818116838216019080821115612add57612add61247c565b5092915050565b7f736b697070656420696e626f756e644e6f6e63652c207061636b657420696e6481527f65783a2000000000000000000000000000000000000000000000000000000000602082015260008251612b42816024850160208701611f43565b9190910160240192915050565b600067ffffffffffffffff808316818103612b6c57612b6c61247c565b6001019392505050565b7f756e736f72746564207061636b6574732c207061636b657420696e6465783a20815260008251612bae816020850160208701611f43565b9190910160200192915050565b6000815160208301517fffffffff0000000000000000000000000000000000000000000000000000000080821693506004831015612c035780818460040360031b1b83161693505b505050919050565b60008060408385031215612c1e57600080fd5b825161ffff81168114612c3057600080fd5b602084015190925067ffffffffffffffff811115612c4d57600080fd5b8301601f81018513612c5e57600080fd5b8051612c6c6121418261239f565b818152866020838501011115612c8157600080fd5b612c92826020830160208601611f43565b8093505050509250929050565b600061ffff808316818103612b6c57612b6c61247c56fe4f6d6e69436f756e7465725072654372696d653a20696e626f756e64436f756e74203e206f7574626f756e64436f756e74a2646970667358221220b0b563348acce1a1f0a98afaf7f4e4e959f1466b530798f17973ffbcca4267cf64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address payable";
            readonly name: "_counter";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "SimulateRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "_simulateAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "getPrecrimeConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pMaxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulation";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "precrimeEidToPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimeEids";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimePeers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrimeVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setPrecrimeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setPrecrimeMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_peers";
            readonly type: "bytes32[]";
        }];
        readonly name: "setPrecrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly name: "simulateView";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulationCallback";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): OmniCounterPreCrimeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OmniCounterPreCrime;
}

type OmniCounterPreCrimeViewConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OmniCounterPreCrimeView__factory extends ContractFactory {
    constructor(...args: OmniCounterPreCrimeViewConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _viewer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OmniCounterPreCrimeView>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _viewer: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OmniCounterPreCrimeView;
    connect(signer: Signer): OmniCounterPreCrimeView__factory;
    static readonly bytecode = "0x60c06040523480156200001157600080fd5b5060405162002cbc38038062002cbc83398101604081905262000034916200017c565b8180806001600160a01b03166080816001600160a01b0316815250506080516001600160a01b031663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b79190620001b4565b63ffffffff1660a0525050600080546001600160a01b03191633179055620000e6620000e03390565b6200010d565b600580546001600160a01b0319166001600160a01b039290921691909117905550620001e3565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146200017757600080fd5b919050565b600080604083850312156200019057600080fd5b6200019b836200015f565b9150620001ab602084016200015f565b90509250929050565b600060208284031215620001c757600080fd5b815163ffffffff81168114620001dc57600080fd5b9392505050565b60805160a051612a97620002256000396000818161082c01528181610c2101528181610dcd01528181610ea401526114f70152600061114b0152612a976000f3fe6080604052600436106101295760003560e01c80637a4359d5116100a5578063d2968d5711610074578063e780f25411610059578063e780f254146103a4578063f2fde38b146103c4578063f30878c1146103e457600080fd5b8063d2968d5714610355578063e51ac4b01461037757600080fd5b80637a4359d5146102b65780638da5cb5b146102d657806392d99a7f14610322578063998775641461034257600080fd5b806330515e56116100fc5780635bf88a00116100e15780635bf88a001461025f5780636ece7d3614610281578063715018a6146102a157600080fd5b806330515e56146101e057806354b3ab691461023257600080fd5b806312fb9ea51461012e57806328318b621461016157806329c246281461018f5780632c79305d146101c4575b600080fd5b34801561013a57600080fd5b5061014e610149366004611c50565b610411565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c366004611cae565b610432565b604051610158929190611d88565b34801561019b57600080fd5b506101af6101aa366004611c50565b6105ac565b60405163ffffffff9091168152602001610158565b3480156101d057600080fd5b5060405160018152602001610158565b3480156101ec57600080fd5b506000546102199074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610158565b34801561023e57600080fd5b5061014e61024d366004611dbf565b60036020526000908152604090205481565b34801561026b57600080fd5b5061027f61027a366004611f3c565b6105e6565b005b34801561028d57600080fd5b5061027f61029c366004612014565b61070e565b3480156102ad57600080fd5b5061027f6107e2565b3480156102c257600080fd5b506101816102d1366004612031565b6107f6565b3480156102e257600080fd5b5060045473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610158565b34801561032e57600080fd5b5061027f61033d366004612095565b610876565b610181610350366004612031565b61093e565b34801561036157600080fd5b5061036a6109a6565b60405161015891906120b2565b34801561038357600080fd5b506000546102fd9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103b057600080fd5b5061036a6103bf366004612031565b610a0b565b3480156103d057600080fd5b5061027f6103df366004612095565b610a68565b3480156103f057600080fd5b506005546102fd9073ffffffffffffffffffffffffffffffffffffffff1681565b6002818154811061042157600080fd5b600091825260209091200154905081565b60006060818367ffffffffffffffff81111561045057610450611de3565b60405190808252806020026020018201604052801561048357816020015b606081526020019060019003908161046e5790505b50905060008467ffffffffffffffff8111156104a1576104a1611de3565b6040519080825280602002602001820160405280156104ca578160200160208202803683370190505b50905060005b85811015610570576000808888848181106104ed576104ed6120c5565b90506020028101906104ff91906120f4565b81019061050c91906121e7565b9150915081848481518110610523576105236120c5565b602002602001019063ffffffff16908163ffffffff168152505080858481518110610550576105506120c5565b6020026020010181905250505080806105689061225c565b9150506104d0565b5061057c888883610b1f565b909450925061ffff8416156105925750506105a3565b61059b82610ce9565b909450925050505b94509492505050565b600181815481106105bc57600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461066c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b815161067f906001906020850190611b51565b508051610693906002906020840190611c00565b5060005b8251811015610709578181815181106106b2576106b26120c5565b6020026020010151600360008584815181106106d0576106d06120c5565b602002602001015163ffffffff1663ffffffff1681526020019081526020016000208190555080806107019061225c565b915050610697565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461078f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610663565b6000805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6107ea610f2f565b6107f46000610fb0565b565b600060606108048484611027565b909250905061ffff821661086f5761081c8484611319565b909250905061ffff821661086f577f00000000000000000000000000000000000000000000000000000000000000008160405160200161085d929190612294565b60405160208183030381529060405290505b9250929050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610663565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152600090606090606401610663565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152606090606401610663565b6060600080610a1a8585611550565b915091506001600060149054906101000a900467ffffffffffffffff1683518484604051602001610a4f9594939291906122b3565b6040516020818303038152906040529250505092915050565b610a70610f2f565b73ffffffffffffffffffffffffffffffffffffffff8116610b13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610663565b610b1c81610fb0565b50565b600060608315610c12576000610b358686611550565b50905060005b8151811015610c0f576000805b8651811015610bb157838381518110610b6357610b636120c5565b602002602001015163ffffffff16878281518110610b8357610b836120c5565b602002602001015163ffffffff1603610b9f5760019150610bb1565b80610ba98161225c565b915050610b48565b5080610bfc576101926040518060400160405280601e81526020017f6d697373696e6720706565722073696d756c6174696f6e20726573756c74000081525094509450505050610ce1565b5080610c078161225c565b915050610b3b565b50505b6000805b8451811015610c86577f000000000000000000000000000000000000000000000000000000000000000063ffffffff16858281518110610c5857610c586120c5565b602002602001015163ffffffff1603610c745760019150610c86565b80610c7e8161225c565b915050610c16565b5080610ccc57505060408051808201909152601f81527f6d697373696e67206c6f63616c2073696d756c6174696f6e20726573756c740060208201526101929150610ce1565b50506040805160208101909152600080825291505b935093915050565b60006060610d106040518060400160405280600063ffffffff168152602001606081525090565b6000845167ffffffffffffffff811115610d2c57610d2c611de3565b604051908082528060200260200182016040528015610d7257816020015b604080518082019091526000815260606020820152815260200190600190039081610d4a5790505b50905060005b8551811015610e4a57858181518110610d9357610d936120c5565b6020026020010151806020019051810190610dae9190612414565b828281518110610dc057610dc06120c5565b60200260200101819052507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16828281518110610e0457610e046120c5565b60200260200101516000015163ffffffff1603610e3857818181518110610e2d57610e2d6120c5565b602002602001015192505b80610e428161225c565b915050610d78565b5060005b8151811015610f11576000610e8084848481518110610e6f57610e6f6120c5565b60200260200101516000015161164e565b5090506000610ec8848481518110610e9a57610e9a6120c5565b60200260200101517f000000000000000000000000000000000000000000000000000000000000000061164e565b91505080821115610efc576001604051806060016040528060318152602001612a3160319139965096505050505050915091565b50508080610f099061225c565b915050610e4e565b50600060405180602001604052806000815250935093505050915091565b60045473ffffffffffffffffffffffffffffffffffffffff1633146107f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610663565b6004805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805460609074010000000000000000000000000000000000000000900467ffffffffffffffff168311156110b157600054610190906110899074010000000000000000000000000000000000000000900467ffffffffffffffff16611702565b60405160200161109991906124aa565b6040516020818303038152906040529150915061086f565b82156112ff5760008080805b868110156112fa5760008888838181106110d9576110d96120c5565b90506020028101906110eb91906124ef565b6110f49061252d565b80515190915063ffffffff868116911614158061111657508051602001518414155b15611280578051805160208201516040909201519096509094509250600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a0dd43fc6111786117c0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015263ffffffff8916602482015260448101889052606401602060405180830381865afa1580156111f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121891906125f1565b61122390600161260e565b90508067ffffffffffffffff168467ffffffffffffffff161461127a5761019161124c84611702565b60405160200161125c9190612636565b6040516020818303038152906040529750975050505050505061086f565b506112e7565b611289836126a1565b92508267ffffffffffffffff1681600001516040015167ffffffffffffffff16146112e7576101916112ba83611702565b6040516020016112ca91906126c8565b60405160208183030381529060405296509650505050505061086f565b50806112f28161225c565b9150506110bd565b505050505b505060408051602081019091526000808252909250929050565b6005546040517f6874141b000000000000000000000000000000000000000000000000000000008152600091606091839173ffffffffffffffffffffffffffffffffffffffff1690636874141b906113769060019060040161270d565b600060405180830381865afa158015611393573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526113d99190810190612895565b905060005b848110156114e75760008686838181106113fa576113fa6120c5565b905060200281019061140c91906124ef565b6114159061252d565b6005546040517f30b3179100000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff16906330b317919061146e9084908790600401612921565b600060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114d19190810190612895565b92505080806114df9061225c565b9150506113de565b50600060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681526020018381525060405160200161153591906129d1565b60405160208183030381529060405292509250509250929050565b60608060008390036116395760016002818054806020026020016040519081016040528092919081815260200182805480156115d757602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161159a5790505b505050505091508080548060200260200160405190810160405280929190818152602001828054801561162957602002820191906000526020600020905b815481526020019060010190808311611615575b505050505090509150915061086f565b6116438484611859565b915091509250929050565b60008060005b8460200151518110156116f5578363ffffffff168560200151828151811061167e5761167e6120c5565b60200260200101516000015163ffffffff16036116e357846020015181815181106116ab576116ab6120c5565b602002602001015160200151856020015182815181106116cd576116cd6120c5565b602002602001015160400151925092505061086f565b806116ed8161225c565b915050611654565b5060009485945092505050565b6060600061170f83611a6e565b600101905060008167ffffffffffffffff81111561172f5761172f611de3565b6040519080825280601f01601f191660200182016040528015611759576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461176357509392505050565b600554604080517f61bc221a000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff16916361bc221a9160048083019260209291908290030181865afa158015611830573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185491906129fc565b905090565b6060806000805b848110156118df57600060038188888581811061187f5761187f6120c5565b905060200281019061189191906124ef565b61189f906020810190611dbf565b63ffffffff1663ffffffff16815260200190815260200160002054146118cd57816118c981612a19565b9250505b806118d78161225c565b915050611860565b508061ffff1667ffffffffffffffff8111156118fd576118fd611de3565b604051908082528060200260200182016040528015611926578160200160208202803683370190505b5092508061ffff1667ffffffffffffffff81111561194657611946611de3565b60405190808252806020026020018201604052801561196f578160200160208202803683370190505b50915060005b84811015611a6557600060036000888885818110611995576119956120c5565b90506020028101906119a791906124ef565b6119b5906020810190611dbf565b63ffffffff16815260208101919091526040016000205490508015611a52578686838181106119e6576119e66120c5565b90506020028101906119f891906124ef565b611a06906020810190611dbf565b858381518110611a1857611a186120c5565b602002602001019063ffffffff16908163ffffffff168152505080848381518110611a4557611a456120c5565b6020026020010181815250505b5080611a5d8161225c565b915050611975565b50509250929050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ab7577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611ae3576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611b0157662386f26fc10000830492506010015b6305f5e1008310611b19576305f5e100830492506008015b6127108310611b2d57612710830492506004015b60648310611b3f576064830492506002015b600a8310611b4b576001015b92915050565b82805482825590600052602060002090600701600890048101928215611bf05791602002820160005b83821115611bbe57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611b7a565b8015611bee5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611bbe565b505b50611bfc929150611c3b565b5090565b828054828255906000526020600020908101928215611bf0579160200282015b82811115611bf0578251825591602001919060010190611c20565b5b80821115611bfc5760008155600101611c3c565b600060208284031215611c6257600080fd5b5035919050565b60008083601f840112611c7b57600080fd5b50813567ffffffffffffffff811115611c9357600080fd5b6020830191508360208260051b850101111561086f57600080fd5b60008060008060408587031215611cc457600080fd5b843567ffffffffffffffff80821115611cdc57600080fd5b611ce888838901611c69565b90965094506020870135915080821115611d0157600080fd5b50611d0e87828801611c69565b95989497509550505050565b60005b83811015611d35578181015183820152602001611d1d565b50506000910152565b60008151808452611d56816020860160208601611d1a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b61ffff83168152604060208201526000611da56040830184611d3e565b949350505050565b63ffffffff81168114610b1c57600080fd5b600060208284031215611dd157600080fd5b8135611ddc81611dad565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611e3557611e35611de3565b60405290565b6040516080810167ffffffffffffffff81118282101715611e3557611e35611de3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611ea557611ea5611de3565b604052919050565b600067ffffffffffffffff821115611ec757611ec7611de3565b5060051b60200190565b600082601f830112611ee257600080fd5b81356020611ef7611ef283611ead565b611e5e565b82815260059290921b84018101918181019086841115611f1657600080fd5b8286015b84811015611f315780358352918301918301611f1a565b509695505050505050565b60008060408385031215611f4f57600080fd5b823567ffffffffffffffff80821115611f6757600080fd5b818501915085601f830112611f7b57600080fd5b81356020611f8b611ef283611ead565b82815260059290921b84018101918181019089841115611faa57600080fd5b948201945b83861015611fd1578535611fc281611dad565b82529482019490820190611faf565b96505086013592505080821115611fe757600080fd5b50611ff485828601611ed1565b9150509250929050565b67ffffffffffffffff81168114610b1c57600080fd5b60006020828403121561202657600080fd5b8135611ddc81611ffe565b6000806020838503121561204457600080fd5b823567ffffffffffffffff81111561205b57600080fd5b61206785828601611c69565b90969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b1c57600080fd5b6000602082840312156120a757600080fd5b8135611ddc81612073565b602081526000611ddc6020830184611d3e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261212957600080fd5b83018035915067ffffffffffffffff82111561214457600080fd5b60200191503681900382131561086f57600080fd5b600082601f83011261216a57600080fd5b813567ffffffffffffffff81111561218457612184611de3565b6121b560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611e5e565b8181528460208386010111156121ca57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156121fa57600080fd5b823561220581611dad565b9150602083013567ffffffffffffffff81111561222157600080fd5b611ff485828601612159565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361228d5761228d61222d565b5060010190565b63ffffffff83168152604060208201526000611da56040830184611d3e565b7fffff0000000000000000000000000000000000000000000000000000000000008660f01b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b16600282015283600a8201526000602a82018451602080870160005b8381101561233e57815163ffffffff168552938201939082019060010161231c565b5050855181870193925060005b818110156123675784518452938201939282019260010161234b565b50919a9950505050505050505050565b600082601f83011261238857600080fd5b81516020612398611ef283611ead565b828152606092830285018201928282019190878511156123b757600080fd5b8387015b858110156124075781818a0312156123d35760008081fd5b6123db611e12565b81516123e681611dad565b815281860151868201526040808301519082015284529284019281016123bb565b5090979650505050505050565b60006020828403121561242657600080fd5b815167ffffffffffffffff8082111561243e57600080fd5b908301906040828603121561245257600080fd5b60405160408101818110838211171561246d5761246d611de3565b604052825161247b81611dad565b815260208301518281111561248f57600080fd5b61249b87828601612377565b60208301525095945050505050565b7f7061636b6574732073697a6520657863656564206c696d6974656420000000008152600082516124e281601c850160208701611d1a565b91909101601c0192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261252357600080fd5b9190910192915050565b600081360360c081121561254057600080fd5b612548611e3b565b606082121561255657600080fd5b61255e611e12565b9150833561256b81611dad565b825260208481013590830152604084013561258581611ffe565b60408301529081526060830135602082015260808301359067ffffffffffffffff808311156125b357600080fd5b6125bf36848701612159565b604083015260a08501359250808311156125d857600080fd5b506125e536838601612159565b60608201529392505050565b60006020828403121561260357600080fd5b8151611ddc81611ffe565b67ffffffffffffffff81811683821601908082111561262f5761262f61222d565b5092915050565b7f736b697070656420696e626f756e644e6f6e63652c207061636b657420696e6481527f65783a2000000000000000000000000000000000000000000000000000000000602082015260008251612694816024850160208701611d1a565b9190910160240192915050565b600067ffffffffffffffff8083168181036126be576126be61222d565b6001019392505050565b7f756e736f72746564207061636b6574732c207061636b657420696e6465783a20815260008251612700816020850160208701611d1a565b9190910160200192915050565b60006020808301818452808554612728818490815260200190565b60008881526020812094509092505b816007820110156127ad57835463ffffffff808216855281871c811687860152604082811c821690860152606082811c821690860152608082811c82169086015260a082811c82169086015260c082811c9091169085015260e090811c9084015260019093019261010090920191600801612737565b925492818110156127c95763ffffffff84168352918401916001015b818110156127e45783851c63ffffffff168352918401916001015b8181101561280157604084901c63ffffffff168352918401916001015b8181101561281e57606084901c63ffffffff168352918401916001015b8181101561283b57608084901c63ffffffff168352918401916001015b818110156128585760a084901c63ffffffff168352918401916001015b818110156128755760c084901c63ffffffff168352918401916001015b818110156128895760e084901c8352918401915b50909695505050505050565b6000602082840312156128a757600080fd5b815167ffffffffffffffff8111156128be57600080fd5b611da584828501612377565b600081518084526020808501945080840160005b83811015612916578151805163ffffffff168852838101518489015260409081015190880152606090960195908201906001016128de565b509495945050505050565b604081526000835163ffffffff81511660408401526020810151606084015267ffffffffffffffff604082015116608084015250602084015160a0830152604084015160c080840152612978610100840182611d3e565b905060608501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08483030160e08501526129b38282611d3e565b91505082810360208401526129c881856128ca565b95945050505050565b6020815263ffffffff825116602082015260006020830151604080840152611da560608401826128ca565b600060208284031215612a0e57600080fd5b8151611ddc81612073565b600061ffff8083168181036126be576126be61222d56fe4f6d6e69436f756e7465725072654372696d653a20696e626f756e64436f756e74203e206f7574626f756e64436f756e74a2646970667358221220ed34a1d2a1be793d4f1518b8e45190009ae8a2613544c587d669625915d1dc3864736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_viewer";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "getPrecrimeConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pMaxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulation";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "precrimeEidToPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimeEids";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimePeers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrimeVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setPrecrimeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setPrecrimeMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_peers";
            readonly type: "bytes32[]";
        }];
        readonly name: "setPrecrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulateView";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulationCallback";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "viewer";
        readonly outputs: readonly [{
            readonly internalType: "contract OmniCounterViewer";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): OmniCounterPreCrimeViewInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OmniCounterPreCrimeView;
}

type OmniCounterViewerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OmniCounterViewer__factory extends ContractFactory {
    constructor(...args: OmniCounterViewerConstructorParams);
    deploy(_omniCounter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OmniCounterViewer>;
    getDeployTransaction(_omniCounter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OmniCounterViewer;
    connect(signer: Signer): OmniCounterViewer__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50604051610bdb380380610bdb83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610b48806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806330b317911461004657806361bc221a1461006f5780636874141b146100b4575b600080fd5b610059610054366004610790565b6100c7565b6040516100669190610897565b60405180910390f35b60005461008f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610066565b6100596100c23660046108f6565b6103bf565b60008054606091906020850180359173ffffffffffffffffffffffffffffffffffffffff169063bb0b6a53906100fd908861096b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff919091166004820152602401602060405180830381865afa158015610157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017b919061098d565b14905080610210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f6d6e69436f756e7465725669657765723a206e6f742074727573746564207260448201527f656d6f746500000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600061022884610223602088018861096b565b6105f5565b9050600061024161023c60808801886109a6565b6106ae565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff8216016102a05784828151811061027f5761027f610a12565b6020026020010151602001805180919061029890610a41565b9052506103b2565b60ff8116600214806102b5575060ff81166004145b156102cc5784828151811061027f5761027f610a12565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff8216016103505784828151811061030857610308610a12565b6020026020010151602001805180919061032190610a41565b8152505084828151811061033757610337610a12565b6020026020010151604001805180919061029890610a41565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f696e76616c6964206d65737361676520747970650000000000000000000000006044820152606401610207565b8493505050505b92915050565b60608167ffffffffffffffff8111156103da576103da6106d0565b60405190808252806020026020018201604052801561043557816020015b6104226040518060600160405280600063ffffffff16815260200160008152602001600081525090565b8152602001906001900390816103f85790505b50905060005b828110156105ee57600084848381811061045757610457610a12565b905060200201602081019061046c919061096b565b6040805160608101825263ffffffff831680825260005492517f56a47289000000000000000000000000000000000000000000000000000000008152600481019190915292935091602083019173ffffffffffffffffffffffffffffffffffffffff16906356a4728990602401602060405180830381865afa1580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a919061098d565b81526000546040517f622f17f600000000000000000000000000000000000000000000000000000000815263ffffffff8516600482015260209092019173ffffffffffffffffffffffffffffffffffffffff9091169063622f17f690602401602060405180830381865afa158015610596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ba919061098d565b8152508383815181106105cf576105cf610a12565b60200260200101819052505080806105e690610a41565b91505061043b565b5092915050565b6000805b835181101561064b578263ffffffff1684828151811061061b5761061b610a12565b60200260200101516000015163ffffffff16036106395790506103b9565b8061064381610a41565b9150506105f9565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f6e6f7420666f756e6400000000000000000000000000000000000000000000006044820152606401610207565b60006106bd6001828486610aa0565b6106c691610aca565b60f81c9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610722576107226106d0565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561076f5761076f6106d0565b604052919050565b803563ffffffff8116811461078b57600080fd5b919050565b60008060408084860312156107a457600080fd5b833567ffffffffffffffff808211156107bc57600080fd5b9085019060c082880312156107d057600080fd5b90935060209085820135818111156107e757600080fd5b8601601f810188136107f857600080fd5b80358281111561080a5761080a6106d0565b610818848260051b01610728565b8181528481019350606091820283018501918a83111561083757600080fd5b928501925b828410156108865780848c0312156108545760008081fd5b61085c6106ff565b61086585610777565b8152848701358782015287850135888201528552938501939283019261083c565b508096505050505050509250929050565b602080825282518282018190526000919060409081850190868401855b828110156108e9578151805163ffffffff168552868101518786015285015185850152606090930192908501906001016108b4565b5091979650505050505050565b6000806020838503121561090957600080fd5b823567ffffffffffffffff8082111561092157600080fd5b818501915085601f83011261093557600080fd5b81358181111561094457600080fd5b8660208260051b850101111561095957600080fd5b60209290920196919550909350505050565b60006020828403121561097d57600080fd5b61098682610777565b9392505050565b60006020828403121561099f57600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126109db57600080fd5b83018035915067ffffffffffffffff8211156109f657600080fd5b602001915036819003821315610a0b57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a99577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60008085851115610ab057600080fd5b83861115610abd57600080fd5b5050820193919092039150565b7fff000000000000000000000000000000000000000000000000000000000000008135818116916001851015610b0a5780818660010360031b1b83161692505b50509291505056fea2646970667358221220caa51f12e79dc67e4cb2576c21badb29de0806e1d99d8f679e5e2e31d5cb8cae64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "_omniCounter";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "counter";
        readonly outputs: readonly [{
            readonly internalType: "contract OmniCounter";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "peerEids";
            readonly type: "uint32[]";
        }];
        readonly name: "getCounts";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "inboundCount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "outboundCount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OmniCounterViewer.Count[]";
            readonly name: "counts";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet";
            readonly name: "packet";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "inboundCount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "outboundCount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OmniCounterViewer.Count[]";
            readonly name: "counts";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256";
                readonly name: "inboundCount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "outboundCount";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OmniCounterViewer.Count[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): OmniCounterViewerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OmniCounterViewer;
}

type index$f_OmniCounterPreCrimeView__factory = OmniCounterPreCrimeView__factory;
declare const index$f_OmniCounterPreCrimeView__factory: typeof OmniCounterPreCrimeView__factory;
type index$f_OmniCounterPreCrime__factory = OmniCounterPreCrime__factory;
declare const index$f_OmniCounterPreCrime__factory: typeof OmniCounterPreCrime__factory;
type index$f_OmniCounterViewer__factory = OmniCounterViewer__factory;
declare const index$f_OmniCounterViewer__factory: typeof OmniCounterViewer__factory;
type index$f_OmniCounter__factory = OmniCounter__factory;
declare const index$f_OmniCounter__factory: typeof OmniCounter__factory;
declare namespace index$f {
  export {
    index$f_OmniCounterPreCrimeView__factory as OmniCounterPreCrimeView__factory,
    index$f_OmniCounterPreCrime__factory as OmniCounterPreCrime__factory,
    index$f_OmniCounterViewer__factory as OmniCounterViewer__factory,
    index$f_OmniCounter__factory as OmniCounter__factory,
  };
}

declare class IExecutor__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "AirdropFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "AirdropSucceeded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "airdropCap";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IExecutor$3;
}

declare class IExecutorFeeLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "airdropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "airdropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IExecutorFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IExecutorFeeLib$1;
}

declare class IInspector__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "inspect";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "valid";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IInspectorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IInspector;
}

declare class ILayerZeroComposer__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_caller";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroComposerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroComposer;
}

declare class ILayerZeroEndpointV2__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposedMessageDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "ComposedMessageReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "fee";
            readonly type: "tuple";
        }];
        readonly name: "FeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LayerZeroTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sendLibrary";
            readonly type: "address";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "altFeeToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "clear";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "defaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "deliverComposedMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "deliverable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hasPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "layerZeroToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_lzTokenFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_lzTokenFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_altTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "sendWithAlt";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMessageLibManager.SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_timeout";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_layerZeroToken";
            readonly type: "address";
        }];
        readonly name: "setLayerZeroToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroEndpointV2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroEndpointV2$a;
}

declare class ILayerZeroExecutor__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroExecutor;
}

declare class ILayerZeroPriceFeed__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByEid";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatioDenominator";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nativePriceUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatioDenominator";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "nativePriceUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPriceRatioDenominator";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeTokenPriceUSD";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroPriceFeedInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroPriceFeed$1;
}

declare class ILayerZeroReceiver__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroReceiverInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroReceiver;
}

declare class ILayerZeroTreasury__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroTreasuryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroTreasury;
}

declare class IMessageLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPacket.PacketForQuote";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPacket.Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "encodedPacket";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMessageLibManager.SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessageLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessageLib;
}

declare class IMessageLibManager__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "defaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMessageLibManager.SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_timeout";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessageLibManagerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessageLibManager$4;
}

declare class IMessagingChannel__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hasPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessagingChannelInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessagingChannel;
}

declare class IMessagingComposer__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposedMessageDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "ComposedMessageReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeFailed";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "deliverComposedMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): IMessagingComposerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessagingComposer;
}

declare class IMessagingContext__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IMessagingContextInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessagingContext;
}

declare class IOApp__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "PreCrimeOnly";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPrecrime";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setEndpointConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IOAppInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOApp;
}

declare class IPreCrime__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "getPrecrimeConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulation";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrimeVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulateView";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulationCallback";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IPreCrimeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IPreCrime$9;
}

declare class IWorker__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IWorkerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IWorker;
}

type index$e_IExecutorFeeLib__factory = IExecutorFeeLib__factory;
declare const index$e_IExecutorFeeLib__factory: typeof IExecutorFeeLib__factory;
type index$e_IExecutor__factory = IExecutor__factory;
declare const index$e_IExecutor__factory: typeof IExecutor__factory;
type index$e_IInspector__factory = IInspector__factory;
declare const index$e_IInspector__factory: typeof IInspector__factory;
type index$e_ILayerZeroComposer__factory = ILayerZeroComposer__factory;
declare const index$e_ILayerZeroComposer__factory: typeof ILayerZeroComposer__factory;
type index$e_ILayerZeroEndpointV2__factory = ILayerZeroEndpointV2__factory;
declare const index$e_ILayerZeroEndpointV2__factory: typeof ILayerZeroEndpointV2__factory;
type index$e_ILayerZeroExecutor__factory = ILayerZeroExecutor__factory;
declare const index$e_ILayerZeroExecutor__factory: typeof ILayerZeroExecutor__factory;
type index$e_ILayerZeroPriceFeed__factory = ILayerZeroPriceFeed__factory;
declare const index$e_ILayerZeroPriceFeed__factory: typeof ILayerZeroPriceFeed__factory;
type index$e_ILayerZeroReceiver__factory = ILayerZeroReceiver__factory;
declare const index$e_ILayerZeroReceiver__factory: typeof ILayerZeroReceiver__factory;
type index$e_ILayerZeroTreasury__factory = ILayerZeroTreasury__factory;
declare const index$e_ILayerZeroTreasury__factory: typeof ILayerZeroTreasury__factory;
type index$e_IMessageLibManager__factory = IMessageLibManager__factory;
declare const index$e_IMessageLibManager__factory: typeof IMessageLibManager__factory;
type index$e_IMessageLib__factory = IMessageLib__factory;
declare const index$e_IMessageLib__factory: typeof IMessageLib__factory;
type index$e_IMessagingChannel__factory = IMessagingChannel__factory;
declare const index$e_IMessagingChannel__factory: typeof IMessagingChannel__factory;
type index$e_IMessagingComposer__factory = IMessagingComposer__factory;
declare const index$e_IMessagingComposer__factory: typeof IMessagingComposer__factory;
type index$e_IMessagingContext__factory = IMessagingContext__factory;
declare const index$e_IMessagingContext__factory: typeof IMessagingContext__factory;
type index$e_IOApp__factory = IOApp__factory;
declare const index$e_IOApp__factory: typeof IOApp__factory;
type index$e_IPreCrime__factory = IPreCrime__factory;
declare const index$e_IPreCrime__factory: typeof IPreCrime__factory;
type index$e_IWorker__factory = IWorker__factory;
declare const index$e_IWorker__factory: typeof IWorker__factory;
declare namespace index$e {
  export {
    index$e_IExecutorFeeLib__factory as IExecutorFeeLib__factory,
    index$e_IExecutor__factory as IExecutor__factory,
    index$e_IInspector__factory as IInspector__factory,
    index$e_ILayerZeroComposer__factory as ILayerZeroComposer__factory,
    index$e_ILayerZeroEndpointV2__factory as ILayerZeroEndpointV2__factory,
    index$e_ILayerZeroExecutor__factory as ILayerZeroExecutor__factory,
    index$e_ILayerZeroPriceFeed__factory as ILayerZeroPriceFeed__factory,
    index$e_ILayerZeroReceiver__factory as ILayerZeroReceiver__factory,
    index$e_ILayerZeroTreasury__factory as ILayerZeroTreasury__factory,
    index$e_IMessageLibManager__factory as IMessageLibManager__factory,
    index$e_IMessageLib__factory as IMessageLib__factory,
    index$e_IMessagingChannel__factory as IMessagingChannel__factory,
    index$e_IMessagingComposer__factory as IMessagingComposer__factory,
    index$e_IMessagingContext__factory as IMessagingContext__factory,
    index$e_IOApp__factory as IOApp__factory,
    index$e_IPreCrime__factory as IPreCrime__factory,
    index$e_IWorker__factory as IWorker__factory,
  };
}

type BlockedMessageLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class BlockedMessageLib__factory extends ContractFactory {
    constructor(...args: BlockedMessageLibConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<BlockedMessageLib>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): BlockedMessageLib;
    connect(signer: Signer): BlockedMessageLib__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610277806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a7146100a457806354fd4d50146100cc575b604080518082018252600781527f4c5a433030303000000000000000000000000000000000000000000000000000602082015290517f08c379a000000000000000000000000000000000000000000000000000000000815261009b919060040161018c565b60405180910390fd5b6100b76100b23660046101f8565b6100f3565b60405190151581526020015b60405180910390f35b6040805167ffffffffffffffff815260ff60208201526002918101919091526060016100c3565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd913d0cd00000000000000000000000000000000000000000000000000000000148061018657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600060208083528351808285015260005b818110156101b95785810183015185820160400152820161019d565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561020a57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461023a57600080fd5b939250505056fea2646970667358221220268168417383cf5d2dd47c072a0c3caa382f35f5f2a9ef9363f710b8a3fe021164736f6c63430008130033";
    static readonly abi: readonly [{
        readonly stateMutability: "nonpayable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): BlockedMessageLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): BlockedMessageLib;
}

type SimpleMessageLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class SimpleMessageLib__factory extends ContractFactory {
    constructor(...args: SimpleMessageLibConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<SimpleMessageLib>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _treasury: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): SimpleMessageLib;
    connect(signer: Signer): SimpleMessageLib__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "expected";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "actual";
            readonly type: "address";
        }];
        readonly name: "InvalidEndpoint";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultOption";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "localEid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "packetVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPacket.PacketForQuote";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPacket.Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "receipt";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "encodedPacket";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_defaultOption";
            readonly type: "bytes";
        }];
        readonly name: "setDefaultOption";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "setMessagingFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_whitelistCaller";
            readonly type: "address";
        }];
        readonly name: "setWhitelistCaller";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "packetBytes";
            readonly type: "bytes";
        }];
        readonly name: "validatePacket";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "whitelistCaller";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): SimpleMessageLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): SimpleMessageLib;
}

type index$d_BlockedMessageLib__factory = BlockedMessageLib__factory;
declare const index$d_BlockedMessageLib__factory: typeof BlockedMessageLib__factory;
type index$d_SimpleMessageLib__factory = SimpleMessageLib__factory;
declare const index$d_SimpleMessageLib__factory: typeof SimpleMessageLib__factory;
declare namespace index$d {
  export {
    index$d_BlockedMessageLib__factory as BlockedMessageLib__factory,
    index$d_SimpleMessageLib__factory as SimpleMessageLib__factory,
  };
}

declare class IOFT__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendAndCallFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "zroFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "zroFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "sendAndCall";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IOFTInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IOFT$4;
}

type index$c_IOFT__factory = IOFT__factory;
declare const index$c_IOFT__factory: typeof IOFT__factory;
declare namespace index$c {
  export {
    index$c_IOFT__factory as IOFT__factory,
  };
}

type TestOFTConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class TestOFT__factory extends ContractFactory {
    constructor(...args: TestOFTConstructorParams);
    deploy(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _localDecimals: PromiseOrValue<BigNumberish>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TestOFT>;
    getDeployTransaction(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _localDecimals: PromiseOrValue<BigNumberish>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TestOFT;
    connect(signer: Signer): TestOFT__factory;
    static readonly bytecode = "0x60c06040523480156200001157600080fd5b5060405162003d2638038062003d268339810160408190526200003491620001f9565b8383838383838383806200004833620000e4565b6001600160a01b0316608052600660ff831610156200007a576040516384564cb760e01b815260040160405180910390fd5b62000087600683620002b3565b6200009490600a620003d2565b60a0525060089050620000a8838262000479565b506009620000b7828262000479565b50620000c4915050601290565b60ff168260ff1614620000d657600080fd5b505050505050505062000545565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015c57600080fd5b81516001600160401b038082111562000179576200017962000134565b604051601f8301601f19908116603f01168101908282118183101715620001a457620001a462000134565b81604052838152602092508683858801011115620001c157600080fd5b600091505b83821015620001e55785820183015181830184015290820190620001c6565b600093810190920192909252949350505050565b600080600080608085870312156200021057600080fd5b84516001600160401b03808211156200022857600080fd5b62000236888389016200014a565b955060208701519150808211156200024d57600080fd5b506200025c878288016200014a565b935050604085015160ff811681146200027457600080fd5b60608601519092506001600160a01b03811681146200029257600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115620002cf57620002cf6200029d565b92915050565b600181815b8085111562000316578160001904821115620002fa57620002fa6200029d565b808516156200030857918102915b93841c9390800290620002da565b509250929050565b6000826200032f57506001620002cf565b816200033e57506000620002cf565b8160018114620003575760028114620003625762000382565b6001915050620002cf565b60ff8411156200037657620003766200029d565b50506001821b620002cf565b5060208310610133831016604e8410600b8410161715620003a7575081810a620002cf565b620003b38383620002d5565b8060001904821115620003ca57620003ca6200029d565b029392505050565b6000620003e360ff8416836200031e565b9392505050565b600181811c90821680620003ff57607f821691505b6020821081036200042057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200047457600081815260208120601f850160051c810160208610156200044f5750805b601f850160051c820191505b8181101562000470578281556001016200045b565b5050505b505050565b81516001600160401b0381111562000495576200049562000134565b620004ad81620004a68454620003ea565b8462000426565b602080601f831160018114620004e55760008415620004cc5750858301515b600019600386901b1c1916600185901b17855562000470565b600085815260208120601f198616915b828110156200051657888601518255948401946001909101908401620004f5565b5085821015620005355787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05161378a6200059c600039600081816120aa0152818161224501526123f10152600081816104080152818161082d01528181610d4f01528181611831015281816120ed015261236a015261378a6000f3fe6080604052600436106102385760003560e01c80637d25a05e11610138578063baf3292d116100b0578063e74847021161007f578063f2fde38b11610064578063f2fde38b14610739578063f5c6ba5a14610759578063fc0c546a1461076c57600080fd5b8063e7484702146106ec578063ed2cee9e1461070c57600080fd5b8063baf3292d14610639578063bb0b6a5314610659578063d0a2275314610686578063dd62ed3e1461069957600080fd5b806395d89b4111610107578063a457c2d7116100ec578063a457c2d7146105d9578063a9059cbb146105f9578063b0690b3e1461061957600080fd5b806395d89b411461058f578063a41d8a25146105a457600080fd5b80637d25a05e146104e7578063857749b0146105235780638da5cb5b14610537578063950c8a741461056257600080fd5b806339509351116101cb5780635e280f111161019a57806370a082311161017f57806370a082311461046f578063715018a6146104b25780637624f505146104c757600080fd5b80635e280f11146103f6578063655f06381461044f57600080fd5b8063395093511461038157806340c10f19146103a15780634e5cbf61146103c157806354fd4d50146103e157600080fd5b806323b872dd1161020757806323b872dd146102d357806323d509ba146102f357806326b27f841461033f578063313ce5671461035f57600080fd5b806306fdde0314610244578063095ea7b31461026f57806313137d651461029f57806318160ddd146102b457600080fd5b3661023f57005b600080fd5b34801561025057600080fd5b5061025961077f565b60405161026691906126a0565b60405180910390f35b34801561027b57600080fd5b5061028f61028a3660046126d5565b610811565b6040519015158152602001610266565b6102b26102ad36600461274a565b61082b565b005b3480156102c057600080fd5b506007545b604051908152602001610266565b3480156102df57600080fd5b5061028f6102ee3660046127f1565b610935565b610306610301366004612856565b610959565b604080518251815260208084015167ffffffffffffffff1681830152928201518051928201929092529101516060820152608001610266565b34801561034b57600080fd5b506102c561035a3660046128e7565b6109d7565b34801561036b57600080fd5b5060125b60405160ff9091168152602001610266565b34801561038d57600080fd5b5061028f61039c3660046126d5565b610a31565b3480156103ad57600080fd5b506102b26103bc3660046126d5565b610a7d565b3480156103cd57600080fd5b506102b26103dc366004612902565b610a8b565b3480156103ed57600080fd5b506102c5600181565b34801561040257600080fd5b5061042a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610266565b34801561045b57600080fd5b506102b261046a36600461291f565b610b0d565b34801561047b57600080fd5b506102c561048a366004612902565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205490565b3480156104be57600080fd5b506102b2610def565b3480156104d357600080fd5b506102b26104e236600461296f565b610e03565b3480156104f357600080fd5b5061050a6105023660046129af565b600092915050565b60405167ffffffffffffffff9091168152602001610266565b34801561052f57600080fd5b50600661036f565b34801561054357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661042a565b34801561056e57600080fd5b5060025461042a9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561059b57600080fd5b50610259610ebc565b3480156105b057600080fd5b506105c46105bf3660046129cb565b610ecb565b60408051928352602083019190915201610266565b3480156105e557600080fd5b5061028f6105f43660046126d5565b610f82565b34801561060557600080fd5b5061028f6106143660046126d5565b611053565b34801561062557600080fd5b506105c4610634366004612a61565b611061565b34801561064557600080fd5b506102b2610654366004612902565b6110ed565b34801561066557600080fd5b506102c56106743660046128e7565b60016020526000908152604090205481565b610306610694366004612ac8565b611168565b3480156106a557600080fd5b506102c56106b4366004612b55565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260066020908152604080832093909416825291909152205490565b3480156106f857600080fd5b506102b2610707366004612bd3565b6111fc565b34801561071857600080fd5b5060045461042a9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561074557600080fd5b506102b2610754366004612902565b611328565b6102b2610767366004612bd3565b6113df565b34801561077857600080fd5b503061042a565b60606008805461078e90612c09565b80601f01602080910402602001604051908101604052809291908181526020018280546107ba90612c09565b80156108075780601f106107dc57610100808354040283529160200191610807565b820191906000526020600020905b8154815290600101906020018083116107ea57829003601f168201915b5050505050905090565b60003361081f8185856115b3565b60019150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146108a1576040517fab08c09e0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b602087018035906108b69061035a908a6128e7565b146108f3576040517fc59a4f6400000000000000000000000000000000000000000000000000000000815260208801356004820152602401610898565b61091d61090360208901896128e7565b602089013561091860608b0160408c01612c6c565b505050565b61092c87878787878787611766565b50505050505050565b600033610943858285611907565b61094e8585856119de565b506001949350505050565b6109616125ea565b6109cd866109b661097860808301606084016128e7565b600189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c5492505050565b858560405180602001604052806000815250611ca0565b9695505050505050565b63ffffffff811660009081526001602052604090205480610a2c576040517f196fb6c000000000000000000000000000000000000000000000000000000000815263ffffffff83166004820152602401610898565b919050565b33600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061081f9082908690610a78908790612cb8565b6115b3565b610a878282611eb8565b5050565b610a93611fad565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff8b6b91dd680bf19d37570578ae915537e6e8cd2106736ad3ca05b30447a72b0906020015b60405180910390a150565b610b15611fad565b6000610b218284612ccb565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167fb8007ff6000000000000000000000000000000000000000000000000000000001480610bb457507fffffffff0000000000000000000000000000000000000000000000000000000081167f9e7fffcc00000000000000000000000000000000000000000000000000000000145b80610c0057507fffffffff0000000000000000000000000000000000000000000000000000000081167f0678327f00000000000000000000000000000000000000000000000000000000145b80610c4c57507fffffffff0000000000000000000000000000000000000000000000000000000081167fb8849ac900000000000000000000000000000000000000000000000000000000145b80610c9857507fffffffff0000000000000000000000000000000000000000000000000000000081167fe16f964d00000000000000000000000000000000000000000000000000000000145b80610ce457507fffffffff0000000000000000000000000000000000000000000000000000000081167f66bf43d600000000000000000000000000000000000000000000000000000000145b610d4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f4170703a2066756e6374696f6e206e6f7420616c6c6f7765640000000000006044820152606401610898565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585604051610d94929190612d13565b6000604051808303816000865af19150503d8060008114610dd1576040519150601f19603f3d011682016040523d82523d6000602084013e610dd6565b606091505b509150915081610de857805160208201fd5b5050505050565b610df7611fad565b610e01600061202e565b565b610e0b611fad565b63ffffffff831660009081526001602052604090205415158115158103610e5e576040517f9556766100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff84166000818152600160209081526040918290208690558151928352820185905283151582820152517fc55181d68816686be8ec55890d24aefed84c9a6a875145822aad2b2c950f027f9181900360600190a150505050565b60606009805461078e90612c09565b600080610f73610ee160808a0160608b016128e7565b610f1c8a35610ef360208d01356120a3565b338989604051602001610f0893929190612d23565b6040516020818303038152906040526120cf565b87610f6e610f3060808e0160608f016128e7565b60028d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c5492505050565b6120e6565b90999098509650505050505050565b33600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015611046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610898565b61094e82868684036115b3565b60003361081f8185856119de565b6000806110e061107760808801606089016128e7565b61108e883561108960208b01356120a3565b6121a2565b85610f6e6110a260808c0160608d016128e7565b60018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c5492505050565b9097909650945050505050565b6110f5611fad565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610b02565b6111706125ea565b6111f0886111c561118760808301606084016128e7565b60028b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c5492505050565b87873388886040516020016111dc93929190612d23565b604051602081830303815290604052611ca0565b98975050505050505050565b611204611fad565b60005b818110156112ea5782828281811061122157611221612d3d565b90506020028101906112339190612d6c565b611241906040810190612daa565b6003600086868681811061125757611257612d3d565b90506020028101906112699190612d6c565b61127a9060408101906020016128e7565b63ffffffff1663ffffffff16815260200190815260200160002060008686868181106112a8576112a8612d3d565b90506020028101906112ba9190612d6c565b3581526020810191909152604001600020916112d7919083612e8c565b50806112e281612fa6565b915050611207565b507f116010e386f0b6b56cf03fa3e25a9e8015859c71fa3794d81cf655341ec1ef3b828260405161131c929190612fde565b60405180910390a15050565b611330611fad565b73ffffffffffffffffffffffffffffffffffffffff81166113d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610898565b6113dc8161202e565b50565b60025473ffffffffffffffffffffffffffffffffffffffff163314611432576040517fc023811c000000000000000000000000000000000000000000000000000000008152336004820152602401610898565b60005b818110156114c8573683838381811061145057611450612d3d565b90506020028101906114629190613143565b9050600061147661035a60208401846128e7565b90506020820135811461148a5750506114b6565b6114b38260608101356114a06080830183612daa565b336114ae60a0890189612daa565b611766565b50505b806114c081612fa6565b915050611435565b50600254604080517fd2968d57000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163d2968d579160048083019260009291908290030181865afa158015611539573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261157f91908101906131a0565b6040517f0a78da8f00000000000000000000000000000000000000000000000000000000815260040161089892919061326b565b73ffffffffffffffffffffffffffffffffffffffff8316611655576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610898565b73ffffffffffffffffffffffffffffffffffffffff82166116f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610898565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526006602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061177861177587876121fc565b90565b905060006117a661179161178c898961221b565b61223e565b8361179f60208d018d6128e7565b5090919050565b905060006117b48383612274565b9050602887111561189e5760006117f16117d460608d0160408e01612c6c565b6117e160208e018e6128e7565b846117ec8d8d612286565b6122d1565b6040517f754d3b9c00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063754d3b9c9061186a9087908e908690600401613290565b600060405180830381600087803b15801561188457600080fd5b505af1158015611898573d6000803e3d6000fd5b50505050505b6118ab61177589896121fc565b73ffffffffffffffffffffffffffffffffffffffff16897ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd158836040516118f391815260200190565b60405180910390a350505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600660209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146119d857818110156119cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610898565b6119d884848484036115b3565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316611a81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610898565b73ffffffffffffffffffffffffffffffffffffffff8216611b24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610898565b73ffffffffffffffffffffffffffffffffffffffff831660009081526005602052604090205481811015611bda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610898565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526005602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611c479086815260200190565b60405180910390a36119d8565b63ffffffff831660009081526003602090815260408083208584528252918290209151606092611c889290918591016132c5565b60405160208183030381529060405290509392505050565b611ca86125ea565b6000611cc66020880135611cc260808a0160608b016128e7565b5090565b90506000611cd382612303565b90508760400135811015611d2057604080517fac7247ca00000000000000000000000000000000000000000000000000000000815260048101839052908901356024820152604401610898565b60608451600003611d4057611d398935611089846120a3565b9050611d57565b611d548935611d4e846120a3565b876120cf565b90505b60045473ffffffffffffffffffffffffffffffffffffffff1615611e0f57600480546040517f043a78eb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169163043a78eb91611dcc9185918d910161336a565b602060405180830381865afa158015611de9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0d919061338f565b505b611e7260405180608001604052808b6060016020810190611e3091906128e7565b63ffffffff168152602001611e4e61035a60808e0160608f016128e7565b8152602081018490526040018a9052611e6c368a90038a018a6133ac565b8861231b565b805160405184815291955033917f3131f8d7ad296b074b480a9f6b3a760579632740b870b78725975df31c5da7789060200160405180910390a350505095945050505050565b73ffffffffffffffffffffffffffffffffffffffff8216611f35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610898565b8060076000828254611f479190612cb8565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610898565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006108257f0000000000000000000000000000000000000000000000000000000000000000836133de565b6060838383604051602001611c8893929190613419565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166383c4755930898989896040518663ffffffff1660e01b815260040161214c95949392919061346b565b6040805180830381865afa158015612168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218c91906134f0565b8051602090910151909890975095505050505050565b606082826040516020016121e592919091825260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016602082015260280190565b604051602081830303815290604052905092915050565b600061220b602082848661350c565b61221491613536565b9392505050565b600061222b60286020848661350c565b61223491613572565b60c01c9392505050565b60006108257f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff84166135b8565b60006122808383611eb8565b50919050565b6060612295826028818661350c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929695505050505050565b6060848484846040516020016122ea94939291906135cf565b6040516020818303038152906040529050949350505050565b60008061230f836123ed565b90506108253382612424565b6123236125ea565b825160208401516040517faca1b45a00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263aca1b45a926123a1918a91899060040161364d565b60806040518083038185885af11580156123bf573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123e491906136ec565b95945050505050565b60007f000000000000000000000000000000000000000000000000000000000000000061241a81846133de565b61082591906135b8565b73ffffffffffffffffffffffffffffffffffffffff82166124c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610898565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260409020548181101561257d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610898565b73ffffffffffffffffffffffffffffffffffffffff831660008181526005602090815260408083208686039055600780548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b604051806060016040528060008019168152602001600067ffffffffffffffff16815260200161262d604051806040016040528060008152602001600081525090565b905290565b60005b8381101561264d578181015183820152602001612635565b50506000910152565b6000815180845261266e816020860160208601612632565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006122146020830184612656565b73ffffffffffffffffffffffffffffffffffffffff811681146113dc57600080fd5b600080604083850312156126e857600080fd5b82356126f3816126b3565b946020939093013593505050565b60008083601f84011261271357600080fd5b50813567ffffffffffffffff81111561272b57600080fd5b60208301915083602082850101111561274357600080fd5b9250929050565b600080600080600080600087890360e081121561276657600080fd5b606081121561277457600080fd5b5087965060608801359550608088013567ffffffffffffffff8082111561279a57600080fd5b6127a68b838c01612701565b909750955060a08a013591506127bb826126b3565b90935060c089013590808211156127d157600080fd5b506127de8a828b01612701565b989b979a50959850939692959293505050565b60008060006060848603121561280657600080fd5b8335612811816126b3565b92506020840135612821816126b3565b929592945050506040919091013590565b60006080828403121561228057600080fd5b60006040828403121561228057600080fd5b6000806000806000610100868803121561286f57600080fd5b6128798787612832565b9450608086013567ffffffffffffffff81111561289557600080fd5b6128a188828901612701565b90955093506128b590508760a08801612844565b915060e08601356128c5816126b3565b809150509295509295909350565b803563ffffffff81168114610a2c57600080fd5b6000602082840312156128f957600080fd5b612214826128d3565b60006020828403121561291457600080fd5b8135612214816126b3565b6000806020838503121561293257600080fd5b823567ffffffffffffffff81111561294957600080fd5b61295585828601612701565b90969095509350505050565b80151581146113dc57600080fd5b60008060006060848603121561298457600080fd5b61298d846128d3565b92506020840135915060408401356129a481612961565b809150509250925092565b600080604083850312156129c257600080fd5b6126f3836128d3565b60008060008060008060e087890312156129e457600080fd5b6129ee8888612832565b9550608087013567ffffffffffffffff80821115612a0b57600080fd5b612a178a838b01612701565b909750955060a08901359150612a2c82612961565b90935060c08801359080821115612a4257600080fd5b50612a4f89828a01612701565b979a9699509497509295939492505050565b60008060008060c08587031215612a7757600080fd5b612a818686612832565b9350608085013567ffffffffffffffff811115612a9d57600080fd5b612aa987828801612701565b90945092505060a0850135612abd81612961565b939692955090935050565b6000806000806000806000610120888a031215612ae457600080fd5b612aee8989612832565b9650608088013567ffffffffffffffff80821115612b0b57600080fd5b612b178b838c01612701565b9098509650869150612b2c8b60a08c01612844565b955060e08a01359150612b3e826126b3565b90935061010089013590808211156127d157600080fd5b60008060408385031215612b6857600080fd5b8235612b73816126b3565b91506020830135612b83816126b3565b809150509250929050565b60008083601f840112612ba057600080fd5b50813567ffffffffffffffff811115612bb857600080fd5b6020830191508360208260051b850101111561274357600080fd5b60008060208385031215612be657600080fd5b823567ffffffffffffffff811115612bfd57600080fd5b61295585828601612b8e565b600181811c90821680612c1d57607f821691505b602082108103612280577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b67ffffffffffffffff811681146113dc57600080fd5b600060208284031215612c7e57600080fd5b813561221481612c56565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561082557610825612c89565b7fffffffff000000000000000000000000000000000000000000000000000000008135818116916004851015612d0b5780818660040360031b1b83161692505b505092915050565b8183823760009101908152919050565b838152818360208301376000910160200190815292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112612da057600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612ddf57600080fd5b83018035915067ffffffffffffffff821115612dfa57600080fd5b60200191503681900382131561274357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f82111561091857600081815260208120601f850160051c81016020861015612e655750805b601f850160051c820191505b81811015612e8457828155600101612e71565b505050505050565b67ffffffffffffffff831115612ea457612ea4612e0f565b612eb883612eb28354612c09565b83612e3e565b6000601f841160018114612f0a5760008515612ed45750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610de8565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015612f595786850135825560209485019460019092019101612f39565b5086821015612f94577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fd757612fd7612c89565b5060010190565b60208082528181018390526000906040808401600586901b8501820187855b88811015613135577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18b360301811261305e57600080fd5b8a0180358452606063ffffffff6130768984016128d3565b1688860152868201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18336030181126130af57600080fd5b90910187810191903567ffffffffffffffff8111156130cd57600080fd5b8036038313156130dc57600080fd5b8188870152808287015260809150808383880137600086820183015295880195601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909401909301925090850190600101612ffd565b509098975050505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112612da057600080fd5b6040805190810167ffffffffffffffff8111828210171561319a5761319a612e0f565b60405290565b6000602082840312156131b257600080fd5b815167ffffffffffffffff808211156131ca57600080fd5b818401915084601f8301126131de57600080fd5b8151818111156131f0576131f0612e0f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561323657613236612e0f565b8160405282815287602084870101111561324f57600080fd5b613260836020830160208801612632565b979650505050505050565b61ffff831681526040602082015260006132886040830184612656565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff841681528260208201526060604082015260006123e46060830184612656565b60008084546132d381612c09565b600182811680156132eb576001811461331e5761334d565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008416875282151583028701945061334d565b8860005260208060002060005b858110156133445781548a82015290840190820161332b565b50505082870194505b505050508351613361818360208801612632565b01949350505050565b60408152600061337d6040830185612656565b82810360208401526123e48185612656565b6000602082840312156133a157600080fd5b815161221481612961565b6000604082840312156133be57600080fd5b6133c6613177565b82358152602083013560208201528091505092915050565b600082613414577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8381527fffffffffffffffff0000000000000000000000000000000000000000000000008360c01b1660208201526000825161345c816028850160208701612632565b91909101602801949350505050565b73ffffffffffffffffffffffffffffffffffffffff8616815263ffffffff8516602082015260a0604082015260006134a660a0830186612656565b841515606084015282810360808401526111f08185612656565b6000604082840312156134d257600080fd5b6134da613177565b9050815181526020820151602082015292915050565b60006040828403121561350257600080fd5b61221483836134c0565b6000808585111561351c57600080fd5b8386111561352957600080fd5b5050820193919092039150565b80356020831015610825577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff0000000000000000000000000000000000000000000000008135818116916008851015612d0b5760089490940360031b84901b1690921692915050565b808202811582820484141761082557610825612c89565b7fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b1681527fffffffff000000000000000000000000000000000000000000000000000000008460e01b16600882015282600c8201526000825161363d81602c850160208701612632565b91909101602c0195945050505050565b6060815263ffffffff84511660608201526020840151608082015260006040850151608060a084015261368360e0840182612656565b905060608601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08483030160c08501526136be8282612656565b9250505083602083015273ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b6000608082840312156136fe57600080fd5b6040516060810181811067ffffffffffffffff8211171561372157613721612e0f565b60405282518152602083015161373681612c56565b602082015261374884604085016134c0565b6040820152939250505056fea2646970667358221220a1e210cbb291c07eb392eb117d24cb6e3e27629500556f22624a18daf5b51d8a64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_symbol";
            readonly type: "string";
        }, {
            readonly internalType: "uint8";
            readonly name: "_localDecimals";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "PreCrimeOnly";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPrecrime";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "subtractedValue";
            readonly type: "uint256";
        }];
        readonly name: "decreaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "addedValue";
            readonly type: "uint256";
        }];
        readonly name: "increaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inspector";
        readonly outputs: readonly [{
            readonly internalType: "contract IInspector";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "contract IPreCrime";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendAndCallFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "sendAndCall";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setEndpointConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "setInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPrecrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): TestOFTInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TestOFT;
}

type index$b_TestOFT__factory = TestOFT__factory;
declare const index$b_TestOFT__factory: typeof TestOFT__factory;
declare namespace index$b {
  export {
    index$b_TestOFT__factory as TestOFT__factory,
  };
}

declare class Fee__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "feeBp";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultFeeBp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "feeBp";
            readonly type: "uint16";
        }];
        readonly name: "SetFeeBp";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "feeOwner";
            readonly type: "address";
        }];
        readonly name: "SetFeeOwner";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isEnabled";
            readonly type: "bool";
        }];
        readonly name: "SetFeesEnabled";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "BP_DENOMINATOR";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultFeeBp";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "dstEidToFeeBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "feeBP";
            readonly type: "uint16";
        }, {
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "feeOwner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "quoteOFTFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_feeBp";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultFeeBp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bool";
            readonly name: "_enabled";
            readonly type: "bool";
        }, {
            readonly internalType: "uint16";
            readonly name: "_feeBp";
            readonly type: "uint16";
        }];
        readonly name: "setFeeBp";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_feeOwner";
            readonly type: "address";
        }];
        readonly name: "setFeeOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): FeeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Fee;
}

type OFTConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OFT__factory extends ContractFactory {
    constructor(...args: OFTConstructorParams);
    deploy(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _localDecimals: PromiseOrValue<BigNumberish>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OFT>;
    getDeployTransaction(_name: PromiseOrValue<string>, _symbol: PromiseOrValue<string>, _localDecimals: PromiseOrValue<BigNumberish>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OFT;
    connect(signer: Signer): OFT__factory;
    static readonly bytecode = "0x60c06040523480156200001157600080fd5b5060405162003cd538038062003cd58339810160408190526200003491620001f1565b83838383806200004433620000dc565b6001600160a01b0316608052600660ff8316101562000076576040516384564cb760e01b815260040160405180910390fd5b62000083600683620002ab565b6200009090600a620003ca565b60a0525060089050620000a4838262000471565b506009620000b3828262000471565b50620000c0915050601290565b60ff168260ff1614620000d257600080fd5b505050506200053d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015457600080fd5b81516001600160401b03808211156200017157620001716200012c565b604051601f8301601f19908116603f011681019082821181831017156200019c576200019c6200012c565b81604052838152602092508683858801011115620001b957600080fd5b600091505b83821015620001dd5785820183015181830184015290820190620001be565b600093810190920192909252949350505050565b600080600080608085870312156200020857600080fd5b84516001600160401b03808211156200022057600080fd5b6200022e8883890162000142565b955060208701519150808211156200024557600080fd5b50620002548782880162000142565b935050604085015160ff811681146200026c57600080fd5b60608601519092506001600160a01b03811681146200028a57600080fd5b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115620002c757620002c762000295565b92915050565b600181815b808511156200030e578160001904821115620002f257620002f262000295565b808516156200030057918102915b93841c9390800290620002d2565b509250929050565b6000826200032757506001620002c7565b816200033657506000620002c7565b81600181146200034f57600281146200035a576200037a565b6001915050620002c7565b60ff8411156200036e576200036e62000295565b50506001821b620002c7565b5060208310610133831016604e8410600b84101617156200039f575081810a620002c7565b620003ab8383620002cd565b8060001904821115620003c257620003c262000295565b029392505050565b6000620003db60ff84168362000316565b9392505050565b600181811c90821680620003f757607f821691505b6020821081036200041857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200046c57600081815260208120601f850160051c81016020861015620004475750805b601f850160051c820191505b81811015620004685782815560010162000453565b5050505b505050565b81516001600160401b038111156200048d576200048d6200012c565b620004a5816200049e8454620003e2565b846200041e565b602080601f831160018114620004dd5760008415620004c45750858301515b600019600386901b1c1916600185901b17855562000468565b600085815260208120601f198616915b828110156200050e57888601518255948401946001909101908401620004ed565b50858210156200052d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516137416200059460003960008181611f6c0152818161210701526123a80152600081816103cd015281816107f201528181610d06015281816117e801528181611faf015261222c01526137416000f3fe60806040526004361061021d5760003560e01c8063857749b01161011d578063baf3292d116100b0578063e74847021161007f578063f2fde38b11610064578063f2fde38b146106fe578063f5c6ba5a1461071e578063fc0c546a1461073157600080fd5b8063e7484702146106b1578063ed2cee9e146106d157600080fd5b8063baf3292d146105fe578063bb0b6a531461061e578063d0a227531461064b578063dd62ed3e1461065e57600080fd5b8063a41d8a25116100ec578063a41d8a2514610569578063a457c2d71461059e578063a9059cbb146105be578063b0690b3e146105de57600080fd5b8063857749b0146104e85780638da5cb5b146104fc578063950c8a741461052757806395d89b411461055457600080fd5b806339509351116101b0578063655f06381161017f578063715018a611610164578063715018a6146104775780637624f5051461048c5780637d25a05e146104ac57600080fd5b8063655f06381461041457806370a082311461043457600080fd5b806339509351146103665780634e5cbf611461038657806354fd4d50146103a65780635e280f11146103bb57600080fd5b806323b872dd116101ec57806323b872dd146102b857806323d509ba146102d857806326b27f8414610324578063313ce5671461034457600080fd5b806306fdde0314610229578063095ea7b31461025457806313137d651461028457806318160ddd1461029957600080fd5b3661022457005b600080fd5b34801561023557600080fd5b5061023e610744565b60405161024b9190612657565b60405180910390f35b34801561026057600080fd5b5061027461026f36600461268c565b6107d6565b604051901515815260200161024b565b610297610292366004612701565b6107f0565b005b3480156102a557600080fd5b506007545b60405190815260200161024b565b3480156102c457600080fd5b506102746102d33660046127a8565b6108fa565b6102eb6102e636600461280d565b61091e565b604080518251815260208084015167ffffffffffffffff168183015292820151805192820192909252910151606082015260800161024b565b34801561033057600080fd5b506102aa61033f36600461289e565b61099c565b34801561035057600080fd5b5060125b60405160ff909116815260200161024b565b34801561037257600080fd5b5061027461038136600461268c565b6109f6565b34801561039257600080fd5b506102976103a13660046128b9565b610a42565b3480156103b257600080fd5b506102aa600181565b3480156103c757600080fd5b506103ef7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161024b565b34801561042057600080fd5b5061029761042f3660046128d6565b610ac4565b34801561044057600080fd5b506102aa61044f3660046128b9565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205490565b34801561048357600080fd5b50610297610da6565b34801561049857600080fd5b506102976104a7366004612926565b610dba565b3480156104b857600080fd5b506104cf6104c7366004612966565b600092915050565b60405167ffffffffffffffff909116815260200161024b565b3480156104f457600080fd5b506006610354565b34801561050857600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166103ef565b34801561053357600080fd5b506002546103ef9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561056057600080fd5b5061023e610e73565b34801561057557600080fd5b50610589610584366004612982565b610e82565b6040805192835260208301919091520161024b565b3480156105aa57600080fd5b506102746105b936600461268c565b610f39565b3480156105ca57600080fd5b506102746105d936600461268c565b61100a565b3480156105ea57600080fd5b506105896105f9366004612a18565b611018565b34801561060a57600080fd5b506102976106193660046128b9565b6110a4565b34801561062a57600080fd5b506102aa61063936600461289e565b60016020526000908152604090205481565b6102eb610659366004612a7f565b61111f565b34801561066a57600080fd5b506102aa610679366004612b0c565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260066020908152604080832093909416825291909152205490565b3480156106bd57600080fd5b506102976106cc366004612b8a565b6111b3565b3480156106dd57600080fd5b506004546103ef9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561070a57600080fd5b506102976107193660046128b9565b6112df565b61029761072c366004612b8a565b611396565b34801561073d57600080fd5b50306103ef565b60606008805461075390612bc0565b80601f016020809104026020016040519081016040528092919081815260200182805461077f90612bc0565b80156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b5050505050905090565b6000336107e481858561156a565b60019150505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610866576040517fab08c09e0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b6020870180359061087b9061033f908a61289e565b146108b8576040517fc59a4f640000000000000000000000000000000000000000000000000000000081526020880135600482015260240161085d565b6108e26108c8602089018961289e565b60208901356108dd60608b0160408c01612c23565b505050565b6108f18787878787878761171d565b50505050505050565b6000336109088582856118be565b610913858585611995565b506001949350505050565b6109266125a1565b6109928661097b61093d608083016060840161289e565b600189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b858560405180602001604052806000815250611c57565b9695505050505050565b63ffffffff8116600090815260016020526040902054806109f1576040517f196fb6c000000000000000000000000000000000000000000000000000000000815263ffffffff8316600482015260240161085d565b919050565b33600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906107e49082908690610a3d908790612c6f565b61156a565b610a4a611e6f565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff8b6b91dd680bf19d37570578ae915537e6e8cd2106736ad3ca05b30447a72b0906020015b60405180910390a150565b610acc611e6f565b6000610ad88284612c82565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167fb8007ff6000000000000000000000000000000000000000000000000000000001480610b6b57507fffffffff0000000000000000000000000000000000000000000000000000000081167f9e7fffcc00000000000000000000000000000000000000000000000000000000145b80610bb757507fffffffff0000000000000000000000000000000000000000000000000000000081167f0678327f00000000000000000000000000000000000000000000000000000000145b80610c0357507fffffffff0000000000000000000000000000000000000000000000000000000081167fb8849ac900000000000000000000000000000000000000000000000000000000145b80610c4f57507fffffffff0000000000000000000000000000000000000000000000000000000081167fe16f964d00000000000000000000000000000000000000000000000000000000145b80610c9b57507fffffffff0000000000000000000000000000000000000000000000000000000081167f66bf43d600000000000000000000000000000000000000000000000000000000145b610d01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f4170703a2066756e6374696f6e206e6f7420616c6c6f776564000000000000604482015260640161085d565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585604051610d4b929190612cca565b6000604051808303816000865af19150503d8060008114610d88576040519150601f19603f3d011682016040523d82523d6000602084013e610d8d565b606091505b509150915081610d9f57805160208201fd5b5050505050565b610dae611e6f565b610db86000611ef0565b565b610dc2611e6f565b63ffffffff831660009081526001602052604090205415158115158103610e15576040517f9556766100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff84166000818152600160209081526040918290208690558151928352820185905283151582820152517fc55181d68816686be8ec55890d24aefed84c9a6a875145822aad2b2c950f027f9181900360600190a150505050565b60606009805461075390612bc0565b600080610f2a610e9860808a0160608b0161289e565b610ed38a35610eaa60208d0135611f65565b338989604051602001610ebf93929190612cda565b604051602081830303815290604052611f91565b87610f25610ee760808e0160608f0161289e565b60028d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b611fa8565b90999098509650505050505050565b33600081815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610ffd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161085d565b610913828686840361156a565b6000336107e4818585611995565b60008061109761102e608088016060890161289e565b611045883561104060208b0135611f65565b612064565b85610f2561105960808c0160608d0161289e565b60018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b9097909650945050505050565b6110ac611e6f565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610ab9565b6111276125a1565b6111a78861117c61113e608083016060840161289e565b60028b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c0b92505050565b878733888860405160200161119393929190612cda565b604051602081830303815290604052611c57565b98975050505050505050565b6111bb611e6f565b60005b818110156112a1578282828181106111d8576111d8612cf4565b90506020028101906111ea9190612d23565b6111f8906040810190612d61565b6003600086868681811061120e5761120e612cf4565b90506020028101906112209190612d23565b61123190604081019060200161289e565b63ffffffff1663ffffffff168152602001908152602001600020600086868681811061125f5761125f612cf4565b90506020028101906112719190612d23565b35815260208101919091526040016000209161128e919083612e43565b508061129981612f5d565b9150506111be565b507f116010e386f0b6b56cf03fa3e25a9e8015859c71fa3794d81cf655341ec1ef3b82826040516112d3929190612f95565b60405180910390a15050565b6112e7611e6f565b73ffffffffffffffffffffffffffffffffffffffff811661138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161085d565b61139381611ef0565b50565b60025473ffffffffffffffffffffffffffffffffffffffff1633146113e9576040517fc023811c00000000000000000000000000000000000000000000000000000000815233600482015260240161085d565b60005b8181101561147f573683838381811061140757611407612cf4565b905060200281019061141991906130fa565b9050600061142d61033f602084018461289e565b90506020820135811461144157505061146d565b61146a8260608101356114576080830183612d61565b3361146560a0890189612d61565b61171d565b50505b8061147781612f5d565b9150506113ec565b50600254604080517fd2968d57000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163d2968d579160048083019260009291908290030181865afa1580156114f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115369190810190613157565b6040517f0a78da8f00000000000000000000000000000000000000000000000000000000815260040161085d929190613222565b73ffffffffffffffffffffffffffffffffffffffff831661160c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161085d565b73ffffffffffffffffffffffffffffffffffffffff82166116af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161085d565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526006602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061172f61172c87876120be565b90565b9050600061175d61174861174389896120dd565b612100565b8361175660208d018d61289e565b5090919050565b9050600061176b8383612136565b905060288711156118555760006117a861178b60608d0160408e01612c23565b61179860208e018e61289e565b846117a38d8d612148565b612193565b6040517f754d3b9c00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063754d3b9c906118219087908e908690600401613247565b600060405180830381600087803b15801561183b57600080fd5b505af115801561184f573d6000803e3d6000fd5b50505050505b61186261172c89896120be565b73ffffffffffffffffffffffffffffffffffffffff16897ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd158836040516118aa91815260200190565b60405180910390a350505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600660209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461198f5781811015611982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161085d565b61198f848484840361156a565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316611a38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161085d565b73ffffffffffffffffffffffffffffffffffffffff8216611adb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161085d565b73ffffffffffffffffffffffffffffffffffffffff831660009081526005602052604090205481811015611b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161085d565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526005602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611bfe9086815260200190565b60405180910390a361198f565b63ffffffff831660009081526003602090815260408083208584528252918290209151606092611c3f92909185910161327c565b60405160208183030381529060405290509392505050565b611c5f6125a1565b6000611c7d6020880135611c7960808a0160608b0161289e565b5090565b90506000611c8a826121c5565b90508760400135811015611cd757604080517fac7247ca0000000000000000000000000000000000000000000000000000000081526004810183905290890135602482015260440161085d565b60608451600003611cf757611cf0893561104084611f65565b9050611d0e565b611d0b8935611d0584611f65565b87611f91565b90505b60045473ffffffffffffffffffffffffffffffffffffffff1615611dc657600480546040517f043a78eb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169163043a78eb91611d839185918d9101613321565b602060405180830381865afa158015611da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc49190613346565b505b611e2960405180608001604052808b6060016020810190611de7919061289e565b63ffffffff168152602001611e0561033f60808e0160608f0161289e565b8152602081018490526040018a9052611e23368a90038a018a613363565b886121dd565b805160405184815291955033917f3131f8d7ad296b074b480a9f6b3a760579632740b870b78725975df31c5da7789060200160405180910390a350505095945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610db8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161085d565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006107ea7f000000000000000000000000000000000000000000000000000000000000000083613395565b6060838383604051602001611c3f939291906133d0565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166383c4755930898989896040518663ffffffff1660e01b815260040161200e959493929190613422565b6040805180830381865afa15801561202a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204e91906134a7565b8051602090910151909890975095505050505050565b606082826040516020016120a792919091825260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016602082015260280190565b604051602081830303815290604052905092915050565b60006120cd60208284866134c3565b6120d6916134ed565b9392505050565b60006120ed6028602084866134c3565b6120f691613529565b60c01c9392505050565b60006107ea7f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff841661356f565b600061214283836122af565b50919050565b606061215782602881866134c3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929695505050505050565b6060848484846040516020016121ac9493929190613586565b6040516020818303038152906040529050949350505050565b6000806121d1836123a4565b90506107ea33826123db565b6121e56125a1565b825160208401516040517faca1b45a00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263aca1b45a92612263918a918990600401613604565b60806040518083038185885af1158015612281573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906122a691906136a3565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff821661232c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161085d565b806007600082825461233e9190612c6f565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600560209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60007f00000000000000000000000000000000000000000000000000000000000000006123d18184613395565b6107ea919061356f565b73ffffffffffffffffffffffffffffffffffffffff821661247e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161085d565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604090205481811015612534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f6365000000000000000000000000000000000000000000000000000000000000606482015260840161085d565b73ffffffffffffffffffffffffffffffffffffffff831660008181526005602090815260408083208686039055600780548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b604051806060016040528060008019168152602001600067ffffffffffffffff1681526020016125e4604051806040016040528060008152602001600081525090565b905290565b60005b838110156126045781810151838201526020016125ec565b50506000910152565b600081518084526126258160208601602086016125e9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006120d6602083018461260d565b73ffffffffffffffffffffffffffffffffffffffff8116811461139357600080fd5b6000806040838503121561269f57600080fd5b82356126aa8161266a565b946020939093013593505050565b60008083601f8401126126ca57600080fd5b50813567ffffffffffffffff8111156126e257600080fd5b6020830191508360208285010111156126fa57600080fd5b9250929050565b600080600080600080600087890360e081121561271d57600080fd5b606081121561272b57600080fd5b5087965060608801359550608088013567ffffffffffffffff8082111561275157600080fd5b61275d8b838c016126b8565b909750955060a08a013591506127728261266a565b90935060c0890135908082111561278857600080fd5b506127958a828b016126b8565b989b979a50959850939692959293505050565b6000806000606084860312156127bd57600080fd5b83356127c88161266a565b925060208401356127d88161266a565b929592945050506040919091013590565b60006080828403121561214257600080fd5b60006040828403121561214257600080fd5b6000806000806000610100868803121561282657600080fd5b61283087876127e9565b9450608086013567ffffffffffffffff81111561284c57600080fd5b612858888289016126b8565b909550935061286c90508760a088016127fb565b915060e086013561287c8161266a565b809150509295509295909350565b803563ffffffff811681146109f157600080fd5b6000602082840312156128b057600080fd5b6120d68261288a565b6000602082840312156128cb57600080fd5b81356120d68161266a565b600080602083850312156128e957600080fd5b823567ffffffffffffffff81111561290057600080fd5b61290c858286016126b8565b90969095509350505050565b801515811461139357600080fd5b60008060006060848603121561293b57600080fd5b6129448461288a565b925060208401359150604084013561295b81612918565b809150509250925092565b6000806040838503121561297957600080fd5b6126aa8361288a565b60008060008060008060e0878903121561299b57600080fd5b6129a588886127e9565b9550608087013567ffffffffffffffff808211156129c257600080fd5b6129ce8a838b016126b8565b909750955060a089013591506129e382612918565b90935060c088013590808211156129f957600080fd5b50612a0689828a016126b8565b979a9699509497509295939492505050565b60008060008060c08587031215612a2e57600080fd5b612a3886866127e9565b9350608085013567ffffffffffffffff811115612a5457600080fd5b612a60878288016126b8565b90945092505060a0850135612a7481612918565b939692955090935050565b6000806000806000806000610120888a031215612a9b57600080fd5b612aa589896127e9565b9650608088013567ffffffffffffffff80821115612ac257600080fd5b612ace8b838c016126b8565b9098509650869150612ae38b60a08c016127fb565b955060e08a01359150612af58261266a565b909350610100890135908082111561278857600080fd5b60008060408385031215612b1f57600080fd5b8235612b2a8161266a565b91506020830135612b3a8161266a565b809150509250929050565b60008083601f840112612b5757600080fd5b50813567ffffffffffffffff811115612b6f57600080fd5b6020830191508360208260051b85010111156126fa57600080fd5b60008060208385031215612b9d57600080fd5b823567ffffffffffffffff811115612bb457600080fd5b61290c85828601612b45565b600181811c90821680612bd457607f821691505b602082108103612142577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b67ffffffffffffffff8116811461139357600080fd5b600060208284031215612c3557600080fd5b81356120d681612c0d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156107ea576107ea612c40565b7fffffffff000000000000000000000000000000000000000000000000000000008135818116916004851015612cc25780818660040360031b1b83161692505b505092915050565b8183823760009101908152919050565b838152818360208301376000910160200190815292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112612d5757600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612d9657600080fd5b83018035915067ffffffffffffffff821115612db157600080fd5b6020019150368190038213156126fa57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156108dd57600081815260208120601f850160051c81016020861015612e1c5750805b601f850160051c820191505b81811015612e3b57828155600101612e28565b505050505050565b67ffffffffffffffff831115612e5b57612e5b612dc6565b612e6f83612e698354612bc0565b83612df5565b6000601f841160018114612ec15760008515612e8b5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610d9f565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015612f105786850135825560209485019460019092019101612ef0565b5086821015612f4b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f8e57612f8e612c40565b5060010190565b60208082528181018390526000906040808401600586901b8501820187855b888110156130ec577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18b360301811261301557600080fd5b8a0180358452606063ffffffff61302d89840161288a565b1688860152868201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261306657600080fd5b90910187810191903567ffffffffffffffff81111561308457600080fd5b80360383131561309357600080fd5b8188870152808287015260809150808383880137600086820183015295880195601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909401909301925090850190600101612fb4565b509098975050505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112612d5757600080fd5b6040805190810167ffffffffffffffff8111828210171561315157613151612dc6565b60405290565b60006020828403121561316957600080fd5b815167ffffffffffffffff8082111561318157600080fd5b818401915084601f83011261319557600080fd5b8151818111156131a7576131a7612dc6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156131ed576131ed612dc6565b8160405282815287602084870101111561320657600080fd5b6132178360208301602088016125e9565b979650505050505050565b61ffff8316815260406020820152600061323f604083018461260d565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff841681528260208201526060604082015260006122a6606083018461260d565b600080845461328a81612bc0565b600182811680156132a257600181146132d557613304565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450613304565b8860005260208060002060005b858110156132fb5781548a8201529084019082016132e2565b50505082870194505b5050505083516133188183602088016125e9565b01949350505050565b604081526000613334604083018561260d565b82810360208401526122a6818561260d565b60006020828403121561335857600080fd5b81516120d681612918565b60006040828403121561337557600080fd5b61337d61312e565b82358152602083013560208201528091505092915050565b6000826133cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8381527fffffffffffffffff0000000000000000000000000000000000000000000000008360c01b166020820152600082516134138160288501602087016125e9565b91909101602801949350505050565b73ffffffffffffffffffffffffffffffffffffffff8616815263ffffffff8516602082015260a06040820152600061345d60a083018661260d565b841515606084015282810360808401526111a7818561260d565b60006040828403121561348957600080fd5b61349161312e565b9050815181526020820151602082015292915050565b6000604082840312156134b957600080fd5b6120d68383613477565b600080858511156134d357600080fd5b838611156134e057600080fd5b5050820193919092039150565b803560208310156107ea577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff0000000000000000000000000000000000000000000000008135818116916008851015612cc25760089490940360031b84901b1690921692915050565b80820281158282048414176107ea576107ea612c40565b7fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b1681527fffffffff000000000000000000000000000000000000000000000000000000008460e01b16600882015282600c820152600082516135f481602c8501602087016125e9565b91909101602c0195945050505050565b6060815263ffffffff84511660608201526020840151608082015260006040850151608060a084015261363a60e084018261260d565b905060608601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08483030160c0850152613675828261260d565b9250505083602083015273ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b6000608082840312156136b557600080fd5b6040516060810181811067ffffffffffffffff821117156136d8576136d8612dc6565b6040528251815260208301516136ed81612c0d565b60208201526136ff8460408501613477565b6040820152939250505056fea264697066735822122087cb618d8b28416af8321ca2241a25af01eaa4d188d4a31aafb66ff42cc707fc64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_symbol";
            readonly type: "string";
        }, {
            readonly internalType: "uint8";
            readonly name: "_localDecimals";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "PreCrimeOnly";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPrecrime";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "subtractedValue";
            readonly type: "uint256";
        }];
        readonly name: "decreaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "addedValue";
            readonly type: "uint256";
        }];
        readonly name: "increaseAllowance";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inspector";
        readonly outputs: readonly [{
            readonly internalType: "contract IInspector";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "contract IPreCrime";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendAndCallFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "sendAndCall";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setEndpointConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "setInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPrecrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OFTInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OFT;
}

type OFTAdapterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OFTAdapter__factory extends ContractFactory {
    constructor(...args: OFTAdapterConstructorParams);
    deploy(_token: PromiseOrValue<string>, _localDecimals: PromiseOrValue<BigNumberish>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OFTAdapter>;
    getDeployTransaction(_token: PromiseOrValue<string>, _localDecimals: PromiseOrValue<BigNumberish>, _endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OFTAdapter;
    connect(signer: Signer): OFTAdapter__factory;
    static readonly bytecode = "0x60e06040523480156200001157600080fd5b50604051620033b4380380620033b48339810160408190526200003491620001e9565b81818062000042336200016a565b6001600160a01b0316608052600660ff8316101562000074576040516384564cb760e01b815260040160405180910390fd5b6200008160068362000249565b6200008e90600a62000368565b60a05250506001600160a01b03831660c081905260408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009283929091620000df919062000380565b600060405180830381855afa9150503d80600081146200011c576040519150601f19603f3d011682016040523d82523d6000602084013e62000121565b606091505b5091509150816200013157600080fd5b600081806020019051810190620001499190620003b1565b90508060ff168560ff16146200015e57600080fd5b505050505050620003cf565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001d257600080fd5b919050565b805160ff81168114620001d257600080fd5b600080600060608486031215620001ff57600080fd5b6200020a84620001ba565b92506200021a60208501620001d7565b91506200022a60408501620001ba565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b60ff828116828216039081111562000265576200026562000233565b92915050565b600181815b80851115620002ac57816000190482111562000290576200029062000233565b808516156200029e57918102915b93841c939080029062000270565b509250929050565b600082620002c55750600162000265565b81620002d45750600062000265565b8160018114620002ed5760028114620002f85762000318565b600191505062000265565b60ff8411156200030c576200030c62000233565b50506001821b62000265565b5060208310610133831016604e8410600b84101617156200033d575081810a62000265565b6200034983836200026b565b806000190482111562000360576200036062000233565b029392505050565b60006200037960ff841683620002b4565b9392505050565b6000825160005b81811015620003a3576020818601810151858301520162000387565b506000920191825250919050565b600060208284031215620003c457600080fd5b6200037982620001d7565b60805160a05160c051612f766200043e600039600081816104f80152818161182901526118fb015260008181611643015281816117de0152611acd01526000818161026b0152818161051e015281816109c20152818161120c0152818161168601526119720152612f766000f3fe6080604052600436106101845760003560e01c80638da5cb5b116100d6578063d0a227531161007f578063f2fde38b11610059578063f2fde38b146104b6578063f5c6ba5a146104d6578063fc0c546a146104e957600080fd5b8063d0a2275314610456578063e748470214610469578063ed2cee9e1461048957600080fd5b8063b0690b3e116100b0578063b0690b3e146103e9578063baf3292d14610409578063bb0b6a531461042957600080fd5b80638da5cb5b1461035c578063950c8a7414610387578063a41d8a25146103b457600080fd5b80635e280f11116101385780637624f505116101125780637624f505146102e75780637d25a05e14610307578063857749b01461034057600080fd5b80635e280f1114610259578063655f0638146102b2578063715018a6146102d257600080fd5b806326b27f841161016957806326b27f84146101f65780634e5cbf611461022457806354fd4d501461024457600080fd5b806313137d651461019057806323d509ba146101a557600080fd5b3661018b57005b600080fd5b6101a361019e366004611f35565b61051c565b005b6101b86101b3366004612000565b610626565b604080518251815260208084015167ffffffffffffffff16818301529282015180519282019290925291015160608201526080015b60405180910390f35b34801561020257600080fd5b50610216610211366004612091565b6106a4565b6040519081526020016101ed565b34801561023057600080fd5b506101a361023f3660046120ac565b6106fe565b34801561025057600080fd5b50610216600181565b34801561026557600080fd5b5061028d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ed565b3480156102be57600080fd5b506101a36102cd3660046120c9565b610780565b3480156102de57600080fd5b506101a3610a62565b3480156102f357600080fd5b506101a3610302366004612119565b610a76565b34801561031357600080fd5b50610327610322366004612159565b610b2f565b60405167ffffffffffffffff90911681526020016101ed565b34801561034c57600080fd5b50604051600681526020016101ed565b34801561036857600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661028d565b34801561039357600080fd5b5060025461028d9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103c057600080fd5b506103d46103cf366004612183565b610b38565b604080519283526020830191909152016101ed565b3480156103f557600080fd5b506103d4610404366004612219565b610bef565b34801561041557600080fd5b506101a36104243660046120ac565b610c7b565b34801561043557600080fd5b50610216610444366004612091565b60016020526000908152604090205481565b6101b8610464366004612280565b610cf6565b34801561047557600080fd5b506101a3610484366004612352565b610d8a565b34801561049557600080fd5b5060045461028d9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156104c257600080fd5b506101a36104d13660046120ac565b610eb6565b6101a36104e4366004612352565b610f6d565b3480156104f557600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061028d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610592576040517fab08c09e0000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b602087018035906105a790610211908a612091565b146105e4576040517fc59a4f6400000000000000000000000000000000000000000000000000000000815260208801356004820152602401610589565b61060e6105f46020890189612091565b602089013561060960608b0160408c0161239e565b505050565b61061d87878787878787611141565b50505050505050565b61062e611e82565b61069a866106836106456080830160608401612091565b600189898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112e292505050565b85856040518060200160405280600081525061132e565b9695505050505050565b63ffffffff8116600090815260016020526040902054806106f9576040517f196fb6c000000000000000000000000000000000000000000000000000000000815263ffffffff83166004820152602401610589565b919050565b610706611546565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff8b6b91dd680bf19d37570578ae915537e6e8cd2106736ad3ca05b30447a72b0906020015b60405180910390a150565b610788611546565b600061079482846123bb565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167fb8007ff600000000000000000000000000000000000000000000000000000000148061082757507fffffffff0000000000000000000000000000000000000000000000000000000081167f9e7fffcc00000000000000000000000000000000000000000000000000000000145b8061087357507fffffffff0000000000000000000000000000000000000000000000000000000081167f0678327f00000000000000000000000000000000000000000000000000000000145b806108bf57507fffffffff0000000000000000000000000000000000000000000000000000000081167fb8849ac900000000000000000000000000000000000000000000000000000000145b8061090b57507fffffffff0000000000000000000000000000000000000000000000000000000081167fe16f964d00000000000000000000000000000000000000000000000000000000145b8061095757507fffffffff0000000000000000000000000000000000000000000000000000000081167f66bf43d600000000000000000000000000000000000000000000000000000000145b6109bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f4170703a2066756e6374696f6e206e6f7420616c6c6f7765640000000000006044820152606401610589565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585604051610a07929190612403565b6000604051808303816000865af19150503d8060008114610a44576040519150601f19603f3d011682016040523d82523d6000602084013e610a49565b606091505b509150915081610a5b57805160208201fd5b5050505050565b610a6a611546565b610a7460006115c7565b565b610a7e611546565b63ffffffff831660009081526001602052604090205415158115158103610ad1576040517f9556766100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff84166000818152600160209081526040918290208690558151928352820185905283151582820152517fc55181d68816686be8ec55890d24aefed84c9a6a875145822aad2b2c950f027f9181900360600190a150505050565b60005b92915050565b600080610be0610b4e60808a0160608b01612091565b610b898a35610b6060208d013561163c565b338989604051602001610b7593929190612413565b604051602081830303815290604052611668565b87610bdb610b9d60808e0160608f01612091565b60028d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112e292505050565b61167f565b90999098509650505050505050565b600080610c6e610c056080880160608901612091565b610c1c8835610c1760208b013561163c565b61173b565b85610bdb610c3060808c0160608d01612091565b60018b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112e292505050565b9097909650945050505050565b610c83611546565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b90602001610775565b610cfe611e82565b610d7e88610d53610d156080830160608401612091565b60028b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506112e292505050565b8787338888604051602001610d6a93929190612413565b60405160208183030381529060405261132e565b98975050505050505050565b610d92611546565b60005b81811015610e7857828282818110610daf57610daf61242d565b9050602002810190610dc1919061245c565b610dcf90604081019061249a565b60036000868686818110610de557610de561242d565b9050602002810190610df7919061245c565b610e08906040810190602001612091565b63ffffffff1663ffffffff1681526020019081526020016000206000868686818110610e3657610e3661242d565b9050602002810190610e48919061245c565b358152602081019190915260400160002091610e659190836125c9565b5080610e7081612712565b915050610d95565b507f116010e386f0b6b56cf03fa3e25a9e8015859c71fa3794d81cf655341ec1ef3b8282604051610eaa92919061274a565b60405180910390a15050565b610ebe611546565b73ffffffffffffffffffffffffffffffffffffffff8116610f61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610589565b610f6a816115c7565b50565b60025473ffffffffffffffffffffffffffffffffffffffff163314610fc0576040517fc023811c000000000000000000000000000000000000000000000000000000008152336004820152602401610589565b60005b818110156110565736838383818110610fde57610fde61242d565b9050602002810190610ff091906128af565b905060006110046102116020840184612091565b905060208201358114611018575050611044565b61104182606081013561102e608083018361249a565b3361103c60a089018961249a565b611141565b50505b8061104e81612712565b915050610fc3565b50600254604080517fd2968d57000000000000000000000000000000000000000000000000000000008152905160019273ffffffffffffffffffffffffffffffffffffffff169163d2968d579160048083019260009291908290030181865afa1580156110c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261110d9190810190612930565b6040517f0a78da8f000000000000000000000000000000000000000000000000000000008152600401610589929190612a3a565b60006111536111508787611795565b90565b9050600061118161116c61116789896117b4565b6117d7565b8361117a60208d018d612091565b5090919050565b9050600061118f838361180d565b905060288711156112795760006111cc6111af60608d0160408e0161239e565b6111bc60208e018e612091565b846111c78d8d611856565b6118a1565b6040517f754d3b9c00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063754d3b9c906112459087908e908690600401612a57565b600060405180830381600087803b15801561125f57600080fd5b505af1158015611273573d6000803e3d6000fd5b50505050505b6112866111508989611795565b73ffffffffffffffffffffffffffffffffffffffff16897ffc1b5feb636aa495ed28914895ca443adffbd4e2da951d5694baa392b4ebd158836040516112ce91815260200190565b60405180910390a350505050505050505050565b63ffffffff831660009081526003602090815260408083208584528252918290209151606092611316929091859101612a8c565b60405160208183030381529060405290509392505050565b611336611e82565b6000611354602088013561135060808a0160608b01612091565b5090565b90506000611361826118d3565b905087604001358110156113ae57604080517fac7247ca00000000000000000000000000000000000000000000000000000000815260048101839052908901356024820152604401610589565b606084516000036113ce576113c78935610c178461163c565b90506113e5565b6113e289356113dc8461163c565b87611668565b90505b60045473ffffffffffffffffffffffffffffffffffffffff161561149d57600480546040517f043a78eb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169163043a78eb9161145a9185918d9101612b31565b602060405180830381865afa158015611477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b9190612b56565b505b61150060405180608001604052808b60600160208101906114be9190612091565b63ffffffff1681526020016114dc61021160808e0160608f01612091565b8152602081018490526040018a90526114fa368a90038a018a612b73565b88611923565b805160405184815291955033917f3131f8d7ad296b074b480a9f6b3a760579632740b870b78725975df31c5da7789060200160405180910390a350505095945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610589565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610b327f000000000000000000000000000000000000000000000000000000000000000083612ba5565b606083838360405160200161131693929190612be0565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166383c4755930898989896040518663ffffffff1660e01b81526004016116e5959493929190612c32565b6040805180830381865afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190612cb7565b8051602090910151909890975095505050505050565b6060828260405160200161177e92919091825260c01b7fffffffffffffffff00000000000000000000000000000000000000000000000016602082015260280190565b604051602081830303815290604052905092915050565b60006117a46020828486612cd3565b6117ad91612cfd565b9392505050565b60006117c4602860208486612cd3565b6117cd91612d39565b60c01c9392505050565b6000610b327f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8416612d7f565b600061185073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001684846119f5565b50919050565b60606118658260288186612cd3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929695505050505050565b6060848484846040516020016118ba9493929190612d96565b6040516020818303038152906040529050949350505050565b6000806118df83611ac9565b9050610b3273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084611b00565b61192b611e82565b825160208401516040517faca1b45a00000000000000000000000000000000000000000000000000000000815260009273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263aca1b45a926119a9918a918990600401612e14565b60806040518083038185885af11580156119c7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906119ec9190612eb3565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106099084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b64565b60007f0000000000000000000000000000000000000000000000000000000000000000611af68184612ba5565b610b329190612d7f565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611b5e9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611a47565b50505050565b6000611bc6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611c739092919063ffffffff16565b9050805160001480611be7575080806020019051810190611be79190612b56565b610609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610589565b6060611c828484600085611c8a565b949350505050565b606082471015611d1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610589565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d459190612f1b565b60006040518083038185875af1925050503d8060008114611d82576040519150601f19603f3d011682016040523d82523d6000602084013e611d87565b606091505b5091509150611d9887838387611da3565b979650505050505050565b60608315611e39578251600003611e325773ffffffffffffffffffffffffffffffffffffffff85163b611e32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610589565b5081611c82565b611c828383815115611e4e5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105899190612f2d565b604051806060016040528060008019168152602001600067ffffffffffffffff168152602001611ec5604051806040016040528060008152602001600081525090565b905290565b60008083601f840112611edc57600080fd5b50813567ffffffffffffffff811115611ef457600080fd5b602083019150836020828501011115611f0c57600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f6a57600080fd5b600080600080600080600087890360e0811215611f5157600080fd5b6060811215611f5f57600080fd5b5087965060608801359550608088013567ffffffffffffffff80821115611f8557600080fd5b611f918b838c01611eca565b909750955060a08a01359150611fa682611f13565b90935060c08901359080821115611fbc57600080fd5b50611fc98a828b01611eca565b989b979a50959850939692959293505050565b60006080828403121561185057600080fd5b60006040828403121561185057600080fd5b6000806000806000610100868803121561201957600080fd5b6120238787611fdc565b9450608086013567ffffffffffffffff81111561203f57600080fd5b61204b88828901611eca565b909550935061205f90508760a08801611fee565b915060e086013561206f81611f13565b809150509295509295909350565b803563ffffffff811681146106f957600080fd5b6000602082840312156120a357600080fd5b6117ad8261207d565b6000602082840312156120be57600080fd5b81356117ad81611f13565b600080602083850312156120dc57600080fd5b823567ffffffffffffffff8111156120f357600080fd5b6120ff85828601611eca565b90969095509350505050565b8015158114610f6a57600080fd5b60008060006060848603121561212e57600080fd5b6121378461207d565b925060208401359150604084013561214e8161210b565b809150509250925092565b6000806040838503121561216c57600080fd5b6121758361207d565b946020939093013593505050565b60008060008060008060e0878903121561219c57600080fd5b6121a68888611fdc565b9550608087013567ffffffffffffffff808211156121c357600080fd5b6121cf8a838b01611eca565b909750955060a089013591506121e48261210b565b90935060c088013590808211156121fa57600080fd5b5061220789828a01611eca565b979a9699509497509295939492505050565b60008060008060c0858703121561222f57600080fd5b6122398686611fdc565b9350608085013567ffffffffffffffff81111561225557600080fd5b61226187828801611eca565b90945092505060a08501356122758161210b565b939692955090935050565b6000806000806000806000610120888a03121561229c57600080fd5b6122a68989611fdc565b9650608088013567ffffffffffffffff808211156122c357600080fd5b6122cf8b838c01611eca565b90985096508691506122e48b60a08c01611fee565b955060e08a013591506122f682611f13565b9093506101008901359080821115611fbc57600080fd5b60008083601f84011261231f57600080fd5b50813567ffffffffffffffff81111561233757600080fd5b6020830191508360208260051b8501011115611f0c57600080fd5b6000806020838503121561236557600080fd5b823567ffffffffffffffff81111561237c57600080fd5b6120ff8582860161230d565b67ffffffffffffffff81168114610f6a57600080fd5b6000602082840312156123b057600080fd5b81356117ad81612388565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156123fb5780818660040360031b1b83161692505b505092915050565b8183823760009101908152919050565b838152818360208301376000910160200190815292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa183360301811261249057600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126124cf57600080fd5b83018035915067ffffffffffffffff8211156124ea57600080fd5b602001915036819003821315611f0c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061254257607f821691505b602082108103611850577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b601f82111561060957600081815260208120601f850160051c810160208610156125a25750805b601f850160051c820191505b818110156125c1578281556001016125ae565b505050505050565b67ffffffffffffffff8311156125e1576125e16124ff565b6125f5836125ef835461252e565b8361257b565b6000601f84116001811461264757600085156126115750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355610a5b565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156126965786850135825560209485019460019092019101612676565b50868210156126d1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612743576127436126e3565b5060010190565b60208082528181018390526000906040808401600586901b8501820187855b888110156128a1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18b36030181126127ca57600080fd5b8a0180358452606063ffffffff6127e289840161207d565b1688860152868201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261281b57600080fd5b90910187810191903567ffffffffffffffff81111561283957600080fd5b80360383131561284857600080fd5b8188870152808287015260809150808383880137600086820183015295880195601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909401909301925090850190600101612769565b509098975050505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261249057600080fd5b6040805190810167ffffffffffffffff81118282101715612906576129066124ff565b60405290565b60005b8381101561292757818101518382015260200161290f565b50506000910152565b60006020828403121561294257600080fd5b815167ffffffffffffffff8082111561295a57600080fd5b818401915084601f83011261296e57600080fd5b815181811115612980576129806124ff565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156129c6576129c66124ff565b816040528281528760208487010111156129df57600080fd5b611d9883602083016020880161290c565b60008151808452612a0881602086016020860161290c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b61ffff83168152604060208201526000611c8260408301846129f0565b73ffffffffffffffffffffffffffffffffffffffff841681528260208201526060604082015260006119ec60608301846129f0565b6000808454612a9a8161252e565b60018281168015612ab25760018114612ae557612b14565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450612b14565b8860005260208060002060005b85811015612b0b5781548a820152908401908201612af2565b50505082870194505b505050508351612b2881836020880161290c565b01949350505050565b604081526000612b4460408301856129f0565b82810360208401526119ec81856129f0565b600060208284031215612b6857600080fd5b81516117ad8161210b565b600060408284031215612b8557600080fd5b612b8d6128e3565b82358152602083013560208201528091505092915050565b600082612bdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8381527fffffffffffffffff0000000000000000000000000000000000000000000000008360c01b16602082015260008251612c2381602885016020870161290c565b91909101602801949350505050565b73ffffffffffffffffffffffffffffffffffffffff8616815263ffffffff8516602082015260a060408201526000612c6d60a08301866129f0565b84151560608401528281036080840152610d7e81856129f0565b600060408284031215612c9957600080fd5b612ca16128e3565b9050815181526020820151602082015292915050565b600060408284031215612cc957600080fd5b6117ad8383612c87565b60008085851115612ce357600080fd5b83861115612cf057600080fd5b5050820193919092039150565b80356020831015610b32577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156123fb5760089490940360031b84901b1690921692915050565b8082028115828204841417610b3257610b326126e3565b7fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b1681527fffffffff000000000000000000000000000000000000000000000000000000008460e01b16600882015282600c82015260008251612e0481602c85016020870161290c565b91909101602c0195945050505050565b6060815263ffffffff84511660608201526020840151608082015260006040850151608060a0840152612e4a60e08401826129f0565b905060608601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08483030160c0850152612e8582826129f0565b9250505083602083015273ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b600060808284031215612ec557600080fd5b6040516060810181811067ffffffffffffffff82111715612ee857612ee86124ff565b604052825181526020830151612efd81612388565b6020820152612f0f8460408501612c87565b60408201529392505050565b6000825161249081846020870161290c565b6020815260006117ad60208301846129f056fea2646970667358221220dda9ebee3eeb29b68990bae15749fef444d2c7a5ee8deb1c85b426a7805e3c6a64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "uint8";
            readonly name: "_localDecimals";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "PreCrimeOnly";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPrecrime";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inspector";
        readonly outputs: readonly [{
            readonly internalType: "contract IInspector";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "contract IPreCrime";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendAndCallFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "sendAndCall";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setEndpointConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "setInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPrecrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OFTAdapterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OFTAdapter;
}

declare class OFTCore__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amountLDSend";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_minAmountLD";
            readonly type: "uint256";
        }];
        readonly name: "AmountSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LDMinusSD";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "PreCrimeOnly";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_toAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_fromAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_amountLD";
            readonly type: "uint256";
        }];
        readonly name: "SendOFT";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "SetEnforcedOption";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "SetInspector";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPrecrime";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "inspector";
        readonly outputs: readonly [{
            readonly internalType: "contract IInspector";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "contract IPreCrime";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "quoteSendAndCallFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_useLZToken";
            readonly type: "bool";
        }];
        readonly name: "quoteSendFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmountLD";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IOFT.SendParam";
            readonly name: "_send";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraOptions";
            readonly type: "bytes";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "_msgFee";
            readonly type: "tuple";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_composeMsg";
            readonly type: "bytes";
        }];
        readonly name: "sendAndCall";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "msgReceipt";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setEndpointConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "executionType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOFT.EnforcedOptionParam[]";
            readonly name: "_enforcedOptions";
            readonly type: "tuple[]";
        }];
        readonly name: "setEnforcedOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_inspector";
            readonly type: "address";
        }];
        readonly name: "setInspector";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPrecrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "sharedDecimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "token";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OFTCoreInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OFTCore;
}

type OFTPrecrimeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OFTPrecrime__factory extends ContractFactory {
    constructor(...args: OFTPrecrimeConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _oft: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OFTPrecrime>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _oft: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OFTPrecrime;
    connect(signer: Signer): OFTPrecrime__factory;
    static readonly bytecode = "0x60c06040523480156200001157600080fd5b5060405162002a9738038062002a97833981016040819052620000349162000114565b8180806001600160a01b03166080816001600160a01b0316815250506080516001600160a01b031663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b791906200014c565b63ffffffff1660a052505060008054336001600160a01b031991821617909155600480549091166001600160a01b0392909216919091179055506200017b565b80516001600160a01b03811681146200010f57600080fd5b919050565b600080604083850312156200012857600080fd5b6200013383620000f7565b91506200014360208401620000f7565b90509250929050565b6000602082840312156200015f57600080fd5b815163ffffffff811681146200017457600080fd5b9392505050565b60805160a0516128ef620001a860003960008181610ba301526110280152600061134901526128ef6000f3fe6080604052600436106101295760003560e01c80637a4359d5116100a5578063d2968d5711610074578063e64246d911610059578063e64246d9146103b5578063e780f254146103cb578063fd4c212e146103eb57600080fd5b8063d2968d5714610366578063e51ac4b01461038857600080fd5b80637a4359d5146102c157806392d99a7f146102e157806399877564146103015780639b5215f61461031457600080fd5b80632c79305d116100fc57806354b3ab69116100e157806354b3ab69146102545780635bf88a00146102815780636ece7d36146102a157600080fd5b80632c79305d146101e657806330515e561461020257600080fd5b806312fb9ea51461012e57806328318b621461016157806328a0b4e11461018f57806329c24628146101b1575b600080fd5b34801561013a57600080fd5b5061014e610149366004611b27565b6103fe565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c366004611b85565b61041f565b604051610158929190611c5f565b34801561019b57600080fd5b506101af6101aa366004611b27565b610599565b005b3480156101bd57600080fd5b506101d16101cc366004611b27565b610624565b60405163ffffffff9091168152602001610158565b3480156101f257600080fd5b5060405160018152602001610158565b34801561020e57600080fd5b5060005461023b9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610158565b34801561026057600080fd5b5061014e61026f366004611c9d565b60036020526000908152604090205481565b34801561028d57600080fd5b506101af61029c366004611e18565b61065e565b3480156102ad57600080fd5b506101af6102bc366004611ef1565b610781565b3480156102cd57600080fd5b506101816102dc366004611f0e565b610855565b3480156102ed57600080fd5b506101af6102fc366004611f72565b6108bd565b61018161030f366004611f0e565b610985565b34801561032057600080fd5b506004546103419073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610158565b34801561037257600080fd5b5061037b610bf0565b6040516101589190611f8f565b34801561039457600080fd5b506000546103419073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103c157600080fd5b5061014e60055481565b3480156103d757600080fd5b5061037b6103e6366004611f0e565b610e18565b6101af6103f9366004611f0e565b610e76565b6002818154811061040e57600080fd5b600091825260209091200154905081565b60006060818367ffffffffffffffff81111561043d5761043d611cbf565b60405190808252806020026020018201604052801561047057816020015b606081526020019060019003908161045b5790505b50905060008467ffffffffffffffff81111561048e5761048e611cbf565b6040519080825280602002602001820160405280156104b7578160200160208202803683370190505b50905060005b8581101561055d576000808888848181106104da576104da611fa2565b90506020028101906104ec9190611fd1565b8101906104f991906120cd565b915091508184848151811061051057610510611fa2565b602002602001019063ffffffff16908163ffffffff16815250508085848151811061053d5761053d611fa2565b60200260200101819052505050808061055590612140565b9150506104bd565b50610569888883610f26565b909450925061ffff84161561057f575050610590565b610588826110f0565b909450925050505b94509492505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461061f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600555565b6001818154811061063457600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610616565b81516106f2906001906020850190611a28565b508051610706906002906020840190611ad7565b5060005b825181101561077c5781818151811061072557610725611fa2565b60200260200101516003600085848151811061074357610743611fa2565b602002602001015163ffffffff1663ffffffff16815260200190815260200160002081905550808061077490612140565b91505061070a565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610802576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610616565b6000805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152600090606090606401610616565b60005473ffffffffffffffffffffffffffffffffffffffff16331461093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610616565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600060606109938484611225565b909250905061ffff8216610be9576000803073ffffffffffffffffffffffffffffffffffffffff163463fd4c212e60e01b88886040516024016109d7929190612225565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610a609190612353565b60006040518083038185875af1925050503d8060008114610a9d576040519150601f19603f3d011682016040523d82523d6000602084013e610aa2565b606091505b5090925090503415610adc5760405133903480156108fc02916000818181858888f19350505050158015610ada573d6000803e3d6000fd5b505b8115610b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f73696d756c6174652073686f756c64206e657665722072657475726e2073756360448201527f63657373000000000000000000000000000000000000000000000000000000006064820152608401610616565b610b93817f3ef053020000000000000000000000000000000000000000000000000000000061152e565b909450925061ffff8416610be6577f000000000000000000000000000000000000000000000000000000000000000083604051602001610bd492919061236f565b60405160208183030381529060405292505b50505b9250929050565b60048054604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905160609360009373ffffffffffffffffffffffffffffffffffffffff169263fc0c546a92818301926020928290030181865afa158015610c60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c84919061238e565b60045490915073ffffffffffffffffffffffffffffffffffffffff80831691161415600081610d435760048054604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff909216926318160ddd9282820192602092908290030181865afa158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e91906123ab565b610dd9565b600480546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff918216928101929092528416906370a0823190602401602060405180830381865afa158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd991906123ab565b60408051808201825282815293151560209485019081528151948501929092529051151583820152805180840382018152606090930190525092915050565b6060600080610e2785856115b2565b915091506001600060149054906101000a900467ffffffffffffffff1683518484604051602001610e5c9594939291906123c4565b604051602081830303815290604052925050505b92915050565b333014610edf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5072656372696d653a206f6e6c792073656c66000000000000000000000000006044820152606401610616565b600080610eec8484611694565b9150915081816040517f3ef05302000000000000000000000000000000000000000000000000000000008152600401610616929190611c5f565b600060608315611019576000610f3c86866115b2565b50905060005b8151811015611016576000805b8651811015610fb857838381518110610f6a57610f6a611fa2565b602002602001015163ffffffff16878281518110610f8a57610f8a611fa2565b602002602001015163ffffffff1603610fa65760019150610fb8565b80610fb081612140565b915050610f4f565b5080611003576101926040518060400160405280601e81526020017f6d697373696e6720706565722073696d756c6174696f6e20726573756c740000815250945094505050506110e8565b508061100e81612140565b915050610f42565b50505b6000805b845181101561108d577f000000000000000000000000000000000000000000000000000000000000000063ffffffff1685828151811061105f5761105f611fa2565b602002602001015163ffffffff160361107b576001915061108d565b8061108581612140565b91505061101d565b50806110d357505060408051808201909152601f81527f6d697373696e67206c6f63616c2073696d756c6174696f6e20726573756c7400602082015261019291506110e8565b50506040805160208101909152600080825291505b935093915050565b600554600090606090829081805b86518110156111a057600087828151811061111b5761111b611fa2565b60200260200101518060200190518101906111369190612488565b905080602001511561117e57821561117157600160405180606001604052806027815260200161283260279139965096505050505050915091565b805193506001925061118d565b805161118a90866124e3565b94505b508061119881612140565b9150506110fe565b508080156111ad57508183115b156111d95760016040518060600160405280603081526020016128596030913994509450505050915091565b8183146112075760016040518060600160405280603181526020016128896031913994509450505050915091565b60006040518060200160405280600081525094509450505050915091565b6000805460609074010000000000000000000000000000000000000000900467ffffffffffffffff168311156112af57600054610190906112879074010000000000000000000000000000000000000000900467ffffffffffffffff16611888565b60405160200161129791906124f6565b60405160208183030381529060405291509150610be9565b82156115145760008080805b8681101561150f5760008888838181106112d7576112d7611fa2565b90506020028101906112e9919061253b565b6112f29061256f565b80515190915063ffffffff868116911614158061131457508051602001518414155b15611495578051805160208201516040909201519096509094509250600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a0dd43fc61138d60045473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015263ffffffff8916602482015260448101889052606401602060405180830381865afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d9190612631565b61143890600161264e565b90508067ffffffffffffffff168467ffffffffffffffff161461148f5761019161146184611888565b6040516020016114719190612676565b60405160208183030381529060405297509750505050505050610be9565b506114fc565b61149e836126e1565b92508267ffffffffffffffff1681600001516040015167ffffffffffffffff16146114fc576101916114cf83611888565b6040516020016114df9190612708565b604051602081830303815290604052965096505050505050610be9565b508061150781612140565b9150506112bb565b505050505b505060408051602081019091526000808252909250929050565b600060607fffffffff00000000000000000000000000000000000000000000000000000000831661155e8561274d565b7fffffffff00000000000000000000000000000000000000000000000000000000161461158d57835160208501fd5b600484019350838060200190518101906115a7919061279d565b915091509250929050565b606080600160028180548060200260200160405190810160405280929190818152602001828054801561163057602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116115f35790505b505050505091508080548060200260200160405190810160405280929190818152602001828054801561168257602002820191906000526020600020905b81548152602001906001019080831161166e575b50505050509050915091509250929050565b6004546040516000916060918391829173ffffffffffffffffffffffffffffffffffffffff9091169034907ff5c6ba5a00000000000000000000000000000000000000000000000000000000906116f1908a908a90602401612225565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161177a9190612353565b60006040518083038185875af1925050503d80600081146117b7576040519150601f19603f3d011682016040523d82523d6000602084013e6117bc565b606091505b5091509150811561184f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f4f46545072656372696d653a2073696d756c6174696f6e43616c6c6261636b2060448201527f73686f756c642062652063616c6c6564207669612072657665727400000000006064820152608401610616565b611879817f0a78da8f0000000000000000000000000000000000000000000000000000000061152e565b60009890975095505050505050565b6060600061189583611946565b600101905060008167ffffffffffffffff8111156118b5576118b5611cbf565b6040519080825280601f01601f1916602001820160405280156118df576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846118e957509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061198f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106119bb576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106119d957662386f26fc10000830492506010015b6305f5e10083106119f1576305f5e100830492506008015b6127108310611a0557612710830492506004015b60648310611a17576064830492506002015b600a8310610e705760010192915050565b82805482825590600052602060002090600701600890048101928215611ac75791602002820160005b83821115611a9557835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302611a51565b8015611ac55782816101000a81549063ffffffff0219169055600401602081600301049283019260010302611a95565b505b50611ad3929150611b12565b5090565b828054828255906000526020600020908101928215611ac7579160200282015b82811115611ac7578251825591602001919060010190611af7565b5b80821115611ad35760008155600101611b13565b600060208284031215611b3957600080fd5b5035919050565b60008083601f840112611b5257600080fd5b50813567ffffffffffffffff811115611b6a57600080fd5b6020830191508360208260051b8501011115610be957600080fd5b60008060008060408587031215611b9b57600080fd5b843567ffffffffffffffff80821115611bb357600080fd5b611bbf88838901611b40565b90965094506020870135915080821115611bd857600080fd5b50611be587828801611b40565b95989497509550505050565b60005b83811015611c0c578181015183820152602001611bf4565b50506000910152565b60008151808452611c2d816020860160208601611bf1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b61ffff83168152604060208201526000611c7c6040830184611c15565b949350505050565b803563ffffffff81168114611c9857600080fd5b919050565b600060208284031215611caf57600080fd5b611cb882611c84565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611d1157611d11611cbf565b60405290565b6040516060810167ffffffffffffffff81118282101715611d1157611d11611cbf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611d8157611d81611cbf565b604052919050565b600067ffffffffffffffff821115611da357611da3611cbf565b5060051b60200190565b600082601f830112611dbe57600080fd5b81356020611dd3611dce83611d89565b611d3a565b82815260059290921b84018101918181019086841115611df257600080fd5b8286015b84811015611e0d5780358352918301918301611df6565b509695505050505050565b60008060408385031215611e2b57600080fd5b823567ffffffffffffffff80821115611e4357600080fd5b818501915085601f830112611e5757600080fd5b81356020611e67611dce83611d89565b82815260059290921b84018101918181019089841115611e8657600080fd5b948201945b83861015611eab57611e9c86611c84565b82529482019490820190611e8b565b96505086013592505080821115611ec157600080fd5b50611ece85828601611dad565b9150509250929050565b67ffffffffffffffff81168114611eee57600080fd5b50565b600060208284031215611f0357600080fd5b8135611cb881611ed8565b60008060208385031215611f2157600080fd5b823567ffffffffffffffff811115611f3857600080fd5b611f4485828601611b40565b90969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611eee57600080fd5b600060208284031215611f8457600080fd5b8135611cb881611f50565b602081526000611cb86020830184611c15565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261200657600080fd5b83018035915067ffffffffffffffff82111561202157600080fd5b602001915036819003821315610be957600080fd5b600067ffffffffffffffff82111561205057612050611cbf565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261208d57600080fd5b813561209b611dce82612036565b8181528460208386010111156120b057600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156120e057600080fd5b6120e983611c84565b9150602083013567ffffffffffffffff81111561210557600080fd5b611ece8582860161207c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361217157612171612111565b5060010190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126121ad57600080fd5b830160208101925035905067ffffffffffffffff8111156121cd57600080fd5b803603821315610be957600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60208082528181018390526000906040808401600586901b850182018785805b89811015612344577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089850301855282357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff418c36030181126122a5578283fd5b8b0160c063ffffffff6122b783611c84565b1686528882013589870152878201356122cf81611ed8565b67ffffffffffffffff16868901526060828101359087015260806122f581840184612178565b83838a0152612307848a0182846121dc565b935050505060a061231a81840184612178565b93508783038289015261232e8385836121dc565b988b019897505050938801935050600101612245565b50919998505050505050505050565b60008251612365818460208701611bf1565b9190910192915050565b63ffffffff83168152604060208201526000611c7c6040830184611c15565b6000602082840312156123a057600080fd5b8151611cb881611f50565b6000602082840312156123bd57600080fd5b5051919050565b7fffff0000000000000000000000000000000000000000000000000000000000008660f01b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b16600282015283600a8201526000602a82018451602080870160005b8381101561244f57815163ffffffff168552938201939082019060010161242d565b5050855181870193925060005b818110156124785784518452938201939282019260010161245c565b50919a9950505050505050505050565b60006040828403121561249a57600080fd5b6040516040810181811067ffffffffffffffff821117156124bd576124bd611cbf565b60405282518152602083015180151581146124d757600080fd5b60208201529392505050565b80820180821115610e7057610e70612111565b7f7061636b6574732073697a6520657863656564206c696d69746564200000000081526000825161252e81601c850160208701611bf1565b91909101601c0192915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261236557600080fd5b600081360360c081121561258257600080fd5b61258a611cee565b606082121561259857600080fd5b6125a0611d17565b91506125ab84611c84565b82526020840135602083015260408401356125c581611ed8565b60408301529081526060830135602082015260808301359067ffffffffffffffff808311156125f357600080fd5b6125ff3684870161207c565b604083015260a085013592508083111561261857600080fd5b506126253683860161207c565b60608201529392505050565b60006020828403121561264357600080fd5b8151611cb881611ed8565b67ffffffffffffffff81811683821601908082111561266f5761266f612111565b5092915050565b7f736b697070656420696e626f756e644e6f6e63652c207061636b657420696e6481527f65783a20000000000000000000000000000000000000000000000000000000006020820152600082516126d4816024850160208701611bf1565b9190910160240192915050565b600067ffffffffffffffff8083168181036126fe576126fe612111565b6001019392505050565b7f756e736f72746564207061636b6574732c207061636b657420696e6465783a20815260008251612740816020850160208701611bf1565b9190910160200192915050565b6000815160208301517fffffffff00000000000000000000000000000000000000000000000000000000808216935060048310156127955780818460040360031b1b83161693505b505050919050565b600080604083850312156127b057600080fd5b825161ffff811681146127c257600080fd5b602084015190925067ffffffffffffffff8111156127df57600080fd5b8301601f810185136127f057600080fd5b80516127fe611dce82612036565b81815286602083850101111561281357600080fd5b612824826020830160208601611bf1565b809350505050925092905056fe4f46545072656372696d653a206d756c7469706c65204f4654416461707465727320666f756e644f46545072656372696d653a20676c6f62616c537570706c79203e206578706563746564476c6f62616c537570706c794f46545072656372696d653a20676c6f62616c537570706c7920213d206578706563746564476c6f62616c537570706c79a2646970667358221220abee2129dcdf447dea6f6a9974f4496be60136962b7c4c0a8c14898c44cb8c3264736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_oft";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "SimulateRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EXPECTED_GLOBAL_SUPPLY";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "_simulateAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "getPrecrimeConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "oft";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pMaxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulation";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "precrimeEidToPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimeEids";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimePeers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrimeVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_globalSupply";
            readonly type: "uint256";
        }];
        readonly name: "setGlobalSupply";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setPrecrimeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setPrecrimeMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_peers";
            readonly type: "bytes32[]";
        }];
        readonly name: "setPrecrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly name: "simulateView";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulationCallback";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): OFTPrecrimeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OFTPrecrime;
}

type index$a_Fee__factory = Fee__factory;
declare const index$a_Fee__factory: typeof Fee__factory;
type index$a_OFTAdapter__factory = OFTAdapter__factory;
declare const index$a_OFTAdapter__factory: typeof OFTAdapter__factory;
type index$a_OFTCore__factory = OFTCore__factory;
declare const index$a_OFTCore__factory: typeof OFTCore__factory;
type index$a_OFTPrecrime__factory = OFTPrecrime__factory;
declare const index$a_OFTPrecrime__factory: typeof OFTPrecrime__factory;
type index$a_OFT__factory = OFT__factory;
declare const index$a_OFT__factory: typeof OFT__factory;
declare namespace index$a {
  export {
    index$a_Fee__factory as Fee__factory,
    index$a_OFTAdapter__factory as OFTAdapter__factory,
    index$a_OFTCore__factory as OFTCore__factory,
    index$a_OFTPrecrime__factory as OFTPrecrime__factory,
    index$a_OFT__factory as OFT__factory,
    index$c as interfaces,
    index$b as mocks,
  };
}

declare namespace index$9 {
  export {
    index$a as oft,
  };
}

declare class ILayerZeroVerifier__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ILayerZeroVerifierInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILayerZeroVerifier;
}

declare class IUlnConfig__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfigByType";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultConfigByType";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnAndOutboundConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "outboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct OutboundConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfigByType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "outboundConfirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct OutboundConfigStruct";
                readonly name: "outboundConfig";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }];
            readonly internalType: "struct SetDefaultConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IUlnConfigInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IUlnConfig;
}

declare class IUltraLightNode__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliverable";
        readonly outputs: readonly [{
            readonly internalType: "enum IMessageLibBase.DeliveryState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IUltraLightNodeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IUltraLightNode;
}

declare class IVerifier__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly name: "AssignJob";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IVerifier.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "SetDstConfig";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IVerifierInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IVerifier$3;
}

declare class IVerifierFeeLib__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IVerifierFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IVerifier.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IVerifierFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IVerifier.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IVerifierFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IVerifierFeeLib$1;
}

type index$8_ILayerZeroVerifier__factory = ILayerZeroVerifier__factory;
declare const index$8_ILayerZeroVerifier__factory: typeof ILayerZeroVerifier__factory;
type index$8_IUlnConfig__factory = IUlnConfig__factory;
declare const index$8_IUlnConfig__factory: typeof IUlnConfig__factory;
type index$8_IUltraLightNode__factory = IUltraLightNode__factory;
declare const index$8_IUltraLightNode__factory: typeof IUltraLightNode__factory;
type index$8_IVerifierFeeLib__factory = IVerifierFeeLib__factory;
declare const index$8_IVerifierFeeLib__factory: typeof IVerifierFeeLib__factory;
type index$8_IVerifier__factory = IVerifier__factory;
declare const index$8_IVerifier__factory: typeof IVerifier__factory;
declare namespace index$8 {
  export {
    index$8_ILayerZeroVerifier__factory as ILayerZeroVerifier__factory,
    index$8_IUlnConfig__factory as IUlnConfig__factory,
    index$8_IUltraLightNode__factory as IUltraLightNode__factory,
    index$8_IVerifierFeeLib__factory as IVerifierFeeLib__factory,
    index$8_IVerifier__factory as IVerifier__factory,
  };
}

declare class IMessageLibE1__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInZRO";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_adapterParam";
            readonly type: "bytes";
        }];
        readonly name: "estimateFees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "zroFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "_lastNonce";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_destination";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "address payable";
            readonly name: "refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_zroPaymentAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_adapterParams";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setLayerZeroToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IMessageLibE1Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMessageLibE1;
}

declare class ITreasuryFeeHandler__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzTokenPaymentAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_required";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_supplied";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "payFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ITreasuryFeeHandlerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ITreasuryFeeHandler;
}

declare class IUltraLightNode301__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packet";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "deliver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IUltraLightNode301Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): IUltraLightNode301;
}

type index$7_IMessageLibE1__factory = IMessageLibE1__factory;
declare const index$7_IMessageLibE1__factory: typeof IMessageLibE1__factory;
type index$7_ITreasuryFeeHandler__factory = ITreasuryFeeHandler__factory;
declare const index$7_ITreasuryFeeHandler__factory: typeof ITreasuryFeeHandler__factory;
type index$7_IUltraLightNode301__factory = IUltraLightNode301__factory;
declare const index$7_IUltraLightNode301__factory: typeof IUltraLightNode301__factory;
declare namespace index$7 {
  export {
    index$7_IMessageLibE1__factory as IMessageLibE1__factory,
    index$7_ITreasuryFeeHandler__factory as ITreasuryFeeHandler__factory,
    index$7_IUltraLightNode301__factory as IUltraLightNode301__factory,
  };
}

declare class MessageLibBaseE1__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "srcChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "srcAddress";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dstAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidDst";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "addressSizes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "option";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "estimateFees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "zroFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_path";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzTokenPaymentAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_size";
            readonly type: "uint256";
        }];
        readonly name: "setAddressSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_userApplication";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "setDefaultOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_layerZeroToken";
            readonly type: "address";
        }];
        readonly name: "setLayerZeroToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessageLibBaseE1Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessageLibBaseE1;
}

type NonceContractConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class NonceContract__factory extends ContractFactory {
    constructor(...args: NonceContractConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<NonceContract>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): NonceContract;
    connect(signer: Signer): NonceContract__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060405161060038038061060083398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161056f61009160003960008181604b0152610150015261056f6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635e280f11146100465780636fe7b67314610097578063c533338f146100c3575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100aa6100a5366004610318565b610106565b60405167ffffffffffffffff909116815260200161008e565b6100aa6100d13660046103d7565b6000602081815292815260409020815180830184018051928152908401929093019190912091525467ffffffffffffffff1681565b6040517f9c729da100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009133917f00000000000000000000000000000000000000000000000000000000000000001690639c729da190602401602060405180830381865afa158015610197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bb91906104b7565b73ffffffffffffffffffffffffffffffffffffffff1614610262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4e6f6e6365436f6e74726163743a206d73672e73656e646572206973206e6f7460448201527f2076616c69642073656e646c6962726172790000000000000000000000000000606482015260840160405180910390fd5b61ffff851660009081526020819052604090819020905161028690859085906104db565b90815260405190819003602001902080546000906102ad9067ffffffffffffffff166104eb565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790559050949350505050565b803561ffff811681146102ee57600080fd5b919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461031557600080fd5b50565b6000806000806060858703121561032e57600080fd5b610337856102dc565b93506020850135610347816102f3565b9250604085013567ffffffffffffffff8082111561036457600080fd5b818701915087601f83011261037857600080fd5b81358181111561038757600080fd5b88602082850101111561039957600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156103ea57600080fd5b6103f3836102dc565b9150602083013567ffffffffffffffff8082111561041057600080fd5b818501915085601f83011261042457600080fd5b813581811115610436576104366103a8565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561047c5761047c6103a8565b8160405282815288602084870101111561049557600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156104c957600080fd5b81516104d4816102f3565b9392505050565b8183823760009101908152919050565b600067ffffffffffffffff80831681810361052f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600101939250505056fea26469706673582212209b47e3a63bdaa3a265f62cc88f12de6cc0687a3d53e700d909e594cfc2d7a81464736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpoint";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_chainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_ua";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_path";
            readonly type: "bytes";
        }];
        readonly name: "increment";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "path";
            readonly type: "bytes";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): NonceContractInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): NonceContract;
}

type TreasuryFeeHandlerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class TreasuryFeeHandler__factory extends ContractFactory {
    constructor(...args: TreasuryFeeHandlerConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TreasuryFeeHandler>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TreasuryFeeHandler;
    connect(signer: Signer): TreasuryFeeHandler__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506106e3806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806367f8d2f214610030575b600080fd5b61004361003e36600461058d565b610045565b005b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610094575073ffffffffffffffffffffffffffffffffffffffff841632145b6040518060400160405280600781526020017f4c5a3130303030000000000000000000000000000000000000000000000000008152509061010b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101029190610617565b60405180910390fd5b5060408051808201909152600781527f4c5a31303030330000000000000000000000000000000000000000000000000060208201528284111561017b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101029190610617565b5061019e73ffffffffffffffffffffffffffffffffffffffff87168583866101a6565b505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261023b908590610241565b50505050565b60006102a3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166103559092919063ffffffff16565b90508051600014806102c45750808060200190518101906102c49190610668565b610350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610102565b505050565b6060610364848460008561036c565b949350505050565b6060824710156103fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610102565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516104279190610691565b60006040518083038185875af1925050503d8060008114610464576040519150601f19603f3d011682016040523d82523d6000602084013e610469565b606091505b509150915061047a87838387610485565b979650505050505050565b6060831561051b5782516000036105145773ffffffffffffffffffffffffffffffffffffffff85163b610514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610102565b5081610364565b61036483838151156105305781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101029190610617565b803573ffffffffffffffffffffffffffffffffffffffff8116811461058857600080fd5b919050565b60008060008060008060c087890312156105a657600080fd5b6105af87610564565b95506105bd60208801610564565b94506105cb60408801610564565b935060608701359250608087013591506105e760a08801610564565b90509295509295509295565b60005b8381101561060e5781810151838201526020016105f6565b50506000910152565b60208152600082518060208401526106368160408501602087016105f3565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561067a57600080fd5b8151801515811461068a57600080fd5b9392505050565b600082516106a38184602087016105f3565b919091019291505056fea26469706673582212204b7286c5fd2b4fc56df90f4dc3258f322acb742a157f452e87da7514ad6c383864736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzTokenPaymentAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_required";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_supplied";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "payFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): TreasuryFeeHandlerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TreasuryFeeHandler;
}

type UltraLightNode301ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class UltraLightNode301__factory extends ContractFactory {
    constructor(...args: UltraLightNode301ConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _treasuryGasCap: PromiseOrValue<BigNumberish>, _nonceContract: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _treasuryFeeHandler: PromiseOrValue<string>, _ulnConfig: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<UltraLightNode301>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _treasuryGasCap: PromiseOrValue<BigNumberish>, _nonceContract: PromiseOrValue<string>, _localEid: PromiseOrValue<BigNumberish>, _treasuryFeeHandler: PromiseOrValue<string>, _ulnConfig: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): UltraLightNode301;
    connect(signer: Signer): UltraLightNode301__factory;
    static readonly bytecode = "0x6101606040523480156200001257600080fd5b5060405162005a0b38038062005a0b833981016040819052620000359162000109565b6001600160a01b038116608052856001868686868582868662000058336200009a565b6001600160a01b0393841660a05263ffffffff90921660c05260ff1660e052610100529283166101205290911661014052506200018b98505050505050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146200010457600080fd5b919050565b60008060008060008060c087890312156200012357600080fd5b6200012e87620000ec565b9550602087015194506200014560408801620000ec565b9350606087015163ffffffff811681146200015f57600080fd5b92506200016f60808801620000ec565b91506200017f60a08801620000ec565b90509295509295509295565b60805160a05160c05160e0516101005161012051610140516157d16200023a6000396000611639015260006123b7015260006122cb01526000818161140801526118570152600081816118de0152818161245401526125520152600081816105dd015281816110bb01528181611b100152611ca50152600081816107f60152818161093c01528181610ad901528181610d030152818161114d015281816129680152612c3801526157d16000f3fe60806040526004361061018b5760003560e01c8063715018a6116100d6578063e9817f341161007f578063f8e1734c11610059578063f8e1734c14610503578063faaebd2114610523578063fd9be5221461055057600080fd5b8063e9817f34146104a3578063f0f44260146104c3578063f2fde38b146104e357600080fd5b8063a5972ec5116100b0578063a5972ec514610433578063c773417314610463578063df1e309f1461048357600080fd5b8063715018a6146103c65780637c0cf763146103db5780638da5cb5b1461040857600080fd5b806352d3b5001161013857806361d027b31161011257806361d027b314610334578063690c6555146103865780636d26e5d0146103a657600080fd5b806352d3b500146102c757806354fd4d50146102e757806356fe19be1461031457600080fd5b806340a7bb101161016957806340a7bb10146102525780634d3a0f7c1461028757806352d2871f1461029a57600080fd5b80630223536e146101905780630f8355c0146101b25780633c782a52146101f2575b600080fd5b34801561019c57600080fd5b506101b06101ab366004614257565b610570565b005b3480156101be57600080fd5b506101df6101cd3660046142c8565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101fe57600080fd5b5061023961020d366004614312565b6000602081815293815260408082208552928152828120909352825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101e9565b34801561025e57600080fd5b5061027261026d366004614376565b610582565b604080519283526020830191909152016101e9565b6101b061029536600461441e565b6105a7565b3480156102a657600080fd5b506102ba6102b5366004614512565b610798565b6040516101e991906145a1565b3480156102d357600080fd5b506101b06102e23660046145b4565b610870565b3480156102f357600080fd5b506040805160038152600060208201526001918101919091526060016101e9565b34801561032057600080fd5b506101b061032f3660046145d1565b6108bf565b34801561034057600080fd5b506002546103619073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e9565b34801561039257600080fd5b506102ba6103a136600461461d565b610a9a565b3480156103b257600080fd5b506101b06103c1366004614656565b610b66565b3480156103d257600080fd5b506101b0610c4a565b3480156103e757600080fd5b506103fb6103f63660046145d1565b610c5e565b6040516101e991906146af565b34801561041457600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff16610361565b34801561043f57600080fd5b5061045361044e36600461482c565b610d90565b60405190151581526020016101e9565b34801561046f57600080fd5b5061045361047e366004614935565b610e88565b34801561048f57600080fd5b506101b061049e366004614974565b610ed7565b3480156104af57600080fd5b506102ba6104be3660046142c8565b610eff565b3480156104cf57600080fd5b506101b06104de3660046145b4565b610f99565b3480156104ef57600080fd5b506101b06104fe3660046145b4565b610fe8565b34801561050f57600080fd5b506101b061051e3660046149c9565b611085565b34801561052f57600080fd5b506101df61053e3660046145b4565b60046020526000908152604090205481565b34801561055c57600080fd5b506101b061056b366004614a3a565b6111c3565b61057c84848484611231565b50505050565b6000806105978861ffff8b16888888886112ef565b9150915097509795505050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461063a5760405162461bcd60e51b815260040161063191906145a1565b60405180910390fd5b5060008060006106508e8d8d8d8d8d8b8b6113ed565b9194509250905061ffff8c168e600073ffffffffffffffffffffffffffffffffffffffff89161580159061069b575060055473ffffffffffffffffffffffffffffffffffffffff1615155b90506000806106ac848688866114b0565b90925090506106bb8287614a87565b9550348611156040518060400160405280600781526020017f4c5a313030303300000000000000000000000000000000000000000000000000815250906107155760405162461bcd60e51b815260040161063191906145a1565b5060006107228734614a9a565b90508015610734576107348d82611510565b811561074557610745858d846115c8565b7f3dc6f2ede34d1db05729bbb76e5efd17ec1bc83f98f665e7fba0596dca438b96888a898560405161077a9493929190614aad565b60405180910390a15050505050505050505050505050505050505050565b6040517f8fd061fc00000000000000000000000000000000000000000000000000000000815261ffff8416600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015263ffffffff831660448301526060917f000000000000000000000000000000000000000000000000000000000000000090911690638fd061fc90606401600060405180830381865afa15801561083f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108679190810190614b55565b50949350505050565b61087861169c565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006108cb8484611703565b905060006108e76108dc8686611715565b63ffffffff16611738565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015261ffff831660248301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906343ea4fa990604401600060405180830381865afa158015610983573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ab9190810190614cec565b905060026109cc826109bd89896117b6565b6109c78b8b6117d2565b6117fc565b60038111156109dd576109dd614680565b146040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a325760405162461bcd60e51b815260040161063191906145a1565b50610a9282610a4188886119a9565b85610a4c8a8a6119c2565b610a568b8b6119e5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92506119f5915050565b505050505050565b6040517f560042df00000000000000000000000000000000000000000000000000000000815263ffffffff8084166004830152821660248201526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063560042df90604401600060405180830381865afa158015610b35573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b5d9190810190614d21565b90505b92915050565b610b6e61169c565b60208111156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090610bc75760405162461bcd60e51b815260040161063191906145a1565b5061ffff8216600090815260066020908152604091829020548251808401909352600783527f4c5a3830303030000000000000000000000000000000000000000000000000009183019190915215610c325760405162461bcd60e51b815260040161063191906145a1565b5061ffff909116600090815260066020526040902055565b610c5261169c565b610c5c6000611c18565b565b600080610c6b8585611703565b90506000610c7c6108dc8787611715565b90506000610c8c82848989611c8f565b90506001816003811115610ca257610ca2614680565b14610cb1579250610d89915050565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015261ffff841660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906343ea4fa990604401600060405180830381865afa158015610d4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d749190810190614cec565b9050610d82818989896117fc565b9450505050505b9392505050565b8251600090815b856060015160ff16811015610de657610dcf8660c001518281518110610dbf57610dbf614d56565b6020026020010151868685610e88565b610dde57600092505050610d89565b600101610d97565b506000856060015160ff16118015610e035750608085015160ff16155b15610e12576001915050610d89565b6000805b866080015160ff16811015610e7b57610e4e8760e001518281518110610e3e57610e3e614d56565b6020026020010151878786610e88565b15610e73578160010191508660a0015160ff168210610e735760019350505050610d89565b600101610e16565b5060009695505050505050565b600083815260208181526040808320858452825280832073ffffffffffffffffffffffffffffffffffffffff8816845290915290205467ffffffffffffffff828116911610155b949350505050565b610edf61169c565b63ffffffff8316600090815260036020526040902061057c828483614e1e565b60036020526000908152604090208054610f1890614d85565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4490614d85565b8015610f915780601f10610f6657610100808354040283529160200191610f91565b820191906000526020600020905b815481529060010190602001808311610f7457829003601f168201915b505050505081565b610fa161169c565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610ff061169c565b73ffffffffffffffffffffffffffffffffffffffff81166110795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610631565b61108281611c18565b50565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461110f5760405162461bcd60e51b815260040161063191906145a1565b506040517fd59104ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d59104ed9061118a9088908890889088908890600401614f46565b600060405180830381600087803b1580156111a457600080fd5b505af11580156111b8573d6000803e3d6000fd5b505050505050505050565b6111cd8282611fb2565b6111d78282611510565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201529081018290527f820b7fd51bf79c54350bab98400651b3314ff6e79b33528821871d94a66698839060600160405180910390a15050565b806000808686604051611245929190614f97565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352935281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff949094169390931790925590517fd57606ee258836ec1b40f83a128d2b514581eaf4f71801fbed3bc94b5358ecc0916112e1918790879086908890614fa7565b60405180910390a150505050565b600080600080611300898787612063565b925092505060008060006113158d8d8661216e565b9250925092506113258b8261218d565b8173ffffffffffffffffffffffffffffffffffffffff1663709eb6648d8f8e896040518563ffffffff1660e01b81526004016113649493929190614ff5565b602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190615040565b6113af9084614a87565b92506000806113c08f8f878f6121e7565b909250905081156113d8576113d58286614a87565b94505b939e939d50929b505050505050505050505050565b6060806000806114018c8c8c8c8c8c612323565b905061142d7f0000000000000000000000000000000000000000000000000000000000000000826125fb565b925060608061144183606001518989612063565b91975092509050600080806114568685612660565b919450925090506114678388614a87565b60c08701515190975061147a818361218d565b61148f8388606001518960400151848a612687565b6114999089614a87565b975050505050505050985098509895505050505050565b6000806114bf868686866121e7565b909250905081156115075760025473ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604081208054849290611501908490614a87565b90915550505b94509492505050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461156a576040519150601f19603f3d011682016040523d82523d6000602084013e61156f565b606091505b50509050806040518060400160405280600781526020017f4c5a3330303030000000000000000000000000000000000000000000000000008152509061057c5760405162461bcd60e51b815260040161063191906145a1565b6005546002546040517f67f8d2f200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015285831660248201528483166044820152606481018490526084810184905290821660a48201527f0000000000000000000000000000000000000000000000000000000000000000909116906367f8d2f29060c401600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b50505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c5c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610631565b6000610b5d61171284846127c0565b90565b6000611725600d60098486615059565b61172e91615083565b60e01c9392505050565b600061ffff8211156117b25760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f36206269747300000000000000000000000000000000000000000000000000006064820152608401610631565b5090565b3660006117c66051828587615059565b915091505b9250929050565b60006117de83836127d0565b6040516117ec929190614f97565b6040518091039020905092915050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090605184146118545760405162461bcd60e51b815260040161063191906145a1565b507f000000000000000000000000000000000000000000000000000000000000000060ff1661188385856127e0565b60ff16146040518060400160405280600781526020017f4c5a313030303700000000000000000000000000000000000000000000000000815250906118db5760405162461bcd60e51b815260040161063191906145a1565b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1661190d8585612802565b63ffffffff16146040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906119685760405162461bcd60e51b815260040161063191906145a1565b50600061198d86868660405161197f929190614f97565b604051809103902085610d90565b9050801561199f576002915050610ecf565b6000915050610ecf565b60006119b9602d600d8486615059565b610b5d916150cb565b60006119d2600960018486615059565b6119db91615107565b60c01c9392505050565b3660006117c68360718187615059565b8373ffffffffffffffffffffffffffffffffffffffff163b600003611a92578373ffffffffffffffffffffffffffffffffffffffff168661ffff167feca5e9e3d49c3ee9d9362efa82baa91c668a7f032b3a403638ae65e27368013687868680519060200120604051611a859392919092835267ffffffffffffffff919091166020830152604082015260600190565b60405180910390a3610a92565b61ffff8616600090815260066020526040812054611ab1908790612812565b85604051602001611ac392919061514d565b60408051601f19818403018152908290527fc2fa4813000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063c2fa481390611b4f908a9085908a908a9089908b90600401615197565b600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b5050604080516060808201835261ffff8c1680835260208084018d815267ffffffffffffffff8c8116868801908152875194855291519284019290925251169381019390935273ffffffffffffffffffffffffffffffffffffffff8a169083015292507f2d05fd3bd2a2620dfaf6174f2083d54fbfd9106a4ee93c81238ea5a5f731aede915060800160405180910390a15050505050505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61ffff84166000908152600660205260408120547f0000000000000000000000000000000000000000000000000000000000000000908290611cdb90611cd587876119a9565b90612812565b905060008187604051602001611cf292919061514d565b60405160208183030381529060405290506000611d0f87876119c2565b6040517f71ba2fd600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015291925030918616906371ba2fd690602401602060405180830381865afa158015611d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da49190615205565b73ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a35303030300000000000000000000000000000000000000000000000000081525090611e0f5760405162461bcd60e51b815260040161063191906145a1565b506040517ffdc07c7000000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff86169063fdc07c7090611e67908d908790600401615222565b602060405180830381865afa158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea8919061523f565b90508067ffffffffffffffff168267ffffffffffffffff1611611ed357600295505050505050610ecf565b611ede81600161525c565b67ffffffffffffffff168267ffffffffffffffff161180611f8f57506040517f0eaf6ea600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690630eaf6ea690611f4e908d908790600401615222565b602060405180830381865afa158015611f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8f9190615284565b15611fa257600395505050505050610ecf565b5060019998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff821615801590611fe65750336000908152600460205260409020548111155b6040518060400160405280600781526020017f4c5a3130303030000000000000000000000000000000000000000000000000008152509061203a5760405162461bcd60e51b815260040161063191906145a1565b50336000908152600460205260408120805483929061205a908490614a9a565b90915550505050565b6060808060008490036121155763ffffffff86166000908152600360205260409020805461209090614d85565b80601f01602080910402602001604051908101604052809291908181526020018280546120bc90614d85565b80156121095780601f106120de57610100808354040283529160200191612109565b820191906000526020600020905b8154815290600101906020018083116120ec57829003601f168201915b5050505050925061214f565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050505b8251156121655761215f836128f7565b90925090505b93509350939050565b600080600061217e86868661290c565b92509250925093509350939050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152818311156121e25760405162461bcd60e51b815260040161063191906145a1565b505050565b600254600090819073ffffffffffffffffffffffffffffffffffffffff1615611507576002546040517fd424422100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015263ffffffff881660248301526044820187905285151560648301529091169063d424422190608401602060405180830381865afa9250505080156122b1575060408051601f3d908101601f191682019092526122ae91810190615040565b60015b156115075783156122c457809150612319565b60006122f07f00000000000000000000000000000000000000000000000000000000000000003a6152a1565b905060008187116123015781612303565b865b90508083116123125782612314565b805b945050505b5094509492505050565b6040805160e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c084015261ffff8916825260069052919091205461237788878784612a65565b6040517f6fe7b67300000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636fe7b673906123f2908b908d908c908c906004016152b8565b6020604051808303816000875af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612435919061523f565b9050600061244d61244884838a8c615059565b612b60565b90506000827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8d1660405160c09390931b7fffffffffffffffff00000000000000000000000000000000000000000000000016602084015260e091821b7fffffffff00000000000000000000000000000000000000000000000000000000166028840152602c8301528b901b7dffff0000000000000000000000000000000000000000000000000000000016604c820152605081018390526070016040516020818303038152906040528051906020012090506040518060e001604052808467ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b61ffff1663ffffffff16815260200183815260200182815260200188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509b9a5050505050505050505050565b8051602080830151604080850151606080870151608088015160a089015160c08a015195519398612649988c989197919673ffffffffffffffffffffffffffffffffffffffff1695016152f2565b604051602081830303815290604052905092915050565b600080600061267a60048587604001518860600151612bdc565b9250925092509250925092565b6040517f717e8a4200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063717e8a42906126e2908890889088908890600401614ff5565b6020604051808303816000875af1158015612701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127259190615040565b905080156127685773ffffffffffffffffffffffffffffffffffffffff861660009081526004602052604081208054839290612762908490614a87565b90915550505b6040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018390527f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a910160405180910390a195945050505050565b60006119b9605160318486615059565b3660006117c68360518187615059565b60006127ef6001828486615059565b6127f8916153b8565b60f81c9392505050565b60006117256031602d8486615059565b6060600082118015612825575060208211155b6040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906128795760405162461bcd60e51b815260040161063191906145a1565b5060008360405160200161288f91815260200190565b60405160208183030381529060405290508267ffffffffffffffff8111156128b9576128b96146f0565b6040519080825280601f01601f1916602001820160405280156128e3576020820181803683370190505b506040939093030151602083015250919050565b60608061290383612d81565b91509150915091565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff8416602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa1580156129b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129d991908101906153fe565b9150915080604001519350806000015163ffffffff16925060008651600014612a205786600081518110612a0f57612a0f614d56565b602002602001015160200151612a31565b604051806020016040528060008152505b9050600080612a3f83612e6c565b91509150612a55858b86602001518e86866131cc565b9750505050505093509350939050565b612a70816014614a87565b60408051808201909152600781527f4c5a3130303030000000000000000000000000000000000000000000000000006020820152908314612ac45760405162461bcd60e51b815260040161063191906145a1565b506000612adb612ad684848188615059565b613369565b90508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a925760405162461bcd60e51b815260040161063191906145a1565b600060208383905011156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090612bbe5760405162461bcd60e51b815260040161063191906145a1565b50612bc982846150cb565b6020929092036008029190911c92915050565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015263ffffffff8316602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612c81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ca991908101906153fe565b9150915080604001519350806000015163ffffffff16925060008851600014612cf05788600081518110612cdf57612cdf614d56565b602002602001015160200151612d01565b604051806020016040528060008152505b9050600080612d0f83612e6c565b915091506060612d288d878c88602001518f88886133d6565b60c088015160e0890151604051939c509193507f4ec2ac8fdaa552cf8e85ded259f20fa01c58d98ceaf21c87f6db54dad6d4ec4992612d69929085906154ff565b60405180910390a15050505050509450945094915050565b606080600080612d9085613685565b915091508051600003612de857604080516000808252602082019092528391612ddc565b604080518082019091526000815260606020820152815260200190600190039081612db45790505b50935093505050915091565b604080516001808252818301909252600091816020015b604080518082019091526000815260606020820152815260200190600190039081612dff5790505090506040518060400160405280600260ff1681526020018381525081600081518110612e5557612e55614d56565b602090810291909101015291959194509092505050565b6060808251600003612e7d57915091565b6000612e888461384a565b90508060ff16600103612f3a5760408051600180825281830190925290816020015b6060815260200190600190039081612eaa5790505092508383600081518110612ed557612ed5614d56565b602090810291909101015260408051600180825281830190925290816020016020820280368337019050509150612f0d8460036139cc565b82600081518110612f2057612f20614d56565b602002602001019060ff16908160ff168152505050915091565b8060ff1667ffffffffffffffff811115612f5657612f566146f0565b604051908082528060200260200182016040528015612f7f578160200160208202803683370190505b5091508060ff1667ffffffffffffffff811115612f9e57612f9e6146f0565b604051908082528060200260200182016040528015612fd157816020015b6060815260200190600190039081612fbc5790505b50925060008060ff5b8651831015613108576001909201916000612ff58885613a32565b905060028401935060028161ffff1610156040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061305a5760405162461bcd60e51b815260040161063191906145a1565b50600061306789866139cc565b90508260ff1660ff03613078578092505b8260ff168160ff16146130cf577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8486030160006130b78b8784613a98565b90506130c58a8a8784613bc0565b5093909301929150815b8161ffff1685019450885185036131015783850360006130f08b8784613a98565b90506130fe8a8a8584613bc0565b50505b5050612fda565b865183146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906131605760405162461bcd60e51b815260040161063191906145a1565b5060005b8460ff168160ff1610156131c257858160ff168151811061318757613187614d56565b6020908102919091010180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff169052600101613164565b5050505050915091565b600080876080015188606001516131e39190615568565b905060005b8160ff1681101561335d57600060608a6060015160ff168310613231578a60e001518b6060015160ff1684038151811061322457613224614d56565b6020026020010151613250565b8a60c00151838151811061324757613247614d56565b60200260200101515b915060005b86518110156132aa578387828151811061327157613271614d56565b602002602001015160ff16036132a25787818151811061329357613293614d56565b602002602001015191506132aa565b600101613255565b506040517f30bb3aac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906330bb3aac90613303908d908d908d908790600401615581565b602060405180830381865afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133449190615040565b61334e9086614a87565b945082600101925050506131e8565b50509695505050505050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090601483146133c15760405162461bcd60e51b815260040161063191906145a1565b506133cc82846155cc565b60601c9392505050565b600060606000886080015189606001516133f09190615568565b90508060ff1667ffffffffffffffff81111561340e5761340e6146f0565b604051908082528060200260200182016040528015613437578160200160208202803683370190505b5091506000805b8260ff1681101561367657600060608c6060015160ff168310613487578c60e001518d6060015160ff1684038151811061347a5761347a614d56565b60200260200101516134a6565b8c60c00151838151811061349d5761349d614d56565b60200260200101515b9150600088511180156134d457508784815181106134c6576134c6614d56565b602002602001015160ff1683145b156134fb57885160018501948a9181106134f0576134f0614d56565b602002602001015190505b6040517fe4fbd90300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063e4fbd90390613553908f908f908f908790600401615581565b6020604051808303816000875af1158015613572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135969190615040565b8684815181106135a8576135a8614d56565b60200260200101818152505060008684815181106135c8576135c8614d56565b6020026020010151111561366c578583815181106135e8576135e8614d56565b60200260200101518e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461363d9190614a87565b9250508190555085838151811061365657613656614d56565b6020026020010151876136699190614a87565b96505b505060010161343e565b50505097509795505050505050565b60608060006136948482613a32565b905060027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff831601613836578060005b86518310156137d65760006136dc88856139cc565b90508160ff166000036136ed578091505b8160ff168160ff16146137265760006137098985808803613a98565b905061371788888584613d24565b90985096508493509091508190505b60019093019260006137388986613a32565b905060008161ffff16116040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906137965760405162461bcd60e51b815260040161063191906145a1565b508060020161ffff1685019450885185036137cf5760006137ba8a86808903613a98565b90506137c889898584613d24565b9099509750505b50506136c7565b865183146040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061382e5760405162461bcd60e51b815260040161063191906145a1565b505050613843565b6138408286613e3e565b93505b5050915091565b60008060005b835182101561396c57600190910190600061386b8584613a32565b905060028301925060028161ffff1610156040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906138d05760405162461bcd60e51b815260040161063191906145a1565b5060006138dd86856139cc565b905060ff8160ff16106040518060400160405280600781526020017f4c5a3130303131000000000000000000000000000000000000000000000000008152509061393a5760405162461bcd60e51b815260040161063191906145a1565b5060018181019060ff82161b841661395c5760019586019560ff82161b841793505b505061ffff169190910190613850565b835182146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906139c45760405162461bcd60e51b815260040161063191906145a1565b505050919050565b60006139d9826001614a87565b83511015613a295760405162461bcd60e51b815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e6473000000000000000000000000006044820152606401610631565b50016001015190565b6000613a3f826002614a87565b83511015613a8f5760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152606401610631565b50016002015190565b606081613aa681601f614a87565b1015613af45760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610631565b613afe8284614a87565b84511015613b4e5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610631565b606082158015613b6d5760405191506000825260208201604052610867565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613ba6578051835260209283019201613b8e565b5050858452601f01601f1916604052505090509392505050565b60408051808201909152600781527f4c5a313030313100000000000000000000000000000000000000000000000000602082015260ff83811610613c175760405162461bcd60e51b815260040161063191906145a1565b506000613c25836001615568565b905060005b84518160ff161015610a92576000858260ff1681518110613c4d57613c4d614d56565b602002602001015190508060ff168360ff1603613cc857868260ff1681518110613c7957613c79614d56565b602002602001015184604051602001613c93929190615612565b604051602081830303815290604052878360ff1681518110613cb757613cb7614d56565b602002602001018190525050610a92565b8060ff16600003613d135782868360ff1681518110613ce957613ce9614d56565b602002602001019060ff16908160ff168152505083878360ff1681518110613cb757613cb7614d56565b50613d1d81615641565b9050613c2a565b6060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff851601613d8857855115613d7f578583604051602001613d6b929190615612565b604051602081830303815290604052613d81565b825b9550613e34565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff851601613de957845115613de0578483604051602001613dcc929190615612565b604051602081830303815290604052613de2565b825b9450613e34565b604080518082018252600781527f4c5a3130303133000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b815261063191906004016145a1565b5093949293505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff841601613f785781516022146040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090613ec45760405162461bcd60e51b815260040161063191906145a1565b506000613eda613ed5846002614101565b614167565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082018190527e11000000000000000000000000000000000000000000000000000000000000602183015260238201527fffffffffffffffffffffffffffffffff00000000000000000000000000000000608083901b166024820152909150603401604051602081830303815290604052915050610b60565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61ffff8416016140b65760428251118015613fb657506062825111155b6040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061400a5760405162461bcd60e51b815260040161063191906145a1565b50600061401b613ed5846002614101565b9050600061402d613ed5856022614101565b84519091506000907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe0161406386604283613a98565b61406c90615660565b60405160086020938403029190911c925061409d916001916011918391889183916031916002918b918b91016156a2565b6040516020818303038152906040529350505050610b60565b604080518082018252600781527f4c5a4330303030000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b815261063191906004016145a1565b600061410e826020614a87565b8351101561415e5760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e647300000000000000000000006044820152606401610631565b50016020015190565b60006fffffffffffffffffffffffffffffffff8211156117b25760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610631565b60008083601f84011261420157600080fd5b50813567ffffffffffffffff81111561421957600080fd5b6020830191508360208285010111156117cb57600080fd5b67ffffffffffffffff8116811461108257600080fd5b803561425281614231565b919050565b6000806000806060858703121561426d57600080fd5b843567ffffffffffffffff81111561428457600080fd5b614290878288016141ef565b9095509350506020850135915060408501356142ab81614231565b939692955090935050565b63ffffffff8116811461108257600080fd5b6000602082840312156142da57600080fd5b8135610d89816142b6565b73ffffffffffffffffffffffffffffffffffffffff8116811461108257600080fd5b8035614252816142e5565b60008060006060848603121561432757600080fd5b83359250602084013591506040840135614340816142e5565b809150509250925092565b803561ffff8116811461425257600080fd5b801515811461108257600080fd5b80356142528161435d565b600080600080600080600060a0888a03121561439157600080fd5b61439a8861434b565b965060208801356143aa816142e5565b9550604088013567ffffffffffffffff808211156143c757600080fd5b6143d38b838c016141ef565b909750955060608a013591506143e88261435d565b909350608089013590808211156143fe57600080fd5b5061440b8a828b016141ef565b989b979a50959850939692959293505050565b60008060008060008060008060008060006101008c8e03121561444057600080fd5b6144498c614307565b9a5061445760208d01614247565b995061446560408d0161434b565b985067ffffffffffffffff8060608e0135111561448157600080fd5b6144918e60608f01358f016141ef565b909950975060808d01358110156144a757600080fd5b6144b78e60808f01358f016141ef565b90975095506144c860a08e01614307565b94506144d660c08e01614307565b93508060e08e013511156144e957600080fd5b506144fa8d60e08e01358e016141ef565b81935080925050509295989b509295989b9093969950565b60008060006060848603121561452757600080fd5b6145308461434b565b92506020840135614540816142e5565b929592945050506040919091013590565b60005b8381101561456c578181015183820152602001614554565b50506000910152565b6000815180845261458d816020860160208601614551565b601f01601f19169290920160200192915050565b602081526000610b5d6020830184614575565b6000602082840312156145c657600080fd5b8135610d89816142e5565b6000806000604084860312156145e657600080fd5b833567ffffffffffffffff8111156145fd57600080fd5b614609868287016141ef565b909790965060209590950135949350505050565b6000806040838503121561463057600080fd5b823561463b816142b6565b9150602083013561464b816142b6565b809150509250929050565b6000806040838503121561466957600080fd5b6146728361434b565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600483106146ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715614743576147436146f0565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614772576147726146f0565b604052919050565b60ff8116811461108257600080fd5b80356142528161477a565b600067ffffffffffffffff8211156147ae576147ae6146f0565b5060051b60200190565b600082601f8301126147c957600080fd5b813560206147de6147d983614794565b614749565b82815260059290921b840181019181810190868411156147fd57600080fd5b8286015b84811015614821578035614814816142e5565b8352918301918301614801565b509695505050505050565b60008060006060848603121561484157600080fd5b833567ffffffffffffffff8082111561485957600080fd5b90850190610100828803121561486e57600080fd5b61487661471f565b61487f83614247565b815261488d6020840161436b565b602082015261489e6040840161436b565b60408201526148af60608401614789565b60608201526148c060808401614789565b60808201526148d160a08401614789565b60a082015260c0830135828111156148e857600080fd5b6148f4898286016147b8565b60c08301525060e08301358281111561490c57600080fd5b614918898286016147b8565b60e083015250976020870135975060409096013595945050505050565b6000806000806080858703121561494b57600080fd5b8435614956816142e5565b9350602085013592506040850135915060608501356142ab81614231565b60008060006040848603121561498957600080fd5b8335614994816142b6565b9250602084013567ffffffffffffffff8111156149b057600080fd5b6149bc868287016141ef565b9497909650939450505050565b6000806000806000608086880312156149e157600080fd5b6149ea8661434b565b945060208601356149fa816142e5565b935060408601359250606086013567ffffffffffffffff811115614a1d57600080fd5b614a29888289016141ef565b969995985093965092949392505050565b60008060408385031215614a4d57600080fd5b8235614672816142e5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610b6057610b60614a58565b81810381811115610b6057610b60614a58565b608081526000614ac06080830187614575565b8281036020840152614ad28187614575565b604084019590955250506060015292915050565b600082601f830112614af757600080fd5b815167ffffffffffffffff811115614b1157614b116146f0565b614b246020601f19601f84011601614749565b818152846020838601011115614b3957600080fd5b610ecf826020830160208701614551565b80516142528161435d565b60008060408385031215614b6857600080fd5b825167ffffffffffffffff811115614b7f57600080fd5b614b8b85828601614ae6565b925050602083015161464b8161435d565b805161425281614231565b80516142528161477a565b600082601f830112614bc357600080fd5b81516020614bd36147d983614794565b82815260059290921b84018101918181019086841115614bf257600080fd5b8286015b84811015614821578051614c09816142e5565b8352918301918301614bf6565b60006101008284031215614c2957600080fd5b614c3161471f565b9050614c3c82614b9c565b8152614c4a60208301614b4a565b6020820152614c5b60408301614b4a565b6040820152614c6c60608301614ba7565b6060820152614c7d60808301614ba7565b6080820152614c8e60a08301614ba7565b60a082015260c082015167ffffffffffffffff80821115614cae57600080fd5b614cba85838601614bb2565b60c084015260e0840151915080821115614cd357600080fd5b50614ce084828501614bb2565b60e08301525092915050565b600060208284031215614cfe57600080fd5b815167ffffffffffffffff811115614d1557600080fd5b610ecf84828501614c16565b600060208284031215614d3357600080fd5b815167ffffffffffffffff811115614d4a57600080fd5b610ecf84828501614ae6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680614d9957607f821691505b602082108103614dd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156121e257600081815260208120601f850160051c81016020861015614dff5750805b601f850160051c820191505b81811015610a9257828155600101614e0b565b67ffffffffffffffff831115614e3657614e366146f0565b614e4a83614e448354614d85565b83614dd8565b6000601f841160018114614e9c5760008515614e665750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355614f14565b600083815260209020601f19861690835b82811015614ecd5786850135825560209485019460019092019101614ead565b5086821015614f08577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015263ffffffff84166040820152608060608201526000614f8c608083018486614f1b565b979650505050505050565b8183823760009101908152919050565b73ffffffffffffffffffffffffffffffffffffffff86168152608060208201526000614fd7608083018688614f1b565b67ffffffffffffffff94909416604083015250606001529392505050565b63ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006150366080830184614575565b9695505050505050565b60006020828403121561505257600080fd5b5051919050565b6000808585111561506957600080fd5b8386111561507657600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156150c35780818660040360031b1b83161692505b505092915050565b80356020831015610b60577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156150c35760089490940360031b84901b1690921692915050565b6000835161515f818460208801614551565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b61ffff8716815260c0602082015260006151b460c0830188614575565b73ffffffffffffffffffffffffffffffffffffffff8716604084015267ffffffffffffffff8616606084015284608084015282810360a08401526151f88185614575565b9998505050505050505050565b60006020828403121561521757600080fd5b8151610d89816142e5565b61ffff83168152604060208201526000610ecf6040830184614575565b60006020828403121561525157600080fd5b8151610d8981614231565b67ffffffffffffffff81811683821601908082111561527d5761527d614a58565b5092915050565b60006020828403121561529657600080fd5b8151610d898161435d565b8082028115828204841417610b6057610b60614a58565b61ffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152606060408201526000615036606083018486614f1b565b7fff000000000000000000000000000000000000000000000000000000000000008960f81b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008860c01b16600182015260007fffffffff00000000000000000000000000000000000000000000000000000000808960e01b16600984015287600d840152808760e01b16602d8401525084603183015283605183015282516153a4816071850160208701614551565b919091016071019998505050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156150c35760019490940360031b84901b1690921692915050565b600080828403608081121561541257600080fd5b835167ffffffffffffffff8082111561542a57600080fd5b61543687838801614c16565b94506060601f198401121561544a57600080fd5b60405192506060830191508282108183111715615469576154696146f0565b50604052602084015161547b816142b6565b8152604084015161548b81614231565b6020820152606084015161549e816142e5565b6040820152919491935090915050565b600081518084526020808501945080840160005b838110156154f457815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016154c2565b509495945050505050565b60608152600061551260608301866154ae565b60208382038185015261552582876154ae565b8481036040860152855180825282870193509082019060005b8181101561555a5784518352938301939183019160010161553e565b509098975050505050505050565b60ff8181168382160190811115610b6057610b60614a58565b63ffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006150366080830184614575565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156150c35760149490940360031b84901b1690921692915050565b60008351615624818460208801614551565b835190830190615638818360208801614551565b01949350505050565b600060ff821660ff810361565757615657614a58565b60010192915050565b80516020808301519190811015614dd2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b60007fff00000000000000000000000000000000000000000000000000000000000000808c60f81b1683527fffff000000000000000000000000000000000000000000000000000000000000808c60f01b166001850152818b60f81b1660038501527fffffffffffffffffffffffffffffffff000000000000000000000000000000008a60801b166004850152818960f81b166014850152808860f01b16601585015250808660f81b16601784015250615783601883018560801b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000169052565b5060288101919091526048019897505050505050505056fea2646970667358221220bfc6e5b7e510c8bda9eb8d991f436d5e99a8e2f31a92622004658e1ec9600ecd64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_treasuryGasCap";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_nonceContract";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_localEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_treasuryFeeHandler";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_ulnConfig";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint16";
            readonly name: "srcChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "srcAddress";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "dstAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidDst";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "user";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lzTokenFee";
            readonly type: "uint256";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "verifier";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "header";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "proofHash";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadSigned";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "verifiers";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "optionalVerifiers";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly name: "VerifierFeePaid";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "addressSizes";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "option";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packet";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "deliver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliverable";
        readonly outputs: readonly [{
            readonly internalType: "enum IMessageLibBase.DeliveryState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "estimateFees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "nativeFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "zroFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "verifier";
            readonly type: "address";
        }];
        readonly name: "hashLookup";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "_path";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzTokenPaymentAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "send";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_size";
            readonly type: "uint256";
        }];
        readonly name: "setAddressSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_eid";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "setDefaultOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_layerZeroToken";
            readonly type: "address";
        }];
        readonly name: "setLayerZeroToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_verifier";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_requiredConfirmation";
            readonly type: "uint64";
        }];
        readonly name: "verified";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "_config";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifyConditionMet";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): UltraLightNode301Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): UltraLightNode301;
}

type index$6_MessageLibBaseE1__factory = MessageLibBaseE1__factory;
declare const index$6_MessageLibBaseE1__factory: typeof MessageLibBaseE1__factory;
type index$6_NonceContract__factory = NonceContract__factory;
declare const index$6_NonceContract__factory: typeof NonceContract__factory;
type index$6_TreasuryFeeHandler__factory = TreasuryFeeHandler__factory;
declare const index$6_TreasuryFeeHandler__factory: typeof TreasuryFeeHandler__factory;
type index$6_UltraLightNode301__factory = UltraLightNode301__factory;
declare const index$6_UltraLightNode301__factory: typeof UltraLightNode301__factory;
declare namespace index$6 {
  export {
    index$6_MessageLibBaseE1__factory as MessageLibBaseE1__factory,
    index$6_NonceContract__factory as NonceContract__factory,
    index$6_TreasuryFeeHandler__factory as TreasuryFeeHandler__factory,
    index$6_UltraLightNode301__factory as UltraLightNode301__factory,
    index$7 as interfaces,
  };
}

type UltraLightNode302ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class UltraLightNode302__factory extends ContractFactory {
    constructor(...args: UltraLightNode302ConstructorParams);
    deploy(_endpoint: PromiseOrValue<string>, _treasuryGasCap: PromiseOrValue<BigNumberish>, _ulnConfig: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<UltraLightNode302>;
    getDeployTransaction(_endpoint: PromiseOrValue<string>, _treasuryGasCap: PromiseOrValue<BigNumberish>, _ulnConfig: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): UltraLightNode302;
    connect(signer: Signer): UltraLightNode302__factory;
    static readonly bytecode = "0x6101206040523480156200001257600080fd5b5060405162005b4738038062005b47833981016040819052620000359162000158565b8260018382836001600160a01b031663416ecebf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000079573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009f919062000199565b6001600160a01b0386166080528383620000b933620000e9565b6001600160a01b0390931660a05263ffffffff90911660c05260ff1660e0526101005250620001c8945050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146200015357600080fd5b919050565b6000806000606084860312156200016e57600080fd5b62000179846200013b565b92506020840151915062000190604085016200013b565b90509250925092565b600060208284031215620001ac57600080fd5b815163ffffffff81168114620001c157600080fd5b9392505050565b60805160a05160c05160e051610100516158bc6200028b60003960006125bf015260008181611b8a0152611d4e01526000611dd501526000818161077c0152818161090e01528181610aea01528181610dc1015281816113fc0152818161157e0152818161180501528181612071015261216601526000818161081701528181610c0001528181610edc01528181610f9b015281816110de015281816111c90152818161149a01528181611610015281816129d60152612b3e01526158bc6000f3fe6080604052600436106101a55760003560e01c80637c0cf763116100e1578063d2d287f01161008a578063f0f4426011610064578063f0f4426014610593578063f2fde38b146105b3578063faaebd21146105d3578063fd9be5221461060e57600080fd5b8063d2d287f014610533578063df1e309f14610553578063e9817f341461057357600080fd5b8063a5972ec5116100bb578063a5972ec51461048b578063b8007ff6146104ab578063c7734173146104cb57600080fd5b80637c0cf763146104055780638da5cb5b146104325780639c33abf71461045d57600080fd5b80634389e58f1161014e57806361d027b31161012857806361d027b3146103515780636750cd4c146103a3578063690c6555146103c3578063715018a6146103f057600080fd5b80634389e58f146102d557806354fd4d50146103045780635ed31c591461033157600080fd5b80631c63e3b61161017f5780631c63e3b614610235578063200175f7146102555780633c782a521461027557600080fd5b806301ffc9a7146101b15780630223536e146101e657806307d7b2f91461020857600080fd5b366101ac57005b600080fd5b3480156101bd57600080fd5b506101d16101cc36600461428b565b61062e565b60405190151581526020015b60405180910390f35b3480156101f257600080fd5b5061020661020136600461433c565b6106c7565b005b34801561021457600080fd5b506102286102233660046143b4565b6106d9565b6040516101dd9190614437565b34801561024157600080fd5b506102066102503660046144b5565b610746565b34801561026157600080fd5b5061020661027036600461450c565b610887565b34801561028157600080fd5b506102bc61029036600461454d565b6000602081815293815260408082208552928152828120909352825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101dd565b3480156102e157600080fd5b506102f56102f036600461457b565b610aa7565b6040516101dd93929190614644565b34801561031057600080fd5b506040805160038152600060208201526002918101919091526060016101dd565b34801561033d57600080fd5b5061020661034c3660046146ab565b610bfc565b34801561035d57600080fd5b5060025461037e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b3480156103af57600080fd5b506101d16103be366004614709565b610ea5565b3480156103cf57600080fd5b506103e36103de366004614726565b610f5c565b6040516101dd919061475f565b3480156103fc57600080fd5b50610206611026565b34801561041157600080fd5b506104256104203660046146ab565b61103a565b6040516101dd91906147a1565b34801561043e57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff1661037e565b34801561046957600080fd5b5061047d6104783660046147e2565b611169565b6040516101dd929190614822565b34801561049757600080fd5b506101d16104a6366004614982565b611244565b3480156104b757600080fd5b506102066104c6366004614a8b565b6113c6565b3480156104d757600080fd5b506101d16104e6366004614ae4565b60009283526020838152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff9590951684529390935290205467ffffffffffffffff9182169116101590565b34801561053f57600080fd5b5061020661054e3660046144b5565b611548565b34801561055f57600080fd5b5061020661056e366004614b23565b611649565b34801561057f57600080fd5b506103e361058e366004614709565b611671565b34801561059f57600080fd5b506102066105ae366004614b78565b61170b565b3480156105bf57600080fd5b506102066105ce366004614b78565b61175a565b3480156105df57600080fd5b506106006105ee366004614b78565b60046020526000908152604090205481565b6040519081526020016101dd565b34801561061a57600080fd5b50610206610629366004614b95565b6117f7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd913d0cd0000000000000000000000000000000000000000000000000000000014806106c157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6106d384848484611940565b50505050565b60408051808201909152600080825260208201526000806107276107006020890189614b78565b61071060408a0160208b01614709565b61071d60408b018b614bc1565b90508989896119f0565b604080518082019091529182526020820152925050505b949350505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146107d95760405162461bcd60e51b81526004016107d0919061475f565b60405180910390fd5b506040517f1c63e3b600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631c63e3b69061085090869086908690600401614c26565b600060405180830381600087803b15801561086a57600080fd5b505af115801561087e573d6000803e3d6000fd5b50505050505050565b60025460408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1633146108f45760405162461bcd60e51b81526004016107d0919061475f565b508273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f936112b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190614c90565b73ffffffffffffffffffffffffffffffffffffffff16141580156109d4575073ffffffffffffffffffffffffffffffffffffffff821615155b6040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a285760405162461bcd60e51b81526004016107d0919061475f565b50610a4a73ffffffffffffffffffffffffffffffffffffffff84168383611aee565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527fe081464b7278501267de69fa85b7b9560b0ae05d5fbfaab9b1986c70356e2efe9060600160405180910390a1505050565b610aaf614243565b60408051808201909152600781527f4c5a353030303000000000000000000000000000000000000000000000000000602082015260609081907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610b3e5760405162461bcd60e51b81526004016107d0919061475f565b506000806000610b4f8a8a8a611b80565b925092509250600080610b85610b6b60608e0160408f01614b78565b8d6060016020810190610b7e9190614709565b858c611c5e565b9092509050610b948284614cdc565b9250600060405180606001604052808e60a0013581526020018e6000016020810190610bc09190614cef565b67ffffffffffffffff1681526040805180820190915295865260208087019490945292909201939093529b929a50929850909650505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343ea4fa9610c448686611cbe565b610c4e8787611cd0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015263ffffffff166024820152604401600060405180830381865afa158015610cc2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cea9190810190614e67565b90506001610cfa82868686611cf3565b6003811115610d0b57610d0b614772565b146040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610d605760405162461bcd60e51b81526004016107d0919061475f565b5060006040518060600160405280610d788787611cd0565b63ffffffff168152602001610d8d8787611ea0565b8152602001610d9c8787611eb9565b67ffffffffffffffff169052905073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166345c6dcc482610df18888611cbe565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152835163ffffffff1660048201526020840151602482015292015167ffffffffffffffff16604483015273ffffffffffffffffffffffffffffffffffffffff1660648201526084810186905260a401600060405180830381600087803b158015610e8657600080fd5b505af1158015610e9a573d6000803e3d6000fd5b505050505050505050565b6040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636750cd4c90602401602060405180830381865afa158015610f38573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190614e9c565b6040517f560042df00000000000000000000000000000000000000000000000000000000815263ffffffff8084166004830152821660248201526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063560042df90604401600060405180830381865afa158015610ff7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261101f9190810190614f1d565b9392505050565b61102e611edc565b6110386000611f43565b565b6000806110478585611cbe565b905060006110558686611cd0565b9050600061106582848989611fba565b9050600181600381111561107b5761107b614772565b1461108a57925061101f915050565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff841660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906343ea4fa990604401600060405180830381865afa158015611127573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261114f9190810190614e67565b905061115d81898989611cf3565b98975050505050505050565b6040517f8fd061fc00000000000000000000000000000000000000000000000000000000815263ffffffff808516600483015273ffffffffffffffffffffffffffffffffffffffff848116602484015290831660448301526060916000917f00000000000000000000000000000000000000000000000000000000000000001690638fd061fc90606401600060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112389190810190614f52565b91509150935093915050565b8251600090815b856060015160ff168110156112df576112c88660c00151828151811061127357611273614f99565b60209081029190910181015160008881528083526040808220898352845280822073ffffffffffffffffffffffffffffffffffffffff90931682529190925290205467ffffffffffffffff8085169116101590565b6112d75760009250505061101f565b60010161124b565b506000856060015160ff161180156112fc5750608085015160ff16155b1561130b57600191505061101f565b6000805b866080015160ff168110156113b95761138c8760e00151828151811061133757611337614f99565b602090810291909101810151600089815280835260408082208a8352845280822073ffffffffffffffffffffffffffffffffffffffff90931682529190925290205467ffffffffffffffff8086169116101590565b156113b1578160010191508660a0015160ff1682106113b1576001935050505061101f565b60010161130f565b5060009695505050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146114505760405162461bcd60e51b81526004016107d0919061475f565b5060005b81811015611541573683838381811061146f5761146f614f99565b90506020028101906114819190614fc8565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d59104ed86886114ce6020860186614709565b6114db6020870187614bc1565b6040518663ffffffff1660e01b81526004016114fb959493929190615031565b600060405180830381600087803b15801561151557600080fd5b505af1158015611529573d6000803e3d6000fd5b5050505050808061153990615077565b915050611454565b5050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146115d25760405162461bcd60e51b81526004016107d0919061475f565b506040517fd2d287f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d2d287f09061085090869086908690600401614c26565b611651611edc565b63ffffffff831660009081526003602052604090206106d3828483615148565b6003602052600090815260409020805461168a906150af565b80601f01602080910402602001604051908101604052809291908181526020018280546116b6906150af565b80156117035780601f106116d857610100808354040283529160200191611703565b820191906000526020600020905b8154815290600101906020018083116116e657829003601f168201915b505050505081565b611713611edc565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611762611edc565b73ffffffffffffffffffffffffffffffffffffffff81166117eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107d0565b6117f481611f43565b50565b61180182826121f3565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f936112b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561186e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118929190614c90565b905073ffffffffffffffffffffffffffffffffffffffff8116158015906118d9576118d473ffffffffffffffffffffffffffffffffffffffff83168585611aee565b6118e3565b6118e384846122a4565b6040805133815273ffffffffffffffffffffffffffffffffffffffff861660208201529081018490527fb41e4a699a31f6278037fa278d73d6618985e1568fb5cfa02c743e48c965a751906060015b60405180910390a150505050565b806000808686604051611954929190615244565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352935281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff949094169390931790925590517fd57606ee258836ec1b40f83a128d2b514581eaf4f71801fbed3bc94b5358ecc091611932918790879086908890615254565b600080600080611a0189878761235c565b92509250506000806000611a168d8d86612467565b925092509250611a268b82612486565b8173ffffffffffffffffffffffffffffffffffffffff1663709eb6648d8f8e896040518563ffffffff1660e01b8152600401611a6594939291906152a2565b602060405180830381865afa158015611a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa691906152e3565b611ab09084614cdc565b9250600080611ac18f8f878f6124db565b90925090508115611ad957611ad68286614cdc565b94505b939e939d50929b505050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611b7b908490612617565b505050565b6060806000611baf7f00000000000000000000000000000000000000000000000000000000000000008761270c565b9150606080611bcd611bc660808a018a8401614709565b888861235c565b9196509250905060008080611be28b856127ae565b91945092509050611bf38387614cdc565b95506000611c0460c08d018d614bc1565b90509050611c128183612486565b611c43838d6060016020810190611c299190614709565b8e6040016020810190611c3c9190614b78565b848a6127ea565b611c4d9088614cdc565b965050505050505093509350939050565b600080611c6d868686866124db565b90925090508115611cb55760025473ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604081208054849290611caf908490614cdc565b90915550505b94509492505050565b600061101f611ccd8484612923565b90565b6000611ce0600d600984866152fc565b611ce991615326565b60e01c9392505050565b60408051808201909152600781527f4c5a313030303900000000000000000000000000000000000000000000000000602082015260009060518414611d4b5760405162461bcd60e51b81526004016107d0919061475f565b507f000000000000000000000000000000000000000000000000000000000000000060ff16611d7a8585612933565b60ff16146040518060400160405280600781526020017f4c5a31303030370000000000000000000000000000000000000000000000000081525090611dd25760405162461bcd60e51b81526004016107d0919061475f565b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16611e048585612955565b63ffffffff16146040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090611e5f5760405162461bcd60e51b81526004016107d0919061475f565b506000611e84868686604051611e76929190615244565b604051809103902085611244565b90508015611e9657600191505061073e565b600091505061073e565b6000611eb0602d600d84866152fc565b61101f9161536e565b6000611ec96009600184866152fc565b611ed2916153aa565b60c01c9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d0565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060405180606001604052808763ffffffff168152602001611fde8686611ea0565b8152602001611fed8686611eb9565b67ffffffffffffffff908116909152604080517f418ba351000000000000000000000000000000000000000000000000000000008152835163ffffffff1660048201526020840151602482015290830151909116604482015230606482015273ffffffffffffffffffffffffffffffffffffffff87811660848301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063418ba3519060a401602060405180830381865afa1580156120b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120dc9190614e9c565b9050806120ee5760029250505061073e565b8151602083015160408085015190517fe361b59c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015263ffffffff9094166024820152604481019290925267ffffffffffffffff1660648201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e361b59c90608401602060405180830381865afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d19190614e9c565b905080156121e5576002935050505061073e565b506001979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216158015906122275750336000908152600460205260409020548111155b6040518060400160405280600781526020017f4c5a3130303030000000000000000000000000000000000000000000000000008152509061227b5760405162461bcd60e51b81526004016107d0919061475f565b50336000908152600460205260408120805483929061229b9084906153f0565b90915550505050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146122fe576040519150601f19603f3d011682016040523d82523d6000602084013e612303565b606091505b50509050806040518060400160405280600781526020017f4c5a333030303000000000000000000000000000000000000000000000000000815250906106d35760405162461bcd60e51b81526004016107d0919061475f565b60608080600084900361240e5763ffffffff861660009081526003602052604090208054612389906150af565b80601f01602080910402602001604051908101604052809291908181526020018280546123b5906150af565b80156124025780601f106123d757610100808354040283529160200191612402565b820191906000526020600020905b8154815290600101906020018083116123e557829003601f168201915b50505050509250612448565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050505b82511561245e5761245883612965565b90925090505b93509350939050565b600080600061247786868661297a565b92509250925093509350939050565b60408051808201909152600781527f4c5a313030303900000000000000000000000000000000000000000000000000602082015281831115611b7b5760405162461bcd60e51b81526004016107d0919061475f565b600254600090819073ffffffffffffffffffffffffffffffffffffffff1615611cb5576002546040517fd424422100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015263ffffffff881660248301526044820187905285151560648301529091169063d424422190608401602060405180830381865afa9250505080156125a5575060408051601f3d908101601f191682019092526125a2918101906152e3565b60015b15611cb55783156125b85780915061260d565b60006125e47f00000000000000000000000000000000000000000000000000000000000000003a615403565b905060008187116125f557816125f7565b865b90508083116126065782612608565b805b945050505b5094509492505050565b6000612679826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612ad39092919063ffffffff16565b905080516000148061269a57508080602001905181019061269a9190614e9c565b611b7b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107d0565b60608261271c6020840184614cef565b61272c6040850160208601614709565b61275861273f6060870160408801614b78565b73ffffffffffffffffffffffffffffffffffffffff1690565b6127686080870160608801614709565b608087013560a088013561277f60c08a018a614bc1565b6040516020016127979998979695949392919061541a565b604051602081830303815290604052905092915050565b600080806127dd6004856127c86060890160408a01614b78565b6127d860808a0160608b01614709565b612ae2565b9250925092509250925092565b6040517f717e8a4200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063717e8a42906128459088908890889088906004016152a2565b6020604051808303816000875af1158015612864573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288891906152e3565b905080156128cb5773ffffffffffffffffffffffffffffffffffffffff8616600090815260046020526040812080548392906128c5908490614cdc565b90915550505b6040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018390527f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a910160405180910390a195945050505050565b6000611eb06051603184866152fc565b600061294260018284866152fc565b61294b916154d7565b60f81c9392505050565b6000611ce06031602d84866152fc565b60608061297183612c87565b91509150915091565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff8416602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612a1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a47919081019061551d565b9150915080604001519350806000015163ffffffff16925060008651600014612a8e5786600081518110612a7d57612a7d614f99565b602002602001015160200151612a9f565b604051806020016040528060008152505b9050600080612aad83612d72565b91509150612ac3858b86602001518e86866130d2565b9750505050505093509350939050565b606061073e848460008561326f565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015263ffffffff8316602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612b87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612baf919081019061551d565b9150915080604001519350806000015163ffffffff16925060008851600014612bf65788600081518110612be557612be5614f99565b602002602001015160200151612c07565b604051806020016040528060008152505b9050600080612c1583612d72565b915091506060612c2e8d878c88602001518f888861336e565b60c088015160e0890151604051939c509193507f4ec2ac8fdaa552cf8e85ded259f20fa01c58d98ceaf21c87f6db54dad6d4ec4992612c6f9290859061561e565b60405180910390a15050505050509450945094915050565b606080600080612c968561361d565b915091508051600003612cee57604080516000808252602082019092528391612ce2565b604080518082019091526000815260606020820152815260200190600190039081612cba5790505b50935093505050915091565b604080516001808252818301909252600091816020015b604080518082019091526000815260606020820152815260200190600190039081612d055790505090506040518060400160405280600260ff1681526020018381525081600081518110612d5b57612d5b614f99565b602090810291909101015291959194509092505050565b6060808251600003612d8357915091565b6000612d8e846137e2565b90508060ff16600103612e405760408051600180825281830190925290816020015b6060815260200190600190039081612db05790505092508383600081518110612ddb57612ddb614f99565b602090810291909101015260408051600180825281830190925290816020016020820280368337019050509150612e13846003613964565b82600081518110612e2657612e26614f99565b602002602001019060ff16908160ff168152505050915091565b8060ff1667ffffffffffffffff811115612e5c57612e5c614846565b604051908082528060200260200182016040528015612e85578160200160208202803683370190505b5091508060ff1667ffffffffffffffff811115612ea457612ea4614846565b604051908082528060200260200182016040528015612ed757816020015b6060815260200190600190039081612ec25790505b50925060008060ff5b865183101561300e576001909201916000612efb88856139ca565b905060028401935060028161ffff1610156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090612f605760405162461bcd60e51b81526004016107d0919061475f565b506000612f6d8986613964565b90508260ff1660ff03612f7e578092505b8260ff168160ff1614612fd5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd848603016000612fbd8b8784613a30565b9050612fcb8a8a8784613b58565b5093909301929150815b8161ffff168501945088518503613007578385036000612ff68b8784613a30565b90506130048a8a8584613b58565b50505b5050612ee0565b865183146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906130665760405162461bcd60e51b81526004016107d0919061475f565b5060005b8460ff168160ff1610156130c857858160ff168151811061308d5761308d614f99565b6020908102919091010180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff16905260010161306a565b5050505050915091565b600080876080015188606001516130e99190615687565b905060005b8160ff1681101561326357600060608a6060015160ff168310613137578a60e001518b6060015160ff1684038151811061312a5761312a614f99565b6020026020010151613156565b8a60c00151838151811061314d5761314d614f99565b60200260200101515b915060005b86518110156131b0578387828151811061317757613177614f99565b602002602001015160ff16036131a85787818151811061319957613199614f99565b602002602001015191506131b0565b60010161315b565b506040517f30bb3aac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906330bb3aac90613209908d908d908d9087906004016156a0565b602060405180830381865afa158015613226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324a91906152e3565b6132549086614cdc565b945082600101925050506130ee565b50509695505050505050565b6060824710156132e75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107d0565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161331091906156eb565b60006040518083038185875af1925050503d806000811461334d576040519150601f19603f3d011682016040523d82523d6000602084013e613352565b606091505b509150915061336387838387613cc4565b979650505050505050565b600060606000886080015189606001516133889190615687565b90508060ff1667ffffffffffffffff8111156133a6576133a6614846565b6040519080825280602002602001820160405280156133cf578160200160208202803683370190505b5091506000805b8260ff1681101561360e57600060608c6060015160ff16831061341f578c60e001518d6060015160ff1684038151811061341257613412614f99565b602002602001015161343e565b8c60c00151838151811061343557613435614f99565b60200260200101515b91506000885111801561346c575087848151811061345e5761345e614f99565b602002602001015160ff1683145b1561349357885160018501948a91811061348857613488614f99565b602002602001015190505b6040517fe4fbd90300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063e4fbd903906134eb908f908f908f9087906004016156a0565b6020604051808303816000875af115801561350a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352e91906152e3565b86848151811061354057613540614f99565b602002602001018181525050600086848151811061356057613560614f99565b602002602001015111156136045785838151811061358057613580614f99565b60200260200101518e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135d59190614cdc565b925050819055508583815181106135ee576135ee614f99565b6020026020010151876136019190614cdc565b96505b50506001016133d6565b50505097509795505050505050565b606080600061362c84826139ca565b905060027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff8316016137ce578060005b865183101561376e5760006136748885613964565b90508160ff16600003613685578091505b8160ff168160ff16146136be5760006136a18985808803613a30565b90506136af88888584613d4a565b90985096508493509091508190505b60019093019260006136d089866139ca565b905060008161ffff16116040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061372e5760405162461bcd60e51b81526004016107d0919061475f565b508060020161ffff1685019450885185036137675760006137528a86808903613a30565b905061376089898584613d4a565b9099509750505b505061365f565b865183146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906137c65760405162461bcd60e51b81526004016107d0919061475f565b5050506137db565b6137d88286613e64565b93505b5050915091565b60008060005b835182101561390457600190910190600061380385846139ca565b905060028301925060028161ffff1610156040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906138685760405162461bcd60e51b81526004016107d0919061475f565b5060006138758685613964565b905060ff8160ff16106040518060400160405280600781526020017f4c5a313030313100000000000000000000000000000000000000000000000000815250906138d25760405162461bcd60e51b81526004016107d0919061475f565b5060018181019060ff82161b84166138f45760019586019560ff82161b841793505b505061ffff1691909101906137e8565b835182146040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061395c5760405162461bcd60e51b81526004016107d0919061475f565b505050919050565b6000613971826001614cdc565b835110156139c15760405162461bcd60e51b815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e64730000000000000000000000000060448201526064016107d0565b50016001015190565b60006139d7826002614cdc565b83511015613a275760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e647300000000000000000000000060448201526064016107d0565b50016002015190565b606081613a3e81601f614cdc565b1015613a8c5760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016107d0565b613a968284614cdc565b84511015613ae65760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016107d0565b606082158015613b055760405191506000825260208201604052613b4f565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613b3e578051835260209283019201613b26565b5050858452601f01601f1916604052505b50949350505050565b60408051808201909152600781527f4c5a313030313100000000000000000000000000000000000000000000000000602082015260ff83811610613baf5760405162461bcd60e51b81526004016107d0919061475f565b506000613bbd836001615687565b905060005b84518160ff161015613cbc576000858260ff1681518110613be557613be5614f99565b602002602001015190508060ff168360ff1603613c6057868260ff1681518110613c1157613c11614f99565b602002602001015184604051602001613c2b9291906156fd565b604051602081830303815290604052878360ff1681518110613c4f57613c4f614f99565b602002602001018190525050613cbc565b8060ff16600003613cab5782868360ff1681518110613c8157613c81614f99565b602002602001019060ff16908160ff168152505083878360ff1681518110613c4f57613c4f614f99565b50613cb58161572c565b9050613bc2565b505050505050565b60608315613d40578251600003613d395773ffffffffffffffffffffffffffffffffffffffff85163b613d395760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107d0565b508161073e565b61073e8383614127565b6060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff851601613dae57855115613da5578583604051602001613d919291906156fd565b604051602081830303815290604052613da7565b825b9550613e5a565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff851601613e0f57845115613e06578483604051602001613df29291906156fd565b604051602081830303815290604052613e08565b825b9450613e5a565b604080518082018252600781527f4c5a3130303133000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b81526107d0919060040161475f565b5093949293505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff841601613f9e5781516022146040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090613eea5760405162461bcd60e51b81526004016107d0919061475f565b506000613f00613efb846002614151565b6141b7565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082018190527e11000000000000000000000000000000000000000000000000000000000000602183015260238201527fffffffffffffffffffffffffffffffff00000000000000000000000000000000608083901b1660248201529091506034016040516020818303038152906040529150506106c1565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61ffff8416016140dc5760428251118015613fdc57506062825111155b6040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906140305760405162461bcd60e51b81526004016107d0919061475f565b506000614041613efb846002614151565b90506000614053613efb856022614151565b84519091506000907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe0161408986604283613a30565b6140929061574b565b60405160086020938403029190911c92506140c3916001916011918391889183916031916002918b918b910161578d565b60405160208183030381529060405293505050506106c1565b604080518082018252600781527f4c5a4330303030000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b81526107d0919060040161475f565b8151156141375781518083602001fd5b8060405162461bcd60e51b81526004016107d0919061475f565b600061415e826020614cdc565b835110156141ae5760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e6473000000000000000000000060448201526064016107d0565b50016020015190565b60006fffffffffffffffffffffffffffffffff82111561423f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016107d0565b5090565b604051806060016040528060008019168152602001600067ffffffffffffffff168152602001614286604051806040016040528060008152602001600081525090565b905290565b60006020828403121561429d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461101f57600080fd5b60008083601f8401126142df57600080fd5b50813567ffffffffffffffff8111156142f757600080fd5b60208301915083602082850101111561430f57600080fd5b9250929050565b67ffffffffffffffff811681146117f457600080fd5b803561433781614316565b919050565b6000806000806060858703121561435257600080fd5b843567ffffffffffffffff81111561436957600080fd5b614375878288016142cd565b90955093505060208501359150604085013561439081614316565b939692955090935050565b80151581146117f457600080fd5b80356143378161439b565b600080600080606085870312156143ca57600080fd5b843567ffffffffffffffff808211156143e257600080fd5b90860190606082890312156143f657600080fd5b9094506020860135906144088261439b565b9093506040860135908082111561441e57600080fd5b5061442b878288016142cd565b95989497509550505050565b8151815260208083015190820152604081016106c1565b60008083601f84011261446057600080fd5b50813567ffffffffffffffff81111561447857600080fd5b6020830191508360208260051b850101111561430f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146117f457600080fd5b6000806000604084860312156144ca57600080fd5b833567ffffffffffffffff8111156144e157600080fd5b6144ed8682870161444e565b909450925050602084013561450181614493565b809150509250925092565b60008060006060848603121561452157600080fd5b833561452c81614493565b9250602084013561453c81614493565b929592945050506040919091013590565b60008060006060848603121561456257600080fd5b8335925060208401359150604084013561450181614493565b6000806000806060858703121561459157600080fd5b843567ffffffffffffffff808211156145a957600080fd5b9086019060e082890312156145bd57600080fd5b909450602086013590808211156145d357600080fd5b506145e0878288016142cd565b90945092505060408501356143908161439b565b60005b8381101561460f5781810151838201526020016145f7565b50506000910152565b600081518084526146308160208601602086016145f4565b601f01601f19169290920160200192915050565b8351815267ffffffffffffffff60208501511660208201526000604085015161467a604084018280518252602090810151910152565b5060c0608083015261468f60c0830185614618565b82810360a08401526146a18185614618565b9695505050505050565b6000806000604084860312156146c057600080fd5b833567ffffffffffffffff8111156146d757600080fd5b6146e3868287016142cd565b909790965060209590950135949350505050565b63ffffffff811681146117f457600080fd5b60006020828403121561471b57600080fd5b813561101f816146f7565b6000806040838503121561473957600080fd5b8235614744816146f7565b91506020830135614754816146f7565b809150509250929050565b60208152600061101f6020830184614618565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600483106147dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000806000606084860312156147f757600080fd5b8335614802816146f7565b9250602084013561481281614493565b91506040840135614501816146f7565b6040815260006148356040830185614618565b905082151560208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561489957614899614846565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156148c8576148c8614846565b604052919050565b60ff811681146117f457600080fd5b8035614337816148d0565b600067ffffffffffffffff82111561490457614904614846565b5060051b60200190565b600082601f83011261491f57600080fd5b8135602061493461492f836148ea565b61489f565b82815260059290921b8401810191818101908684111561495357600080fd5b8286015b8481101561497757803561496a81614493565b8352918301918301614957565b509695505050505050565b60008060006060848603121561499757600080fd5b833567ffffffffffffffff808211156149af57600080fd5b9085019061010082880312156149c457600080fd5b6149cc614875565b6149d58361432c565b81526149e3602084016143a9565b60208201526149f4604084016143a9565b6040820152614a05606084016148df565b6060820152614a16608084016148df565b6080820152614a2760a084016148df565b60a082015260c083013582811115614a3e57600080fd5b614a4a8982860161490e565b60c08301525060e083013582811115614a6257600080fd5b614a6e8982860161490e565b60e083015250976020870135975060409096013595945050505050565b60008060008060608587031215614aa157600080fd5b8435614aac81614493565b93506020850135614abc816146f7565b9250604085013567ffffffffffffffff811115614ad857600080fd5b61442b8782880161444e565b60008060008060808587031215614afa57600080fd5b8435614b0581614493565b93506020850135925060408501359150606085013561439081614316565b600080600060408486031215614b3857600080fd5b8335614b43816146f7565b9250602084013567ffffffffffffffff811115614b5f57600080fd5b614b6b868287016142cd565b9497909650939450505050565b600060208284031215614b8a57600080fd5b813561101f81614493565b60008060408385031215614ba857600080fd5b8235614bb381614493565b946020939093013593505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614bf657600080fd5b83018035915067ffffffffffffffff821115614c1157600080fd5b60200191503681900382131561430f57600080fd5b6040808252810183905260008460608301825b86811015614c66578235614c4c816146f7565b63ffffffff16825260209283019290910190600101614c39565b50809250505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b600060208284031215614ca257600080fd5b815161101f81614493565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156106c1576106c1614cad565b600060208284031215614d0157600080fd5b813561101f81614316565b805161433781614316565b80516143378161439b565b8051614337816148d0565b600082601f830112614d3e57600080fd5b81516020614d4e61492f836148ea565b82815260059290921b84018101918181019086841115614d6d57600080fd5b8286015b84811015614977578051614d8481614493565b8352918301918301614d71565b60006101008284031215614da457600080fd5b614dac614875565b9050614db782614d0c565b8152614dc560208301614d17565b6020820152614dd660408301614d17565b6040820152614de760608301614d22565b6060820152614df860808301614d22565b6080820152614e0960a08301614d22565b60a082015260c082015167ffffffffffffffff80821115614e2957600080fd5b614e3585838601614d2d565b60c084015260e0840151915080821115614e4e57600080fd5b50614e5b84828501614d2d565b60e08301525092915050565b600060208284031215614e7957600080fd5b815167ffffffffffffffff811115614e9057600080fd5b61073e84828501614d91565b600060208284031215614eae57600080fd5b815161101f8161439b565b600082601f830112614eca57600080fd5b815167ffffffffffffffff811115614ee457614ee4614846565b614ef76020601f19601f8401160161489f565b818152846020838601011115614f0c57600080fd5b61073e8260208301602087016145f4565b600060208284031215614f2f57600080fd5b815167ffffffffffffffff811115614f4657600080fd5b61073e84828501614eb9565b60008060408385031215614f6557600080fd5b825167ffffffffffffffff811115614f7c57600080fd5b614f8885828601614eb9565b92505060208301516147548161439b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112614ffc57600080fd5b9190910192915050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b600063ffffffff808816835273ffffffffffffffffffffffffffffffffffffffff8716602084015280861660408401525060806060830152613363608083018486615006565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036150a8576150a8614cad565b5060010190565b600181811c908216806150c357607f821691505b6020821081036150fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115611b7b57600081815260208120601f850160051c810160208610156151295750805b601f850160051c820191505b81811015613cbc57828155600101615135565b67ffffffffffffffff83111561516057615160614846565b6151748361516e83546150af565b83615102565b6000601f8411600181146151c657600085156151905750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611541565b600083815260209020601f19861690835b828110156151f757868501358255602094850194600190920191016151d7565b5086821015615232577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b73ffffffffffffffffffffffffffffffffffffffff86168152608060208201526000615284608083018688615006565b67ffffffffffffffff94909416604083015250606001529392505050565b63ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006146a16080830184614618565b6000602082840312156152f557600080fd5b5051919050565b6000808585111561530c57600080fd5b8386111561531957600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156153665780818660040360031b1b83161692505b505092915050565b803560208310156106c1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156153665760089490940360031b84901b1690921692915050565b818103818111156106c1576106c1614cad565b80820281158282048414176106c1576106c1614cad565b7fff000000000000000000000000000000000000000000000000000000000000008a60f81b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008960c01b16600182015260007fffffffff00000000000000000000000000000000000000000000000000000000808a60e01b16600984015288600d840152808860e01b16602d8401525085603183015284605183015282846071840137506000910160710190815298975050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156153665760019490940360031b84901b1690921692915050565b600080828403608081121561553157600080fd5b835167ffffffffffffffff8082111561554957600080fd5b61555587838801614d91565b94506060601f198401121561556957600080fd5b6040519250606083019150828210818311171561558857615588614846565b50604052602084015161559a816146f7565b815260408401516155aa81614316565b602082015260608401516155bd81614493565b6040820152919491935090915050565b600081518084526020808501945080840160005b8381101561561357815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016155e1565b509495945050505050565b60608152600061563160608301866155cd565b60208382038185015261564482876155cd565b8481036040860152855180825282870193509082019060005b818110156156795784518352938301939183019160010161565d565b509098975050505050505050565b60ff81811683821601908111156106c1576106c1614cad565b63ffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006146a16080830184614618565b60008251614ffc8184602087016145f4565b6000835161570f8184602088016145f4565b8351908301906157238183602088016145f4565b01949350505050565b600060ff821660ff810361574257615742614cad565b60010192915050565b805160208083015191908110156150fc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b60007fff00000000000000000000000000000000000000000000000000000000000000808c60f81b1683527fffff000000000000000000000000000000000000000000000000000000000000808c60f01b166001850152818b60f81b1660038501527fffffffffffffffffffffffffffffffff000000000000000000000000000000008a60801b166004850152818960f81b166014850152808860f01b16601585015250808660f81b1660178401525061586e601883018560801b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000169052565b5060288101919091526048019897505050505050505056fea2646970667358221220d02997114138e675e8b008e7e8dace01f307f3f6b2a1530434021e65f20cf5cc64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_treasuryGasCap";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_ulnConfig";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lzToken";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "LzTokenFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeOrAltTokenFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "verifier";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "header";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "proofHash";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadSigned";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "verifiers";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "optionalVerifiers";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly name: "VerifierFeePaid";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "option";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliverable";
        readonly outputs: readonly [{
            readonly internalType: "enum IMessageLibBase.DeliveryState";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "verifier";
            readonly type: "address";
        }];
        readonly name: "hashLookup";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPacket.PacketForQuote";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPacket.Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMessageLibManager.SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "setDefaultOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_verifier";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_requiredConfirmation";
            readonly type: "uint64";
        }];
        readonly name: "verified";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verify";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "_config";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifyConditionMet";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): UltraLightNode302Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): UltraLightNode302;
}

type index$5_UltraLightNode302__factory = UltraLightNode302__factory;
declare const index$5_UltraLightNode302__factory: typeof UltraLightNode302__factory;
declare namespace index$5 {
  export {
    index$5_UltraLightNode302__factory as UltraLightNode302__factory,
  };
}

declare class MultiSig__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "UpdateQuorum";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "UpdateSigner";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signerSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "signers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_signatures";
            readonly type: "bytes";
        }];
        readonly name: "verifySignatures";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MultiSigInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MultiSig;
}

type UlnBaseConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class UlnBase__factory extends ContractFactory {
    constructor(...args: UlnBaseConstructorParams);
    deploy(_ulnConfig: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<UlnBase>;
    getDeployTransaction(_ulnConfig: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): UlnBase;
    connect(signer: Signer): UlnBase__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060405161068c38038061068c83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610604610088600039600050506106046000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633c782a5214610046578063a5972ec51461009e578063c7734173146100c1575b600080fd5b6100806100543660046102c9565b6000602081815293815260408082208552928152828120909352825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6100b16100ac366004610450565b61011c565b6040519015158152602001610095565b6100b16100cf366004610559565b60009283526020838152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff9590951684529390935290205467ffffffffffffffff9182169116101590565b8251600090815b856060015160ff168110156101b7576101a08660c00151828151811061014b5761014b61059f565b60209081029190910181015160008881528083526040808220898352845280822073ffffffffffffffffffffffffffffffffffffffff90931682529190925290205467ffffffffffffffff8085169116101590565b6101af57600092505050610299565b600101610123565b506000856060015160ff161180156101d45750608085015160ff16155b156101e3576001915050610299565b6000805b866080015160ff16811015610291576102648760e00151828151811061020f5761020f61059f565b602090810291909101810151600089815280835260408082208a8352845280822073ffffffffffffffffffffffffffffffffffffffff90931682529190925290205467ffffffffffffffff8086169116101590565b15610289578160010191508660a0015160ff1682106102895760019350505050610299565b6001016101e7565b505060009150505b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102c457600080fd5b919050565b6000806000606084860312156102de57600080fd5b83359250602084013591506102f5604085016102a0565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610351576103516102fe565b60405290565b803567ffffffffffffffff811681146102c457600080fd5b803580151581146102c457600080fd5b803560ff811681146102c457600080fd5b600082601f8301126103a157600080fd5b8135602067ffffffffffffffff808311156103be576103be6102fe565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715610401576104016102fe565b60405293845285810183019383810192508785111561041f57600080fd5b83870191505b8482101561044557610436826102a0565b83529183019190830190610425565b979650505050505050565b60008060006060848603121561046557600080fd5b833567ffffffffffffffff8082111561047d57600080fd5b90850190610100828803121561049257600080fd5b61049a61032d565b6104a383610357565b81526104b16020840161036f565b60208201526104c26040840161036f565b60408201526104d36060840161037f565b60608201526104e46080840161037f565b60808201526104f560a0840161037f565b60a082015260c08301358281111561050c57600080fd5b61051889828601610390565b60c08301525060e08301358281111561053057600080fd5b61053c89828601610390565b60e083015250976020870135975060409096013595945050505050565b6000806000806080858703121561056f57600080fd5b610578856102a0565b9350602085013592506040850135915061059460608601610357565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122052f14f1aa37e1de76dad3131e57199691f599702ffa73174044ade8d1834336c64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_ulnConfig";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "verifier";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "header";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "confirmations";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "proofHash";
            readonly type: "bytes32";
        }];
        readonly name: "PayloadSigned";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "verifiers";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address[]";
            readonly name: "optionalVerifiers";
            readonly type: "address[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly name: "VerifierFeePaid";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "verifier";
            readonly type: "address";
        }];
        readonly name: "hashLookup";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_verifier";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_requiredConfirmation";
            readonly type: "uint64";
        }];
        readonly name: "verified";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "_config";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_headerHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "verifyConditionMet";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): UlnBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): UlnBase;
}

type UlnConfigConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class UlnConfig__factory extends ContractFactory {
    constructor(...args: UlnConfigConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<UlnConfig>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): UlnConfig;
    connect(signer: Signer): UlnConfig__factory;
    static readonly bytecode = "0x60806040523480156200001157600080fd5b506200001d3362000023565b62000075565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6137c480620000856000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806381fa12a1116100d8578063d0f9ffb51161008c578063d59104ed11610066578063d59104ed14610469578063ef7027f21461047c578063f2fde38b1461048f57600080fd5b8063d0f9ffb514610430578063d2d287f014610443578063d2f759851461045657600080fd5b80638fd061fc116100bd5780638fd061fc146103ea578063c4c37246146103fd578063cd84b89d1461041d57600080fd5b806381fa12a1146103ab5780638da5cb5b146103cc57600080fd5b8063560042df1161012f5780636c473aff116101145780636c473aff146102fd578063715018a61461034257806375b5152a1461034a57600080fd5b8063560042df1461029b5780636750cd4c146102bb57600080fd5b80633563876b116101605780633563876b146101ba57806343ea4fa9146101db578063545d1efa146101ee57600080fd5b80630e3751b91461017c5780631c63e3b6146101a5575b600080fd5b61018f61018a366004612ec8565b6104a2565b60405161019c9190612ffa565b60405180910390f35b6101b86101b3366004613059565b610688565b005b6101cd6101c8366004612ec8565b610819565b60405161019c9291906130b0565b61018f6101e9366004612ec8565b610890565b61025a6101fc366004612ec8565b600160209081526000928352604080842090915290825290205463ffffffff811690640100000000810467ffffffffffffffff16906c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1683565b6040805163ffffffff909416845267ffffffffffffffff909216602084015273ffffffffffffffffffffffffffffffffffffffff169082015260600161019c565b6102ae6102a936600461310c565b610c6a565b60405161019c919061318b565b6102ed6102c936600461319e565b63ffffffff1660009081526004602052604090205467ffffffffffffffff16151590565b604051901515815260200161019c565b60055461031d9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161019c565b6101b8610e2e565b61025a61035836600461319e565b60006020819052908152604090205463ffffffff811690640100000000810467ffffffffffffffff16906c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1683565b6103be6103b93660046131b9565b610e42565b60405161019c9291906131f8565b60025473ffffffffffffffffffffffffffffffffffffffff1661031d565b6103be6103f836600461321c565b611105565b61041061040b366004612ec8565b611305565b60405161019c9190613261565b6101b861042b3660046132a8565b6114bc565b61018f61043e36600461319e565b611592565b6101b8610451366004613059565b611758565b6101b86104643660046132c5565b611a02565b6101b8610477366004613307565b611fd8565b6102ae61048a36600461310c565b6123bb565b6101b861049d3660046132a8565b6124fc565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e081019190915273ffffffffffffffffffffffffffffffffffffffff8316600090815260036020908152604080832063ffffffff86168452825291829020825161010081018452815467ffffffffffffffff8116825260ff68010000000000000000820481161515838601526901000000000000000000820481161515838701526a01000000000000000000008204811660608401526b0100000000000000000000008204811660808401526c010000000000000000000000009091041660a08201526001820180548551818602810186019096528086529194929360c0860193929083018282801561060757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105dc575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561067657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161064b575b50505050508152505090505b92915050565b60055460408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff163314610718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b60405180910390fd5b5060005b82811015610813576000848483818110610738576107386133ab565b905060200201602081019061074d919061319e565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020908152604080832063ffffffff85168452909152812080547fffffffffffffffffffffffffffffffffffffff000000000000000000000000001681559192506107b96001830182612dcd565b6107c7600283016000612dcd565b505073ffffffffffffffffffffffffffffffffffffffff8316600090815260016020908152604080832063ffffffff85168452909152812055508061080b81613409565b91505061071c565b50505050565b60408051610100810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c0840181905260e0840181905284519081018552828152908101829052928301529061087a8484610890565b6108848585611305565b915091505b9250929050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e081019190915273ffffffffffffffffffffffffffffffffffffffff8316600090815260036020908152604080832063ffffffff861684528252808320815161010081018352815467ffffffffffffffff8116825260ff68010000000000000000820481161515838701526901000000000000000000820481161515838601526a01000000000000000000008204811660608401526b0100000000000000000000008204811660808401526c010000000000000000000000009091041660a08201526001820180548451818702810187019095528085529194929360c08601939092908301828280156109f557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116109ca575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020018280548015610a6457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610a39575b5050509190925250505063ffffffff841660009081526004602090815260409182902080548351808501909452600784527f4c5a3130303038000000000000000000000000000000000000000000000000009284019290925292935067ffffffffffffffff169081610b03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b50825167ffffffffffffffff16600003610b255767ffffffffffffffff811683525b8260200151610bb65781600101805480602002602001604051908101604052809291908181526020018280548015610b9357602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610b68575b505050505060c084015281546a0100000000000000000000900460ff1660608401525b8260400151610c605781600201805480602002602001604051908101604052809291908181526020018280548015610c2457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610bf9575b505050505060e0840152815460ff6b0100000000000000000000008204811660808601526c010000000000000000000000009091041660a08401525b5090949350505050565b6060600363ffffffff831611610c8b57610c8483836123bb565b9050610682565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc63ffffffff831601610d025763ffffffff83166000908152600460209081526040918290208054835167ffffffffffffffff9091169281019290925291015b604051602081830303815290604052915050610682565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb63ffffffff831601610d595763ffffffff83166000908152600460209081526040918290209151610ceb9160018401910161348c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa63ffffffff831601610dc95763ffffffff8316600090815260046020908152604091829020805492519092610ceb9260028501926c0100000000000000000000000090920460ff16910161349f565b604080518082018252600781527f4c5a433030303000000000000000000000000000000000000000000000000000602082015290517f08c379a000000000000000000000000000000000000000000000000000000000815261070f919060040161318b565b610e366125b3565b610e406000612634565b565b606060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301610f235773ffffffffffffffffffffffffffffffffffffffff8416600090815260016020908152604080832063ffffffff808a168552925282208054909291169003610ef35763ffffffff868116600090815260208181526040918290208054835194169184019190915291015b60405160208183030381529060405260019350935050506110fd565b80546040805163ffffffff9092166020830152015b604051602081830303815290604052600092509250506110fd565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8301610ffd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260016020908152604080832063ffffffff8916845290915281208054909164010000000090910467ffffffffffffffff169003610fd95763ffffffff8616600090815260208181526040918290208054835164010000000090910467ffffffffffffffff16928101929092529101610ed7565b80546040805164010000000090920467ffffffffffffffff16602083015201610f08565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8301610dc95773ffffffffffffffffffffffffffffffffffffffff808516600090815260016020908152604080832063ffffffff8a1684529091529020805490916c01000000000000000000000000909104166110c55763ffffffff861660009081526020818152604091829020805483516c0100000000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16928101929092529101610ed7565b8054604080516c0100000000000000000000000090920473ffffffffffffffffffffffffffffffffffffffff16602083015201610f08565b935093915050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020818152604080842063ffffffff8089168652908352818520600490935290842060609493909186161161116e5761116387878763ffffffff16610e42565b9350935050506110fd565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc63ffffffff86160161120057815467ffffffffffffffff166000036111cb5780546040805167ffffffffffffffff909216602083015201610ed7565b81546040805167ffffffffffffffff9092166020830152015b60405160208183030381529060405260009350935050506110fd565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb63ffffffff86160161126b57815468010000000000000000900460ff161561125757816001016040516020016111e4919061348c565b80600101604051602001610ed7919061348c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa63ffffffff861601610dc95781546901000000000000000000900460ff16156112da5781546040516111e49160028501916c0100000000000000000000000090910460ff169060200161349f565b8054604051610ed79160028401916c0100000000000000000000000090910460ff169060200161349f565b60408051606080820183526000808352602080840182905283850182905273ffffffffffffffffffffffffffffffffffffffff87811683526001825285832063ffffffff88811680865291845287852088518088018a529054808316825264010000000080820467ffffffffffffffff908116848901526c01000000000000000000000000928390048716848d0152948852878752968a90208a519889018b525492831680895296830490931687860152919004909116848701528551808701909652600786527f4c5a3130303038000000000000000000000000000000000000000000000000009186019190915292939061142e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b50815163ffffffff1660000361144957805163ffffffff1682525b816020015167ffffffffffffffff166000036114745760208082015167ffffffffffffffff16908301525b604082015173ffffffffffffffffffffffffffffffffffffffff166114b45760408082015173ffffffffffffffffffffffffffffffffffffffff16908301525b509392505050565b6114c46125b3565b60055460408051808201909152600781527f4c5a38303030300000000000000000000000000000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff161561154a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b50600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e081019190915263ffffffff8216600090815260046020908152604091829020825161010081018452815467ffffffffffffffff8116825260ff68010000000000000000820481161515838601526901000000000000000000820481161515838701526a01000000000000000000008204811660608401526b0100000000000000000000008204811660808401526c010000000000000000000000009091041660a08201526001820180548551818602810186019096528086529194929360c086019392908301828280156116d957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116116ae575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561174857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161171d575b5050505050815250509050919050565b60055460408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1633146117df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b5060005b828110156108135760008484838181106117ff576117ff6133ab565b9050602002016020810190611814919061319e565b905060006118228483610890565b60016020808301828152604080850184815273ffffffffffffffffffffffffffffffffffffffff8a1660009081526003855282812063ffffffff8a16825285529190912085518154935192516060880151608089015160a08a015160ff9081166c01000000000000000000000000027fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff9282166b01000000000000000000000002929092167fffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffffffff939091166a0100000000000000000000027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff941515690100000000000000000002949094167fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff97151568010000000000000000027fffffffffffffffffffffffffffffffffffffffffffffff00000000000000000090991667ffffffffffffffff9096169590951797909717959095169290921717169290921717815560c08401518051949550859491936119c39390850192910190612deb565b5060e082015180516119df916002840191602090910190612deb565b509050506119ed82856126ab565b505080806119fa90613409565b9150506117e3565b611a0a6125b3565b60005b81811015611fd35736838383818110611a2857611a286133ab565b9050602002810190611a3a91906134c4565b90506000611a4b60a0830183613502565b915060009050611a5e60c0840184613502565b915060009050611a7460a085016080860161356a565b67ffffffffffffffff16116040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090611aed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b5060ff611afa8284613594565b11156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090611b6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b5080611b7d610100850160e086016135b8565b60ff1611156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090611bf0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b506000821180611c1357506000611c0e610100850160e086016135b8565b60ff16115b6040518060400160405280600781526020017f4c5a31303031310000000000000000000000000000000000000000000000000081525090611c81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b50611ccb611c9260a0850185613502565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250612763915050565b611d14611cdb60c0850185613502565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250612763915050565b60408051610100810190915280611d3160a086016080870161356a565b67ffffffffffffffff168152600060208201819052604082015260ff80851660608301528316608082015260a001611d70610100860160e087016135b8565b60ff168152602001611d8560a0860186613502565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505090825250602001611dc960c0860186613502565b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525060049250611e0e9050602087018761319e565b63ffffffff16815260208082019290925260409081016000208351815485850151938601516060870151608088015160a089015167ffffffffffffffff9095167fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000909416939093176801000000000000000096151596909602959095177fffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffff166901000000000000000000911515919091027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a010000000000000000000060ff95861602177fffffffffffffffffffffffffffffffffffffff0000ffffffffffffffffffffff166b010000000000000000000000918516919091027fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff16176c01000000000000000000000000939091169290920291909117815560c083015180519192611f8592600185019290910190612deb565b5060e08201518051611fa1916002840191602090910190612deb565b50611fbf9150611fb69050602085018561319e565b8460200161283f565b50505080611fcc90613409565b9050611a0d565b505050565b60055460408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff16331461205f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b5073ffffffffffffffffffffffffffffffffffffffff8416600090815260036020818152604080842063ffffffff808b1686529252909220918516116120b1576120ac8587868686612a75565b6123b3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc63ffffffff8516016121265760006120ec8385018561356a565b82547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff91909116178255506123b3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb63ffffffff85160161221257600080612162848601866136d2565b9150915060006121728251612c13565b9050612181828260ff16612763565b83547fffffffffffffffffffffffffffffffffffffffffff00ff00ffffffffffffffff1668010000000000000000841515027fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff16176a010000000000000000000060ff83160217845581516121ff9060018601906020850190612deb565b5061220a8989612caa565b5050506123b3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa63ffffffff851601610dc9576000808061224f85870187613720565b92509250925060006122618351612c13565b90508060ff168260ff1611156040518060400160405280600781526020017f4c5a313030303000000000000000000000000000000000000000000000000000815250906122db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b506122e9838260ff16612763565b84547fffffffffffffffffffffffffffffffffffffffff00ff00ffffffffffffffffff166901000000000000000000851515027fffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff16176b01000000000000000000000060ff83160217855582516123699060028701906020860190612deb565b5084547fffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff166c0100000000000000000000000060ff8416021785556123ae8a8a612caa565b505050505b505050505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff8316016124165763ffffffff83811660009081526020818152604091829020805483519416918401919091529101610ceb565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe63ffffffff83160161247f5763ffffffff8316600090815260208181526040918290208054835164010000000090910467ffffffffffffffff16928101929092529101610ceb565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd63ffffffff831601610dc95763ffffffff831660009081526020818152604091829020805483516c0100000000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16928101929092529101610ceb565b6125046125b3565b73ffffffffffffffffffffffffffffffffffffffff81166125a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161070f565b6125b081612634565b50565b60025473ffffffffffffffffffffffffffffffffffffffff163314610e40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161070f565b6002805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6126b58183611305565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832063ffffffff9687168452825291829020835181549285015194909301519094166c01000000000000000000000000026bffffffffffffffffffffffff67ffffffffffffffff909416640100000000027fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090921692909516919091171716919091179055565b6000805b82811015610813576000848281518110612783576127836133ab565b602002602001015190508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16116040518060400160405280600781526020017f4c5a3130303036000000000000000000000000000000000000000000000000008152509061282a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b5091508061283781613409565b915050612767565b6000612851604083016020840161356a565b67ffffffffffffffff1611801561288e5750600061287560608301604084016132a8565b73ffffffffffffffffffffffffffffffffffffffff1614155b6040518060400160405280600781526020017f4c5a313030303000000000000000000000000000000000000000000000000000815250906128fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b50600061290c602083018361319e565b63ffffffff16116040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090612981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b5063ffffffff821660009081526020819052604090819020906129aa90606084019084016132a8565b815473ffffffffffffffffffffffffffffffffffffffff919091166c01000000000000000000000000026bffffffffffffffffffffffff9091161781556129f4602083018361319e565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff91909116178155612a34604083016020840161356a565b815467ffffffffffffffff91909116640100000000027fffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffff9091161790555050565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260016020908152604080832063ffffffff888116855292529091209084167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01612b19576000612ae38385018561319e565b82547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff91909116178255506123b3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe63ffffffff851601612b96576000612b548385018561356a565b825467ffffffffffffffff909116640100000000027fffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffff909116178255506123b3565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd63ffffffff851601610dc9576000612bd1838501856132a8565b825473ffffffffffffffffffffffffffffffffffffffff9091166c01000000000000000000000000026bffffffffffffffffffffffff909116178255506123b3565b600060ff821115612ca6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203860448201527f2062697473000000000000000000000000000000000000000000000000000000606482015260840161070f565b5090565b6000612cb68284610890565b90506000816060015160ff161180612cd5575060008160a0015160ff16115b6040518060400160405280600781526020017f4c5a44303030340000000000000000000000000000000000000000000000000081525090612d43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b506080810151606082015160ff91612d5a91613775565b60ff1611156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090610813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070f919061318b565b50805460008255906000526020600020908101906125b09190612e6d565b828054828255906000526020600020908101928215612e65579160200282015b82811115612e6557825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190612e0b565b50612ca69291505b5b80821115612ca65760008155600101612e6e565b73ffffffffffffffffffffffffffffffffffffffff811681146125b057600080fd5b8035612eaf81612e82565b919050565b803563ffffffff81168114612eaf57600080fd5b60008060408385031215612edb57600080fd5b8235612ee681612e82565b9150612ef460208401612eb4565b90509250929050565b600081518084526020808501945080840160005b83811015612f4357815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612f11565b509495945050505050565b600061010067ffffffffffffffff83511684526020830151151560208501526040830151612f80604086018215159052565b506060830151612f95606086018260ff169052565b506080830151612faa608086018260ff169052565b5060a0830151612fbf60a086018260ff169052565b5060c08301518160c0860152612fd782860182612efd565b91505060e083015184820360e0860152612ff18282612efd565b95945050505050565b60208152600061300d6020830184612f4e565b9392505050565b60008083601f84011261302657600080fd5b50813567ffffffffffffffff81111561303e57600080fd5b6020830191508360208260051b850101111561088957600080fd5b60008060006040848603121561306e57600080fd5b833567ffffffffffffffff81111561308557600080fd5b61309186828701613014565b90945092505060208401356130a581612e82565b809150509250925092565b6080815260006130c36080830185612f4e565b905061300d6020830184805163ffffffff16825260208082015167ffffffffffffffff169083015260409081015173ffffffffffffffffffffffffffffffffffffffff16910152565b6000806040838503121561311f57600080fd5b612ee683612eb4565b60008151808452602060005b8281101561314f578481018201518682018301528101613134565b506000858301820152601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690930190920192915050565b60208152600061300d6020830184613128565b6000602082840312156131b057600080fd5b61300d82612eb4565b6000806000606084860312156131ce57600080fd5b6131d784612eb4565b925060208401356131e781612e82565b929592945050506040919091013590565b60408152600061320b6040830185613128565b905082151560208301529392505050565b60008060006060848603121561323157600080fd5b61323a84612eb4565b9250602084013561324a81612e82565b915061325860408501612eb4565b90509250925092565b815163ffffffff16815260208083015167ffffffffffffffff169082015260408083015173ffffffffffffffffffffffffffffffffffffffff169082015260608101610682565b6000602082840312156132ba57600080fd5b813561300d81612e82565b600080602083850312156132d857600080fd5b823567ffffffffffffffff8111156132ef57600080fd5b6132fb85828601613014565b90969095509350505050565b60008060008060006080868803121561331f57600080fd5b61332886612eb4565b9450602086013561333881612e82565b935061334660408701612eb4565b9250606086013567ffffffffffffffff8082111561336357600080fd5b818801915088601f83011261337757600080fd5b81358181111561338657600080fd5b89602082850101111561339857600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361343a5761343a6133da565b5060010190565b6000815480845260208085019450836000528060002060005b83811015612f4357815473ffffffffffffffffffffffffffffffffffffffff168752958201956001918201910161345a565b60208152600061300d6020830184613441565b6040815260006134b26040830185613441565b905060ff831660208301529392505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018336030181126134f857600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261353757600080fd5b83018035915067ffffffffffffffff82111561355257600080fd5b6020019150600581901b360382131561088957600080fd5b60006020828403121561357c57600080fd5b813567ffffffffffffffff8116811461300d57600080fd5b80820180821115610682576106826133da565b803560ff81168114612eaf57600080fd5b6000602082840312156135ca57600080fd5b61300d826135a7565b80358015158114612eaf57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261362357600080fd5b8135602067ffffffffffffffff80831115613640576136406135e3565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715613683576136836135e3565b6040529384528581018301938381019250878511156136a157600080fd5b83870191505b848210156136c7576136b882612ea4565b835291830191908301906136a7565b979650505050505050565b600080604083850312156136e557600080fd5b6136ee836135d3565b9150602083013567ffffffffffffffff81111561370a57600080fd5b61371685828601613612565b9150509250929050565b60008060006060848603121561373557600080fd5b61373e846135d3565b9250602084013567ffffffffffffffff81111561375a57600080fd5b61376686828701613612565b925050613258604085016135a7565b60ff8181168382160190811115610682576106826133da56fea264697066735822122089c74b792c1ef0e1b98d245fe87770f3207c4bc5477174d1840d19f83893c66c64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultOutboundConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "outboundConfirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfigByType";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultConfigByType";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultOutboundConfigByType";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getOutboundConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "outboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct OutboundConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getOutboundConfigByType";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getRawUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnAndOutboundConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "outboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct OutboundConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "getUlnConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "useCustomOptionalVerifiers";
                readonly type: "bool";
            }, {
                readonly internalType: "uint8";
                readonly name: "verifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierCount";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }];
            readonly internalType: "struct UlnConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "outboundConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "outboundConfirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_remoteEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setConfigByType";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "maxMessageSize";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "outboundConfirmations";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "executor";
                    readonly type: "address";
                }];
                readonly internalType: "struct OutboundConfigStruct";
                readonly name: "outboundConfig";
                readonly type: "tuple";
            }, {
                readonly internalType: "uint64";
                readonly name: "inboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address[]";
                readonly name: "verifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "address[]";
                readonly name: "optionalVerifiers";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint8";
                readonly name: "optionalVerifierThreshold";
                readonly type: "uint8";
            }];
            readonly internalType: "struct SetDefaultConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDefaultConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_uln";
            readonly type: "address";
        }];
        readonly name: "setUln";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "uln";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): UlnConfigInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): UlnConfig;
}

type VerifierFeeLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class VerifierFeeLib__factory extends ContractFactory {
    constructor(...args: VerifierFeeLibConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<VerifierFeeLib>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): VerifierFeeLib;
    connect(signer: Signer): VerifierFeeLib__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610a4d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637bfa20a91461003b578063df2b057e14610060575b600080fd5b61004e6100493660046104ca565b610073565b60405190815260200160405180910390f35b61004e61006e366004610787565b6101c7565b60008061009861008960a0880160808901610857565b67ffffffffffffffff1661037c565b90506000806100aa6020890189610872565b73ffffffffffffffffffffffffffffffffffffffff166388a4124c6100d560408b0160208c0161088d565b856100e360208c018c610857565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815263ffffffff939093166004840152602483019190915267ffffffffffffffff166044820152606401608060405180830381865afa158015610154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017891906108a8565b9350505091506101bb8288602001602081019061019591906108fd565b6101a560c08c0160a08d016108fd565b6101b560608c0160408d01610918565b856103e8565b98975050505050505050565b6000806101e1856080015167ffffffffffffffff1661037c565b8551602087015186516040517f11f2c34300000000000000000000000000000000000000000000000000000000815263ffffffff90921660048301526024820184905267ffffffffffffffff16604482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906311f2c343906064016020604051808303816000875af115801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610935565b8651602088015187516040517fc1723a1d00000000000000000000000000000000000000000000000000000000815263ffffffff90921660048301526024820186905267ffffffffffffffff166044820152919250600091829173ffffffffffffffffffffffffffffffffffffffff169063c1723a1d90859060640160806040518083038185885af1158015610338573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061035d91906108a8565b9350505091506101bb8288602001518a60a001518a60400151856103e8565b60008061038a60418461097d565b90506103976020826109c9565b156103bf576103a76020826109c9565b6103b190826109dd565b6103bc9060206109f0565b90505b806103cc60e060446109f0565b6103d691906109f0565b6103e19060406109f0565b9392505050565b60008061ffff8616156103fb57856103fd565b845b9050600061271061041261ffff84168a61097d565b61041c9190610a03565b90506fffffffffffffffffffffffffffffffff8416158061044d57506fffffffffffffffffffffffffffffffff8516155b1561045b5791506104c19050565b6000846fffffffffffffffffffffffffffffffff16670de0b6b3a7640000876fffffffffffffffffffffffffffffffff16610496919061097d565b6104a09190610a03565b6104aa908a6109f0565b90508181116104b957816104bb565b805b93505050505b95945050505050565b6000806000808486036101408112156104e257600080fd5b60c08112156104f057600080fd5b85945060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408201121561052357600080fd5b5060c08501925061012085013567ffffffffffffffff8082111561054657600080fd5b818701915087601f83011261055a57600080fd5b81358181111561056957600080fd5b88602082850101111561057b57600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156105dc576105dc61058a565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461060657600080fd5b919050565b803563ffffffff8116811461060657600080fd5b803567ffffffffffffffff8116811461060657600080fd5b803561ffff8116811461060657600080fd5b6fffffffffffffffffffffffffffffffff8116811461066757600080fd5b50565b60006060828403121561067c57600080fd5b6040516060810181811067ffffffffffffffff8211171561069f5761069f61058a565b6040529050806106ae8361061f565b81526106bc60208401610637565b602082015260408301356106cf81610649565b6040919091015292915050565b600082601f8301126106ed57600080fd5b813567ffffffffffffffff808211156107085761070861058a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561074e5761074e61058a565b8160405283815286602085880101111561076757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600083850361014081121561079e57600080fd5b60c08112156107ac57600080fd5b506107b56105b9565b6107be856105e2565b81526107cc6020860161060b565b60208201526107dd6040860161061f565b60408201526107ee606086016105e2565b60608201526107ff6080860161061f565b608082015261081060a08601610637565b60a082015292506108248560c0860161066a565b915061012084013567ffffffffffffffff81111561084157600080fd5b61084d868287016106dc565b9150509250925092565b60006020828403121561086957600080fd5b6103e18261061f565b60006020828403121561088457600080fd5b6103e1826105e2565b60006020828403121561089f57600080fd5b6103e18261060b565b600080600080608085870312156108be57600080fd5b8451935060208501516108d081610649565b60408601519093506108e181610649565b60608601519092506108f281610649565b939692955090935050565b60006020828403121561090f57600080fd5b6103e182610637565b60006020828403121561092a57600080fd5b81356103e181610649565b60006020828403121561094757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176109945761099461094e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826109d8576109d861099a565b500690565b818103818111156109945761099461094e565b808201808211156109945761099461094e565b600082610a1257610a1261099a565b50049056fea2646970667358221220aacf4aeb7f3b10efb8d3086cb34d2fd939ae3b69c13a8317b5989e3e3497a6bb64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IVerifierFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IVerifier.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "confirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "quorum";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IVerifierFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IVerifier.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): VerifierFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): VerifierFeeLib;
}

type VerifierNetworkConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class VerifierNetwork__factory extends ContractFactory {
    constructor(...args: VerifierNetworkConstructorParams);
    deploy(_messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _signers: PromiseOrValue<string>[], _quorum: PromiseOrValue<BigNumberish>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<VerifierNetwork>;
    getDeployTransaction(_messageLibs: PromiseOrValue<string>[], _priceFeed: PromiseOrValue<string>, _signers: PromiseOrValue<string>[], _quorum: PromiseOrValue<BigNumberish>, _admins: PromiseOrValue<string>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): VerifierNetwork;
    connect(signer: Signer): VerifierNetwork__factory;
    static readonly bytecode = "";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "_messageLibs";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_signers";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }, {
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "confirmations";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly name: "AssignJob";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_index";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "ExecuteFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signatures";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecuteParam";
            readonly name: "param";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }];
        readonly name: "HashAlreadyUsed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IVerifier.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "SetDstConfig";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "UpdateQuorum";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "UpdateSigner";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "totalFee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "gas";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "floorMarginUSD";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiration";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signatures";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ExecuteParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "execute";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_target";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiration";
            readonly type: "uint256";
        }];
        readonly name: "hashCallData";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "gas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IVerifier.DstConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "setQuorum";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setSigner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signerSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "signers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "executableHash";
            readonly type: "bytes32";
        }];
        readonly name: "usedHashes";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "used";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract IUltraLightNode";
            readonly name: "_uln";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_packetHeader";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_confirmations";
            readonly type: "uint64";
        }];
        readonly name: "verifyAndDeliver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_signatures";
            readonly type: "bytes";
        }];
        readonly name: "verifySignatures";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFeeFromUlnV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): VerifierNetworkInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): VerifierNetwork;
}

type index$4_MultiSig__factory = MultiSig__factory;
declare const index$4_MultiSig__factory: typeof MultiSig__factory;
type index$4_UlnBase__factory = UlnBase__factory;
declare const index$4_UlnBase__factory: typeof UlnBase__factory;
type index$4_UlnConfig__factory = UlnConfig__factory;
declare const index$4_UlnConfig__factory: typeof UlnConfig__factory;
type index$4_VerifierFeeLib__factory = VerifierFeeLib__factory;
declare const index$4_VerifierFeeLib__factory: typeof VerifierFeeLib__factory;
type index$4_VerifierNetwork__factory = VerifierNetwork__factory;
declare const index$4_VerifierNetwork__factory: typeof VerifierNetwork__factory;
declare namespace index$4 {
  export {
    index$4_MultiSig__factory as MultiSig__factory,
    index$4_UlnBase__factory as UlnBase__factory,
    index$4_UlnConfig__factory as UlnConfig__factory,
    index$4_VerifierFeeLib__factory as VerifierFeeLib__factory,
    index$4_VerifierNetwork__factory as VerifierNetwork__factory,
    index$8 as interfaces,
    index$6 as uln301,
    index$5 as uln302,
  };
}

type ProxyAdminConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ProxyAdmin__factory extends ContractFactory {
    constructor(...args: ProxyAdminConstructorParams);
    deploy(initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ProxyAdmin>;
    getDeployTransaction(initialOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ProxyAdmin;
    connect(signer: Signer): ProxyAdmin__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060405161093b38038061093b83398101604081905261002f91610097565b61003833610047565b61004181610047565b506100c7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100a957600080fd5b81516001600160a01b03811681146100c057600080fd5b9392505050565b610865806100d66000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461012b57806399a88ec41461013e578063f2fde38b1461015e578063f3b7dead1461017e57600080fd5b8063204e1c7a14610080578063715018a6146100c95780637eff275e146100e05780638da5cb5b14610100575b600080fd5b34801561008c57600080fd5b506100a061009b366004610608565b61019e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3480156100d557600080fd5b506100de610255565b005b3480156100ec57600080fd5b506100de6100fb36600461062c565b610269565b34801561010c57600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166100a0565b6100de610139366004610694565b6102f7565b34801561014a57600080fd5b506100de61015936600461062c565b61038c565b34801561016a57600080fd5b506100de610179366004610608565b6103e8565b34801561018a57600080fd5b506100a0610199366004610608565b6104a4565b60008060008373ffffffffffffffffffffffffffffffffffffffff166040516101ea907f5c60da1b00000000000000000000000000000000000000000000000000000000815260040190565b600060405180830381855afa9150503d8060008114610225576040519150601f19603f3d011682016040523d82523d6000602084013e61022a565b606091505b50915091508161023957600080fd5b8080602001905181019061024d9190610788565b949350505050565b61025d6104f0565b6102676000610571565b565b6102716104f0565b6040517f8f28397000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690638f283970906024015b600060405180830381600087803b1580156102db57600080fd5b505af11580156102ef573d6000803e3d6000fd5b505050505050565b6102ff6104f0565b6040517f4f1ef28600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690634f1ef28690349061035590869086906004016107a5565b6000604051808303818588803b15801561036e57600080fd5b505af1158015610382573d6000803e3d6000fd5b5050505050505050565b6103946104f0565b6040517f3659cfe600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690633659cfe6906024016102c1565b6103f06104f0565b73ffffffffffffffffffffffffffffffffffffffff8116610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6104a181610571565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff166040516101ea907ff851a44000000000000000000000000000000000000000000000000000000000815260040190565b60005473ffffffffffffffffffffffffffffffffffffffff163314610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161048f565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff811681146104a157600080fd5b60006020828403121561061a57600080fd5b8135610625816105e6565b9392505050565b6000806040838503121561063f57600080fd5b823561064a816105e6565b9150602083013561065a816105e6565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000606084860312156106a957600080fd5b83356106b4816105e6565b925060208401356106c4816105e6565b9150604084013567ffffffffffffffff808211156106e157600080fd5b818601915086601f8301126106f557600080fd5b81358181111561070757610707610665565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561074d5761074d610665565b8160405282815289602084870101111561076657600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561079a57600080fd5b8151610625816105e6565b73ffffffffffffffffffffffffffffffffffffffff8316815260006020604081840152835180604085015260005b818110156107ef578581018301518582016060015282016107d3565b5060006060828601015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010192505050939250505056fea264697066735822122087cea0977bca1a312fd7f17a5c2257e1d54f91d3bd1cad59c7f70877281a000864736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "initialOwner";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "changeProxyAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }];
        readonly name: "getProxyAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }];
        readonly name: "getProxyImplementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "upgrade";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "contract TransparentUpgradeableProxy";
            readonly name: "proxy";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): ProxyAdminInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ProxyAdmin;
}

type TransparentUpgradeableProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class TransparentUpgradeableProxy__factory extends ContractFactory {
    constructor(...args: TransparentUpgradeableProxyConstructorParams);
    deploy(_logic: PromiseOrValue<string>, admin_: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TransparentUpgradeableProxy>;
    getDeployTransaction(_logic: PromiseOrValue<string>, admin_: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TransparentUpgradeableProxy;
    connect(signer: Signer): TransparentUpgradeableProxy__factory;
    static readonly bytecode = "0x60806040526040516200103038038062001030833981016040819052620000269162000473565b828162000036828260006200009a565b5062000066905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000553565b60008051602062000fe98339815191521462000086576200008662000575565b6200009182620000cc565b505050620005de565b620000a5836200013e565b600082511180620000b35750805b15620000c757620000c5838362000180565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200010e60008051602062000fe9833981519152546001600160a01b031690565b604080516001600160a01b03928316815291841660208301520160405180910390a16200013b81620001b1565b50565b62000149816200024f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001a883836040518060600160405280602781526020016200100960279139620002e6565b90505b92915050565b6001600160a01b0381166200021c5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b8060008051602062000fe98339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381163b620002be5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000213565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6200022e565b6060600080856001600160a01b0316856040516200030591906200058b565b600060405180830381855af49150503d806000811462000342576040519150601f19603f3d011682016040523d82523d6000602084013e62000347565b606091505b5090925090506200035b8683838762000365565b9695505050505050565b60608315620003d9578251600003620003d1576001600160a01b0385163b620003d15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000213565b5081620003e5565b620003e58383620003ed565b949350505050565b815115620003fe5781518083602001fd5b8060405162461bcd60e51b8152600401620002139190620005a9565b80516001600160a01b03811681146200043257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200046a57818101518382015260200162000450565b50506000910152565b6000806000606084860312156200048957600080fd5b62000494846200041a565b9250620004a4602085016200041a565b60408501519092506001600160401b0380821115620004c257600080fd5b818601915086601f830112620004d757600080fd5b815181811115620004ec57620004ec62000437565b604051601f8201601f19908116603f0116810190838211818310171562000517576200051762000437565b816040528281528960208487010111156200053157600080fd5b620005448360208301602088016200044d565b80955050505050509250925092565b81810381811115620001ab57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052600160045260246000fd5b600082516200059f8184602087016200044d565b9190910192915050565b6020815260008251806020840152620005ca8160408501602087016200044d565b601f01601f19169190910160400192915050565b6109fb80620005ee6000396000f3fe60806040526004361061005e5760003560e01c80635c60da1b116100435780635c60da1b146100a85780638f283970146100e6578063f851a440146101065761006d565b80633659cfe6146100755780634f1ef286146100955761006d565b3661006d5761006b61011b565b005b61006b61011b565b34801561008157600080fd5b5061006b61009036600461086f565b610135565b61006b6100a336600461088a565b61017f565b3480156100b457600080fd5b506100bd6101f3565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3480156100f257600080fd5b5061006b61010136600461086f565b610231565b34801561011257600080fd5b506100bd61025e565b61012361028c565b61013361012e610363565b61036d565b565b61013d610391565b73ffffffffffffffffffffffffffffffffffffffff16330361017757610174816040518060200160405280600081525060006103d1565b50565b61017461011b565b610187610391565b73ffffffffffffffffffffffffffffffffffffffff1633036101eb576101e68383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506103d1915050565b505050565b6101e661011b565b60006101fd610391565b73ffffffffffffffffffffffffffffffffffffffff16330361022657610221610363565b905090565b61022e61011b565b90565b610239610391565b73ffffffffffffffffffffffffffffffffffffffff16330361017757610174816103fc565b6000610268610391565b73ffffffffffffffffffffffffffffffffffffffff16330361022657610221610391565b610294610391565b73ffffffffffffffffffffffffffffffffffffffff163303610133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b600061022161045d565b3660008037600080366000845af43d6000803e80801561038c573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b5473ffffffffffffffffffffffffffffffffffffffff16919050565b6103da83610485565b6000825111806103e75750805b156101e6576103f683836104d2565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f610425610391565b6040805173ffffffffffffffffffffffffffffffffffffffff928316815291841660208301520160405180910390a1610174816104fe565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6103b5565b61048e8161060a565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606104f7838360405180606001604052806027815260200161099f602791396106d5565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81166105a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161035a565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b73ffffffffffffffffffffffffffffffffffffffff81163b6106ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161035a565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105c4565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516106ff9190610931565b600060405180830381855af49150503d806000811461073a576040519150601f19603f3d011682016040523d82523d6000602084013e61073f565b606091505b50915091506107508683838761075a565b9695505050505050565b606083156107f05782516000036107e95773ffffffffffffffffffffffffffffffffffffffff85163b6107e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161035a565b50816107fa565b6107fa8383610802565b949350505050565b8151156108125781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035a919061094d565b803573ffffffffffffffffffffffffffffffffffffffff8116811461086a57600080fd5b919050565b60006020828403121561088157600080fd5b6104f782610846565b60008060006040848603121561089f57600080fd5b6108a884610846565b9250602084013567ffffffffffffffff808211156108c557600080fd5b818601915086601f8301126108d957600080fd5b8135818111156108e857600080fd5b8760208285010111156108fa57600080fd5b6020830194508093505050509250925092565b60005b83811015610928578181015183820152602001610910565b50506000910152565b6000825161094381846020870161090d565b9190910192915050565b602081526000825180602084015261096c81604085016020870161090d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220365cb903b8ec30a08930b13242ea31090c3e5faddfb8d3eead0b94c99153a59e64736f6c63430008130033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_logic";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "admin_";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "previousAdmin";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "AdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "beacon";
            readonly type: "address";
        }];
        readonly name: "BeaconUpgraded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "implementation";
            readonly type: "address";
        }];
        readonly name: "Upgraded";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "fallback";
    }, {
        readonly inputs: readonly [];
        readonly name: "admin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "admin_";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newAdmin";
            readonly type: "address";
        }];
        readonly name: "changeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "implementation_";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newImplementation";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): TransparentUpgradeableProxyInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TransparentUpgradeableProxy;
}

type index$3_ProxyAdmin__factory = ProxyAdmin__factory;
declare const index$3_ProxyAdmin__factory: typeof ProxyAdmin__factory;
type index$3_TransparentUpgradeableProxy__factory = TransparentUpgradeableProxy__factory;
declare const index$3_TransparentUpgradeableProxy__factory: typeof TransparentUpgradeableProxy__factory;
declare namespace index$3 {
  export {
    index$3_ProxyAdmin__factory as ProxyAdmin__factory,
    index$3_TransparentUpgradeableProxy__factory as TransparentUpgradeableProxy__factory,
  };
}

declare class MultiSigUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "_quorum";
            readonly type: "uint64";
        }];
        readonly name: "UpdateQuorum";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_signer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "UpdateSigner";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "quorum";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "signerSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }];
        readonly name: "signers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_hash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_signatures";
            readonly type: "bytes";
        }];
        readonly name: "verifySignatures";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MultiSigUpgradeableInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MultiSigUpgradeable;
}

type index$2_MultiSigUpgradeable__factory = MultiSigUpgradeable__factory;
declare const index$2_MultiSigUpgradeable__factory: typeof MultiSigUpgradeable__factory;
declare namespace index$2 {
  export {
    index$2_MultiSigUpgradeable__factory as MultiSigUpgradeable__factory,
  };
}

declare class WorkerUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): WorkerUpgradeableInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): WorkerUpgradeable;
}

type index$1_WorkerUpgradeable__factory = WorkerUpgradeable__factory;
declare const index$1_WorkerUpgradeable__factory: typeof WorkerUpgradeable__factory;
declare namespace index$1 {
  export {
    index$1_WorkerUpgradeable__factory as WorkerUpgradeable__factory,
    index$3 as proxy,
    index$2 as uln,
  };
}

type EndpointV2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class EndpointV2__factory extends ContractFactory {
    constructor(...args: EndpointV2ConstructorParams);
    deploy(_eid: PromiseOrValue<BigNumberish>, _blockedLib: PromiseOrValue<string>, _altToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<EndpointV2>;
    getDeployTransaction(_eid: PromiseOrValue<BigNumberish>, _blockedLib: PromiseOrValue<string>, _altToken: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): EndpointV2;
    connect(signer: Signer): EndpointV2__factory;
    static readonly bytecode = "0x60e06040526001600d553480156200001657600080fd5b5060405162005e2b38038062005e2b83398101604081905262000039916200030b565b818362000046336200007d565b63ffffffff166080526001600160a01b03811660a0526200006781620000cd565b506001600160a01b031660c05250620003da9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000d762000290565b6040516301ffc9a760e01b815263d913d0cd60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa15801562000123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014991906200035f565b604051806040016040528060078152602001664c5a433030303160c81b81525090620001935760405162461bcd60e51b81526004016200018a91906200038a565b60405180910390fd5b506001600160a01b038116600090815260056020908152604091829020548251808401909352600783526604c5a38303030360cc1b9183019190915260ff1615620001f35760405162461bcd60e51b81526004016200018a91906200038a565b506001600160a01b0381166000818152600560209081526040808320805460ff191660019081179091556004805491820181559093527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180546001600160a01b0319168417905590519182527f6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af5910160405180910390a150565b6000546001600160a01b03163314620002ec5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200018a565b565b80516001600160a01b03811681146200030657600080fd5b919050565b6000806000606084860312156200032157600080fd5b835163ffffffff811681146200033657600080fd5b92506200034660208501620002ee565b91506200035660408501620002ee565b90509250925092565b6000602082840312156200037257600080fd5b815180151581146200038357600080fd5b9392505050565b600060208083528351808285015260005b81811015620003b9578581018301518582016040015282016200039b565b506000604082860101526040601f19601f8301168501019250505092915050565b60805160a05160c051615a056200042660003960008181610b7401528181611c1a01526142920152600061063601526000818161046601528181613e3e01526141cb0152615a056000f3fe6080604052600436106103295760003560e01c80639c9dd91d116101a5578063c9fc7bcd116100ec578063e8964e8111610095578063f2fde38b1161006f578063f2fde38b14610af9578063f405c85914610b19578063f64be4c714610b2c578063f936112b14610b6257600080fd5b8063e8964e8114610a6e578063eaeacd6314610a8e578063ef667aa114610aae57600080fd5b8063dc93c8a2116100c6578063dc93c8a2146109e2578063e16f964d14610a2e578063e361b59c14610a4e57600080fd5b8063c9fc7bcd1461094b578063d4b4ec8f14610992578063dc706a62146109b257600080fd5b8063aafe5e071161014e578063b8007ff611610128578063b8007ff6146108eb578063b8849ac91461090b578063b96a277f1461092b57600080fd5b8063aafe5e0714610898578063aafea312146108b8578063aca1b45a146108d857600080fd5b8063a0dd43fc1161017f578063a0dd43fc14610838578063a718531b14610858578063a7229fd91461087857600080fd5b80639c9dd91d146107ac5780639d7f9775146107f85780639e7fffcc1461081857600080fd5b80636750cd4c1161027457806379624ca91161021d5780639132e5c3116101f75780639132e5c3146106dc578063965183d4146106fe5780639731526b1461071e5780639c6d73401461074b57600080fd5b806379624ca91461067857806383c47559146106915780638da5cb5b146106be57600080fd5b8063715018a61161024e578063715018a61461060f5780637331809114610624578063754d3b9c1461065857600080fd5b80636750cd4c1461055a5780636e83f5bb1461057a5780636f50a803146105d957600080fd5b8063416ecebf116102d657806351c85b6b116102b057806351c85b6b146104ed57806352d3b5001461051a57806366bf43d61461053a57600080fd5b8063416ecebf14610454578063418ba3511461049d57806345c6dcc4146104cd57600080fd5b806314f651a91161030757806314f651a9146103ae5780632b3197b9146103e7578063402f84681461041557600080fd5b80630678327f1461032e57806307b9ca7c146103505780630c0c389e1461038d575b600080fd5b34801561033a57600080fd5b5061034e6103493660046147f3565b610b96565b005b34801561035c57600080fd5b50600e54610370906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6103a061039b3660046148a2565b610c95565b6040516103849291906149ae565b3480156103ba57600080fd5b506103c3610e20565b6040805163ffffffff90931683526001600160a01b03909116602083015201610384565b3480156103f357600080fd5b506104076104023660046149e2565b610e4f565b604051610384929190614a3a565b34801561042157600080fd5b50610435610430366004614a5e565b610f8f565b604080516001600160a01b039093168352901515602083015201610384565b34801561046057600080fd5b506104887f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610384565b3480156104a957600080fd5b506104bd6104b8366004614a93565b611047565b6040519015158152602001610384565b3480156104d957600080fd5b5061034e6104e8366004614add565b6110c9565b3480156104f957600080fd5b5061050d610508366004614b1d565b6111df565b6040516103849190614b62565b34801561052657600080fd5b5061034e610535366004614b75565b611400565b34801561054657600080fd5b5061034e610555366004614b92565b611475565b34801561056657600080fd5b506104bd610575366004614bd1565b61179f565b34801561058657600080fd5b506105ba610595366004614bd1565b600b60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610384565b3480156105e557600080fd5b506103706105f4366004614bd1565b600a602052600090815260409020546001600160a01b031681565b34801561061b57600080fd5b5061034e6117ef565b34801561063057600080fd5b506103707f000000000000000000000000000000000000000000000000000000000000000081565b34801561066457600080fd5b5061034e610673366004614bec565b611803565b34801561068457600080fd5b50600d54600114156104bd565b34801561069d57600080fd5b506106b16106ac366004614c56565b61190a565b6040516103849190614cde565b3480156106ca57600080fd5b506000546001600160a01b0316610370565b3480156106e857600080fd5b506106f1611a8e565b6040516103849190614cf5565b34801561070a57600080fd5b5061034e610719366004614d42565b611af0565b34801561072a57600080fd5b5061073e610739366004614d97565b611b64565b6040516103849190614de5565b34801561075757600080fd5b50610793610766366004614e21565b600360209081526000938452604080852082529284528284209052825290205467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610384565b3480156107b857600080fd5b506107ea6107c7366004614e5f565b600c60209081526000938452604080852082529284528284209052825290205481565b604051908152602001610384565b34801561080457600080fd5b506104bd610813366004614e7f565b611cb9565b34801561082457600080fd5b5061034e6108333660046147f3565b611d93565b34801561084457600080fd5b50610793610853366004614e21565b611e51565b34801561086457600080fd5b5061034e610873366004614b92565b611eaa565b34801561088457600080fd5b5061034e610893366004614e5f565b61221d565b3480156108a457600080fd5b506107ea6108b3366004614e21565b612288565b3480156108c457600080fd5b5061034e6108d3366004614ebd565b6122e8565b61073e6108e6366004614ef4565b61255a565b3480156108f757600080fd5b5061034e610906366004614f44565b61261f565b34801561091757600080fd5b5061034e610926366004614b92565b612718565b34801561093757600080fd5b50610370610946366004614a5e565b612b48565b34801561095757600080fd5b506107ea610966366004614fb1565b600260209081526000948552604080862082529385528385208152918452828420909152825290205481565b34801561099e57600080fd5b5061034e6109ad366004614b92565b612bf7565b3480156109be57600080fd5b506104bd6109cd366004614b75565b60056020526000908152604090205460ff1681565b3480156109ee57600080fd5b506104bd6109fd366004614a5e565b6001600160a01b03918216600090815260066020908152604080832063ffffffff9490941683529290522054161590565b348015610a3a57600080fd5b5061034e610a49366004614ebd565b612e9c565b348015610a5a57600080fd5b506104bd610a69366004614fb1565b613125565b348015610a7a57600080fd5b5061034e610a89366004614b75565b613174565b348015610a9a57600080fd5b5061034e610aa9366004615002565b6133b1565b348015610aba57600080fd5b506105ba610ac9366004614a5e565b6008602090815260009283526040808420909152908252902080546001909101546001600160a01b039091169082565b348015610b0557600080fd5b5061034e610b14366004614b75565b6134d5565b6103a0610b27366004615037565b613565565b348015610b3857600080fd5b50610370610b47366004614bd1565b6009602052600090815260409020546001600160a01b031681565b348015610b6e57600080fd5b506103707f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b038316600090815260056020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915284919060ff16610c135760405162461bcd60e51b8152600401610c0a9190614b62565b60405180910390fd5b506040517f1c63e3b60000000000000000000000000000000000000000000000000000000081526001600160a01b03851690631c63e3b690610c5d908690869033906004016150b6565b600060405180830381600087803b158015610c7757600080fd5b505af1158015610c8b573d6000803e3d6000fd5b5050505050505050565b600060606000610cc98a8a8a8a8a604051602001610cb593929190615111565b60405160208183030381529060405261387c565b9050610cda8a8a8a8a8a8a8a613ad7565b90935091508215610d23577f2d05fd3bd2a2620dfaf6174f2083d54fbfd9106a4ee93c81238ea5a5f731aede8a8a604051610d16929190615169565b60405180910390a1610e13565b610d2e8a8a83613ba8565b3415610dd757604051600090339034908381818185875af1925050503d8060008114610d76576040519150601f19603f3d011682016040523d82523d6000602084013e610d7b565b606091505b50509050806040518060400160405280600781526020017f4c5a33303030300000000000000000000000000000000000000000000000000081525090610dd45760405162461bcd60e51b8152600401610c0a9190614b62565b50505b7faf073b1a1dac00a30ce25289039781005b496fbf28cd561b69a2359f1dd07ed98a8a84604051610e0a9392919061518d565b60405180910390a15b5097509795505050505050565b600080610e30600d546001141590565b610e3c57600080610e47565b60a0600d54901c600d545b915091509091565b6001600160a01b0383166000908152600560209081526040808320548151808301909252600782527f4c5a313030303100000000000000000000000000000000000000000000000000928201929092526060929186919060ff16610ec65760405162461bcd60e51b8152600401610c0a9190614b62565b506040517f9c33abf700000000000000000000000000000000000000000000000000000000815263ffffffff80871660048301526001600160a01b0389811660248401529086166044830152871690639c33abf790606401600060405180830381865afa158015610f3b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610f819190810190615291565b925092505094509492505050565b6001600160a01b03808316600090815260076020908152604080832063ffffffff8616845290915281205490911690816110405763ffffffff83166000908152600a6020908152604091829020548251808401909352600783527f4c5a443030303300000000000000000000000000000000000000000000000000918301919091526001600160a01b031692508261103a5760405162461bcd60e51b8152600401610c0a9190614b62565b50600190505b9250929050565b60006110608261105a6020870187614bd1565b85611cb9565b6040518060400160405280600781526020017f4c5a353030303000000000000000000000000000000000000000000000000000815250906110b45760405162461bcd60e51b8152600401610c0a9190614b62565b506110bf8483613c36565b90505b9392505050565b6110e0826110da6020860186614bd1565b33611cb9565b6040518060400160405280600781526020017f4c5a353030303000000000000000000000000000000000000000000000000000815250906111345760405162461bcd60e51b8152600401610c0a9190614b62565b5061113f8383613c36565b6040518060400160405280600781526020017f4c5a313030303400000000000000000000000000000000000000000000000000815250906111935760405162461bcd60e51b8152600401610c0a9190614b62565b5061119f838383613ba8565b7f3015b766371c496aa0ecdb272f6bf2fd695f317932333ad7a090f392a7c0ce398383836040516111d2939291906152d8565b60405180910390a1505050565b6001600160a01b038316600090815260056020908152604091829020548251808401909352600783527f4c5a31303030310000000000000000000000000000000000000000000000000091830191909152606091859160ff166112555760405162461bcd60e51b8152600401610c0a9190614b62565b5084846001600160a01b03821615611344576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa1580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee9190615300565b6040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906113425760405162461bcd60e51b8152600401610c0a9190614b62565b505b6040517f690c655500000000000000000000000000000000000000000000000000000000815263ffffffff8088166004830152861660248201526001600160a01b0388169063690c655590604401600060405180830381865afa1580156113af573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526113f5919081019061531d565b979650505050505050565b611408613cb5565b600e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040519081527ff66b6c5fcba13210e695e203c62d584c85a4193f8a279598609bb6af760b17c1906020015b60405180910390a150565b6001600160a01b038216600090815260056020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915283919060ff166114e95760405162461bcd60e51b8152600401610c0a9190614b62565b5082846001600160a01b038216156115d8576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa15801561155e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115829190615300565b6040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906115d65760405162461bcd60e51b8152600401610c0a9190614b62565b505b60006115e43388610f8f565b91505080156040518060400160405280600781526020017f4c5a3130303130000000000000000000000000000000000000000000000000008152509061163d5760405162461bcd60e51b8152600401610c0a9190614b62565b50846000036116955733600090815260086020908152604080832063ffffffff8b168452909152812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010155611742565b60408051808201909152600781527f4c5a31303030300000000000000000000000000000000000000000000000000060208201524286116116e95760405162461bcd60e51b8152600401610c0a9190614b62565b5033600090815260086020908152604080832063ffffffff8b168452909152902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0388161781556001018590555b6040805133815263ffffffff891660208201526001600160a01b038816818301526060810187905290517f661366f82fca66289bddc34462b3ab39d252b761599537d722a632d1bb066b8e9181900360800190a150505050505050565b63ffffffff81166000908152600960205260408120546001600160a01b0316158015906117e9575063ffffffff82166000908152600a60205260409020546001600160a01b031615155b92915050565b6117f7613cb5565b6118016000613d0f565b565b336000908152600c602090815260408083206001600160a01b03881684528252808320868452825291829020548251808401909352600783527f4c5a38303030300000000000000000000000000000000000000000000000000091830191909152156118825760405162461bcd60e51b8152600401610c0a9190614b62565b508181604051611893929190615352565b60408051918290038220336000818152600c60209081528482206001600160a01b038b1683528152848220898352905292909220557f7c0503be82d6ab0d4ea200b69f9930b82aec3c92ed138ed1a28f60cd9c3626db916118fc919087908790879087906153ab565b60405180910390a150505050565b6040805180820190915260008082526020820152831561198457600e5460408051808201909152600781527f4c5a4430303032000000000000000000000000000000000000000000000000006020820152906001600160a01b03166119825760405162461bcd60e51b8152600401610c0a9190614b62565b505b60006119908989612b48565b9050600060405180606001604052808b6001600160a01b031681526020018a63ffffffff16815260200189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517f07d7b2f90000000000000000000000000000000000000000000000000000000081529091506001600160a01b038316906307d7b2f990611a409084908a908a908a906004016153de565b6040805180830381865afa158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a809190615489565b9a9950505050505050505050565b60606004805480602002602001604051908101604052809291908181526020018280548015611ae657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ac8575b5050505050905090565b6000838383604051602001611b0793929190615111565b6040516020818303038152906040529050611b2385338361387c565b507f2d05fd3bd2a2620dfaf6174f2083d54fbfd9106a4ee93c81238ea5a5f731aede8533604051611b55929190615169565b60405180910390a15050505050565b611b6c614751565b611b796020850185614bd1565b336001600d54146040518060400160405280600781526020017f4c5a33303030310000000000000000000000000000000000000000000000000081525090611bd45760405162461bcd60e51b8152600401610c0a9190614b62565b5077ffffffff000000000000000000000000000000000000000060a083901b166001600160a01b03821617600d5533600080611c11838a8a613d77565b91509150611c4a7f0000000000000000000000000000000000000000000000000000000000000000848460400151600001518a85614009565b600e54604083015160200151611c6d916001600160a01b03169085908b85614009565b7fa9c376cdc544fbd06d0cec76dc479eefc52962efcff2355b87cab1333fd352f28260400151604051611ca09190614cde565b60405180910390a1506001600d55979650505050505050565b6000806000611cc88686610f8f565b91509150816001600160a01b0316846001600160a01b031603611cf0576001925050506110c2565b600081611d25576001600160a01b038716600090815260086020908152604080832063ffffffff8a1684529091529020611d3b565b63ffffffff86166000908152600b602052604090205b6040805180820190915281546001600160a01b0390811680835260019093015460208301529092508616148015611d755750428160200151115b15611d8657600193505050506110c2565b5060009695505050505050565b6001600160a01b038316600090815260056020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915284919060ff16611e075760405162461bcd60e51b8152600401610c0a9190614b62565b506040517fd2d287f00000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063d2d287f090610c5d908690869033906004016150b6565b6001600160a01b038316600090815260016020908152604080832063ffffffff86168452825280832084845290915281205467ffffffffffffffff165b611e9d85858584600101613125565b156110bf57600101611e8e565b611eb2613cb5565b6001600160a01b038216600090815260056020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915283919060ff16611f265760405162461bcd60e51b8152600401610c0a9190614b62565b5082846001600160a01b03821615612015576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa158015611f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbf9190615300565b6040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906120135760405162461bcd60e51b8152600401610c0a9190614b62565b505b63ffffffff86166000908152600a6020908152604091829020548251808401909352600783527f4c5a313030303500000000000000000000000000000000000000000000000000918301919091526001600160a01b039081169190871682036120915760405162461bcd60e51b8152600401610c0a9190614b62565b5063ffffffff87166000818152600a602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038b8116918217909255835194855290851691840191909152908201527f9914edfad6b7eac2e388f49bae232bd0e1954fbe92f5ed1ab975fc270f27cea59060600160405180910390a184156121d45763ffffffff87166000908152600b6020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617815561217686426154d4565b600182018190556040805163ffffffff8b1681526001600160a01b0385166020820152908101919091527f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f8906060015b60405180910390a150612214565b63ffffffff87166000908152600b6020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101555b50505050505050565b612225613cb5565b6001600160a01b03831661226f576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015612269573d6000803e3d6000fd5b50505050565b6122836001600160a01b03841683836140dd565b505050565b6001600160a01b038316600090815260036020908152604080832063ffffffff86168452825280832084845290915281205481906122d19067ffffffffffffffff1660016154e7565b90506122df818686866141a4565b95945050505050565b6122f0613cb5565b6001600160a01b038116600090815260056020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915282919060ff166123645760405162461bcd60e51b8152600401610c0a9190614b62565b5081836001600160a01b03821615612453576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa1580156123d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fd9190615300565b6040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906124515760405162461bcd60e51b8152600401610c0a9190614b62565b505b63ffffffff8516600090815260096020908152604091829020548251808401909352600783527f4c5a313030303500000000000000000000000000000000000000000000000000918301919091526001600160a01b039081169190861682036124cf5760405162461bcd60e51b8152600401610c0a9190614b62565b5063ffffffff861660008181526009602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038a169081179091558251938452908301527f16aa0f528038ab41019e95bae5b418a50ba8532c5800e3b7ea2f517d3fa625f591015b60405180910390a1505050505050565b612562614751565b61256f6020850185614bd1565b336001600d54146040518060400160405280600781526020017f4c5a333030303100000000000000000000000000000000000000000000000000815250906125ca5760405162461bcd60e51b8152600401610c0a9190614b62565b5077ffffffff000000000000000000000000000000000000000060a083901b166001600160a01b03821617600d5533600080612607838a8a613d77565b91509150611c4a82604001516000015134838a61425c565b6001600160a01b038416600090815260056020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915285919060ff166126935760405162461bcd60e51b8152600401610c0a9190614b62565b506040517fb8007ff60000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063b8007ff6906126df903390889088908890600401615508565b600060405180830381600087803b1580156126f957600080fd5b505af115801561270d573d6000803e3d6000fd5b505050505050505050565b6001600160a01b038216600090815260056020526040902054829060ff168061274857506001600160a01b038116155b6040518060400160405280600781526020017f4c5a3130303032000000000000000000000000000000000000000000000000008152509061279c5760405162461bcd60e51b8152600401610c0a9190614b62565b5082846001600160a01b0382161561288b576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa158015612811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128359190615300565b6040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906128895760405162461bcd60e51b8152600401610c0a9190614b62565b505b33600090815260076020818152604080842063ffffffff8b1685528252928390205483518085019094529183527f4c5a313030303500000000000000000000000000000000000000000000000000908301526001600160a01b0390811691908716820361290b5760405162461bcd60e51b8152600401610c0a9190614b62565b5033600081815260076020908152604080832063ffffffff8c168085529083529281902080546001600160a01b038c81167fffffffffffffffffffffffff00000000000000000000000000000000000000009092168217909255825195865292850193909352918416838301526060830152517fc0833c35bb1d0beadca36bed54c7098819e109542a6d233d33c7c2039c8ec9aa9181900360800190a18415612af5576001600160a01b038116158015906129ce57506001600160a01b03861615155b6040518060400160405280600781526020017f4c5a31303031300000000000000000000000000000000000000000000000000081525090612a225760405162461bcd60e51b8152600401610c0a9190614b62565b5060006040518060400160405280836001600160a01b031681526020018742612a4b91906154d4565b905233600081815260086020908152604080832063ffffffff8e1680855290835292819020855181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039182161782558684015160019092018290558251958652928501939093529086169083015260608201529091507f661366f82fca66289bddc34462b3ab39d252b761599537d722a632d1bb066b8e906080016121c6565b33600090815260086020908152604080832063ffffffff8b168452909152812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001015550505050505050565b6001600160a01b03808316600090815260066020908152604080832063ffffffff8616845290915290205416806117e9575063ffffffff8116600090815260096020908152604091829020548251808401909352600783527f4c5a443030303300000000000000000000000000000000000000000000000000918301919091526001600160a01b03169081612bf05760405162461bcd60e51b8152600401610c0a9190614b62565b5092915050565b6001600160a01b038216600090815260056020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915283919060ff16612c6b5760405162461bcd60e51b8152600401610c0a9190614b62565b5082846001600160a01b03821615612d5a576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa158015612ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d049190615300565b6040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090612d585760405162461bcd60e51b8152600401610c0a9190614b62565b505b612d62613cb5565b83600003612dae5763ffffffff86166000908152600b6020526040812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010155612e50565b60408051808201909152600781527f4c5a3130303030000000000000000000000000000000000000000000000000006020820152428511612e025760405162461bcd60e51b8152600401610c0a9190614b62565b5063ffffffff86166000908152600b6020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0387161781556001018490555b6040805163ffffffff881681526001600160a01b03871660208201529081018590527f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f89060600161254a565b6001600160a01b038116600090815260056020526040902054819060ff1680612ecc57506001600160a01b038116155b6040518060400160405280600781526020017f4c5a31303030320000000000000000000000000000000000000000000000000081525090612f205760405162461bcd60e51b8152600401610c0a9190614b62565b5081836001600160a01b0382161561300f576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526001600160a01b03831690636750cd4c90602401602060405180830381865afa158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb99190615300565b6040518060400160405280600781526020017f4c5a3130303038000000000000000000000000000000000000000000000000008152509061300d5760405162461bcd60e51b8152600401610c0a9190614b62565b505b33600090815260066020908152604080832063ffffffff89168452825291829020548251808401909352600783527f4c5a313030303500000000000000000000000000000000000000000000000000918301919091526001600160a01b039081169190861682036130935760405162461bcd60e51b8152600401610c0a9190614b62565b5033600081815260066020908152604080832063ffffffff8b168085529083529281902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038b16908117909155815194855291840192909252908201527f4cff966ebee29a156dcb34cf72c1d06231fb1777f6bdf6e8089819232f002b1c9060600161254a565b6001600160a01b038416600090815260026020908152604080832063ffffffff871684528252808320858452825280832067ffffffffffffffff8516845290915290205415155b949350505050565b61317c613cb5565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fd913d0cd0000000000000000000000000000000000000000000000000000000060048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa1580156131f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321d9190615300565b6040518060400160405280600781526020017f4c5a433030303100000000000000000000000000000000000000000000000000815250906132715760405162461bcd60e51b8152600401610c0a9190614b62565b506001600160a01b038116600090815260056020908152604091829020548251808401909352600783527f4c5a3830303030000000000000000000000000000000000000000000000000009183019190915260ff16156132e45760405162461bcd60e51b8152600401610c0a9190614b62565b506001600160a01b038116600081815260056020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556004805491820181559093527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90920180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905590519182527f6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af5910161146a565b6133bc338484611e51565b6133c79060016154e7565b67ffffffffffffffff168167ffffffffffffffff16146040518060400160405280600781526020017f4c5a313030303400000000000000000000000000000000000000000000000000815250906134315760405162461bcd60e51b8152600401610c0a9190614b62565b5033600081815260016020908152604080832063ffffffff881680855290835281842087855283529281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8716908117909155815193845291830186905282019290925260608101919091527f28f40053783033ef755556a0c3315379141f51a33aed8334174ffbadd90bde48906080016111d2565b6134dd613cb5565b6001600160a01b0381166135595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c0a565b61356281613d0f565b50565b6001600160a01b038088166000908152600c60209081526040808320938a168352928152828220888352905281812054915190916060916135a99088908890615352565b60408051918290038220828201909152600782527f4c5a363030303000000000000000000000000000000000000000000000000000602083015282146136025760405162461bcd60e51b8152600401610c0a9190614b62565b506001600160a01b03808b166000908152600c60209081526040808320938d1683529281528282208b835290528181206001905590517fd0a102600000000000000000000000000000000000000000000000000000000090613674908d908c908c908c9033908d908d9060240161564e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506137095a6001600160a01b038c169034846144a0565b909450925050821561376a57604080516001600160a01b03808d1682528b166020820152908101899052606081018290523360808201527fe8de892dbb4fd705fc4c154fd784700f6f24789e8ffea6922947d082606887949060a001610d16565b6001600160a01b03808b166000908152600c60209081526040808320938d1683529281528282208b8352905220819055341561384357604051600090339034908381818185875af1925050503d80600081146137e2576040519150601f19603f3d011682016040523d82523d6000602084013e6137e7565b606091505b50509050806040518060400160405280600781526020017f4c5a333030303000000000000000000000000000000000000000000000000000815250906138405760405162461bcd60e51b8152600401610c0a9190614b62565b50505b7f8054fc0b1a2df897569746b52a49553918b57ffcedcd0a35f0e8553d5ebba6768a8a8a843387604051610e0a969594939291906156a2565b60008061388c6020860186614bd1565b9050602085013560006138a560608801604089016156ee565b6001600160a01b038716600090815260016020908152604080832063ffffffff88168452825280832086845290915290205490915067ffffffffffffffff9081169082168110156139de57600181015b8267ffffffffffffffff168167ffffffffffffffff16116139795761391c88868684613125565b6040518060400160405280600781526020017f4c5a313030303400000000000000000000000000000000000000000000000000815250906139705760405162461bcd60e51b8152600401610c0a9190614b62565b506001016138f5565b506001600160a01b038716600090815260016020908152604080832063ffffffff881684528252808320868452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff84161790555b85516020808801919091206001600160a01b038916600090815260028352604080822063ffffffff891683528452808220878352845280822067ffffffffffffffff87168352845290819020548151808301909252600782527f4c5a36303030300000000000000000000000000000000000000000000000000093820193909352909650818714613a825760405162461bcd60e51b8152600401610c0a9190614b62565b5050506001600160a01b03909516600090815260026020908152604080832063ffffffff909516835293815283822092825291825282812067ffffffffffffffff909616815294905283209290925550919050565b6000606060006313137d6560e01b8a898989338a8a604051602401613b02979695949392919061570b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050613b975a6001600160a01b038b169034846144a0565b909b909a5098505050505050505050565b6001600160a01b0382166000908152600260209081526040822083929091613bd290870187614bd1565b63ffffffff1663ffffffff1681526020019081526020016000206000856020013581526020019081526020016000206000856040016020810190613c1691906156ee565b67ffffffffffffffff168152602081019190915260400160002055505050565b6001600160a01b03811660009081526001602090815260408220908290613c5f90860186614bd1565b63ffffffff16815260208082019290925260409081016000908120868401358252909252908190205467ffffffffffffffff1690613ca390606086019086016156ee565b67ffffffffffffffff16119392505050565b6000546001600160a01b031633146118015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c0a565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613d7f614751565b600080613e0886613d936020880188614bd1565b6001600160a01b0391909116600090815260036020908152604080832063ffffffff949094168352928152828220818a0135835290522080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008116600167ffffffffffffffff928316019182161790915590565b90506000613e1d876109466020890189614bd1565b905060006040518060e001604052808467ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000063ffffffff168152602001896001600160a01b03168152602001886000016020810190613e8a9190614bd1565b63ffffffff16815260200188602001358152602001613ec1858b8b6000016020810190613eb79190614bd1565b8c602001356141a4565b8152602001613ed360408a018a615754565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452509293508815159250905080806001600160a01b038616634389e58f86613f3160608f018f615754565b886040518563ffffffff1660e01b8152600401613f5194939291906157b9565b6000604051808303816000875af1158015613f70573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613fb69190810190615861565b9250925092507f1ab700d4ced0c005b164c0f789fd09fcbb0156d4c2041b8a3bfbcd961cd1567f828288604051613fef93929190615929565b60405180910390a150909a93995092975050505050505050565b82156140d65760408051808201909152600781527f4c5a44303030320000000000000000000000000000000000000000000000000060208201526001600160a01b03861661406a5760405162461bcd60e51b8152600401610c0a9190614b62565b5060408051808201909152600781527f4c5a3130303033000000000000000000000000000000000000000000000000006020820152828411156140c05760405162461bcd60e51b8152600401610c0a9190614b62565b506140d66001600160a01b038616858386614505565b5050505050565b6040516001600160a01b0383166024820152604481018290526122839084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614556565b604080517fffffffff000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060e090811b821660208401526001600160a01b038716602484015285901b166044820152604880820184905282518083039091018152606882019092526000919061423b9087908390608801615968565b60405160208183030381529060405280519060200120915050949350505050565b60408051808201909152600781527f4c5a44303030310000000000000000000000000000000000000000000000000060208201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316156142d85760405162461bcd60e51b8152600401610c0a9190614b62565b5060408051808201909152600781527f4c5a31303030330000000000000000000000000000000000000000000000000060208201528385111561432e5760405162461bcd60e51b8152600401610c0a9190614b62565b5083156143e3576000826001600160a01b03168560405160006040518083038185875af1925050503d8060008114614382576040519150601f19603f3d011682016040523d82523d6000602084013e614387565b606091505b50509050806040518060400160405280600781526020017f4c5a333030303000000000000000000000000000000000000000000000000000815250906143e05760405162461bcd60e51b8152600401610c0a9190614b62565b50505b82841015612269576000816001600160a01b031685850360405160006040518083038185875af1925050503d806000811461443a576040519150601f19603f3d011682016040523d82523d6000602084013e61443f565b606091505b50509050806040518060400160405280600781526020017f4c5a333030303000000000000000000000000000000000000000000000000000815250906144985760405162461bcd60e51b8152600401610c0a9190614b62565b505050505050565b60408051606480825260a0820190925260009160609183918291829082602082018180368337019050509050600080885160208a018b8e8ef192503d9350818411156144ea578193505b838152836000602083013e9199919850909650505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526122699085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401614122565b60006145ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661463e9092919063ffffffff16565b90508051600014806145cc5750808060200190518101906145cc9190615300565b6122835760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c0a565b60606110bf848460008585600080866001600160a01b0316858760405161466591906159b3565b60006040518083038185875af1925050503d80600081146146a2576040519150601f19603f3d011682016040523d82523d6000602084013e6146a7565b606091505b50915091506113f5878383876060831561472257825160000361471b576001600160a01b0385163b61471b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c0a565b508161316c565b61316c83838151156147375781518083602001fd5b8060405162461bcd60e51b8152600401610c0a9190614b62565b604051806060016040528060008019168152602001600067ffffffffffffffff168152602001614794604051806040016040528060008152602001600081525090565b905290565b6001600160a01b038116811461356257600080fd5b60008083601f8401126147c057600080fd5b50813567ffffffffffffffff8111156147d857600080fd5b6020830191508360208260051b850101111561104057600080fd5b60008060006040848603121561480857600080fd5b833561481381614799565b9250602084013567ffffffffffffffff81111561482f57600080fd5b61483b868287016147ae565b9497909650939450505050565b60006060828403121561485a57600080fd5b50919050565b60008083601f84011261487257600080fd5b50813567ffffffffffffffff81111561488a57600080fd5b60208301915083602082850101111561104057600080fd5b600080600080600080600060e0888a0312156148bd57600080fd5b6148c78989614848565b965060608801356148d781614799565b95506080880135945060a088013567ffffffffffffffff808211156148fb57600080fd5b6149078b838c01614860565b909650945060c08a013591508082111561492057600080fd5b5061492d8a828b01614860565b989b979a50959850939692959293505050565b60005b8381101561495b578181015183820152602001614943565b50506000910152565b6000815180845261497c816020860160208601614940565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b82151581526040602082015260006110bf6040830184614964565b803563ffffffff811681146149dd57600080fd5b919050565b600080600080608085870312156149f857600080fd5b8435614a0381614799565b93506020850135614a1381614799565b9250614a21604086016149c9565b9150614a2f606086016149c9565b905092959194509250565b604081526000614a4d6040830185614964565b905082151560208301529392505050565b60008060408385031215614a7157600080fd5b8235614a7c81614799565b9150614a8a602084016149c9565b90509250929050565b600080600060a08486031215614aa857600080fd5b614ab28585614848565b92506060840135614ac281614799565b91506080840135614ad281614799565b809150509250925092565b600080600060a08486031215614af257600080fd5b614afc8585614848565b92506060840135614b0c81614799565b929592945050506080919091013590565b600080600060608486031215614b3257600080fd5b8335614b3d81614799565b9250614b4b602085016149c9565b9150614b59604085016149c9565b90509250925092565b6020815260006110c26020830184614964565b600060208284031215614b8757600080fd5b81356110c281614799565b600080600060608486031215614ba757600080fd5b614bb0846149c9565b92506020840135614bc081614799565b929592945050506040919091013590565b600060208284031215614be357600080fd5b6110c2826149c9565b60008060008060608587031215614c0257600080fd5b8435614c0d81614799565b935060208501359250604085013567ffffffffffffffff811115614c3057600080fd5b614c3c87828801614860565b95989497509550505050565b801515811461356257600080fd5b600080600080600080600060a0888a031215614c7157600080fd5b8735614c7c81614799565b9650614c8a602089016149c9565b9550604088013567ffffffffffffffff80821115614ca757600080fd5b614cb38b838c01614860565b909750955060608a01359150614cc882614c48565b9093506080890135908082111561492057600080fd5b8151815260208083015190820152604081016117e9565b6020808252825182820181905260009190848201906040850190845b81811015614d365783516001600160a01b031683529284019291840191600101614d11565b50909695505050505050565b60008060008060a08587031215614d5857600080fd5b614d628686614848565b935060608501359250608085013567ffffffffffffffff811115614c3057600080fd5b60006080828403121561485a57600080fd5b600080600060608486031215614dac57600080fd5b833567ffffffffffffffff811115614dc357600080fd5b614dcf86828701614d85565b9660208601359650604090950135949350505050565b60006080820190508251825267ffffffffffffffff60208401511660208301526040830151612bf0604084018280518252602090810151910152565b600080600060608486031215614e3657600080fd5b8335614e4181614799565b9250614e4f602085016149c9565b9150604084013590509250925092565b600080600060608486031215614e7457600080fd5b8335614bb081614799565b600080600060608486031215614e9457600080fd5b8335614e9f81614799565b9250614ead602085016149c9565b91506040840135614ad281614799565b60008060408385031215614ed057600080fd5b614ed9836149c9565b91506020830135614ee981614799565b809150509250929050565b600080600060608486031215614f0957600080fd5b833567ffffffffffffffff811115614f2057600080fd5b614f2c86828701614d85565b935050602084013591506040840135614ad281614799565b60008060008060608587031215614f5a57600080fd5b8435614f6581614799565b9350614f73602086016149c9565b9250604085013567ffffffffffffffff811115614f8f57600080fd5b614c3c878288016147ae565b67ffffffffffffffff8116811461356257600080fd5b60008060008060808587031215614fc757600080fd5b8435614fd281614799565b9350614fe0602086016149c9565b9250604085013591506060850135614ff781614f9b565b939692955090935050565b60008060006060848603121561501757600080fd5b615020846149c9565b9250602084013591506040840135614ad281614f9b565b600080600080600080600060a0888a03121561505257600080fd5b873561505d81614799565b9650602088013561506d81614799565b955060408801359450606088013567ffffffffffffffff8082111561509157600080fd5b61509d8b838c01614860565b909650945060808a013591508082111561492057600080fd5b6040808252810183905260008460608301825b868110156150f45763ffffffff6150df846149c9565b168252602092830192909101906001016150c9565b5080925050506001600160a01b0383166020830152949350505050565b838152818360208301376000910160200190815292915050565b63ffffffff615139826149c9565b16825260208101356020830152604081013561515481614f9b565b67ffffffffffffffff81166040840152505050565b60808101615177828561512b565b6001600160a01b03831660608301529392505050565b615197818561512b565b6001600160a01b038316606082015260a0608082015260006122df60a0830184614964565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126151fc57600080fd5b815167ffffffffffffffff80821115615217576152176151bc565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561525d5761525d6151bc565b8160405283815286602085880101111561527657600080fd5b615287846020830160208901614940565b9695505050505050565b600080604083850312156152a457600080fd5b825167ffffffffffffffff8111156152bb57600080fd5b6152c7858286016151eb565b9250506020830151614ee981614c48565b60a081016152e6828661512b565b6001600160a01b0393909316606082015260800152919050565b60006020828403121561531257600080fd5b81516110c281614c48565b60006020828403121561532f57600080fd5b815167ffffffffffffffff81111561534657600080fd5b61316c848285016151eb565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60006001600160a01b038088168352808716602084015250846040830152608060608301526113f5608083018486615362565b606081526001600160a01b03855116606082015263ffffffff602086015116608082015260006040860151606060a084015261541d60c0840182614964565b9050851515602084015282810360408401526113f5818587615362565b60006040828403121561544c57600080fd5b6040516040810181811067ffffffffffffffff8211171561546f5761546f6151bc565b604052825181526020928301519281019290925250919050565b60006040828403121561549b57600080fd5b6110c2838361543a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156117e9576117e96154a5565b67ffffffffffffffff818116838216019080821115612bf057612bf06154a5565b6000606082016001600160a01b0387168352602063ffffffff8088168286015260406060818701528387855260808701905060808860051b88010194508860005b8981101561563d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8089880301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18c36030181126155aa57600080fd5b8b01856155b6826149c9565b168852868101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181126155ed57600080fd5b01868101903567ffffffffffffffff81111561560857600080fd5b80360382131561561757600080fd5b85888a0152615629868a018284615362565b985050509185019190850190600101615549565b50949b9a5050505050505050505050565b60006001600160a01b03808a16835288602084015260a0604084015261567860a08401888a615362565b81871660608501528381036080850152615693818688615362565b9b9a5050505050505050505050565b60006001600160a01b038089168352808816602084015286604084015285606084015280851660808401525060c060a08301526156e260c0830184614964565b98975050505050505050565b60006020828403121561570057600080fd5b81356110c281614f9b565b615715818961512b565b86606082015260e06080820152600061573260e083018789615362565b6001600160a01b03861660a084015282810360c0840152611a80818587615362565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261578957600080fd5b83018035915067ffffffffffffffff8211156157a457600080fd5b60200191503681900382131561104057600080fd5b6060815267ffffffffffffffff855116606082015263ffffffff60208601511660808201526001600160a01b0360408601511660a08201526000606086015161580a60c084018263ffffffff169052565b50608086015160e083015260a086015161010083015260c086015160e061012084015261583b610140840182614964565b90508281036020840152615850818688615362565b9150506122df604083018415159052565b600080600083850360c081121561587757600080fd5b608081121561588557600080fd5b506040516060810167ffffffffffffffff82821081831117156158aa576158aa6151bc565b8160405286518352602087015191506158c282614f9b565b8160208401526158d5886040890161543a565b60408401526080870151929550808311156158ef57600080fd5b6158fb888489016151eb565b945060a087015192508083111561591157600080fd5b505061591f868287016151eb565b9150509250925092565b60608152600061593c6060830186614964565b828103602084015261594e8186614964565b9150506001600160a01b0383166040830152949350505050565b7fffffffffffffffff0000000000000000000000000000000000000000000000008360c01b168152600082516159a5816008850160208701614940565b919091016008019392505050565b600082516159c5818460208701614940565b919091019291505056fea2646970667358221220af5a3fb6743a4933687c3a6cc5d20e4bdb03f715c813cfdcb754d94d2d678e6664736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_blockedLib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_altToken";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposedMessageDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "ComposedMessageReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly indexed: false;
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "fee";
            readonly type: "tuple";
        }];
        readonly name: "FeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "LayerZeroTokenSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "PacketDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "origin";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "PacketReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "encodedPayload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "options";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sendLibrary";
            readonly type: "address";
        }];
        readonly name: "PacketSent";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "altFeeToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "blockedLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "clear";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }];
        readonly name: "composedMessages";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "defaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_payloadHash";
            readonly type: "bytes32";
        }];
        readonly name: "deliver";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "deliverComposedMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiveLib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }];
        readonly name: "deliverable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hasPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "inboundNonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_actualReceiveLib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "layerZeroToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "recoverToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_lzTokenFeeCap";
            readonly type: "uint256";
        }, {
            readonly internalType: "address payable";
            readonly name: "_refundAddress";
            readonly type: "address";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "options";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_lzTokenFeeCap";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_altTokenFeeCap";
            readonly type: "uint256";
        }];
        readonly name: "sendWithAlt";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMessageLibManager.SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_layerZeroToken";
            readonly type: "address";
        }];
        readonly name: "setLayerZeroToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): EndpointV2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): EndpointV2;
}

type ExecutorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Executor__factory extends ContractFactory {
    constructor(...args: ExecutorConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Executor>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Executor;
    connect(signer: Signer): Executor__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50612f13806100206000396000f3fe6080604052600436106101aa5760003560e01c8063724e78da116100ec578063c358de0a1161008a578063d2ae210411610064578063d2ae2104146105ec578063d547741f1461063e578063eb88caf51461065e578063fab0e5051461067157600080fd5b8063c358de0a1461057f578063c416aa511461059f578063c7b2370b146105cc57600080fd5b80639e944965116100c65780639e9449651461047c578063a217fddf14610537578063acdbcca51461054c578063b2adcc841461056c57600080fd5b8063724e78da146103dc578063741bef1a146103fc57806391d148541461042957600080fd5b80632f2ff15d116101595780635e280f11116101335780635e280f11146103445780636f3bc2c114610396578063709eb664146103a9578063717e8a42146103c957600080fd5b80632f2ff15d146102d257806336568abe146102f25780635c975abb1461031257600080fd5b80631095b6d71161018a5780631095b6d71461025457806316c38b3c14610274578063248a9ca31461029457600080fd5b80629fc681146101af578062bf2e80146101d157806301ffc9a714610224575b600080fd5b3480156101bb57600080fd5b506101cf6101ca366004612403565b61069e565b005b3480156101dd57600080fd5b5060975461020c907c0100000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561023057600080fd5b5061024461023f3660046124a8565b61093d565b604051901515815260200161021b565b34801561026057600080fd5b506101cf61026f3660046124ea565b6109d6565b34801561028057600080fd5b506101cf61028f366004612534565b610b95565b3480156102a057600080fd5b506102c46102af366004612551565b60009081526065602052604090206001015490565b60405190815260200161021b565b3480156102de57600080fd5b506101cf6102ed36600461256a565b610beb565b3480156102fe57600080fd5b506101cf61030d36600461256a565b610c15565b34801561031e57600080fd5b506098546102449074010000000000000000000000000000000000000000900460ff1681565b34801561035057600080fd5b5060fd546103719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161021b565b6101cf6103a43660046125ae565b610c77565b3480156103b557600080fd5b506102c46103c4366004612662565b610dab565b6102c46103d7366004612662565b6110d1565b3480156103e857600080fd5b506101cf6103f73660046126d1565b611339565b34801561040857600080fd5b506098546103719073ffffffffffffffffffffffffffffffffffffffff1681565b34801561043557600080fd5b5061024461044436600461256a565b600091825260656020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561048857600080fd5b506104f16104973660046126ec565b60fc602052600090815260409020805460019091015467ffffffffffffffff82169161ffff68010000000000000000820416916fffffffffffffffffffffffffffffffff6a01000000000000000000009092048216911684565b6040805167ffffffffffffffff909516855261ffff90931660208501526fffffffffffffffffffffffffffffffff9182169284019290925216606082015260800161021b565b34801561054357600080fd5b506102c4600081565b34801561055857600080fd5b506101cf610567366004612751565b6113de565b6101cf61057a366004612846565b611598565b34801561058b57600080fd5b506101cf61059a3660046128a1565b611670565b3480156105ab57600080fd5b506097546103719073ffffffffffffffffffffffffffffffffffffffff1681565b3480156105d857600080fd5b506101cf6105e73660046126d1565b61171d565b3480156105f857600080fd5b506097546106259074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161021b565b34801561064a57600080fd5b506101cf61065936600461256a565b6117ba565b6101cf61066c3660046128bc565b6117df565b34801561067d57600080fd5b5060fe546103719073ffffffffffffffffffffffffffffffffffffffff1681565b60006106c87fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff81166107215773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610743565b3373ffffffffffffffffffffffffffffffffffffffff82161461074357600080fd5b600054610100900460ff16158080156107635750600054600160ff909116105b8061077d5750303b15801561077d575060005460ff166001145b61080e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561086c57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61087b8686612ee08787611828565b60fd805473ffffffffffffffffffffffffffffffffffffffff808b167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560fe8054928a1692909116919091179055801561093357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806109d057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610a00816118cc565b73ffffffffffffffffffffffffffffffffffffffff841660009081527fe3a3b2721d010eec8988605a93cd7c15d969808c0e2b42f6155dc2b4fa13c081602052604090205460ff16610aae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f576f726b65723a20496e76616c6964206d657373616765206c696200000000006044820152606401610805565b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b6000610ba0816118cc565b506098805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b600082815260656020526040902060010154610c06816118cc565b610c1083836118d9565b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f576f726b65723a2063616e6e6f742072656e6f756e636520726f6c65000000006044820152606401610805565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610ca1816118cc565b610ca96119a0565b610cb283611a13565b6000610cc2602085013534612907565b60fd5490915073ffffffffffffffffffffffffffffffffffffffff16630c0c389e60e08501358360208701610cf781896126d1565b6080890135610d0960a08b018b61291a565b610d1660c08d018d61291a565b6040518a63ffffffff1660e01b8152600401610d3897969594939291906129c8565b600060405180830381858988f1158015610d56573d6000803e3d6000fd5b5050505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610d9e9190810190612a7c565b505050610c10600160ca55565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f0f6a9529577ef7bf1cbc8fccda1cc3c881f755c7e92e34c7c4deac1fa3c1c7916020526040812054859060ff1615610e5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f776564000000000000000000000000006044820152606401610805565b60975474010000000000000000000000000000000000000000900467ffffffffffffffff161580610ed1575073ffffffffffffffffffffffffffffffffffffffff811660009081527f35c5067391a9036240763c1067bfa438a7b0131204a675a2fe562dd73782ce85602052604090205460ff165b156110655760985474010000000000000000000000000000000000000000900460ff1615610f5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f576f726b65723a207061757365640000000000000000000000000000000000006044820152606401610805565b6040805160a08101825260985473ffffffffffffffffffffffffffffffffffffffff908116825263ffffffff8a1660208084018290528a831684860152606084018a905260975461ffff7c01000000000000000000000000000000000000000000000000000000008204166080860152600092835260fc9091529084902093517f371c3a8e000000000000000000000000000000000000000000000000000000008152929391169163371c3a8e9161101c918591908a908a90600401612b44565b602060405180830381865afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d9190612c05565b9250506110c7565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f776564000000000000000000000000006044820152606401610805565b5095945050505050565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de6110fd816118cc565b73ffffffffffffffffffffffffffffffffffffffff861660009081527f0f6a9529577ef7bf1cbc8fccda1cc3c881f755c7e92e34c7c4deac1fa3c1c7916020526040902054869060ff16156111ae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f776564000000000000000000000000006044820152606401610805565b60975474010000000000000000000000000000000000000000900467ffffffffffffffff161580611223575073ffffffffffffffffffffffffffffffffffffffff811660009081527f35c5067391a9036240763c1067bfa438a7b0131204a675a2fe562dd73782ce85602052604090205460ff165b15611065576040805160a08101825260985473ffffffffffffffffffffffffffffffffffffffff908116825263ffffffff8b1660208084018290528b831684860152606084018b905260975461ffff7c01000000000000000000000000000000000000000000000000000000008204166080860152600092835260fc9091529084902093517ff43bcfc5000000000000000000000000000000000000000000000000000000008152929391169163f43bcfc5916112e9918591908b908b90600401612b44565b6020604051808303816000875af1158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190612c05565b9998505050505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611363816118cc565b609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611408816118cc565b60005b825181101561156857600083828151811061142857611428612c1e565b60209081029190910181015160408051608080820183528385015167ffffffffffffffff90811683528385015161ffff9081168488019081526060808801516fffffffffffffffffffffffffffffffff908116878901908152958901518116918701918252975163ffffffff16600090815260fc90995295909720935184549751935187166a0100000000000000000000027fffffffffffff00000000000000000000000000000000ffffffffffffffffffff9490921668010000000000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090981692169190911795909517169390931783555160019092018054929091167fffffffffffffffffffffffffffffffff00000000000000000000000000000000909216919091179055508061156081612c4d565b91505061140b565b507f3fd3f9275410b39824c12e5dfcf63fb332698a5eee3b09895aaaaa9e403bd481826040516113d29190612c85565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756115c2816118cc565b6115ca6119a0565b6115d385611a13565b60fe546040517f56fe19be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906356fe19be9061162d90879087908790600401612d1f565b600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b50505050611669600160ca55565b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561169a816118cc565b609780547fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d906020016113d2565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611747816118cc565b609780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e0906020016113d2565b6000828152606560205260409020600101546117d5816118cc565b610c108383611b1c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611809816118cc565b6118116119a0565b61181a82611a13565b611824600160ca55565b5050565b600054610100900460ff166118bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610805565b6116698585858585611be2565b6118d68133611dcb565b50565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca821480156119385750600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b15611996576097805460149061196f9074010000000000000000000000000000000000000000900467ffffffffffffffff16612d43565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6118248282611e85565b600260ca5403611a0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610805565b600260ca55565b6000611a2260208301836126d1565b73ffffffffffffffffffffffffffffffffffffffff168260200135836040013590604051600060405180830381858888f193505050503d8060008114611a84576040519150601f19603f3d011682016040523d82523d6000602084013e611a89565b606091505b5050905080611aee577f9f0ca89f7fdcf20e0d6b67b1a368cb9d67d9879a5c2bdb67bc63f8986a6927c2611ac060208401846126d1565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260208086013590830152016113d2565b7f4e4dde12617e3f8946892c207c6e8343924d91771c3ab6721a336ed89e98a21d611ac060208401846126d1565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015611b7a5750600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b15611bd85760978054601490611bb19074010000000000000000000000000000000000000000900467ffffffffffffffff16612d6a565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6118248282611f79565b600054610100900460ff16611c79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610805565b609780547fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000061ffff861602179055609880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616179055611d116000836118d9565b60005b8551811015611d7057611d607f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110611d5357611d53612c1e565b60200260200101516118d9565b611d6981612c4d565b9050611d14565b5060005b8151811015611dc357611db37fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110611d5357611d53612c1e565b611dbc81612c4d565b9050611d74565b505050505050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661182457611e0b81612034565b611e16836020612053565b604051602001611e27929190612dac565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261080591600401612e2d565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661182457600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055611f1b3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561182457600082815260656020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606109d073ffffffffffffffffffffffffffffffffffffffff831660145b60606000612062836002612e7e565b61206d906002612e95565b67ffffffffffffffff811115612085576120856122c6565b6040519080825280601f01601f1916602001820160405280156120af576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106120e6576120e6612c1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061214957612149612c1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612185846002612e7e565b612190906001612e95565b90505b600181111561222d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106121d1576121d1612c1e565b1a60f81b8282815181106121e7576121e7612c1e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361222681612ea8565b9050612193565b508315612296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610805565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146122c157600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715612318576123186122c6565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612365576123656122c6565b604052919050565b600067ffffffffffffffff821115612387576123876122c6565b5060051b60200190565b600082601f8301126123a257600080fd5b813560206123b76123b28361236d565b61231e565b82815260059290921b840181019181810190868411156123d657600080fd5b8286015b848110156123f8576123eb8161229d565b83529183019183016123da565b509695505050505050565b60008060008060008060c0878903121561241c57600080fd5b6124258761229d565b95506124336020880161229d565b9450604087013567ffffffffffffffff8082111561245057600080fd5b61245c8a838b01612391565b955061246a60608a0161229d565b945061247860808a0161229d565b935060a089013591508082111561248e57600080fd5b5061249b89828a01612391565b9150509295509295509295565b6000602082840312156124ba57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461229657600080fd5b6000806000606084860312156124ff57600080fd5b6125088461229d565b92506125166020850161229d565b9150604084013590509250925092565b80151581146118d657600080fd5b60006020828403121561254657600080fd5b813561229681612526565b60006020828403121561256357600080fd5b5035919050565b6000806040838503121561257d57600080fd5b8235915061258d6020840161229d565b90509250929050565b6000606082840312156125a857600080fd5b50919050565b600080608083850312156125c157600080fd5b6125cb8484612596565b9150606083013567ffffffffffffffff8111156125e757600080fd5b830161010081860312156125fa57600080fd5b809150509250929050565b803563ffffffff811681146122c157600080fd5b60008083601f84011261262b57600080fd5b50813567ffffffffffffffff81111561264357600080fd5b60208301915083602082850101111561265b57600080fd5b9250929050565b60008060008060006080868803121561267a57600080fd5b61268386612605565b94506126916020870161229d565b935060408601359250606086013567ffffffffffffffff8111156126b457600080fd5b6126c088828901612619565b969995985093965092949392505050565b6000602082840312156126e357600080fd5b6122968261229d565b6000602082840312156126fe57600080fd5b61229682612605565b803567ffffffffffffffff811681146122c157600080fd5b803561ffff811681146122c157600080fd5b80356fffffffffffffffffffffffffffffffff811681146122c157600080fd5b6000602080838503121561276457600080fd5b823567ffffffffffffffff81111561277b57600080fd5b8301601f8101851361278c57600080fd5b803561279a6123b28261236d565b81815260a091820283018401918482019190888411156127b957600080fd5b938501935b8385101561283a5780858a0312156127d65760008081fd5b6127de6122f5565b6127e786612605565b81526127f4878701612707565b87820152604061280581880161271f565b908201526060612816878201612731565b908201526080612827878201612731565b90820152835293840193918501916127be565b50979650505050505050565b60008060008060a0858703121561285c57600080fd5b6128668686612596565b9350606085013567ffffffffffffffff81111561288257600080fd5b61288e87828801612619565b9598909750949560800135949350505050565b6000602082840312156128b357600080fd5b6122968261271f565b6000606082840312156128ce57600080fd5b6122968383612596565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156109d0576109d06128d8565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261294f57600080fd5b83018035915067ffffffffffffffff82111561296a57600080fd5b60200191503681900382131561265b57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b63ffffffff6129d689612605565b1681526020880135602082015267ffffffffffffffff6129f860408a01612707565b16604082015273ffffffffffffffffffffffffffffffffffffffff8716606082015285608082015260e060a08201526000612a3760e08301868861297f565b82810360c0840152612a4a81858761297f565b9a9950505050505050505050565b60005b83811015612a73578181015183820152602001612a5b565b50506000910152565b60008060408385031215612a8f57600080fd5b8251612a9a81612526565b602084015190925067ffffffffffffffff80821115612ab857600080fd5b818501915085601f830112612acc57600080fd5b815181811115612ade57612ade6122c6565b612b0f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161231e565b9150808252866020828501011115612b2657600080fd5b612b37816020840160208601612a58565b5080925050509250929050565b600061014073ffffffffffffffffffffffffffffffffffffffff80885116845263ffffffff60208901511660208501528060408901511660408501525060608701516060840152608087015161ffff80821660808601528754915067ffffffffffffffff821660a0860152808260401c1660c0860152506fffffffffffffffffffffffffffffffff808260501c1660e086015280600189015416610100860152505080610120840152612bfa818401858761297f565b979650505050505050565b600060208284031215612c1757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c7e57612c7e6128d8565b5060010190565b602080825282518282018190526000919060409081850190868401855b82811015612d12578151805163ffffffff1685528681015167ffffffffffffffff16878601528581015161ffff16868601526060808201516fffffffffffffffffffffffffffffffff90811691870191909152608091820151169085015260a09093019290850190600101612ca2565b5091979650505050505050565b604081526000612d3360408301858761297f565b9050826020830152949350505050565b600067ffffffffffffffff808316818103612d6057612d606128d8565b6001019392505050565b600067ffffffffffffffff821680612d8457612d846128d8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612de4816017850160208801612a58565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612e21816028840160208801612a58565b01602801949350505050565b6020815260008251806020840152612e4c816040850160208701612a58565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b80820281158282048414176109d0576109d06128d8565b808201808211156109d0576109d06128d8565b600081612eb757612eb76128d8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220102c7d301e54f4120f9bed6de93bde0636f982ae05869f9d385a0e10ba60fd7464736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "AirdropFailed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "AirdropSucceeded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "airdropCap";
                readonly type: "uint128";
            }];
            readonly indexed: false;
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "params";
            readonly type: "tuple[]";
        }];
        readonly name: "DstConfigSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.AirdropParams";
            readonly name: "_airdropParams";
            readonly type: "tuple";
        }];
        readonly name: "airdrop";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.AirdropParams";
            readonly name: "_airdropParams";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_packet";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gasLimit";
            readonly type: "uint256";
        }];
        readonly name: "airdropAndExecute301";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.AirdropParams";
            readonly name: "_airdropParams";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }];
            readonly internalType: "struct IExecutor.ExecutionParams";
            readonly name: "_executionParams";
            readonly type: "tuple";
        }];
        readonly name: "airdropAndExecute302";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "assignJob";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "dstConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "baseGas";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint128";
            readonly name: "floorMarginUSD";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "airdropCap";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_calldataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_uln301";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_messageLibs";
            readonly type: "address[]";
        }, {
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_roleAdmin";
            readonly type: "address";
        }, {
            readonly internalType: "address[]";
            readonly name: "_admins";
            readonly type: "address[]";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "airdropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setDstConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "uln301";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Executor;
}

type ExecutorFeeLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class ExecutorFeeLib__factory extends ContractFactory {
    constructor(...args: ExecutorFeeLibConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ExecutorFeeLib>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): ExecutorFeeLib;
    connect(signer: Signer): ExecutorFeeLib__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061109c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063371c3a8e1461003b578063f43bcfc514610060575b600080fd5b61004e610049366004610d0f565b610073565b60405190815260200160405180910390f35b61004e61006e366004610d0f565b610193565b600080600061008c86600001518760600151878761036e565b885160208a015160608b01516040517f88a4124c00000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810183905292945090925060009182918291829173ffffffffffffffffffffffffffffffffffffffff16906388a4124c90606401608060405180830381865afa158015610123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101479190610dd5565b9350935093509350610168848b602001518d608001518d60400151856107dd565b965061017a8684848e608001516108c0565b6101849088610e59565b9b9a5050505050505050505050565b60008060006101ac86600001518760600151878761036e565b885160208a015160608b01516040517f11f2c34300000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810183905292945090925060009173ffffffffffffffffffffffffffffffffffffffff909116906311f2c343906064016020604051808303816000875af1158015610241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102659190610e6c565b885160208a015160608b01516040517fc1723a1d00000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810185905291925060009182918291829173ffffffffffffffffffffffffffffffffffffffff169063c1723a1d90879060640160806040518083038185885af11580156102fc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103219190610dd5565b9350935093509350610342848c602001518e608001518e60400151856107dd565b97506103548784848f608001516108c0565b61035e9089610e59565b9c9b505050505050505050505050565b60008082610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4578656375746f724665654c69623a206e6f206f7074696f6e732070726f766960448201527f646564000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5067ffffffffffffffff8516600080805b8582101561074857600036818061042c8b8b8861092a565b9850919550935091508590506104428785610980565b156040518060400160405280600781526020017f4c5a313030313200000000000000000000000000000000000000000000000000815250906104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50600160ff85161b871796507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff85160161053c576000806104f48585610992565b90925090506105156fffffffffffffffffffffffffffffffff82168c610e59565b9a506105336fffffffffffffffffffffffffffffffff83168b610e59565b9950505061073f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff85160161064d5760006105728484610a45565b5090508c6fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161115610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4578656375746f724665654c69623a2061697264726f7020616d6f756e74206560448201527f786365656473206361700000000000000000000000000000000000000000000060648201526084016103fa565b6106456fffffffffffffffffffffffffffffffff82168b610e59565b99505061073f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff851601610684576000806104f48585610992565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff8516016106b7576001945061073f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4578656375746f724665654c69623a20696e76616c6964206f7074696f6e207460448201527f797065000000000000000000000000000000000000000000000000000000000060648201526084016103fa565b50505050610414565b8186146107b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4578656375746f724665654c69623a20696e76616c6964206f7074696f6e730060448201526064016103fa565b80156107d15760646107c4856066610ef1565b6107ce9190610f08565b93505b50505094509492505050565b60008061ffff8616156107f057856107f2565b845b9050600061271061080761ffff84168a610ef1565b6108119190610f08565b90506fffffffffffffffffffffffffffffffff8416158061084257506fffffffffffffffffffffffffffffffff8516155b156108505791506108b79050565b600088856fffffffffffffffffffffffffffffffff16670de0b6b3a7640000886fffffffffffffffffffffffffffffffff1661088c9190610ef1565b6108969190610f08565b6108a09190610e59565b90508181116108af57816108b1565b805b93505050505b95945050505050565b60008415610922576127108261ffff16846fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16886109019190610ef1565b61090b9190610f08565b6109159190610ef1565b61091f9190610f08565b90505b949350505050565b60003681600184018161093e888884610ad4565b600292909201919050610952888884610afb565b94506001820161ffff8216830161096b81838b8d610f43565b979b909a50969850505061ffff160193505050565b600160ff82161b821615155b92915050565b60008060108314806109a45750602083145b6040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090610a12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50610a1f84846000610b20565b915060208314610a30576000610a3c565b610a3c84846010610b20565b90509250929050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090819060308414610ab9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50610ac684846000610b20565b9150610a3c84846010610b47565b600060028201610ae681848688610f43565b610aef91610f6d565b60f01c95945050505050565b6000838383818110610b0f57610b0f610fb5565b919091013560f81c95945050505050565b600060108201610b3281848688610f43565b610b3b91610fe4565b60801c95945050505050565b600060208201610b5981848688610f43565b6108b79161102a565b60405160a0810167ffffffffffffffff81118282101715610bac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610bd657600080fd5b919050565b803561ffff81168114610bd657600080fd5b6fffffffffffffffffffffffffffffffff81168114610c0b57600080fd5b50565b600060808284031215610c2057600080fd5b6040516080810167ffffffffffffffff8282108183111715610c6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b81604052829350843591508082168214610c8457600080fd5b508152610c9360208401610bdb565b60208201526040830135610ca681610bed565b60408201526060830135610cb981610bed565b6060919091015292915050565b60008083601f840112610cd857600080fd5b50813567ffffffffffffffff811115610cf057600080fd5b602083019150836020828501011115610d0857600080fd5b9250929050565b600080600080848603610140811215610d2757600080fd5b60a0811215610d3557600080fd5b50610d3e610b62565b610d4786610bb2565b8152602086013563ffffffff81168114610d6057600080fd5b6020820152610d7160408701610bb2565b604082015260608601356060820152610d8c60808701610bdb565b60808201529350610da08660a08701610c0e565b925061012085013567ffffffffffffffff811115610dbd57600080fd5b610dc987828801610cc6565b95989497509550505050565b60008060008060808587031215610deb57600080fd5b845193506020850151610dfd81610bed565b6040860151909350610e0e81610bed565b6060860151909250610e1f81610bed565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561098c5761098c610e2a565b600060208284031215610e7e57600080fd5b5051919050565b600060208083528351808285015260005b81811015610eb257858101830151858201604001528201610e96565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b808202811582820484141761098c5761098c610e2a565b600082610f3e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008085851115610f5357600080fd5b83861115610f6057600080fd5b5050820193919092039150565b7fffff0000000000000000000000000000000000000000000000000000000000008135818116916002851015610fad5780818660020360031b1b83161692505b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffff000000000000000000000000000000008135818116916010851015610fad5760109490940360031b84901b1690921692915050565b8035602083101561098c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b169291505056fea2646970667358221220d6cbc0b7a3b297afe25bb58a665ca8b805fe1235a76b7c98c6b34c426bb160c964736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "airdropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "priceFeed";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "calldataSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "defaultMultiplierBps";
                readonly type: "uint16";
            }];
            readonly internalType: "struct IExecutorFeeLib.FeeParams";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "baseGas";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint16";
                readonly name: "multiplierBps";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint128";
                readonly name: "floorMarginUSD";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "airdropCap";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IExecutor.DstConfig";
            readonly name: "_dstConfig";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "getFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ExecutorFeeLibInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ExecutorFeeLib;
}

declare class MessageLibBase__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "option";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "setDefaultOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MessageLibBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessageLibBase;
}

declare class MessageLibBaseE2__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }];
        readonly name: "ExecutorFeePaid";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lzToken";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "LzTokenFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "NativeOrAltTokenFeeWithdrawn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultOptions";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "option";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "worker";
            readonly type: "address";
        }];
        readonly name: "fees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPacket.PacketForQuote";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "quote";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nativeFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "lzTokenFee";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "dstEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "receiver";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPacket.Packet";
            readonly name: "_packet";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "send";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256";
                    readonly name: "nativeFee";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "lzTokenFee";
                    readonly type: "uint256";
                }];
                readonly internalType: "struct ILayerZeroEndpointV2.MessagingFee";
                readonly name: "fee";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroEndpointV2.MessagingReceipt";
            readonly name: "";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMessageLibManager.SetConfigParam[]";
            readonly name: "_config";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_options";
            readonly type: "bytes";
        }];
        readonly name: "setDefaultOptions";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_treasury";
            readonly type: "address";
        }];
        readonly name: "setTreasury";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "treasury";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "major";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint8";
            readonly name: "minor";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "endpointVersion";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzTokenFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): MessageLibBaseE2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessageLibBaseE2;
}

type MessageLibManagerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class MessageLibManager__factory extends ContractFactory {
    constructor(...args: MessageLibManagerConstructorParams);
    deploy(_blockedLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MessageLibManager>;
    getDeployTransaction(_blockedLib: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MessageLibManager;
    connect(signer: Signer): MessageLibManager__factory;
    static readonly bytecode = "0x60a06040523480156200001157600080fd5b506040516200333d3803806200333d8339810160408190526200003491620002cc565b6200003f336200005e565b6001600160a01b0381166080526200005781620000ae565b5062000372565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000b86200026e565b6040516301ffc9a760e01b815263d913d0cd60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa15801562000104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012a9190620002fe565b604051806040016040528060078152602001664c5a433030303160c81b81525090620001745760405162461bcd60e51b81526004016200016b919062000322565b60405180910390fd5b506001600160a01b038116600090815260026020908152604091829020548251808401909352600783526604c5a38303030360cc1b9183019190915260ff1615620001d45760405162461bcd60e51b81526004016200016b919062000322565b506001600160a01b0381166000818152600260209081526040808320805460ff191660019081179091558054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180546001600160a01b0319168417905590519182527f6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af5910160405180910390a150565b6000546001600160a01b03163314620002ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200016b565b565b600060208284031215620002df57600080fd5b81516001600160a01b0381168114620002f757600080fd5b9392505050565b6000602082840312156200031157600080fd5b81518015158114620002f757600080fd5b600060208083528351808285015260005b81811015620003515785810183015185820160400152820162000333565b506000604082860101526040601f19601f8301168501019250505092915050565b608051612faf6200038e60003960006103660152612faf6000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80639e7fffcc116100f9578063dc706a6211610097578063e8964e8111610071578063e8964e81146104d5578063ef667aa1146104e8578063f2fde38b14610533578063f64be4c71461054657600080fd5b8063dc706a6214610453578063dc93c8a214610476578063e16f964d146104c257600080fd5b8063b8007ff6116100d3578063b8007ff614610407578063b8849ac91461041a578063b96a277f1461042d578063d4b4ec8f1461044057600080fd5b80639e7fffcc146103ce578063a718531b146103e1578063aafea312146103f457600080fd5b80636e83f5bb11610166578063733180911161014057806373318091146103615780638da5cb5b146103885780639132e5c3146103a65780639d7f9775146103bb57600080fd5b80636e83f5bb146102925780636f50a803146102fe578063715018a61461035957600080fd5b806351c85b6b1161019757806351c85b6b1461023c57806366bf43d61461025c5780636750cd4c1461026f57600080fd5b80630678327f146101be5780632b3197b9146101d3578063402f8468146101fd575b600080fd5b6101d16101cc36600461286c565b61057c565b005b6101e66101e13660046128d3565b610695565b6040516101f4929190612995565b60405180910390f35b61021061020b3660046129b9565b6107ef565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683529015156020830152016101f4565b61024f61024a3660046129ec565b6108bd565b6040516101f49190612a2f565b6101d161026a366004612a42565b610b12565b61028261027d366004612a7e565b610e7d565b60405190151581526020016101f4565b6102d26102a0366004612a7e565b6008602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff9091169082565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101f4565b61033461030c366004612a7e565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f4565b6101d1610ee7565b6103347f000000000000000000000000000000000000000000000000000000000000000081565b60005473ffffffffffffffffffffffffffffffffffffffff16610334565b6103ae610efb565b6040516101f49190612a99565b6102826103c9366004612af3565b610f6a565b6101d16103dc36600461286c565b61107a565b6101d16103ef366004612a42565b611152565b6101d1610402366004612b2d565b61151c565b6101d1610415366004612b57565b6117cf565b6101d1610428366004612a42565b6118e2565b61033461043b3660046129b9565b611d98565b6101d161044e366004612a42565b611e61565b610282610461366004612bb8565b60026020526000908152604090205460ff1681565b6102826104843660046129b9565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260036020908152604080832063ffffffff9490941683529290522054161590565b6101d16104d0366004612b2d565b612147565b6101d16104e3366004612bb8565b61241e565b6102d26104f63660046129b9565b60056020908152600092835260408084209091529082529020805460019091015473ffffffffffffffffffffffffffffffffffffffff9091169082565b6101d1610541366004612bb8565b612685565b610334610554366004612a7e565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915284919060ff166106065760405162461bcd60e51b81526004016105fd9190612a2f565b60405180910390fd5b506040517f1c63e3b600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851690631c63e3b69061065d90869086903390600401612bd3565b600060405180830381600087803b15801561067757600080fd5b505af115801561068b573d6000803e3d6000fd5b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320548151808301909252600782527f4c5a313030303100000000000000000000000000000000000000000000000000928201929092526060929186919060ff166107195760405162461bcd60e51b81526004016105fd9190612a2f565b506040517f9c33abf700000000000000000000000000000000000000000000000000000000815263ffffffff808716600483015273ffffffffffffffffffffffffffffffffffffffff89811660248401529086166044830152871690639c33abf790606401600060405180830381865afa15801561079b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107e19190810190612d20565b925092505094509492505050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260046020908152604080832063ffffffff8616845290915281205490911690816108b65763ffffffff83166000908152600760208181526040928390205483518085019094529183527f4c5a4430303033000000000000000000000000000000000000000000000000009083015273ffffffffffffffffffffffffffffffffffffffff169250826108b05760405162461bcd60e51b81526004016105fd9190612a2f565b50600190505b9250929050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020908152604091829020548251808401909352600783527f4c5a31303030310000000000000000000000000000000000000000000000000091830191909152606091859160ff166109405760405162461bcd60e51b81526004016105fd9190612a2f565b50848473ffffffffffffffffffffffffffffffffffffffff821615610a49576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff8216600482015273ffffffffffffffffffffffffffffffffffffffff831690636750cd4c90602401602060405180830381865afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190612d65565b6040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090610a475760405162461bcd60e51b81526004016105fd9190612a2f565b505b6040517f690c655500000000000000000000000000000000000000000000000000000000815263ffffffff80881660048301528616602482015273ffffffffffffffffffffffffffffffffffffffff88169063690c655590604401600060405180830381865afa158015610ac1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b079190810190612d80565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915283919060ff16610b935760405162461bcd60e51b81526004016105fd9190612a2f565b50828473ffffffffffffffffffffffffffffffffffffffff821615610c9c576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff8216600482015273ffffffffffffffffffffffffffffffffffffffff831690636750cd4c90602401602060405180830381865afa158015610c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c469190612d65565b6040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090610c9a5760405162461bcd60e51b81526004016105fd9190612a2f565b505b6000610ca833886107ef565b91505080156040518060400160405280600781526020017f4c5a31303031300000000000000000000000000000000000000000000000000081525090610d015760405162461bcd60e51b81526004016105fd9190612a2f565b5084600003610d595733600090815260056020908152604080832063ffffffff8b168452909152812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560010155610e13565b60408051808201909152600781527f4c5a3130303030000000000000000000000000000000000000000000000000006020820152428611610dad5760405162461bcd60e51b81526004016105fd9190612a2f565b5033600090815260056020908152604080832063ffffffff8b168452909152902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161781556001018590555b6040805133815263ffffffff8916602082015273ffffffffffffffffffffffffffffffffffffffff8816818301526060810187905290517f661366f82fca66289bddc34462b3ab39d252b761599537d722a632d1bb066b8e9181900360800190a150505050505050565b63ffffffff811660009081526006602052604081205473ffffffffffffffffffffffffffffffffffffffff1615801590610ee1575063ffffffff821660009081526007602052604090205473ffffffffffffffffffffffffffffffffffffffff1615155b92915050565b610eef612722565b610ef96000612789565b565b60606001805480602002602001604051908101604052809291908181526020018280548015610f6057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f35575b5050505050905090565b6000806000610f7986866107ef565b915091508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610fbb57600192505050611073565b600081610ffd5773ffffffffffffffffffffffffffffffffffffffff8716600090815260056020908152604080832063ffffffff8a1684529091529020611013565b63ffffffff861660009081526008602052604090205b60408051808201909152815473ffffffffffffffffffffffffffffffffffffffff9081168083526001909301546020830152909250861614801561105a5750428160200151115b1561106b5760019350505050611073565b600093505050505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915284919060ff166110fb5760405162461bcd60e51b81526004016105fd9190612a2f565b506040517fd2d287f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063d2d287f09061065d90869086903390600401612bd3565b61115a612722565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915283919060ff166111db5760405162461bcd60e51b81526004016105fd9190612a2f565b50828473ffffffffffffffffffffffffffffffffffffffff8216156112e4576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff8216600482015273ffffffffffffffffffffffffffffffffffffffff831690636750cd4c90602401602060405180830381865afa15801561126a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128e9190612d65565b6040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906112e25760405162461bcd60e51b81526004016105fd9190612a2f565b505b63ffffffff86166000908152600760208181526040928390205483518085019094529183527f4c5a3130303035000000000000000000000000000000000000000000000000009083015273ffffffffffffffffffffffffffffffffffffffff9081169190871682036113695760405162461bcd60e51b81526004016105fd9190612a2f565b5063ffffffff871660008181526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8b8116918217909255835194855290851691840191909152908201527f9914edfad6b7eac2e388f49bae232bd0e1954fbe92f5ed1ab975fc270f27cea59060600160405180910390a184156114d35763ffffffff8716600090815260086020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161781556114688642612dbd565b600182018190556040805163ffffffff8b16815273ffffffffffffffffffffffffffffffffffffffff85166020820152908101919091527f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f8906060015b60405180910390a150611513565b63ffffffff8716600090815260086020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101555b50505050505050565b611524612722565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915282919060ff166115a55760405162461bcd60e51b81526004016105fd9190612a2f565b50818373ffffffffffffffffffffffffffffffffffffffff8216156116ae576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff8216600482015273ffffffffffffffffffffffffffffffffffffffff831690636750cd4c90602401602060405180830381865afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116589190612d65565b6040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906116ac5760405162461bcd60e51b81526004016105fd9190612a2f565b505b63ffffffff8516600090815260066020908152604091829020548251808401909352600783527f4c5a3130303035000000000000000000000000000000000000000000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff9081169190861682036117375760405162461bcd60e51b81526004016105fd9190612a2f565b5063ffffffff861660008181526006602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a169081179091558251938452908301527f16aa0f528038ab41019e95bae5b418a50ba8532c5800e3b7ea2f517d3fa625f591015b60405180910390a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915285919060ff166118505760405162461bcd60e51b81526004016105fd9190612a2f565b506040517fb8007ff600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86169063b8007ff6906118a9903390889088908890600401612df7565b600060405180830381600087803b1580156118c357600080fd5b505af11580156118d7573d6000803e3d6000fd5b505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040902054829060ff168061192c575073ffffffffffffffffffffffffffffffffffffffff8116155b6040518060400160405280600781526020017f4c5a313030303200000000000000000000000000000000000000000000000000815250906119805760405162461bcd60e51b81526004016105fd9190612a2f565b50828473ffffffffffffffffffffffffffffffffffffffff821615611a89576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff8216600482015273ffffffffffffffffffffffffffffffffffffffff831690636750cd4c90602401602060405180830381865afa158015611a0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a339190612d65565b6040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090611a875760405162461bcd60e51b81526004016105fd9190612a2f565b505b33600090815260046020908152604080832063ffffffff8a168452825291829020548251808401909352600783527f4c5a3130303035000000000000000000000000000000000000000000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff908116919087168203611b1a5760405162461bcd60e51b81526004016105fd9190612a2f565b5033600081815260046020908152604080832063ffffffff8c1680855290835292819020805473ffffffffffffffffffffffffffffffffffffffff8c81167fffffffffffffffffffffffff00000000000000000000000000000000000000009092168217909255825195865292850193909352918416838301526060830152517fc0833c35bb1d0beadca36bed54c7098819e109542a6d233d33c7c2039c8ec9aa9181900360800190a18415611d455773ffffffffffffffffffffffffffffffffffffffff811615801590611c04575073ffffffffffffffffffffffffffffffffffffffff861615155b6040518060400160405280600781526020017f4c5a31303031300000000000000000000000000000000000000000000000000081525090611c585760405162461bcd60e51b81526004016105fd9190612a2f565b50600060405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018742611c8e9190612dbd565b905233600081815260056020908152604080832063ffffffff8e1680855290835292819020855181547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9182161782558684015160019092018290558251958652928501939093529086169083015260608201529091507f661366f82fca66289bddc34462b3ab39d252b761599537d722a632d1bb066b8e906080016114c5565b33600090815260056020908152604080832063ffffffff8b168452909152812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001681556001015550505050505050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260036020908152604080832063ffffffff861684529091529020541680610ee1575063ffffffff8116600090815260066020908152604091829020548251808401909352600783527f4c5a4430303033000000000000000000000000000000000000000000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff169081611e5a5760405162461bcd60e51b81526004016105fd9190612a2f565b5092915050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604091829020548251808401909352600783527f4c5a3130303031000000000000000000000000000000000000000000000000009183019190915283919060ff16611ee25760405162461bcd60e51b81526004016105fd9190612a2f565b50828473ffffffffffffffffffffffffffffffffffffffff821615611feb576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff8216600482015273ffffffffffffffffffffffffffffffffffffffff831690636750cd4c90602401602060405180830381865afa158015611f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f959190612d65565b6040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090611fe95760405162461bcd60e51b81526004016105fd9190612a2f565b505b611ff3612722565b8360000361203f5763ffffffff8616600090815260086020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168155600101556120ee565b60408051808201909152600781527f4c5a31303030300000000000000000000000000000000000000000000000000060208201524285116120935760405162461bcd60e51b81526004016105fd9190612a2f565b5063ffffffff8616600090815260086020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161781556001018490555b6040805163ffffffff8816815273ffffffffffffffffffffffffffffffffffffffff871660208201529081018590527f55b28633cdb29709386f555dfc54418592ad475ce7a65a78ac5928af60ffb8f8906060016117bf565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902054819060ff1680612191575073ffffffffffffffffffffffffffffffffffffffff8116155b6040518060400160405280600781526020017f4c5a313030303200000000000000000000000000000000000000000000000000815250906121e55760405162461bcd60e51b81526004016105fd9190612a2f565b50818373ffffffffffffffffffffffffffffffffffffffff8216156122ee576040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff8216600482015273ffffffffffffffffffffffffffffffffffffffff831690636750cd4c90602401602060405180830381865afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122989190612d65565b6040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906122ec5760405162461bcd60e51b81526004016105fd9190612a2f565b505b33600090815260036020908152604080832063ffffffff89168452825291829020548251808401909352600783527f4c5a3130303035000000000000000000000000000000000000000000000000009183019190915273ffffffffffffffffffffffffffffffffffffffff90811691908616820361237f5760405162461bcd60e51b81526004016105fd9190612a2f565b5033600081815260036020908152604080832063ffffffff8b168085529083529281902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8b16908117909155815194855291840192909252908201527f4cff966ebee29a156dcb34cf72c1d06231fb1777f6bdf6e8089819232f002b1c906060016117bf565b612426612722565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fd913d0cd00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa1580156124b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d49190612d65565b6040518060400160405280600781526020017f4c5a433030303100000000000000000000000000000000000000000000000000815250906125285760405162461bcd60e51b81526004016105fd9190612a2f565b5073ffffffffffffffffffffffffffffffffffffffff8116600090815260026020908152604091829020548251808401909352600783527f4c5a3830303030000000000000000000000000000000000000000000000000009183019190915260ff16156125a85760405162461bcd60e51b81526004016105fd9190612a2f565b5073ffffffffffffffffffffffffffffffffffffffff8116600081815260026020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558054808201825593527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905590519182527f6b374d56679ca9463f27c85c6311e2bb7fde69bf201d3da39d53f10bd9d78af5910160405180910390a150565b61268d612722565b73ffffffffffffffffffffffffffffffffffffffff81166127165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105fd565b61271f81612789565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ef95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105fd565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461282257600080fd5b919050565b60008083601f84011261283957600080fd5b50813567ffffffffffffffff81111561285157600080fd5b6020830191508360208260051b85010111156108b657600080fd5b60008060006040848603121561288157600080fd5b61288a846127fe565b9250602084013567ffffffffffffffff8111156128a657600080fd5b6128b286828701612827565b9497909650939450505050565b803563ffffffff8116811461282257600080fd5b600080600080608085870312156128e957600080fd5b6128f2856127fe565b9350612900602086016127fe565b925061290e604086016128bf565b915061291c606086016128bf565b905092959194509250565b60005b8381101561294257818101518382015260200161292a565b50506000910152565b60008151808452612963816020860160208601612927565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6040815260006129a8604083018561294b565b905082151560208301529392505050565b600080604083850312156129cc57600080fd5b6129d5836127fe565b91506129e3602084016128bf565b90509250929050565b600080600060608486031215612a0157600080fd5b612a0a846127fe565b9250612a18602085016128bf565b9150612a26604085016128bf565b90509250925092565b602081526000611073602083018461294b565b600080600060608486031215612a5757600080fd5b612a60846128bf565b9250612a6e602085016127fe565b9150604084013590509250925092565b600060208284031215612a9057600080fd5b611073826128bf565b6020808252825182820181905260009190848201906040850190845b81811015612ae757835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612ab5565b50909695505050505050565b600080600060608486031215612b0857600080fd5b612b11846127fe565b9250612b1f602085016128bf565b9150612a26604085016127fe565b60008060408385031215612b4057600080fd5b612b49836128bf565b91506129e3602084016127fe565b60008060008060608587031215612b6d57600080fd5b612b76856127fe565b9350612b84602086016128bf565b9250604085013567ffffffffffffffff811115612ba057600080fd5b612bac87828801612827565b95989497509550505050565b600060208284031215612bca57600080fd5b611073826127fe565b6040808252810183905260008460608301825b86811015612c115763ffffffff612bfc846128bf565b16825260209283019290910190600101612be6565b50809250505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112612c7b57600080fd5b815167ffffffffffffffff80821115612c9657612c96612c3b565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612cdc57612cdc612c3b565b81604052838152866020858801011115612cf557600080fd5b612d06846020830160208901612927565b9695505050505050565b8051801515811461282257600080fd5b60008060408385031215612d3357600080fd5b825167ffffffffffffffff811115612d4a57600080fd5b612d5685828601612c6a565b9250506129e360208401612d10565b600060208284031215612d7757600080fd5b61107382612d10565b600060208284031215612d9257600080fd5b815167ffffffffffffffff811115612da957600080fd5b612db584828501612c6a565b949350505050565b80820180821115610ee1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000606080830173ffffffffffffffffffffffffffffffffffffffff88168452602063ffffffff80891682870152604084818801528388855260808801905060808960051b89010194508960005b8a811015612f67577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a880301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18d3603018112612ea657600080fd5b8c0185612eb2826128bf565b168852868101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112612ee957600080fd5b01868101903567ffffffffffffffff811115612f0457600080fd5b803603821315612f1357600080fd5b85888a015280868a015280828b8b013760008982018b0152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909701880196509185019190850190600101612e45565b50949c9b50505050505050505050505056fea264697066735822122010b16efa67221e6b1c516aeb61b8be7f7601a1a96de9da59496df7c7646bba1c64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_blockedLib";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly name: "DefaultReceiveLibraryTimeoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "DefaultSendLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "LibraryRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "ReceiveLibrarySet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldLib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timeout";
            readonly type: "uint256";
        }];
        readonly name: "ReceiveLibraryTimoutSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newLib";
            readonly type: "address";
        }];
        readonly name: "SendLibrarySet";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "blockedLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "defaultConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultReceiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "config";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }];
        readonly name: "getReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "isDefault";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRegisteredLibraries";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "isDefaultSendLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }];
        readonly name: "isRegisteredLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "isSupportedEid";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_actualReceiveLib";
            readonly type: "address";
        }];
        readonly name: "isValidReceiveLibrary";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }];
        readonly name: "receiveLibraryTimeout";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }];
        readonly name: "registerLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }];
        readonly name: "resetConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "configType";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes";
                readonly name: "config";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMessageLibManager.SetConfigParam[]";
            readonly name: "_params";
            readonly type: "tuple[]";
        }];
        readonly name: "setConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setDefaultSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gracePeriod";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_expiry";
            readonly type: "uint256";
        }];
        readonly name: "setReceiveLibraryTimeout";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_newLib";
            readonly type: "address";
        }];
        readonly name: "setSendLibrary";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }];
        readonly name: "snapshotConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessageLibManagerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessageLibManager;
}

type MessagingChannelConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class MessagingChannel__factory extends ContractFactory {
    constructor(...args: MessagingChannelConstructorParams);
    deploy(_eid: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MessagingChannel>;
    getDeployTransaction(_eid: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MessagingChannel;
    connect(signer: Signer): MessagingChannel__factory;
    static readonly bytecode = "0x60a060405234801561001057600080fd5b5060405161082a38038061082a83398101604081905261002f9161003d565b63ffffffff1660805261006a565b60006020828403121561004f57600080fd5b815163ffffffff8116811461006357600080fd5b9392505050565b60805161079f61008b60003960008181608701526104a2015261079f6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063aafe5e071161005b578063aafe5e071461012a578063c9fc7bcd1461014b578063e361b59c14610185578063eaeacd63146101fe57600080fd5b8063416ecebf146100825780639c6d7340146100c3578063a0dd43fc14610117575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020015b60405180910390f35b6100fe6100d136600461057d565b600260209081526000938452604080852082529284528284209052825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016100ba565b6100fe61012536600461057d565b610213565b61013d61013836600461057d565b6102c3565b6040519081526020016100ba565b61013d6101593660046105d1565b600160209081526000948552604080862082529385528385208152918452828420909152825290205481565b6101ee6101933660046105d1565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260016020908152604080832063ffffffff871684528252808320858452825280832067ffffffffffffffff851684529091529020541515949350505050565b60405190151581526020016100ba565b61021161020c36600461061e565b610330565b005b73ffffffffffffffffffffffffffffffffffffffff831660009081526020818152604080832063ffffffff86168452825280832084845290915281205467ffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff8516600090815260016020818152604080842063ffffffff891685528252808420878552825280842092850167ffffffffffffffff168452919052902054156102bb5760010161025b565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260026020908152604080832063ffffffff86168452825280832084845290915281205481906103199067ffffffffffffffff16600161065a565b90506103278186868661047b565b95945050505050565b61033b338484610213565b61034690600161065a565b67ffffffffffffffff168167ffffffffffffffff16146040518060400160405280600781526020017f4c5a313030303400000000000000000000000000000000000000000000000000815250906103d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ca91906106cd565b60405180910390fd5b503360008181526020818152604080832063ffffffff8816808552908352818420878552835292819020805467ffffffffffffffff87167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009091168117909155815193845291830186905282810193909352606082015290517f28f40053783033ef755556a0c3315379141f51a33aed8334174ffbadd90bde489181900360800190a1505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060e090811b8216602084015273ffffffffffffffffffffffffffffffffffffffff8716602484015285901b166044820152604880820184905282518083039091018152606882019092526000919061051f908790839060880161071e565b60405160208183030381529060405280519060200120915050949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461056457600080fd5b919050565b803563ffffffff8116811461056457600080fd5b60008060006060848603121561059257600080fd5b61059b84610540565b92506105a960208501610569565b9150604084013590509250925092565b803567ffffffffffffffff8116811461056457600080fd5b600080600080608085870312156105e757600080fd5b6105f085610540565b93506105fe60208601610569565b925060408501359150610613606086016105b9565b905092959194509250565b60008060006060848603121561063357600080fd5b61063c84610569565b925060208401359150610651604085016105b9565b90509250925092565b67ffffffffffffffff8181168382160190808211156106a2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5092915050565b60005b838110156106c45781810151838201526020016106ac565b50506000910152565b60208152600082518060208401526106ec8160408501602087016106a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7fffffffffffffffff0000000000000000000000000000000000000000000000008360c01b1681526000825161075b8160088501602087016106a9565b91909101600801939250505056fea2646970667358221220921a5363d9c65be2427737d39755849adcfffb19f16bafdf7e83c1a97b87afe364736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly name: "InboundNonceSkipped";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "eid";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hasPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }];
        readonly name: "inboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "inboundNonce";
            readonly type: "uint64";
        }];
        readonly name: "inboundPayloadHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "payloadHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_receiver";
            readonly type: "bytes32";
        }];
        readonly name: "nextGuid";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "receiver";
            readonly type: "bytes32";
        }];
        readonly name: "outboundNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_srcEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_sender";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "skip";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MessagingChannelInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessagingChannel;
}

type MessagingComposerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class MessagingComposer__factory extends ContractFactory {
    constructor(...args: MessagingComposerConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MessagingComposer>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MessagingComposer;
    connect(signer: Signer): MessagingComposer__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506109ed806100206000396000f3fe6080604052600436106100345760003560e01c8063754d3b9c146100395780639c9dd91d1461005b578063f405c859146100ab575b600080fd5b34801561004557600080fd5b50610059610054366004610687565b6100cc565b005b34801561006757600080fd5b506100986100763660046106e1565b6000602081815293815260408082208552928152828120909352825290205481565b6040519081526020015b60405180910390f35b6100be6100b936600461071d565b61020c565b6040516100a292919061081c565b3360009081526020818152604080832073ffffffffffffffffffffffffffffffffffffffff881684528252808320868452825291829020548251808401909352600783527f4c5a3830303030000000000000000000000000000000000000000000000000009183019190915215610179576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610170919061083f565b60405180910390fd5b50818160405161018a929190610859565b60408051918290038220336000818152602081815284822073ffffffffffffffffffffffffffffffffffffffff8b1683528152848220898352905292909220557f7c0503be82d6ab0d4ea200b69f9930b82aec3c92ed138ed1a28f60cd9c3626db916101fe919087908790879087906108b2565b60405180910390a150505050565b73ffffffffffffffffffffffffffffffffffffffff808816600090815260208181526040808320938a1683529281528282208883529052818120549151909160609161025b9088908890610859565b60408051918290038220828201909152600782527f4c5a363030303000000000000000000000000000000000000000000000000000602083015282146102ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610170919061083f565b5073ffffffffffffffffffffffffffffffffffffffff808b16600090815260208181526040808320938d1683529281528282208b835290528181206001905590517fd0a10260000000000000000000000000000000000000000000000000000000009061034b908d908c908c908c9033908d908d906024016108fd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506103ed5a73ffffffffffffffffffffffffffffffffffffffff8c169034846105b0565b9094509250508215610463576040805173ffffffffffffffffffffffffffffffffffffffff808d1682528b166020820152908101899052606081018290523360808201527fe8de892dbb4fd705fc4c154fd784700f6f24789e8ffea6922947d082606887949060a00160405180910390a16105a3565b73ffffffffffffffffffffffffffffffffffffffff808b16600090815260208181526040808320938d1683529281528282208b8352905220819055341561056157604051600090339034908381818185875af1925050503d80600081146104e6576040519150601f19603f3d011682016040523d82523d6000602084013e6104eb565b606091505b50509050806040518060400160405280600781526020017f4c5a3330303030000000000000000000000000000000000000000000000000008152509061055e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610170919061083f565b50505b7f8054fc0b1a2df897569746b52a49553918b57ffcedcd0a35f0e8553d5ebba6768a8a8a84338760405161059a9695949392919061095e565b60405180910390a15b5097509795505050505050565b60408051606480825260a0820190925260009160609183918291829082602082018180368337019050509050600080885160208a018b8e8ef192503d9350818411156105fa578193505b838152836000602083013e9199919850909650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461063957600080fd5b919050565b60008083601f84011261065057600080fd5b50813567ffffffffffffffff81111561066857600080fd5b60208301915083602082850101111561068057600080fd5b9250929050565b6000806000806060858703121561069d57600080fd5b6106a685610615565b935060208501359250604085013567ffffffffffffffff8111156106c957600080fd5b6106d58782880161063e565b95989497509550505050565b6000806000606084860312156106f657600080fd5b6106ff84610615565b925061070d60208501610615565b9150604084013590509250925092565b600080600080600080600060a0888a03121561073857600080fd5b61074188610615565b965061074f60208901610615565b955060408801359450606088013567ffffffffffffffff8082111561077357600080fd5b61077f8b838c0161063e565b909650945060808a013591508082111561079857600080fd5b506107a58a828b0161063e565b989b979a50959850939692959293505050565b6000815180845260005b818110156107de576020818501810151868301820152016107c2565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b821515815260406020820152600061083760408301846107b8565b949350505050565b60208152600061085260208301846107b8565b9392505050565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff8088168352808716602084015250846040830152608060608301526108f2608083018486610869565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015260a0604084015261093460a08401888a610869565b8187166060850152838103608085015261094f818688610869565b9b9a5050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015286604084015285606084015280851660808401525060c060a08301526109ab60c08301846107b8565b9897505050505050505056fea2646970667358221220c2743f1589b2c087f443e7c637009dfbbeb2a9c86298e619778f6fa9e5eb1ed564736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "ComposedMessageDelivered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "ComposedMessageReceived";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly name: "LzComposeFailed";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "guid";
            readonly type: "bytes32";
        }];
        readonly name: "composedMessages";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "deliverComposedMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_composer";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzCompose";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): MessagingComposerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessagingComposer;
}

type MessagingContextConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class MessagingContext__factory extends ContractFactory {
    constructor(...args: MessagingContextConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<MessagingContext>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): MessagingContext;
    connect(signer: Signer): MessagingContext__factory;
    static readonly bytecode = "0x6080604052600160005534801561001557600080fd5b5060ea806100246000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806314f651a914603757806379624ca9146073575b600080fd5b603d6088565b6040805163ffffffff909316835273ffffffffffffffffffffffffffffffffffffffff9091166020830152015b60405180910390f35b6000546040516001909114158152602001606a565b60008060976000546001141590565b60a15760008060ac565b60a0600054901c6000545b91509150909156fea2646970667358221220b4a71ec410077f8c6960a4bff5cc711cd74c08296ebb0dc91e667c2d830652fe64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "getSendContext";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "isSendingMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MessagingContextInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MessagingContext;
}

declare class OApp__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "EndpointOnly";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "addr";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidPeer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidPeerState";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "NoPeerSet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }];
        readonly name: "PreCrimeOnly";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "remoteEid";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly name: "SetPeer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "precrime";
            readonly type: "address";
        }];
        readonly name: "SetPrecrime";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "srcEid";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "sender";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }];
            readonly internalType: "struct IMessageOrigin.MessageOrigin";
            readonly name: "_origin";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_guid";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_executor";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "lzReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "lzReceiveAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "peers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "contract IPreCrime";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }];
        readonly name: "safeGetPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_config";
            readonly type: "bytes";
        }];
        readonly name: "setEndpointConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_peer";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPeer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_precrime";
            readonly type: "address";
        }];
        readonly name: "setPrecrime";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "version";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): OAppInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OApp;
}

type OutboundConfigConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class OutboundConfig__factory extends ContractFactory {
    constructor(...args: OutboundConfigConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<OutboundConfig>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): OutboundConfig;
    connect(signer: Signer): OutboundConfig__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610a14806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806381fa12a11161005057806381fa12a11461017f578063c4c37246146101a0578063ef7027f2146101fb57600080fd5b8063545d1efa1461006c57806375b5152a1461011e575b600080fd5b6100d861007a366004610896565b600160209081526000928352604080842090915290825290205463ffffffff811690640100000000810467ffffffffffffffff16906c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1683565b6040805163ffffffff909416845267ffffffffffffffff909216602084015273ffffffffffffffffffffffffffffffffffffffff16908201526060015b60405180910390f35b6100d861012c3660046108c9565b60006020819052908152604090205463ffffffff811690640100000000810467ffffffffffffffff16906c01000000000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1683565b61019261018d3660046108eb565b61021b565b60405161011592919061098b565b6101b36101ae366004610896565b61054c565b60408051825163ffffffff16815260208084015167ffffffffffffffff16908201529181015173ffffffffffffffffffffffffffffffffffffffff1690820152606001610115565b61020e6102093660046109af565b610705565b60405161011591906109cb565b606060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83016102fc5773ffffffffffffffffffffffffffffffffffffffff8416600090815260016020908152604080832063ffffffff808a1685529252822080549092911690036102cc5763ffffffff868116600090815260208181526040918290208054835194169184019190915291015b6040516020818303038152906040526001935093505050610544565b80546040805163ffffffff9092166020830152015b60405160208183030381529060405260009250925050610544565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe83016103d65773ffffffffffffffffffffffffffffffffffffffff8416600090815260016020908152604080832063ffffffff8916845290915281208054909164010000000090910467ffffffffffffffff1690036103b25763ffffffff8616600090815260208181526040918290208054835164010000000090910467ffffffffffffffff169281019290925291016102b0565b80546040805164010000000090920467ffffffffffffffff166020830152016102e1565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd83016104d65773ffffffffffffffffffffffffffffffffffffffff808516600090815260016020908152604080832063ffffffff8a1684529091529020805490916c010000000000000000000000009091041661049e5763ffffffff861660009081526020818152604091829020805483516c0100000000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff169281019290925291016102b0565b8054604080516c0100000000000000000000000090920473ffffffffffffffffffffffffffffffffffffffff166020830152016102e1565b604080518082018252600781527f4c5a433030303000000000000000000000000000000000000000000000000000602082015290517f08c379a000000000000000000000000000000000000000000000000000000000815261053b91906004016109cb565b60405180910390fd5b935093915050565b60408051606080820183526000808352602080840182905283850182905273ffffffffffffffffffffffffffffffffffffffff87811683526001825285832063ffffffff88811680865291845287852088518088018a529054808316825264010000000080820467ffffffffffffffff908116848901526c01000000000000000000000000928390048716848d0152948852878752968a90208a519889018b525492831680895296830490931687860152919004909116848701528551808701909652600786527f4c5a31303030380000000000000000000000000000000000000000000000000091860191909152929390610675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b91906109cb565b50815163ffffffff1660000361069057805163ffffffff1682525b816020015167ffffffffffffffff166000036106bb5760208082015167ffffffffffffffff16908301525b604082015173ffffffffffffffffffffffffffffffffffffffff166106fb5760408082015173ffffffffffffffffffffffffffffffffffffffff16908301525b5090505b92915050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff8316016107735763ffffffff838116600090815260208181526040918290208054835194169184019190915291015b6040516020818303038152906040529150506106ff565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe63ffffffff8316016107dc5763ffffffff8316600090815260208181526040918290208054835164010000000090910467ffffffffffffffff1692810192909252910161075c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd63ffffffff8316016104d65763ffffffff831660009081526020818152604091829020805483516c0100000000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1692810192909252910161075c565b803573ffffffffffffffffffffffffffffffffffffffff8116811461087d57600080fd5b919050565b803563ffffffff8116811461087d57600080fd5b600080604083850312156108a957600080fd5b6108b283610859565b91506108c060208401610882565b90509250929050565b6000602082840312156108db57600080fd5b6108e482610882565b9392505050565b60008060006060848603121561090057600080fd5b61090984610882565b925061091760208501610859565b9150604084013590509250925092565b6000815180845260005b8181101561094d57602081850181015186830182015201610931565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60408152600061099e6040830185610927565b905082151560208301529392505050565b600080604083850312156109c257600080fd5b6108b283610882565b6020815260006108e4602083018461092756fea26469706673582212201006ebba185939a175145e67113ca90a56c65ee506d3c44d1317f608fa62253964736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "defaultOutboundConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "outboundConfirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_configType";
            readonly type: "uint32";
        }];
        readonly name: "getDefaultOutboundConfigByType";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getOutboundConfig";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "maxMessageSize";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "outboundConfirmations";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "executor";
                readonly type: "address";
            }];
            readonly internalType: "struct OutboundConfigStruct";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_eid";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_configType";
            readonly type: "uint256";
        }];
        readonly name: "getOutboundConfigByType";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "oapp";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "dstEid";
            readonly type: "uint32";
        }];
        readonly name: "outboundConfig";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "maxMessageSize";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "outboundConfirmations";
            readonly type: "uint64";
        }, {
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): OutboundConfigInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OutboundConfig;
}

declare class PreCrime__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "SimulateRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "_simulateAndRevert";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "getPrecrimeConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pMaxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulation";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "precrimeEidToPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimeEids";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimePeers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrimeVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setPrecrimeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setPrecrimeMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_peers";
            readonly type: "bytes32[]";
        }];
        readonly name: "setPrecrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly name: "simulateView";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulationCallback";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PreCrimeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PreCrime;
}

declare class PreCrimeBase__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "getPrecrimeConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pMaxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulation";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "precrimeEidToPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimeEids";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimePeers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrimeVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setPrecrimeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setPrecrimeMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_peers";
            readonly type: "bytes32[]";
        }];
        readonly name: "setPrecrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulateView";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulationCallback";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): PreCrimeBaseInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PreCrimeBase;
}

declare class PreCrimeView__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "result";
            readonly type: "bytes";
        }];
        readonly name: "LzReceiveRevert";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "getPrecrimeConfig";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pAdmin";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pMaxBatchSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_simulation";
            readonly type: "bytes[]";
        }];
        readonly name: "precrime";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "reason";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "eid";
            readonly type: "uint32";
        }];
        readonly name: "precrimeEidToPeer";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "peer";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimeEids";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "precrimePeers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "precrimeVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "setPrecrimeAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_maxBatchSize";
            readonly type: "uint64";
        }];
        readonly name: "setPrecrimeMaxBatchSize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32[]";
            readonly name: "_eids";
            readonly type: "uint32[]";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_peers";
            readonly type: "bytes32[]";
        }];
        readonly name: "setPrecrimePeers";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly name: "simulate";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "srcEid";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "sender";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct IMessageOrigin.MessageOrigin";
                readonly name: "origin";
                readonly type: "tuple";
            }, {
                readonly internalType: "bytes32";
                readonly name: "guid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "message";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "callParams";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPreCrime.Packet[]";
            readonly name: "_packets";
            readonly type: "tuple[]";
        }];
        readonly name: "simulateView";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "code";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "simulationCallback";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): PreCrimeViewInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PreCrimeView;
}

type PriceFeedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class PriceFeed__factory extends ContractFactory {
    constructor(...args: PriceFeedConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<PriceFeed>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): PriceFeed;
    connect(signer: Signer): PriceFeed__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50611e23806100206000396000f3fe60806040526004361061018b5760003560e01c80638da5cb5b116100d6578063d350ad251161007f578063e0ad121a11610059578063e0ad121a14610653578063f2fde38b14610708578063fd9be5221461072857600080fd5b8063d350ad251461051c578063da26663a1461053c578063dbbb41551461063357600080fd5b8063c1840327116100b0578063c184032714610498578063c4d66de8146104bf578063cd68b79b146104df57600080fd5b80638da5cb5b1461041657806392807f5814610441578063c1723a1d1461048557600080fd5b80635e280f11116101385780637dc438a4116101125780637dc438a41461035e57806388a4124c1461037e5780638ca2fb08146103d657600080fd5b80635e280f11146102b1578063715018a6146103035780637bc3c9ab1461031857600080fd5b806336a5beba1161016957806336a5beba1461020957806352a72510146102715780635d6d7ccb1461029157600080fd5b806311f2c343146101905780632f7cb0b4146101c75780633161b7f6146101e9575b600080fd5b34801561019c57600080fd5b506101b46101ab3660046119ea565b60009392505050565b6040519081526020015b60405180910390f35b3480156101d357600080fd5b506101e76101e2366004611a3d565b610748565b005b3480156101f557600080fd5b506101e7610204366004611a5f565b610785565b34801561021557600080fd5b5060408051808201825260008082526020918201528151808301835260685467ffffffffffffffff811680835263ffffffff680100000000000000009092048216928401928352845190815291511691810191909152016101be565b34801561027d57600080fd5b506101e761028c366004611af6565b610994565b34801561029d57600080fd5b506101e76102ac366004611a3d565b6109f2565b3480156102bd57600080fd5b50606a546102de9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101be565b34801561030f57600080fd5b506101e7610ae9565b34801561032457600080fd5b50610338610333366004611b46565b610afd565b604080519283526fffffffffffffffffffffffffffffffff9091166020830152016101be565b34801561036a57600080fd5b506101e7610379366004611b64565b610b98565b34801561038a57600080fd5b5061039e6103993660046119ea565b610cd5565b604080519485526fffffffffffffffffffffffffffffffff9384166020860152918316918401919091521660608201526080016101be565b3480156103e257600080fd5b506104066103f1366004611b7c565b60666020526000908152604090205460ff1681565b60405190151581526020016101be565b34801561042257600080fd5b5060335473ffffffffffffffffffffffffffffffffffffffff166102de565b34801561044d57600080fd5b506069546fffffffffffffffffffffffffffffffff165b6040516fffffffffffffffffffffffffffffffff90911681526020016101be565b61039e6104933660046119ea565b610cf7565b3480156104a457600080fd5b506065546fffffffffffffffffffffffffffffffff16610464565b3480156104cb57600080fd5b506101e76104da366004611b7c565b610d1a565b3480156104eb57600080fd5b506069546104649070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1681565b34801561052857600080fd5b506101e7610537366004611a3d565b611001565b34801561054857600080fd5b506105ef610557366004611b99565b60408051606080820183526000808352602080840182905292840181905263ffffffff94851681526067835283902083519182018452546fffffffffffffffffffffffffffffffff81168252700100000000000000000000000000000000810467ffffffffffffffff169282019290925278010000000000000000000000000000000000000000000000009091049092169082015290565b6040805182516fffffffffffffffffffffffffffffffff16815260208084015167ffffffffffffffff16908201529181015163ffffffff16908201526060016101be565b34801561063f57600080fd5b506101e761064e366004611b7c565b61104c565b34801561065f57600080fd5b506105ef61066e366004611bb4565b60408051606080820183526000808352602080840182905292840181905261ffff949094168452606782529282902082519384018352546fffffffffffffffffffffffffffffffff8116845267ffffffffffffffff700100000000000000000000000000000000820416918401919091527801000000000000000000000000000000000000000000000000900463ffffffff169082015290565b34801561071457600080fd5b506101e7610723366004611b7c565b61109b565b34801561073457600080fd5b506101e7610743366004611bcf565b611152565b610750611224565b606980546fffffffffffffffffffffffffffffffff928316700100000000000000000000000000000000029216919091179055565b336107a560335473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161461083e573360009081526066602052604090205460ff1661083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5072696365466565643a206e6f7420707269636520757064617465720000000060448201526064015b60405180910390fd5b60005b8181101561098f573683838381811061085c5761085c611bfb565b60800291909101915061097c90506108776020830183611b99565b61088936849003840160208501611c42565b805160208083015160409384015184516060810186526fffffffffffffffffffffffffffffffff948516815267ffffffffffffffff92831681850190815263ffffffff9283168288019081529783166000908152606790955295909320925183549551965194167fffffffffffffffff000000000000000000000000000000000000000000000000909516949094177001000000000000000000000000000000009590911694909402939093177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009190921602179055565b508061098781611d04565b915050610841565b505050565b61099c611224565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260666020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b33610a1260335473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610aa6573360009081526066602052604090205460ff16610aa6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5072696365466565643a206e6f742070726963652075706461746572000000006044820152606401610835565b606980547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b610af1611224565b610afb60006112a5565b565b6000808461ffff16606e1480610b1857508461ffff1661279f145b80610b2857508461ffff16614eaf145b15610b4557610b3c8561ffff16858561131c565b91509150610b90565b8461ffff16606f1480610b5d57508461ffff16612794145b80610b6d57508461ffff16614ea4145b15610b8157610b3c8561ffff168585611479565b610b3c8561ffff16858561162a565b935093915050565b33610bb860335473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610c4c573360009081526066602052604090205460ff16610c4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5072696365466565643a206e6f742070726963652075706461746572000000006044820152606401610835565b610c5c6108776020830183611b99565b6000610c6e60a0830160808401611d3c565b90506000610c8260c0840160a08501611b99565b6068805463ffffffff90921668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090921667ffffffffffffffff90941693909317179091555050565b600080600080610ce68787876116ff565b935093509350935093509350935093565b600080808080610d088888886116ff565b94509450945094505093509350935093565b6000610d447fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b905073ffffffffffffffffffffffffffffffffffffffff8116610d9d5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610dbf565b3373ffffffffffffffffffffffffffffffffffffffff821614610dbf57600080fd5b600054610100900460ff1615808015610ddf5750600054600160ff909116105b80610df95750303b158015610df9575060005460ff166001145b610e85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610835565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610ee357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610eeb6117d6565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260666020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055606580547fffffffffffffffffffffffffffffffff000000000000000000000000000000001668056bc75e2d6310000017905560698054702f000000000000000000000000000000006fffffffffffffffffffffffffffffffff91909116179055801561098f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b611009611224565b606580547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b611054611224565b606a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6110a3611224565b73ffffffffffffffffffffffffffffffffffffffff8116611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610835565b61114f816112a5565b50565b61115a611224565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146111b4576040519150601f19603f3d011682016040523d82523d6000602084013e6111b9565b606091505b505090508061098f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5072696365466565643a207769746864726177206661696c65640000000000006044820152606401610835565b60335473ffffffffffffffffffffffffffffffffffffffff163314610afb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610835565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b63ffffffff8381166000908152606760205260408120606854606954929384938492680100000000000000009004909116906064906113819070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1689611d57565b61138b9190611da3565b6113959190611d57565b82549091506000906113c9907801000000000000000000000000000000000000000000000000900463ffffffff1688611d57565b835460685491925060009167ffffffffffffffff7001000000000000000000000000000000009092048216918491869161140491168b611db7565b61140e9190611db7565b6114189190611db7565b6114229190611d57565b60655485549192506fffffffffffffffffffffffffffffffff9081169161144a911683611d57565b6114549190611da3565b935493996fffffffffffffffffffffffffffffffff9094169850929650505050505050565b600080600061148786611875565b63ffffffff808216600090815260676020526040812080549394509290916114cc91780100000000000000000000000000000000000000000000000090041688611d57565b6114d890610c74611db7565b825490915060009061150890700100000000000000000000000000000000900467ffffffffffffffff1683611d57565b63ffffffff808b166000908152606760205260408120805493945092909161154d9178010000000000000000000000000000000000000000000000009004168b611d57565b8254909150600090700100000000000000000000000000000000900467ffffffffffffffff1661157d8b84611db7565b6115879190611d57565b60655487549192506000916fffffffffffffffffffffffffffffffff918216916115b2911687611d57565b6115bc9190611da3565b60655485549192506000916fffffffffffffffffffffffffffffffff918216916115e7911685611d57565b6115f19190611da3565b905060006115ff8284611db7565b9554959f6fffffffffffffffffffffffffffffffff9096169e50949c50505050505050505050505050565b63ffffffff8084166000908152606760205260408120805491928392839161166f91780100000000000000000000000000000000000000000000000090041687611d57565b8254909150600090700100000000000000000000000000000000900467ffffffffffffffff1661169f8784611db7565b6116a99190611d57565b60655484549192506fffffffffffffffffffffffffffffffff908116916116d1911683611d57565b6116db9190611da3565b925492986fffffffffffffffffffffffffffffffff90931697509195505050505050565b60008080808061171161753089611dca565b90508063ffffffff16606e148061172f57508063ffffffff1661279f145b8061174157508063ffffffff16614eaf145b1561175b5761175181888861131c565b90955093506117aa565b8063ffffffff16606f148061177757508063ffffffff16612794145b8061178957508063ffffffff16614ea4145b1561179957611751818888611479565b6117a481888861162a565b90955093505b505060655460695493979296506fffffffffffffffffffffffffffffffff908116955090921692509050565b600054610100900460ff1661186d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610835565b610afb611931565b60008061188461753084611dca565b90508063ffffffff16606f0361189d5750606592915050565b8063ffffffff16612794036118b6575061278992915050565b8063ffffffff16614ea4036118cf5750614e9992915050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5072696365466565643a20756e6b6e6f776e206c3220636861696e20696400006044820152606401610835565b600054610100900460ff166119c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610835565b610afb336112a5565b803563ffffffff811681146119e557600080fd5b919050565b6000806000606084860312156119ff57600080fd5b611a08846119d1565b95602085013595506040909401359392505050565b80356fffffffffffffffffffffffffffffffff811681146119e557600080fd5b600060208284031215611a4f57600080fd5b611a5882611a1d565b9392505050565b60008060208385031215611a7257600080fd5b823567ffffffffffffffff80821115611a8a57600080fd5b818501915085601f830112611a9e57600080fd5b813581811115611aad57600080fd5b8660208260071b8501011115611ac257600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461114f57600080fd5b60008060408385031215611b0957600080fd5b8235611b1481611ad4565b915060208301358015158114611b2957600080fd5b809150509250929050565b803561ffff811681146119e557600080fd5b600080600060608486031215611b5b57600080fd5b611a0884611b34565b600060c08284031215611b7657600080fd5b50919050565b600060208284031215611b8e57600080fd5b8135611a5881611ad4565b600060208284031215611bab57600080fd5b611a58826119d1565b600060208284031215611bc657600080fd5b611a5882611b34565b60008060408385031215611be257600080fd5b8235611bed81611ad4565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b803567ffffffffffffffff811681146119e557600080fd5b600060608284031215611c5457600080fd5b6040516060810181811067ffffffffffffffff82111715611c9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052611caa83611a1d565b8152611cb860208401611c2a565b6020820152611cc9604084016119d1565b60408201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d3557611d35611cd5565b5060010190565b600060208284031215611d4e57600080fd5b611a5882611c2a565b8082028115828204841417611d6e57611d6e611cd5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611db257611db2611d74565b500490565b80820180821115611d6e57611d6e611cd5565b600063ffffffff80841680611de157611de1611d74565b9216919091069291505056fea2646970667358221220cca609b43d0f176cf04c171ddec412768a8cb2a31a66f7ac5ad34bf6844bc86f64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ARBITRUM_COMPRESSION_PERCENT";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "arbitrumPriceExt";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "gasPerL2Tx";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerL1CallDataByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.ArbitrumPriceExt";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "endpoint";
        readonly outputs: readonly [{
            readonly internalType: "contract ILayerZeroEndpointV2";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByChain";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "priceRatio";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeByEid";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_callDataSize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_gas";
            readonly type: "uint256";
        }];
        readonly name: "estimateFeeOnSend";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_dstEid";
            readonly type: "uint32";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "price";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_dstEid";
            readonly type: "uint16";
        }];
        readonly name: "getPrice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint128";
                readonly name: "priceRatio";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint64";
                readonly name: "gasPriceInUnit";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint32";
                readonly name: "gasPerByte";
                readonly type: "uint32";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.Price";
            readonly name: "price";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getPriceRatioDenominator";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceUpdater";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeTokenPriceUSD";
        readonly outputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "updater";
            readonly type: "address";
        }];
        readonly name: "priceUpdater";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "active";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_compressionPercent";
            readonly type: "uint128";
        }];
        readonly name: "setArbitrumCompressionPercent";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_endpoint";
            readonly type: "address";
        }];
        readonly name: "setEndpoint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_nativeTokenPriceUSD";
            readonly type: "uint128";
        }];
        readonly name: "setNativeTokenPriceUSD";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint128";
                    readonly name: "priceRatio";
                    readonly type: "uint128";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "gasPriceInUnit";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.Price";
                readonly name: "price";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.UpdatePrice[]";
            readonly name: "_price";
            readonly type: "tuple[]";
        }];
        readonly name: "setPrice";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "eid";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint128";
                    readonly name: "priceRatio";
                    readonly type: "uint128";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "gasPriceInUnit";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.Price";
                readonly name: "price";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "gasPerL2Tx";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "gasPerL1CallDataByte";
                    readonly type: "uint32";
                }];
                readonly internalType: "struct ILayerZeroPriceFeed.ArbitrumPriceExt";
                readonly name: "extend";
                readonly type: "tuple";
            }];
            readonly internalType: "struct ILayerZeroPriceFeed.UpdatePriceExt";
            readonly name: "_update";
            readonly type: "tuple";
        }];
        readonly name: "setPriceForArbitrum";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint128";
            readonly name: "_denominator";
            readonly type: "uint128";
        }];
        readonly name: "setPriceRatioDenominator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_addr";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setPriceUpdater";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): PriceFeedInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): PriceFeed;
}

type TreasuryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Treasury__factory extends ContractFactory {
    constructor(...args: TreasuryConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Treasury>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Treasury;
    connect(signer: Signer): Treasury__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610bdc8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063bf6e753611610066578063bf6e7536146101a4578063d4244221146101b7578063ef90be4c146101ca578063f2fde38b146101dd57600080fd5b80638da5cb5b1461015c578063909532381461018457806396a141a01461019b57600080fd5b8063715018a6116100bd578063715018a61461012e57806377c48995146101365780637e8a06991461014957600080fd5b806301d9c2cb146100e457806301f1f6e8146101065780633972d46c1461011b575b600080fd5b6003546100f19060ff1681565b60405190151581526020015b60405180910390f35b61011961011436600461090f565b6101f0565b005b610119610129366004610933565b610229565b610119610236565b610119610144366004610933565b61024a565b61011961015736600461096e565b610257565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100fd565b61018d60025481565b6040519081526020016100fd565b61018d60015481565b6101196101b23660046109bf565b6102f5565b61018d6101c5366004610a00565b61038a565b6101196101d83660046109bf565b61043d565b6101196101eb366004610a5c565b61046b565b6101f8610522565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b610231610522565b600155565b61023e610522565b61024860006105a3565b565b610252610522565b600255565b61025f610522565b6040517f200175f700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015283811660248301526044820183905285169063200175f790606401600060405180830381600087803b1580156102d757600080fd5b505af11580156102eb573d6000803e3d6000fd5b5050505050505050565b6102fd610522565b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063fd9be52290604401600060405180830381600087803b15801561036d57600080fd5b505af1158015610381573d6000803e3d6000fd5b50505050505050565b600081156104175760035460408051808201909152600781527f4c5a44303030320000000000000000000000000000000000000000000000000060208201529060ff1661040d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049190610a9d565b60405180910390fd5b5050600254610435565b612710600154846104289190610aee565b6104329190610b32565b90505b949350505050565b610445610522565b61046673ffffffffffffffffffffffffffffffffffffffff84168383610618565b505050565b610473610522565b73ffffffffffffffffffffffffffffffffffffffff8116610516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610404565b61051f816105a3565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610404565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610466928692916000916106e3918516908490610790565b90508051600014806107045750808060200190518101906107049190610b6d565b610466576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610404565b60606104358484600085856000808673ffffffffffffffffffffffffffffffffffffffff1685876040516107c49190610b8a565b60006040518083038185875af1925050503d8060008114610801576040519150601f19603f3d011682016040523d82523d6000602084013e610806565b606091505b509150915061081787838387610822565b979650505050505050565b606083156108b85782516000036108b15773ffffffffffffffffffffffffffffffffffffffff85163b6108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610404565b5081610435565b61043583838151156108cd5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049190610a9d565b801515811461051f57600080fd5b60006020828403121561092157600080fd5b813561092c81610901565b9392505050565b60006020828403121561094557600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461051f57600080fd5b6000806000806080858703121561098457600080fd5b843561098f8161094c565b9350602085013561099f8161094c565b925060408501356109af8161094c565b9396929550929360600135925050565b6000806000606084860312156109d457600080fd5b83356109df8161094c565b925060208401356109ef8161094c565b929592945050506040919091013590565b60008060008060808587031215610a1657600080fd5b8435610a218161094c565b9350602085013563ffffffff81168114610a3a57600080fd5b9250604085013591506060850135610a5181610901565b939692955090935050565b600060208284031215610a6e57600080fd5b813561092c8161094c565b60005b83811015610a94578181015183820152602001610a7c565b50506000910152565b6020815260008251806020840152610abc816040850160208701610a79565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b8082028115828204841417610b2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b600082610b68577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215610b7f57600080fd5b815161092c81610901565b60008251610b9c818460208701610a79565b919091019291505056fea2646970667358221220fbb9a8b8f4be808ead0a27c959996e5b72cf570258e54f49febad5a5adb89f1064736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "_totalFee";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "_payInLzToken";
            readonly type: "bool";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenEnabled";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "lzTokenFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nativeBP";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_zroFee";
            readonly type: "uint256";
        }];
        readonly name: "setLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_zroEnabled";
            readonly type: "bool";
        }];
        readonly name: "setLzTokenEnabled";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_nativeBP";
            readonly type: "uint256";
        }];
        readonly name: "setNativeFeeBP";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_messageLib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lzToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawLzToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_messageLib";
            readonly type: "address";
        }, {
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawNativeFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): TreasuryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Treasury;
}

declare class Worker__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousAdminRole";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newAdminRole";
            readonly type: "bytes32";
        }];
        readonly name: "RoleAdminChanged";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleGranted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "RoleRevoked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "SetDefaultMultiplierBps";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "priceFeed";
            readonly type: "address";
        }];
        readonly name: "SetPriceFeed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "workerLib";
            readonly type: "address";
        }];
        readonly name: "SetWorkerLib";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "lib";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "Withdraw";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "allowlistSize";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "defaultMultiplierBps";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "priceFeed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "role";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "_multiplierBps";
            readonly type: "uint16";
        }];
        readonly name: "setDefaultMultiplierBps";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_paused";
            readonly type: "bool";
        }];
        readonly name: "setPaused";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_priceFeed";
            readonly type: "address";
        }];
        readonly name: "setPriceFeed";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_workerFeeLib";
            readonly type: "address";
        }];
        readonly name: "setWorkerFeeLib";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_lib";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "workerFeeLib";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): WorkerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Worker;
}

type index_EndpointV2__factory = EndpointV2__factory;
declare const index_EndpointV2__factory: typeof EndpointV2__factory;
type index_ExecutorFeeLib__factory = ExecutorFeeLib__factory;
declare const index_ExecutorFeeLib__factory: typeof ExecutorFeeLib__factory;
type index_Executor__factory = Executor__factory;
declare const index_Executor__factory: typeof Executor__factory;
type index_MessageLibBaseE2__factory = MessageLibBaseE2__factory;
declare const index_MessageLibBaseE2__factory: typeof MessageLibBaseE2__factory;
type index_MessageLibBase__factory = MessageLibBase__factory;
declare const index_MessageLibBase__factory: typeof MessageLibBase__factory;
type index_MessageLibManager__factory = MessageLibManager__factory;
declare const index_MessageLibManager__factory: typeof MessageLibManager__factory;
type index_MessagingChannel__factory = MessagingChannel__factory;
declare const index_MessagingChannel__factory: typeof MessagingChannel__factory;
type index_MessagingComposer__factory = MessagingComposer__factory;
declare const index_MessagingComposer__factory: typeof MessagingComposer__factory;
type index_MessagingContext__factory = MessagingContext__factory;
declare const index_MessagingContext__factory: typeof MessagingContext__factory;
type index_OApp__factory = OApp__factory;
declare const index_OApp__factory: typeof OApp__factory;
type index_OutboundConfig__factory = OutboundConfig__factory;
declare const index_OutboundConfig__factory: typeof OutboundConfig__factory;
type index_PreCrimeBase__factory = PreCrimeBase__factory;
declare const index_PreCrimeBase__factory: typeof PreCrimeBase__factory;
type index_PreCrimeView__factory = PreCrimeView__factory;
declare const index_PreCrimeView__factory: typeof PreCrimeView__factory;
type index_PreCrime__factory = PreCrime__factory;
declare const index_PreCrime__factory: typeof PreCrime__factory;
type index_PriceFeed__factory = PriceFeed__factory;
declare const index_PriceFeed__factory: typeof PriceFeed__factory;
type index_Treasury__factory = Treasury__factory;
declare const index_Treasury__factory: typeof Treasury__factory;
type index_Worker__factory = Worker__factory;
declare const index_Worker__factory: typeof Worker__factory;
declare namespace index {
  export {
    index_EndpointV2__factory as EndpointV2__factory,
    index_ExecutorFeeLib__factory as ExecutorFeeLib__factory,
    index_Executor__factory as Executor__factory,
    index_MessageLibBaseE2__factory as MessageLibBaseE2__factory,
    index_MessageLibBase__factory as MessageLibBase__factory,
    index_MessageLibManager__factory as MessageLibManager__factory,
    index_MessagingChannel__factory as MessagingChannel__factory,
    index_MessagingComposer__factory as MessagingComposer__factory,
    index_MessagingContext__factory as MessagingContext__factory,
    index_OApp__factory as OApp__factory,
    index_OutboundConfig__factory as OutboundConfig__factory,
    index_PreCrimeBase__factory as PreCrimeBase__factory,
    index_PreCrimeView__factory as PreCrimeView__factory,
    index_PreCrime__factory as PreCrime__factory,
    index_PriceFeed__factory as PriceFeed__factory,
    index_Treasury__factory as Treasury__factory,
    index_Worker__factory as Worker__factory,
    index$f as examples,
    index$e as interfaces,
    index$d as messagelib,
    index$9 as standards,
    index$4 as uln,
    index$1 as upgradeable,
  };
}

declare function getDeployedContractAddress(network: string, contractName: string): string;

export { BlockedMessageLib, BlockedMessageLib__factory, ComposedMessageDeliveredEvent$1 as ComposedMessageDeliveredEvent, EndpointV2, EndpointV2__factory, Executor, ExecutorFeeLib, ExecutorFeeLib__factory, Executor__factory, Fee, Fee__factory, IExecutor$3 as IExecutor, IExecutorFeeLib$1 as IExecutorFeeLib, IExecutorFeeLib__factory, IExecutor__factory, IInspector, IInspector__factory, ILayerZeroComposer, ILayerZeroComposer__factory, ILayerZeroEndpointV2$a as ILayerZeroEndpointV2, ILayerZeroEndpointV2__factory, ILayerZeroExecutor, ILayerZeroExecutor__factory, ILayerZeroPriceFeed$1 as ILayerZeroPriceFeed, ILayerZeroPriceFeed__factory, ILayerZeroReceiver, ILayerZeroReceiver__factory, ILayerZeroTreasury, ILayerZeroTreasury__factory, ILayerZeroVerifier, ILayerZeroVerifier__factory, IMessageLib, IMessageLibE1, IMessageLibE1__factory, IMessageLibManager$4 as IMessageLibManager, IMessageLibManager__factory, IMessageLib__factory, IMessagingChannel, IMessagingChannel__factory, IMessagingComposer, IMessagingComposer__factory, IMessagingContext, IMessagingContext__factory, IOApp, IOApp__factory, IOFT$4 as IOFT, IOFT__factory, IPreCrime$9 as IPreCrime, IPreCrime__factory, ITreasuryFeeHandler, ITreasuryFeeHandler__factory, IUlnConfig, IUlnConfig__factory, IUltraLightNode, IUltraLightNode301, IUltraLightNode301__factory, IUltraLightNode__factory, IVerifier$3 as IVerifier, IVerifierFeeLib$1 as IVerifierFeeLib, IVerifierFeeLib__factory, IVerifier__factory, IWorker, IWorker__factory, MessageLibBase, MessageLibBaseE1, MessageLibBaseE1__factory, MessageLibBaseE2, MessageLibBaseE2__factory, MessageLibBase__factory, MessageLibManager, MessageLibManager__factory, MessagingChannel, MessagingChannel__factory, MessagingComposer, MessagingComposer__factory, MessagingContext, MessagingContext__factory, MultiSig, MultiSigUpgradeable, MultiSigUpgradeable__factory, MultiSig__factory, NonceContract, NonceContract__factory, OApp, OApp__factory, OFT, OFTAdapter, OFTAdapter__factory, OFTCore, OFTCore__factory, OFTPrecrime, OFTPrecrime__factory, OFT__factory, OmniCounter, OmniCounterPreCrime, OmniCounterPreCrimeView, OmniCounterPreCrimeView__factory, OmniCounterPreCrime__factory, OmniCounterViewer, OmniCounterViewer__factory, OmniCounter__factory, OutboundConfig, OutboundConfig__factory, PacketDeliveredEvent, PacketSentEvent, PacketSentEvent$1 as PacketSentEvent301, PreCrime, PreCrimeBase, PreCrimeBase__factory, PreCrimeView, PreCrimeView__factory, PreCrime__factory, PriceFeed, PriceFeed__factory, ProxyAdmin, ProxyAdmin__factory, SimpleMessageLib, SimpleMessageLib__factory, TestOFT, TestOFT__factory, TransparentUpgradeableProxy, TransparentUpgradeableProxy__factory, Treasury, TreasuryFeeHandler, TreasuryFeeHandler__factory, Treasury__factory, UlnBase, UlnBase__factory, UlnConfig, UlnConfig__factory, UltraLightNode301, UltraLightNode301__factory, UltraLightNode302, UltraLightNode302__factory, VerifierFeeLib, VerifierFeeLib__factory, VerifierNetwork, VerifierNetwork__factory, Worker, WorkerUpgradeable, WorkerUpgradeable__factory, Worker__factory, index$u as examples, index as factories, getDeployedContractAddress, index$t as interfaces, index$s as messagelib, index$o as standards, index$j as uln, index$g as upgradeable };
