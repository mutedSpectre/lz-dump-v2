{
  "address": "0xdd694e82fEF17d787d977EA76b1820433c69b5f0",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "calldataSize",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "defaultMultiplierBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IExecutorFeeLib.FeeParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "baseGas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "airdropCap",
              "type": "uint128"
            }
          ],
          "internalType": "struct IExecutor.DstConfig",
          "name": "_dstConfig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "calldataSize",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "defaultMultiplierBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IExecutorFeeLib.FeeParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "baseGas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "airdropCap",
              "type": "uint128"
            }
          ],
          "internalType": "struct IExecutor.DstConfig",
          "name": "_dstConfig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "getFeeOnSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd16c47bd0c4d2870161a6051cd279ef79c0ecb8bbe4daa8c947fe2c65d42fa5c",
  "receipt": {
    "to": null,
    "from": "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6",
    "contractAddress": "0xdd694e82fEF17d787d977EA76b1820433c69b5f0",
    "transactionIndex": 1,
    "gasUsed": "1155411",
    "logsBloom": "0x
    "blockHash": "0x5e7f6e9dcc28250779b763072a55b9d6b298f978d82afd4364f4c5b85780c67a",
    "transactionHash": "0xd16c47bd0c4d2870161a6051cd279ef79c0ecb8bbe4daa8c947fe2c65d42fa5c",
    "logs": [],
    "blockNumber": 30910865,
    "cumulativeGasUsed": "1155411",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "23618ae04a8987a244e2ff990cbbeac7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calldataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"defaultMultiplierBps\",\"type\":\"uint16\"}],\"internalType\":\"struct IExecutorFeeLib.FeeParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"airdropCap\",\"type\":\"uint128\"}],\"internalType\":\"struct IExecutor.DstConfig\",\"name\":\"_dstConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calldataSize\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"defaultMultiplierBps\",\"type\":\"uint16\"}],\"internalType\":\"struct IExecutorFeeLib.FeeParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"airdropCap\",\"type\":\"uint128\"}],\"internalType\":\"struct IExecutor.DstConfig\",\"name\":\"_dstConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"getFeeOnSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExecutorFeeLib.sol\":\"ExecutorFeeLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMessageOrigin.sol\\\";\\n\\ninterface ILayerZeroReceiver is IMessageOrigin {\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        MessageOrigin calldata _origin,\\n        bytes32 _guid,\\n        bytes memory _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xe1e716f2016fe17aeeed4b41a37b6ce9a163e719a5c8e1c5e6be41d64fb701ee\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageOrigin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageOrigin {\\n    struct MessageOrigin {\\n        uint32 srcEid;\\n        bytes32 sender;\\n        uint64 nonce;\\n    }\\n}\\n\",\"keccak256\":\"0x17fe98500a8ff512f22020c5a9522b676af101e6fc11a073ebf162ea02aa2f47\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint _start) internal pure returns (address) {\\n        unchecked {\\n            uint end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6984a7e7f292ec4533ac684583e5d0505bee3bc4348776072413ceb521a6acc8\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // Invalid Argument (http: 400)\\n    string internal constant INVALID_ARGUMENT = \\\"LZ10000\\\";\\n    string internal constant ONLY_REGISTERED = \\\"LZ10001\\\";\\n    string internal constant ONLY_REGISTERED_OR_DEFAULT = \\\"LZ10002\\\";\\n    string internal constant INVALID_AMOUNT = \\\"LZ10003\\\";\\n    string internal constant INVALID_NONCE = \\\"LZ10004\\\";\\n    string internal constant SAME_VALUE = \\\"LZ10005\\\";\\n    string internal constant UNSORTED = \\\"LZ10006\\\";\\n    string internal constant INVALID_VERSION = \\\"LZ10007\\\";\\n    string internal constant INVALID_EID = \\\"LZ10008\\\";\\n    string internal constant INVALID_SIZE = \\\"LZ10009\\\";\\n    string internal constant ONLY_NON_DEFAULT = \\\"LZ10010\\\";\\n    string internal constant INVALID_VERIFIERS = \\\"LZ10011\\\";\\n    string internal constant DUPLICATED = \\\"LZ10012\\\";\\n    string internal constant INVALID_WORKER_ID = \\\"LZ10013\\\";\\n\\n    // Out of Range (http: 400)\\n    string internal constant OUT_OF_RANGE = \\\"LZ20000\\\";\\n\\n    // Invalid State (http: 400)\\n    string internal constant INVALID_STATE = \\\"LZ30000\\\";\\n    string internal constant SEND_REENTRANCY = \\\"LZ30001\\\";\\n    string internal constant RECEIVE_REENTRANCY = \\\"LZ30002\\\";\\n    string internal constant COMPOSE_REENTRANCY = \\\"LZ30003\\\";\\n\\n    // Permission Denied (http: 403)\\n    string internal constant PERMISSION_DENIED = \\\"LZ50000\\\";\\n\\n    // Not Found (http: 404)\\n    string internal constant NOT_FOUND = \\\"LZ60000\\\";\\n\\n    // Already Exists (http: 409)\\n    string internal constant ALREADY_EXISTS = \\\"LZ80000\\\";\\n\\n    // Not Implemented (http: 501)\\n    string internal constant NOT_IMPLEMENTED = \\\"LZC0000\\\";\\n    string internal constant UNSUPPORTED_INTERFACE = \\\"LZC0001\\\";\\n\\n    // Unavailable (http: 503)\\n    string internal constant UNAVAILABLE = \\\"LZD0000\\\";\\n    string internal constant NATIVE_COIN_UNAVAILABLE = \\\"LZD0001\\\";\\n    string internal constant TOKEN_UNAVAILABLE = \\\"LZD0002\\\";\\n    string internal constant DEFAULT_LIBRARY_UNAVAILABLE = \\\"LZD0003\\\";\\n    string internal constant VERIFIERS_UNAVAILABLE = \\\"LZD0004\\\";\\n}\\n\",\"keccak256\":\"0x00c68dee6968a14fa9a120a7447a3f568379c86f2a59d363e902128d4f361a6e\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.19;\\n\\nlibrary BitMaps {\\n    type BitMap256 is uint;\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << (index & 0xff);\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << (index & 0xff);\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0x29b1fb7dda9d3d6a699938da8610c0aa58d2eeb4244c6889a657eaf24117ac8e\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libs/Errors.sol\\\";\\nimport \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_AIRDROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint startCursor = cursor + 1; // skip option type and verifier_idx\\n            uint endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_SIZE);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeAirdropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        require(_option.length == 48, Errors.INVALID_SIZE);\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_SIZE);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeAirdropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x2d317c33c60f628c83625a2622a76891789b7388b06596564bd08ae6af11058a\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ExecutorFeeLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroPriceFeed.sol\\\";\\nimport \\\"./interfaces/IExecutorFeeLib.sol\\\";\\n\\ncontract ExecutorFeeLib is IExecutorFeeLib {\\n    using ExecutorOptions for bytes;\\n    using BitMaps for BitMaps.BitMap256;\\n\\n    uint private constant NATIVE_DECIMALS_RATE = 1e18;\\n\\n    function getFeeOnSend(\\n        FeeParams memory _params,\\n        IExecutor.DstConfig memory _dstConfig,\\n        bytes calldata _options\\n    ) external returns (uint fee) {\\n        (uint totalDstAmount, uint totalGas) = _decodeExecutorOptions(\\n            _dstConfig.baseGas,\\n            _dstConfig.airdropCap,\\n            _options\\n        );\\n\\n        uint priceFeedFee = ILayerZeroPriceFeed(_params.priceFeed).getFee(\\n            _params.dstEid,\\n            _params.calldataSize,\\n            totalGas\\n        );\\n        (\\n            uint totalGasFee,\\n            uint128 priceRatio,\\n            uint128 priceRatioDenominator,\\n            uint128 nativePriceUSD\\n        ) = ILayerZeroPriceFeed(_params.priceFeed).estimateFeeOnSend{value: priceFeedFee}(\\n                _params.dstEid,\\n                _params.calldataSize,\\n                totalGas\\n            );\\n\\n        fee = _applyPremiumToGas(\\n            totalGasFee,\\n            _dstConfig.multiplierBps,\\n            _params.defaultMultiplierBps,\\n            _dstConfig.floorMarginUSD,\\n            nativePriceUSD\\n        );\\n        fee += _convertAndApplyPremiumToValue(\\n            totalDstAmount,\\n            priceRatio,\\n            priceRatioDenominator,\\n            _params.defaultMultiplierBps\\n        );\\n    }\\n\\n    function getFee(\\n        FeeParams memory _params,\\n        IExecutor.DstConfig memory _dstConfig,\\n        bytes calldata _options\\n    ) external view returns (uint fee) {\\n        (uint totalDstAmount, uint totalGas) = _decodeExecutorOptions(\\n            _dstConfig.baseGas,\\n            _dstConfig.airdropCap,\\n            _options\\n        );\\n\\n        (\\n            uint totalGasFee,\\n            uint128 priceRatio,\\n            uint128 priceRatioDenominator,\\n            uint128 nativePriceUSD\\n        ) = ILayerZeroPriceFeed(_params.priceFeed).estimateFeeByEid(_params.dstEid, _params.calldataSize, totalGas);\\n\\n        fee = _applyPremiumToGas(\\n            totalGasFee,\\n            _dstConfig.multiplierBps,\\n            _params.defaultMultiplierBps,\\n            _dstConfig.floorMarginUSD,\\n            nativePriceUSD\\n        );\\n        fee += _convertAndApplyPremiumToValue(\\n            totalDstAmount,\\n            priceRatio,\\n            priceRatioDenominator,\\n            _params.defaultMultiplierBps\\n        );\\n    }\\n\\n    // @dev decode executor options into dstAmount and totalGas\\n    function _decodeExecutorOptions(\\n        uint64 _baseGas,\\n        uint128 _airdropCap,\\n        bytes calldata _options\\n    ) internal pure returns (uint dstAmount, uint totalGas) {\\n        require(_options.length > 0, \\\"ExecutorFeeLib: no options provided\\\");\\n\\n        BitMaps.BitMap256 bitmap;\\n        uint cursor;\\n        bool ordered = false;\\n        totalGas = _baseGas;\\n\\n        while (cursor < _options.length) {\\n            (uint8 optionType, bytes calldata option, uint newCursor) = _options.nextExecutorOption(cursor);\\n            cursor = newCursor;\\n\\n            // check if option type is duplicated\\n            require(!bitmap.get(optionType), Errors.DUPLICATED);\\n            bitmap = bitmap.set(optionType);\\n\\n            if (optionType == ExecutorOptions.OPTION_TYPE_LZRECEIVE) {\\n                (uint128 gas, uint128 value) = ExecutorOptions.decodeLzReceiveOption(option);\\n                dstAmount += value;\\n                totalGas += gas;\\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_AIRDROP) {\\n                (uint128 airdropAmount, ) = ExecutorOptions.decodeAirdropOption(option);\\n                require(airdropAmount <= _airdropCap, \\\"ExecutorFeeLib: airdrop amount exceeds cap\\\");\\n                dstAmount += airdropAmount;\\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_LZCOMPOSE) {\\n                (uint128 gas, uint128 value) = ExecutorOptions.decodeLzComposeOption(option);\\n                dstAmount += value;\\n                totalGas += gas;\\n            } else if (optionType == ExecutorOptions.OPTION_TYPE_ORDERED_EXECUTION) {\\n                ordered = true;\\n            } else {\\n                revert(\\\"ExecutorFeeLib: invalid option type\\\");\\n            }\\n        }\\n        require(cursor == _options.length, \\\"ExecutorFeeLib: invalid options\\\");\\n\\n        if (ordered) {\\n            // todo: finalize the premium for ordered\\n            totalGas = (totalGas * 102) / 100;\\n        }\\n    }\\n\\n    function _applyPremiumToGas(\\n        uint _fee,\\n        uint16 _bps,\\n        uint16 _defaultBps,\\n        uint128 _marginUSD,\\n        uint128 _nativePriceUSD\\n    ) internal pure returns (uint) {\\n        uint16 multiplierBps = _bps == 0 ? _defaultBps : _bps;\\n\\n        uint feeWithMultiplier = (_fee * multiplierBps) / 10000;\\n\\n        if (_nativePriceUSD == 0 || _marginUSD == 0) {\\n            return feeWithMultiplier;\\n        }\\n        uint feeWithMargin = (_marginUSD * NATIVE_DECIMALS_RATE) / _nativePriceUSD + _fee;\\n        return feeWithMargin > feeWithMultiplier ? feeWithMargin : feeWithMultiplier;\\n    }\\n\\n    // includes value and airdrop\\n    function _convertAndApplyPremiumToValue(\\n        uint _value,\\n        uint128 _ratio,\\n        uint128 _denom,\\n        uint16 _defaultBps\\n    ) internal pure returns (uint fee) {\\n        if (_value > 0) {\\n            fee = (((_value * _ratio) / _denom) * _defaultBps) / 10000;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fca40b72f7912cbe51e2e6b29c8f99d04cbed3f3a4d7c4dab5030def9e52dd3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageOrigin.sol\\\";\\nimport \\\"./IWorker.sol\\\";\\nimport \\\"./ILayerZeroExecutor.sol\\\";\\n\\ninterface IExecutor is IWorker, ILayerZeroExecutor, IMessageOrigin {\\n    struct DstConfigParam {\\n        uint32 dstEid;\\n        uint64 baseGas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD;\\n        uint128 airdropCap;\\n    }\\n\\n    struct DstConfig {\\n        uint64 baseGas; // for delivering / fixed calldata overhead\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD; // uses priceFeed PRICE_RATIO_DENOMINATOR\\n        uint128 airdropCap;\\n    }\\n\\n    struct ExecutionParams {\\n        address receiver;\\n        MessageOrigin origin;\\n        bytes32 guid;\\n        bytes message;\\n        bytes extraData;\\n        uint gasLimit;\\n    }\\n\\n    struct AirdropParams {\\n        address receiver;\\n        uint amount;\\n        uint gasLimit;\\n    }\\n\\n    event DstConfigSet(DstConfigParam[] params);\\n    event AirdropFailed(address receiver, uint amount);\\n    event AirdropSucceeded(address receiver, uint amount);\\n\\n    function dstConfig(uint32 _dstEid) external view returns (uint64, uint16, uint128, uint128);\\n}\\n\",\"keccak256\":\"0x17fdf33bf20be71bbddf56b30f5c9721652b7a4bec22ee141eaac95e46bcfbdd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IExecutorFeeLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IExecutor.sol\\\";\\n\\ninterface IExecutorFeeLib {\\n    struct FeeParams {\\n        address priceFeed;\\n        uint32 dstEid;\\n        address sender;\\n        uint calldataSize;\\n        uint16 defaultMultiplierBps;\\n    }\\n\\n    function getFeeOnSend(\\n        FeeParams memory _params,\\n        IExecutor.DstConfig memory _dstConfig,\\n        bytes memory _options\\n    ) external returns (uint fee);\\n\\n    function getFee(\\n        FeeParams memory _params,\\n        IExecutor.DstConfig memory _dstConfig,\\n        bytes calldata _options\\n    ) external view returns (uint fee);\\n}\\n\",\"keccak256\":\"0x1cde620edc616fa489bfd93644853e14da67434f9caf5bc5dab6d27e269470b2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroExecutor {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint _calldataSize,\\n        bytes calldata _options\\n    ) external payable returns (uint price);\\n\\n    // @notice query the executor price for relaying the payload and its proof to the destination chain\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint _calldataSize,\\n        bytes calldata _options\\n    ) external view returns (uint price);\\n}\\n\",\"keccak256\":\"0x66a3a562e86d3c78c3b4d940a7c8ba57be12abe38fb423d8134a104ba3a830f6\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroPriceFeed {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 20, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^20 = 10 ^ 30.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint32 eid;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint32 eid;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    function nativeTokenPriceUSD() external view returns (uint128);\\n\\n    function getFee(uint32 _dstEid, uint _callDataSize, uint _gas) external returns (uint);\\n\\n    function getPrice(uint32 _dstEid) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n\\n    function estimateFeeByEid(\\n        uint32 _dstEid,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external view returns (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n\\n    function estimateFeeOnSend(\\n        uint32 _dstEid,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external payable returns (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n}\\n\",\"keccak256\":\"0x110a23e06954a46cb8db6fcb8b40d1d1bd395a74a7d861daa48999ab5c2114a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWorker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWorker {\\n    event SetWorkerLib(address workerLib);\\n    event SetPriceFeed(address priceFeed);\\n    event SetDefaultMultiplierBps(uint16 multiplierBps);\\n    event Withdraw(address lib, address to, uint amount);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function priceFeed() external view returns (address);\\n\\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external;\\n\\n    function defaultMultiplierBps() external view returns (uint16);\\n\\n    function withdrawFee(address _lib, address _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xa3b5b849fe4643c969557baf7b6cc330eb2e734b3c1d49ffdbb75037d94eb538\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061109c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063371c3a8e1461003b578063f43bcfc514610060575b600080fd5b61004e610049366004610d0f565b610073565b60405190815260200160405180910390f35b61004e61006e366004610d0f565b610193565b600080600061008c86600001518760600151878761036e565b885160208a015160608b01516040517f88a4124c00000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810183905292945090925060009182918291829173ffffffffffffffffffffffffffffffffffffffff16906388a4124c90606401608060405180830381865afa158015610123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101479190610dd5565b9350935093509350610168848b602001518d608001518d60400151856107dd565b965061017a8684848e608001516108c0565b6101849088610e59565b9b9a5050505050505050505050565b60008060006101ac86600001518760600151878761036e565b885160208a015160608b01516040517f11f2c34300000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810183905292945090925060009173ffffffffffffffffffffffffffffffffffffffff909116906311f2c343906064016020604051808303816000875af1158015610241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102659190610e6c565b885160208a015160608b01516040517fc1723a1d00000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810185905291925060009182918291829173ffffffffffffffffffffffffffffffffffffffff169063c1723a1d90879060640160806040518083038185885af11580156102fc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103219190610dd5565b9350935093509350610342848c602001518e608001518e60400151856107dd565b97506103548784848f608001516108c0565b61035e9089610e59565b9c9b505050505050505050505050565b60008082610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4578656375746f724665654c69623a206e6f206f7074696f6e732070726f766960448201527f646564000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5067ffffffffffffffff8516600080805b8582101561074857600036818061042c8b8b8861092a565b9850919550935091508590506104428785610980565b156040518060400160405280600781526020017f4c5a313030313200000000000000000000000000000000000000000000000000815250906104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50600160ff85161b871796507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff85160161053c576000806104f48585610992565b90925090506105156fffffffffffffffffffffffffffffffff82168c610e59565b9a506105336fffffffffffffffffffffffffffffffff83168b610e59565b9950505061073f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff85160161064d5760006105728484610a45565b5090508c6fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161115610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4578656375746f724665654c69623a2061697264726f7020616d6f756e74206560448201527f786365656473206361700000000000000000000000000000000000000000000060648201526084016103fa565b6106456fffffffffffffffffffffffffffffffff82168b610e59565b99505061073f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff851601610684576000806104f48585610992565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff8516016106b7576001945061073f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4578656375746f724665654c69623a20696e76616c6964206f7074696f6e207460448201527f797065000000000000000000000000000000000000000000000000000000000060648201526084016103fa565b50505050610414565b8186146107b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4578656375746f724665654c69623a20696e76616c6964206f7074696f6e730060448201526064016103fa565b80156107d15760646107c4856066610ef1565b6107ce9190610f08565b93505b50505094509492505050565b60008061ffff8616156107f057856107f2565b845b9050600061271061080761ffff84168a610ef1565b6108119190610f08565b90506fffffffffffffffffffffffffffffffff8416158061084257506fffffffffffffffffffffffffffffffff8516155b156108505791506108b79050565b600088856fffffffffffffffffffffffffffffffff16670de0b6b3a7640000886fffffffffffffffffffffffffffffffff1661088c9190610ef1565b6108969190610f08565b6108a09190610e59565b90508181116108af57816108b1565b805b93505050505b95945050505050565b60008415610922576127108261ffff16846fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16886109019190610ef1565b61090b9190610f08565b6109159190610ef1565b61091f9190610f08565b90505b949350505050565b60003681600184018161093e888884610ad4565b600292909201919050610952888884610afb565b94506001820161ffff8216830161096b81838b8d610f43565b979b909a50969850505061ffff160193505050565b600160ff82161b821615155b92915050565b60008060108314806109a45750602083145b6040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090610a12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50610a1f84846000610b20565b915060208314610a30576000610a3c565b610a3c84846010610b20565b90509250929050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090819060308414610ab9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50610ac684846000610b20565b9150610a3c84846010610b47565b600060028201610ae681848688610f43565b610aef91610f6d565b60f01c95945050505050565b6000838383818110610b0f57610b0f610fb5565b919091013560f81c95945050505050565b600060108201610b3281848688610f43565b610b3b91610fe4565b60801c95945050505050565b600060208201610b5981848688610f43565b6108b79161102a565b60405160a0810167ffffffffffffffff81118282101715610bac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610bd657600080fd5b919050565b803561ffff81168114610bd657600080fd5b6fffffffffffffffffffffffffffffffff81168114610c0b57600080fd5b50565b600060808284031215610c2057600080fd5b6040516080810167ffffffffffffffff8282108183111715610c6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b81604052829350843591508082168214610c8457600080fd5b508152610c9360208401610bdb565b60208201526040830135610ca681610bed565b60408201526060830135610cb981610bed565b6060919091015292915050565b60008083601f840112610cd857600080fd5b50813567ffffffffffffffff811115610cf057600080fd5b602083019150836020828501011115610d0857600080fd5b9250929050565b600080600080848603610140811215610d2757600080fd5b60a0811215610d3557600080fd5b50610d3e610b62565b610d4786610bb2565b8152602086013563ffffffff81168114610d6057600080fd5b6020820152610d7160408701610bb2565b604082015260608601356060820152610d8c60808701610bdb565b60808201529350610da08660a08701610c0e565b925061012085013567ffffffffffffffff811115610dbd57600080fd5b610dc987828801610cc6565b95989497509550505050565b60008060008060808587031215610deb57600080fd5b845193506020850151610dfd81610bed565b6040860151909350610e0e81610bed565b6060860151909250610e1f81610bed565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561098c5761098c610e2a565b600060208284031215610e7e57600080fd5b5051919050565b600060208083528351808285015260005b81811015610eb257858101830151858201604001528201610e96565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b808202811582820484141761098c5761098c610e2a565b600082610f3e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008085851115610f5357600080fd5b83861115610f6057600080fd5b5050820193919092039150565b7fffff0000000000000000000000000000000000000000000000000000000000008135818116916002851015610fad5780818660020360031b1b83161692505b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffff000000000000000000000000000000008135818116916010851015610fad5760109490940360031b84901b1690921692915050565b8035602083101561098c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b169291505056fea2646970667358221220d6cbc0b7a3b297afe25bb58a665ca8b805fe1235a76b7c98c6b34c426bb160c964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063371c3a8e1461003b578063f43bcfc514610060575b600080fd5b61004e610049366004610d0f565b610073565b60405190815260200160405180910390f35b61004e61006e366004610d0f565b610193565b600080600061008c86600001518760600151878761036e565b885160208a015160608b01516040517f88a4124c00000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810183905292945090925060009182918291829173ffffffffffffffffffffffffffffffffffffffff16906388a4124c90606401608060405180830381865afa158015610123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101479190610dd5565b9350935093509350610168848b602001518d608001518d60400151856107dd565b965061017a8684848e608001516108c0565b6101849088610e59565b9b9a5050505050505050505050565b60008060006101ac86600001518760600151878761036e565b885160208a015160608b01516040517f11f2c34300000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810183905292945090925060009173ffffffffffffffffffffffffffffffffffffffff909116906311f2c343906064016020604051808303816000875af1158015610241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102659190610e6c565b885160208a015160608b01516040517fc1723a1d00000000000000000000000000000000000000000000000000000000815263ffffffff909216600483015260248201526044810185905291925060009182918291829173ffffffffffffffffffffffffffffffffffffffff169063c1723a1d90879060640160806040518083038185885af11580156102fc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103219190610dd5565b9350935093509350610342848c602001518e608001518e60400151856107dd565b97506103548784848f608001516108c0565b61035e9089610e59565b9c9b505050505050505050505050565b60008082610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4578656375746f724665654c69623a206e6f206f7074696f6e732070726f766960448201527f646564000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5067ffffffffffffffff8516600080805b8582101561074857600036818061042c8b8b8861092a565b9850919550935091508590506104428785610980565b156040518060400160405280600781526020017f4c5a313030313200000000000000000000000000000000000000000000000000815250906104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50600160ff85161b871796507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff85160161053c576000806104f48585610992565b90925090506105156fffffffffffffffffffffffffffffffff82168c610e59565b9a506105336fffffffffffffffffffffffffffffffff83168b610e59565b9950505061073f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff85160161064d5760006105728484610a45565b5090508c6fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161115610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4578656375746f724665654c69623a2061697264726f7020616d6f756e74206560448201527f786365656473206361700000000000000000000000000000000000000000000060648201526084016103fa565b6106456fffffffffffffffffffffffffffffffff82168b610e59565b99505061073f565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd60ff851601610684576000806104f48585610992565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60ff8516016106b7576001945061073f565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4578656375746f724665654c69623a20696e76616c6964206f7074696f6e207460448201527f797065000000000000000000000000000000000000000000000000000000000060648201526084016103fa565b50505050610414565b8186146107b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4578656375746f724665654c69623a20696e76616c6964206f7074696f6e730060448201526064016103fa565b80156107d15760646107c4856066610ef1565b6107ce9190610f08565b93505b50505094509492505050565b60008061ffff8616156107f057856107f2565b845b9050600061271061080761ffff84168a610ef1565b6108119190610f08565b90506fffffffffffffffffffffffffffffffff8416158061084257506fffffffffffffffffffffffffffffffff8516155b156108505791506108b79050565b600088856fffffffffffffffffffffffffffffffff16670de0b6b3a7640000886fffffffffffffffffffffffffffffffff1661088c9190610ef1565b6108969190610f08565b6108a09190610e59565b90508181116108af57816108b1565b805b93505050505b95945050505050565b60008415610922576127108261ffff16846fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16886109019190610ef1565b61090b9190610f08565b6109159190610ef1565b61091f9190610f08565b90505b949350505050565b60003681600184018161093e888884610ad4565b600292909201919050610952888884610afb565b94506001820161ffff8216830161096b81838b8d610f43565b979b909a50969850505061ffff160193505050565b600160ff82161b821615155b92915050565b60008060108314806109a45750602083145b6040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090610a12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50610a1f84846000610b20565b915060208314610a30576000610a3c565b610a3c84846010610b20565b90509250929050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090819060308414610ab9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fa9190610e85565b50610ac684846000610b20565b9150610a3c84846010610b47565b600060028201610ae681848688610f43565b610aef91610f6d565b60f01c95945050505050565b6000838383818110610b0f57610b0f610fb5565b919091013560f81c95945050505050565b600060108201610b3281848688610f43565b610b3b91610fe4565b60801c95945050505050565b600060208201610b5981848688610f43565b6108b79161102a565b60405160a0810167ffffffffffffffff81118282101715610bac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610bd657600080fd5b919050565b803561ffff81168114610bd657600080fd5b6fffffffffffffffffffffffffffffffff81168114610c0b57600080fd5b50565b600060808284031215610c2057600080fd5b6040516080810167ffffffffffffffff8282108183111715610c6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b81604052829350843591508082168214610c8457600080fd5b508152610c9360208401610bdb565b60208201526040830135610ca681610bed565b60408201526060830135610cb981610bed565b6060919091015292915050565b60008083601f840112610cd857600080fd5b50813567ffffffffffffffff811115610cf057600080fd5b602083019150836020828501011115610d0857600080fd5b9250929050565b600080600080848603610140811215610d2757600080fd5b60a0811215610d3557600080fd5b50610d3e610b62565b610d4786610bb2565b8152602086013563ffffffff81168114610d6057600080fd5b6020820152610d7160408701610bb2565b604082015260608601356060820152610d8c60808701610bdb565b60808201529350610da08660a08701610c0e565b925061012085013567ffffffffffffffff811115610dbd57600080fd5b610dc987828801610cc6565b95989497509550505050565b60008060008060808587031215610deb57600080fd5b845193506020850151610dfd81610bed565b6040860151909350610e0e81610bed565b6060860151909250610e1f81610bed565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561098c5761098c610e2a565b600060208284031215610e7e57600080fd5b5051919050565b600060208083528351808285015260005b81811015610eb257858101830151858201604001528201610e96565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b808202811582820484141761098c5761098c610e2a565b600082610f3e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008085851115610f5357600080fd5b83861115610f6057600080fd5b5050820193919092039150565b7fffff0000000000000000000000000000000000000000000000000000000000008135818116916002851015610fad5780818660020360031b1b83161692505b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7fffffffffffffffffffffffffffffffff000000000000000000000000000000008135818116916010851015610fad5760109490940360031b84901b1690921692915050565b8035602083101561098c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b169291505056fea2646970667358221220d6cbc0b7a3b297afe25bb58a665ca8b805fe1235a76b7c98c6b34c426bb160c964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}