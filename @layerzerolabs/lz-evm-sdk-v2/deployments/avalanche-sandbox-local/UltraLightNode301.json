{
  "address": "0x8990C5DAAA40673eF8826990A6Fd8284a0a17d61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryGasCap",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nonceContract",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_localEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_treasuryFeeHandler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ulnConfig",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ExecutorFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "srcAddress",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dstAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "InvalidDst",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "PacketReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedPayload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lzTokenFee",
          "type": "uint256"
        }
      ],
      "name": "PacketSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofHash",
          "type": "bytes32"
        }
      ],
      "name": "PayloadSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "verifiers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "optionalVerifiers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        }
      ],
      "name": "VerifierFeePaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "addressSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "defaultOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "option",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packet",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        }
      ],
      "name": "deliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "deliverable",
      "outputs": [
        {
          "internalType": "enum DeliveryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "estimateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "config",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getDefaultConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "confirmations",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lzTokenPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setAddressSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_eid",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "setDefaultOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_layerZeroToken",
          "type": "address"
        }
      ],
      "name": "setLayerZeroToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_requiredConfirmation",
          "type": "uint64"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "inboundConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "useCustomVerifiers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useCustomOptionalVerifiers",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "verifierCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "verifiers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalVerifiers",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfigStruct",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "verifyConditionMet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "major",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "minor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "endpointVersion",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc5f40ebf7cb6448ae6880c0406dddc8bdb6809ede6994b054df67f8c6d07e10",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x8990C5DAAA40673eF8826990A6Fd8284a0a17d61",
    "transactionIndex": 0,
    "gasUsed": "4913604",
    "logsBloom": "0x
    "blockHash": "0xcecea70582596f5f9e9f8223867e5a36429591f236c46bb9e25de1c23b98e4fa",
    "transactionHash": "0xfc5f40ebf7cb6448ae6880c0406dddc8bdb6809ede6994b054df67f8c6d07e10",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16524327,
        "transactionHash": "0xfc5f40ebf7cb6448ae6880c0406dddc8bdb6809ede6994b054df67f8c6d07e10",
        "address": "0x8990C5DAAA40673eF8826990A6Fd8284a0a17d61",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcecea70582596f5f9e9f8223867e5a36429591f236c46bb9e25de1c23b98e4fa"
      }
    ],
    "blockNumber": 16524327,
    "cumulativeGasUsed": "4913604",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000001",
    100000,
    "0xbe241D1B7b54bF06742cefd45A3440C6562f7603",
    20106,
    "0xA82ED5224ba72f2f776e09B11DC99E30Ee65Da8d",
    "0x17C8b71E5eE01A726766c99d397D619219C8CAF3"
  ],
  "numDeployments": 1,
  "solcInputHash": "5ca99727c7fedfa1f4b820c3cc1e8e86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryGasCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nonceContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_localEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_treasuryFeeHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ulnConfig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ExecutorFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcAddress\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"InvalidDst\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"PacketReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedPayload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"name\":\"PacketSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofHash\",\"type\":\"bytes32\"}],\"name\":\"PayloadSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"VerifierFeePaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"addressSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"defaultOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"option\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packet\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"deliverable\",\"outputs\":[{\"internalType\":\"enum DeliveryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getDefaultConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lzTokenPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setAddressSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_eid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"setDefaultOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_layerZeroToken\",\"type\":\"address\"}],\"name\":\"setLayerZeroToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_requiredConfirmation\",\"type\":\"uint64\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"useCustomVerifiers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useCustomOptionalVerifiers\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"verifierCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfigStruct\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verifyConditionMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endpointVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ULN301 will be deployed on EndpointV1 and is for backward compatability with ULN302 on EndpointV2. 301 can talk to both 301 and 302\",\"kind\":\"dev\",\"methods\":{\"deliver(bytes,uint256)\":{\"details\":\"in 301, this is equivalent to execution as in Endpoint V2dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable.\"},\"deliverable(bytes,bytes32)\":{\"details\":\"keeping the same interface as 302a deliverable message requires it to be endpoint deliverable and ULN deliverable\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)\":{\"details\":\"requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uln/uln301/UltraLightNode301.sol\":\"UltraLightNode301\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nstruct PacketForQuote {\\n    address sender;\\n    uint32 dstEid;\\n    bytes message;\\n}\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\",\"keccak256\":\"0x8a4a8eba63ff7313aee2d476b643fd05ec13e91fa0a7cea1b9af0f0d04aee645\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary AddressCast {\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        require(_addressBytes.length <= 32, Errors.INVALID_SIZE);\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint _size) internal pure returns (bytes memory result) {\\n        require(_size > 0 && _size <= 32, Errors.INVALID_SIZE);\\n        bytes memory data = abi.encodePacked(_addressBytes32); // copy to memory\\n        result = new bytes(_size);\\n        unchecked {\\n            uint offset = 64 - _size; // 32 + 32\\n            assembly {\\n                mstore(add(result, 32), mload(add(data, offset)))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        require(_addressBytes.length == 20, Errors.INVALID_SIZE);\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0xadbb76b8bf7515cfe6e9cf5c0d0345926dd504999494bf5b23200f505398790c\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint _start) internal pure returns (address) {\\n        unchecked {\\n            uint end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6984a7e7f292ec4533ac684583e5d0505bee3bc4348776072413ceb521a6acc8\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // Invalid Argument (http: 400)\\n    string internal constant INVALID_ARGUMENT = \\\"LZ10000\\\";\\n    string internal constant ONLY_REGISTERED = \\\"LZ10001\\\";\\n    string internal constant ONLY_REGISTERED_OR_DEFAULT = \\\"LZ10002\\\";\\n    string internal constant INVALID_AMOUNT = \\\"LZ10003\\\";\\n    string internal constant INVALID_NONCE = \\\"LZ10004\\\";\\n    string internal constant SAME_VALUE = \\\"LZ10005\\\";\\n    string internal constant UNSORTED = \\\"LZ10006\\\";\\n    string internal constant INVALID_VERSION = \\\"LZ10007\\\";\\n    string internal constant INVALID_EID = \\\"LZ10008\\\";\\n    string internal constant INVALID_SIZE = \\\"LZ10009\\\";\\n    string internal constant ONLY_NON_DEFAULT = \\\"LZ10010\\\";\\n    string internal constant INVALID_VERIFIERS = \\\"LZ10011\\\";\\n    string internal constant DUPLICATED = \\\"LZ10012\\\";\\n    string internal constant INVALID_WORKER_ID = \\\"LZ10013\\\";\\n\\n    // Out of Range (http: 400)\\n    string internal constant OUT_OF_RANGE = \\\"LZ20000\\\";\\n\\n    // Invalid State (http: 400)\\n    string internal constant INVALID_STATE = \\\"LZ30000\\\";\\n    string internal constant SEND_REENTRANCY = \\\"LZ30001\\\";\\n    string internal constant RECEIVE_REENTRANCY = \\\"LZ30002\\\";\\n    string internal constant COMPOSE_REENTRANCY = \\\"LZ30003\\\";\\n\\n    // Permission Denied (http: 403)\\n    string internal constant PERMISSION_DENIED = \\\"LZ50000\\\";\\n\\n    // Not Found (http: 404)\\n    string internal constant NOT_FOUND = \\\"LZ60000\\\";\\n\\n    // Already Exists (http: 409)\\n    string internal constant ALREADY_EXISTS = \\\"LZ80000\\\";\\n\\n    // Not Implemented (http: 501)\\n    string internal constant NOT_IMPLEMENTED = \\\"LZC0000\\\";\\n    string internal constant UNSUPPORTED_INTERFACE = \\\"LZC0001\\\";\\n\\n    // Unavailable (http: 503)\\n    string internal constant UNAVAILABLE = \\\"LZD0000\\\";\\n    string internal constant NATIVE_COIN_UNAVAILABLE = \\\"LZD0001\\\";\\n    string internal constant TOKEN_UNAVAILABLE = \\\"LZD0002\\\";\\n    string internal constant DEFAULT_LIBRARY_UNAVAILABLE = \\\"LZD0003\\\";\\n    string internal constant VERIFIERS_UNAVAILABLE = \\\"LZD0004\\\";\\n}\\n\",\"keccak256\":\"0x00c68dee6968a14fa9a120a7447a3f568379c86f2a59d363e902128d4f361a6e\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.19;\\n\\nlibrary BitMaps {\\n    type BitMap256 is uint;\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << (index & 0xff);\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << (index & 0xff);\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0x29b1fb7dda9d3d6a699938da8610c0aa58d2eeb4244c6889a657eaf24117ac8e\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libs/Errors.sol\\\";\\nimport \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_AIRDROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint startCursor = cursor + 1; // skip option type and verifier_idx\\n            uint endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_SIZE);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeAirdropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        require(_option.length == 48, Errors.INVALID_SIZE);\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_SIZE);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeAirdropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x2d317c33c60f628c83625a2622a76891789b7388b06596564bd08ae6af11058a\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libs/AddressCast.sol\\\";\\nimport {Packet} from \\\"../../MessagingStructs.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint private constant SRC_EID_OFFSET = 9;\\n    uint private constant SENDER_OFFSET = 13;\\n    uint private constant DST_EID_OFFSET = 45;\\n    uint private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(uint8 _version, Packet calldata _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            _version,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encode2(uint8 _version, Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            _version,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0x34a85bfba2d04d7d8919647031f8fffec4e10837544fec7862b1fe0de426a28f\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xb6a446c0b622566f8c2e2ae4c32208bcc3f815c5f5657a27fa48d583e31f7b7d\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroMessagingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroMessagingLibrary {\\n    // send(), messages will be inflight.\\n    function send(\\n        address _userApplication,\\n        uint64 _lastNonce,\\n        uint16 _chainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // estimate native fee at the send side\\n    function estimateFees(\\n        uint16 _chainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    //---------------------------------------------------------------------------\\n    // setConfig / getConfig are User Application (UA) functions to specify Oracle, Relayer, blockConfirmations, libraryVersion\\n    function setConfig(uint16 _chainId, address _userApplication, uint _configType, bytes calldata _config) external;\\n\\n    function getConfig(\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x7fb6d715e58bdad860e194c7b34cc3539fa27df54dbb18d1b41e4da08c064418\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xdc7e072cf3064081a8edf4a286ca43ddecc24330f2923d96f416f9d3f6538447\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/MessageLibBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroExecutor.sol\\\";\\nimport \\\"./interfaces/ILayerZeroTreasury.sol\\\";\\n\\nstruct WorkerOptions {\\n    uint8 workerId;\\n    bytes options;\\n}\\n\\nenum DeliveryState {\\n    Signing,\\n    Deliverable,\\n    Delivered,\\n    Waiting\\n}\\n\\nabstract contract MessageLibBase is Ownable {\\n    address internal immutable endpoint;\\n    uint32 internal immutable localEid;\\n    uint8 internal immutable packetVersion;\\n    uint internal immutable treasuryGasCap;\\n\\n    // config\\n    address public treasury;\\n    mapping(uint32 dstEid => bytes option) public defaultOptions;\\n\\n    // accumulated fees for workers and treasury\\n    mapping(address worker => uint) public fees;\\n\\n    event ExecutorFeePaid(address executor, uint fee);\\n\\n    // only the endpoint can call SEND() and setConfig()\\n    modifier onlyEndpoint() {\\n        require(endpoint == msg.sender, Errors.PERMISSION_DENIED);\\n        _;\\n    }\\n\\n    constructor(address _endpoint, uint32 _localEid, uint8 _packetVersion, uint _treasuryGasCap) {\\n        endpoint = _endpoint;\\n        localEid = _localEid;\\n        packetVersion = _packetVersion;\\n        treasuryGasCap = _treasuryGasCap;\\n    }\\n\\n    // ======================= OnlyOwner =======================\\n    function setDefaultOptions(uint32 _dstEid, bytes calldata _options) external onlyOwner {\\n        defaultOptions[_dstEid] = _options;\\n    }\\n\\n    // ======================= Internal =======================\\n    function _assertMessageSize(uint _actual, uint _max) internal pure {\\n        require(_actual <= _max, Errors.INVALID_SIZE);\\n    }\\n\\n    function _sendToExecutor(\\n        address _executor,\\n        uint32 _dstEid,\\n        address _sender,\\n        uint _msgSize,\\n        bytes memory _executorOptions\\n    ) internal returns (uint executorFee) {\\n        executorFee = ILayerZeroExecutor(_executor).assignJob(_dstEid, _sender, _msgSize, _executorOptions);\\n        if (executorFee > 0) {\\n            fees[_executor] += executorFee;\\n        }\\n        emit ExecutorFeePaid(_executor, executorFee);\\n    }\\n\\n    function _sendToTreasury(\\n        address _sender,\\n        uint32 _dstEid,\\n        uint _totalNativeFee,\\n        bool _payInLzToken\\n    ) internal returns (uint treasuryNativeFee, uint lzTokenFee) {\\n        // fee should be in lzTokenFee if payInLzToken, otherwise in native\\n        (treasuryNativeFee, lzTokenFee) = _quoteTreasuryFee(_sender, _dstEid, _totalNativeFee, _payInLzToken);\\n        // if payInLzToken, handle in messagelib / endpoint\\n        if (treasuryNativeFee > 0) {\\n            fees[treasury] += treasuryNativeFee;\\n        }\\n    }\\n\\n    function _getWorkerOptions(\\n        uint32 _dstEid,\\n        bytes calldata _options\\n    )\\n        internal\\n        view\\n        returns (bytes memory options, bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions)\\n    {\\n        // use default if no option provided\\n        if (_options.length == 0) {\\n            options = defaultOptions[_dstEid];\\n        } else {\\n            options = _options;\\n        }\\n\\n        // split options by worker type\\n        if (options.length > 0) (executorOptions, otherWorkerOptions) = _getExecutorOptions(options);\\n    }\\n\\n    function _quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        uint _msgSize,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) internal view returns (uint, uint) {\\n        (, bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions) = _getWorkerOptions(\\n            _dstEid,\\n            _options\\n        );\\n\\n        // quote other workers\\n        (uint nativeFee, address executor, uint maxMsgSize) = _quoteWorkers(_sender, _dstEid, otherWorkerOptions);\\n\\n        // assert msg size\\n        _assertMessageSize(_msgSize, maxMsgSize);\\n\\n        // quote executor\\n        nativeFee += ILayerZeroExecutor(executor).getFee(_dstEid, _sender, _msgSize, executorOptions);\\n\\n        // quote treasury\\n        (uint treasuryNativeFee, uint lzTokenFee) = _quoteTreasuryFee(_sender, _dstEid, nativeFee, _payInLzToken);\\n        if (treasuryNativeFee > 0) {\\n            nativeFee += treasuryNativeFee;\\n        }\\n\\n        return (nativeFee, lzTokenFee);\\n    }\\n\\n    function _quoteTreasuryFee(\\n        address _sender,\\n        uint32 _eid,\\n        uint _totalFee,\\n        bool _payInLzToken\\n    ) internal view returns (uint nativeFee, uint lzTokenFee) {\\n        if (treasury != address(0x0)) {\\n            try ILayerZeroTreasury(treasury).getFee(_sender, _eid, _totalFee, _payInLzToken) returns (\\n                uint treasuryFee\\n            ) {\\n                // success\\n                if (_payInLzToken) {\\n                    lzTokenFee = treasuryFee;\\n                } else {\\n                    // pay in native, make sure that the treasury fee is not higher than the cap\\n                    uint gasFeeEstimate = tx.gasprice * treasuryGasCap;\\n                    // cap is the max of total fee and gasFeeEstimate. this is to prevent apps from forcing the cap to 0.\\n                    uint nativeFeeCap = _totalFee > gasFeeEstimate ? _totalFee : gasFeeEstimate;\\n                    // to prevent the treasury from returning an overly high value to break the path\\n                    nativeFee = treasuryFee > nativeFeeCap ? nativeFeeCap : treasuryFee;\\n                }\\n            } catch {\\n                // failure, something wrong with treasury contract, charge nothing and continue\\n            }\\n        }\\n    }\\n\\n    function _transferNative(address _to, uint _amount) internal {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, Errors.INVALID_STATE);\\n    }\\n\\n    // for msg.sender only\\n    function _assertAndDebitAmount(address _to, uint _amount) internal {\\n        require(_to != address(0x0) && _amount <= fees[msg.sender], Errors.INVALID_ARGUMENT);\\n        fees[msg.sender] -= _amount;\\n    }\\n\\n    // ======================= Virtual =======================\\n    // For implementation to override\\n    function _quoteWorkers(\\n        address _oapp,\\n        uint32 _eid,\\n        WorkerOptions[] memory _options\\n    ) internal view virtual returns (uint, address, uint);\\n\\n    function _getExecutorOptions(\\n        bytes memory _options\\n    ) internal view virtual returns (bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions);\\n}\\n\",\"keccak256\":\"0xae762395ed46d89e1cf69abab0b92f5ddbd220d4aa7afdb5249f33977e15178e\",\"license\":\"BUSL-1.1\"},\"contracts/OutboundConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"./interfaces/ILayerZeroExecutor.sol\\\";\\n\\nstruct OutboundConfigStruct {\\n    uint32 maxMessageSize;\\n    uint64 outboundConfirmations;\\n    address executor;\\n}\\n\\n/// extract it because it might be reused by future non-ULN msglibs\\ncontract OutboundConfig {\\n    // Derived MessageLibs should never use this as config type\\n    uint32 internal constant CONFIG_TYPE_MAX_MESSAGE_SIZE = 1;\\n    uint32 internal constant CONFIG_TYPE_OUTBOUND_CONFIRMATIONS = 2;\\n    uint32 internal constant CONFIG_TYPE_EXECUTOR = 3;\\n\\n    mapping(uint32 dstEid => OutboundConfigStruct) public defaultOutboundConfig;\\n    mapping(address oapp => mapping(uint32 dstEid => OutboundConfigStruct)) public outboundConfig;\\n\\n    // ============================ View ===================================\\n    function getOutboundConfigByType(\\n        uint32 _eid,\\n        address _oapp,\\n        uint _configType\\n    ) public view returns (bytes memory, bool) {\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n            if (config.maxMessageSize == 0) {\\n                OutboundConfigStruct storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.maxMessageSize), true);\\n            }\\n            return (abi.encode(config.maxMessageSize), false);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n            if (config.outboundConfirmations == 0) {\\n                OutboundConfigStruct storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.outboundConfirmations), true);\\n            }\\n            return (abi.encode(config.outboundConfirmations), false);\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n            if (config.executor == address(0x0)) {\\n                OutboundConfigStruct storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.executor), true);\\n            }\\n            return (abi.encode(config.executor), false);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    function getDefaultOutboundConfigByType(uint32 _eid, uint32 _configType) public view returns (bytes memory) {\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.maxMessageSize);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.outboundConfirmations);\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.executor);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    function getOutboundConfig(address _oapp, uint32 _dstEid) public view returns (OutboundConfigStruct memory) {\\n        OutboundConfigStruct memory config = outboundConfig[_oapp][_dstEid];\\n        OutboundConfigStruct memory defaultConfig = defaultOutboundConfig[_dstEid];\\n        require(defaultConfig.maxMessageSize > 0, Errors.INVALID_EID); // available remote eid\\n\\n        if (config.maxMessageSize == 0) {\\n            config.maxMessageSize = defaultConfig.maxMessageSize;\\n        }\\n        if (config.outboundConfirmations == 0) {\\n            config.outboundConfirmations = defaultConfig.outboundConfirmations;\\n        }\\n        if (config.executor == address(0x0)) {\\n            config.executor = defaultConfig.executor;\\n        }\\n        return config;\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _setDefaultOutboundConfig(uint32 _eid, OutboundConfigStruct calldata _config) internal {\\n        require(_config.outboundConfirmations > 0 && _config.executor != address(0x0), Errors.INVALID_ARGUMENT);\\n        require(_config.maxMessageSize > 0, Errors.INVALID_SIZE);\\n\\n        OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n        config.executor = _config.executor;\\n        config.maxMessageSize = _config.maxMessageSize;\\n        config.outboundConfirmations = _config.outboundConfirmations;\\n    }\\n\\n    function _setOutboundConfigByType(address _oapp, uint32 _eid, uint32 _configType, bytes calldata _config) internal {\\n        OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            uint32 maxMessageSize = abi.decode(_config, (uint32));\\n            config.maxMessageSize = maxMessageSize;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            uint64 outboundConfirmations = abi.decode(_config, (uint64));\\n            config.outboundConfirmations = outboundConfirmations;\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            address executor = abi.decode(_config, (address));\\n            config.executor = executor;\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    function _snapshotOutboundConfig(uint32 _eid, address _oapp) internal {\\n        outboundConfig[_oapp][_eid] = getOutboundConfig(_oapp, _eid);\\n    }\\n\\n    function _resetOutboundConfig(uint32 _eid, address _oapp) internal {\\n        delete outboundConfig[_oapp][_eid];\\n    }\\n}\\n\",\"keccak256\":\"0x1e325445c96141785106ee0211c0cbbfb0d474b53900478d3bf6273216d3e11d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroExecutor {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint _calldataSize,\\n        bytes calldata _options\\n    ) external payable returns (uint price);\\n\\n    // @notice query the executor price for relaying the payload and its proof to the destination chain\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint _calldataSize,\\n        bytes calldata _options\\n    ) external view returns (uint price);\\n}\\n\",\"keccak256\":\"0x66a3a562e86d3c78c3b4d940a7c8ba57be12abe38fb423d8134a104ba3a830f6\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroTreasury {\\n    function getFee(address _sender, uint32 _eid, uint _totalFee, bool _payInLzToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x3977765950cf0bde199f7119d195f32d89a3d1b343b92e05f71531f85217f25d\",\"license\":\"BUSL-1.1\"},\"contracts/uln/UlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport {OutboundConfigStruct} from \\\"../OutboundConfig.sol\\\";\\nimport {IUlnConfig, UlnConfigStruct} from \\\"./interfaces/IUlnConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroVerifier.sol\\\";\\nimport \\\"./libs/UlnOptions.sol\\\";\\nimport {WorkerOptions} from \\\"../MessageLibBase.sol\\\";\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\ncontract UlnBase {\\n    mapping(bytes32 headerHash => mapping(bytes32 payloadHash => mapping(address verifier => uint64 confirmations)))\\n        public hashLookup;\\n    IUlnConfig internal immutable ulnConfig;\\n\\n    event PayloadSigned(address verifier, bytes header, uint confirmations, bytes32 proofHash);\\n    event VerifierFeePaid(address[] verifiers, address[] optionalVerifiers, uint[] fees);\\n\\n    constructor(address _ulnConfig) {\\n        ulnConfig = IUlnConfig(_ulnConfig);\\n    }\\n\\n    // ============================ View ===================================\\n    function verified(\\n        address _verifier,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash,\\n        uint64 _requiredConfirmation\\n    ) public view returns (bool) {\\n        uint64 verifiedConfirmations = hashLookup[_headerHash][_payloadHash][_verifier];\\n        // return true if the verifier has signed enough confirmations\\n        return verifiedConfirmations >= _requiredConfirmation;\\n    }\\n\\n    /// @dev requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed\\n    function verifyConditionMet(\\n        UlnConfigStruct memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) public view returns (bool) {\\n        uint64 requiredConfirmations = _config.inboundConfirmations;\\n        // iterate the must-have verifiers\\n        unchecked {\\n            for (uint i = 0; i < _config.verifierCount; ++i) {\\n                if (!verified(_config.verifiers[i], _headerHash, _payloadHash, requiredConfirmations)) {\\n                    // return false if any of the must-have verifiers haven't signed\\n                    return false;\\n                }\\n            }\\n\\n            if (_config.verifierCount > 0 && _config.optionalVerifierCount == 0) {\\n                // returns true if all must-have verifiers have signed and there are no optional verifiers\\n                return true;\\n            } else {\\n                // then the optional ones\\n                uint optionalCount = 0;\\n                for (uint i = 0; i < _config.optionalVerifierCount; ++i) {\\n                    if (verified(_config.optionalVerifiers[i], _headerHash, _payloadHash, requiredConfirmations)) {\\n                        // increment the optional count if the optional verifier has signed\\n                        ++optionalCount;\\n                        if (optionalCount >= _config.optionalVerifierThreshold) {\\n                            // early return if the optional threshold has hit\\n                            return true;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        // return false by default as a catch-all\\n        return false;\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _getVerifierFees(\\n        UlnConfigStruct memory _config,\\n        uint32 _dstEid,\\n        uint64 _outboundConfirmations,\\n        address _sender,\\n        bytes[] memory _optionsArray,\\n        uint8[] memory _verifierIds\\n    ) internal view returns (uint totalFee) {\\n        uint8 verifiersLength = _config.verifierCount + _config.optionalVerifierCount;\\n        for (uint i = 0; i < verifiersLength; ) {\\n            address verifier;\\n            bytes memory options;\\n            unchecked {\\n                verifier = i < _config.verifierCount\\n                    ? _config.verifiers[i]\\n                    : _config.optionalVerifiers[i - _config.verifierCount];\\n\\n                for (uint j = 0; j < _verifierIds.length; ++j) {\\n                    if (_verifierIds[j] == i) {\\n                        options = _optionsArray[j];\\n                        break;\\n                    }\\n                }\\n            }\\n            totalFee += ILayerZeroVerifier(verifier).getFee(_dstEid, _outboundConfirmations, _sender, options);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _assignJobToVerifiers(\\n        mapping(address => uint) storage _fees,\\n        UlnConfigStruct memory _config,\\n        uint32 _dstEid,\\n        uint64 _outboundConfirmations,\\n        address _sender,\\n        bytes[] memory _optionsArray,\\n        uint8[] memory _verifierIds\\n    ) internal returns (uint totalFee, uint[] memory verifierFees) {\\n        uint8 verifiersLength = _config.verifierCount + _config.optionalVerifierCount;\\n        verifierFees = new uint[](verifiersLength);\\n        uint j = 0;\\n        for (uint i = 0; i < verifiersLength; ) {\\n            address verifier;\\n            bytes memory options;\\n            unchecked {\\n                verifier = i < _config.verifierCount\\n                    ? _config.verifiers[i]\\n                    : _config.optionalVerifiers[i - _config.verifierCount];\\n                if (_verifierIds.length > 0 && i == _verifierIds[j]) {\\n                    options = _optionsArray[j++];\\n                }\\n            }\\n\\n            verifierFees[i] = ILayerZeroVerifier(verifier).assignJob(_dstEid, _outboundConfirmations, _sender, options);\\n            if (verifierFees[i] > 0) {\\n                _fees[verifier] += verifierFees[i];\\n                totalFee += verifierFees[i];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _getExecutorOptionsInternal(\\n        bytes memory _options\\n    ) internal pure returns (bytes memory, WorkerOptions[] memory) {\\n        (bytes memory executorOpts, bytes memory verifierOpts) = UlnOptions.decode(_options);\\n\\n        if (verifierOpts.length == 0) {\\n            return (executorOpts, new WorkerOptions[](0));\\n        }\\n\\n        WorkerOptions[] memory workerOpts = new WorkerOptions[](1);\\n        workerOpts[0] = WorkerOptions(VerifierOptions.WORKER_ID, verifierOpts);\\n        return (executorOpts, workerOpts);\\n    }\\n\\n    function _ulnSend(\\n        mapping(address => uint) storage _fees,\\n        WorkerOptions[] memory _options,\\n        address _sender,\\n        uint32 _dstEid\\n    ) internal returns (uint totalFee, address executor, uint maxMsgSize) {\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            _sender,\\n            _dstEid\\n        );\\n        executor = outboundConfig.executor;\\n        maxMsgSize = outboundConfig.maxMessageSize;\\n\\n        // if options is not empty, it must be verifier options\\n        bytes memory verifierOptions = _options.length == 0 ? bytes(\\\"\\\") : _options[0].options;\\n        (bytes[] memory optionsArray, uint8[] memory verifierIndices) = VerifierOptions.groupVerifierOptionsByIdx(\\n            verifierOptions\\n        );\\n\\n        uint[] memory verifierFees;\\n        (totalFee, verifierFees) = _assignJobToVerifiers(\\n            _fees,\\n            config,\\n            _dstEid,\\n            outboundConfig.outboundConfirmations,\\n            _sender,\\n            optionsArray,\\n            verifierIndices\\n        );\\n\\n        emit VerifierFeePaid(config.verifiers, config.optionalVerifiers, verifierFees);\\n    }\\n\\n    function _quoteUlnWorkers(\\n        address _sender,\\n        uint32 _dstEid,\\n        WorkerOptions[] memory _options\\n    ) internal view returns (uint totalFee, address executor, uint maxMsgSize) {\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            _sender,\\n            _dstEid\\n        );\\n        executor = outboundConfig.executor;\\n        maxMsgSize = outboundConfig.maxMessageSize;\\n\\n        // if options is not empty, it must be verifier options\\n        bytes memory verifierOptions = _options.length == 0 ? bytes(\\\"\\\") : _options[0].options;\\n        (bytes[] memory optionsArray, uint8[] memory verifierIndices) = VerifierOptions.groupVerifierOptionsByIdx(\\n            verifierOptions\\n        );\\n\\n        totalFee = _getVerifierFees(\\n            config,\\n            _dstEid,\\n            outboundConfig.outboundConfirmations,\\n            _sender,\\n            optionsArray,\\n            verifierIndices\\n        );\\n    }\\n\\n    function _verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) internal {\\n        hashLookup[keccak256(_packetHeader)][_payloadHash][msg.sender] = _confirmations;\\n        emit PayloadSigned(msg.sender, _packetHeader, _confirmations, _payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x8979791dac80ffa843dad548aa0a3b0f1379672b4593e6707ecbb1d674070053\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/ILayerZeroVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroVerifier {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function assignJob(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external payable returns (uint fee);\\n\\n    // @notice query the verifier fee for relaying block information to the destination chain\\n    // @param _dstEid the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view returns (uint fee);\\n}\\n\",\"keccak256\":\"0x1b67dc834fa9d7148bc6a7261c14ab50cb70dd3fbf34191cfefdb747bfcb4f28\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/IUlnConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport {OutboundConfigStruct} from \\\"../../OutboundConfig.sol\\\";\\n\\nstruct SetDefaultConfigParam {\\n    uint32 eid;\\n    OutboundConfigStruct outboundConfig;\\n    uint64 inboundConfirmations;\\n    address[] verifiers;\\n    address[] optionalVerifiers;\\n    uint8 optionalVerifierThreshold;\\n}\\n\\nstruct UlnConfigStruct {\\n    uint64 inboundConfirmations;\\n    bool useCustomVerifiers; // unused for default config\\n    bool useCustomOptionalVerifiers; // unused for default config\\n    uint8 verifierCount;\\n    uint8 optionalVerifierCount;\\n    uint8 optionalVerifierThreshold;\\n    address[] verifiers; // allowed overlap with optionalVerifiers\\n    address[] optionalVerifiers; // allowed overlap with verifiers\\n}\\n\\ninterface IUlnConfig {\\n    function setConfigByType(uint32 _remoteEid, address _oapp, uint32 _configType, bytes calldata _config) external;\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function isSupportedEid(uint32 _remoteEid) external view returns (bool);\\n\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfigStruct memory);\\n\\n    function getUlnAndOutboundConfig(\\n        address _oapp,\\n        uint32 _remoteEid\\n    ) external view returns (UlnConfigStruct memory, OutboundConfigStruct memory);\\n\\n    function getConfigByType(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory, bool);\\n\\n    function getDefaultConfigByType(uint32 _remoteEid, uint32 _configType) external view returns (bytes memory);\\n\\n    function setDefaultConfig(SetDefaultConfigParam[] calldata _params) external;\\n}\\n\",\"keccak256\":\"0x0d936967be7325cb89e2be087baa624a6b83b92ae5a7913e6b93aef85be7cfd3\",\"license\":\"BUSL-1.1\"},\"contracts/uln/libs/UlnOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\nimport \\\"./VerifierOptions.sol\\\";\\n\\nlibrary UlnOptions {\\n    using BytesLib for bytes;\\n    using SafeCast for uint;\\n\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    // todo: need another decode function for calldata options?\\n    /// @dev decode the options into executorOptions and verifierOptions\\n    /// @param _options the options can be either legacy options (type 1 or 2) or type 3 options\\n    /// @return executorOptions the executor options, share the same format of type 3 options\\n    /// @return verifierOptions the verifier options, share the same format of type 3 options\\n    function decode(\\n        bytes memory _options\\n    ) internal pure returns (bytes memory executorOptions, bytes memory verifierOptions) {\\n        uint16 optionsType = _options.toUint16(0);\\n        uint cursor = 2;\\n\\n        // type3 options: [worker_option][worker_option]...\\n        // worker_option: [worker_id][option_size][option]\\n        // worker_id: uint8, option_size: uint16, option: bytes\\n        if (optionsType == TYPE_3) {\\n            unchecked {\\n                uint start = cursor;\\n                uint8 lastWorkerId; // worker_id starts from 1, so 0 is an invalid worker_id\\n\\n                // heuristic: we assume that the options are mostly EXECUTOR options only\\n                // checking the workerID can reduce gas usage for most cases\\n                while (cursor < _options.length) {\\n                    uint8 workerId = _options.toUint8(cursor);\\n                    if (lastWorkerId == 0) {\\n                        lastWorkerId = workerId;\\n                    }\\n\\n                    // workerId must equal to the lastWorkerId for the first option\\n                    // so it is always skipped in the first option\\n                    // this operation slices out options whenever the the scan finds a different workerId\\n                    if (workerId != lastWorkerId) {\\n                        bytes memory op = _options.slice(start, cursor - start); // slice out the last worker's options\\n                        (executorOptions, verifierOptions) = _insertWorkerOptions(\\n                            executorOptions,\\n                            verifierOptions,\\n                            lastWorkerId,\\n                            op\\n                        );\\n\\n                        // reset the start cursor and lastWorkerId\\n                        start = cursor;\\n                        lastWorkerId = workerId;\\n                    }\\n\\n                    ++cursor; // for workerId\\n\\n                    uint16 size = _options.toUint16(cursor);\\n                    require(size > 0, Errors.INVALID_SIZE);\\n                    cursor += size + 2;\\n\\n                    // if we have reached the end of the options, we need to process the last worker's options\\n                    if (cursor == _options.length) {\\n                        bytes memory op = _options.slice(start, cursor - start);\\n                        (executorOptions, verifierOptions) = _insertWorkerOptions(\\n                            executorOptions,\\n                            verifierOptions,\\n                            workerId,\\n                            op\\n                        );\\n                    }\\n                }\\n                // the options length must be the same as the cursor at the end\\n                require(cursor == _options.length, Errors.INVALID_SIZE);\\n            }\\n        } else {\\n            executorOptions = decodeLegacyOptions(optionsType, _options);\\n        }\\n    }\\n\\n    function _insertWorkerOptions(\\n        bytes memory _executorOptions,\\n        bytes memory _verifierOptions,\\n        uint8 _workerId,\\n        bytes memory _newOptions\\n    ) private pure returns (bytes memory, bytes memory) {\\n        if (_workerId == ExecutorOptions.WORKER_ID) {\\n            _executorOptions = _executorOptions.length == 0\\n                ? _newOptions\\n                : abi.encodePacked(_executorOptions, _newOptions);\\n        } else if (_workerId == VerifierOptions.WORKER_ID) {\\n            _verifierOptions = _verifierOptions.length == 0\\n                ? _newOptions\\n                : abi.encodePacked(_verifierOptions, _newOptions);\\n        } else {\\n            revert(Errors.INVALID_WORKER_ID);\\n        }\\n        return (_executorOptions, _verifierOptions);\\n    }\\n\\n    /// @dev decode the legacy options (type 1 or 2) into executorOptions\\n    /// @param _optionType the legacy option type\\n    /// @param _options the legacy options, which still has the option type in the first 2 bytes\\n    /// @return executorOptions the executor options, share the same format of type 3 options\\n    /// Data format:\\n    /// legacy type 1: [extraGas]\\n    /// legacy type 2: [extraGas][dstNativeAmt][dstNativeAddress]\\n    /// extraGas: uint256, dstNativeAmt: uint256, dstNativeAddress: bytes\\n    function decodeLegacyOptions(\\n        uint16 _optionType,\\n        bytes memory _options\\n    ) internal pure returns (bytes memory executorOptions) {\\n        if (_optionType == TYPE_1) {\\n            require(_options.length == 34, Errors.INVALID_SIZE);\\n\\n            // execution gas\\n            uint128 executionGas = _options.toUint256(2).toUint128();\\n\\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\\n            // the result is a lzReceive option: [executor_id][option_size][option_type][execution_gas]\\n            // option_type: uint8, executionGas: uint128\\n            // option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\\n            executorOptions = abi.encodePacked(\\n                ExecutorOptions.WORKER_ID,\\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\\n                executionGas\\n            );\\n        } else if (_optionType == TYPE_2) {\\n            // receiver size <= 32\\n            require(_options.length > 66 && _options.length <= 98, Errors.INVALID_SIZE);\\n\\n            // execution gas\\n            uint128 executionGas = _options.toUint256(2).toUint128();\\n\\n            // airdrop (amount + receiver)\\n            uint128 amount = _options.toUint256(34).toUint128(); // offset 2 + 32\\n            bytes32 receiver;\\n            unchecked {\\n                uint receiverLen = _options.length - 66; // offset 2 + 32 + 32\\n                receiver = bytes32(_options.slice(66, receiverLen));\\n                receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\\n            }\\n\\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\\n            // the result has one lzReceive option and one airdrop option:\\n            //      [executor_id][lzReceive_option_size][option_type][execution_gas] +\\n            //      [executor_id][airdrop_option_size][option_type][airdrop_amount][receiver]\\n            // option_type: uint8, execution_gas: uint128, airdrop_amount: uint128, receiver: bytes32\\n            // lzReceive_option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\\n            // airdrop_option_size = len(option_type) + len(airdrop_amount) + len(receiver) = 1 + 16 + 32 = 49\\n            executorOptions = abi.encodePacked(\\n                ExecutorOptions.WORKER_ID,\\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\\n                executionGas,\\n                ExecutorOptions.WORKER_ID,\\n                uint16(49), // 48 + 1, 32 + 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_AIRDROP,\\n                amount,\\n                receiver\\n            );\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ec2a3ccc350fcd6265b3fe9607ff62b9eab51e0e0f276b02e4045b554ea916c\",\"license\":\"BUSL-1.1\"},\"contracts/uln/libs/VerifierOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary VerifierOptions {\\n    using BitMaps for BitMaps.BitMap256;\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    /// @dev group verifier options by its idx\\n    /// @param _options [verifier_id][verifier_option][verifier_id][verifier_option]...\\n    ///        verifier_option = [option_size][verifier_idx][option_type][option]\\n    ///        option_size = len(verifier_idx) + len(option_type) + len(option)\\n    ///        verifier_id: uint8, verifier_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return verifierOptions the grouped options, still share the same format of _options\\n    /// @return verifierIndices the verifier indices\\n    function groupVerifierOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory verifierOptions, uint8[] memory verifierIndices) {\\n        if (_options.length == 0) return (verifierOptions, verifierIndices);\\n\\n        uint8 numVerifiers = getNumVerifiers(_options);\\n\\n        // if there is only 1 verifier, we can just return the whole options\\n        if (numVerifiers == 1) {\\n            verifierOptions = new bytes[](1);\\n            verifierOptions[0] = _options;\\n\\n            verifierIndices = new uint8[](1);\\n            verifierIndices[0] = _options.toUint8(3); // verifier idx\\n            return (verifierOptions, verifierIndices);\\n        }\\n\\n        // otherwise, we need to group the options by verifier_idx\\n        verifierIndices = new uint8[](numVerifiers);\\n        verifierOptions = new bytes[](numVerifiers);\\n        unchecked {\\n            uint cursor;\\n            uint start;\\n            uint8 lastVerifierIdx = 255; // 255 is an invalid verifier_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                require(optionLength >= 2, Errors.INVALID_SIZE); // at least 1 byte for option_type and 1 byte for verifier_idx\\n\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                if (lastVerifierIdx == 255) {\\n                    lastVerifierIdx = verifierIdx;\\n                }\\n\\n                // verifierIdx must equal to the lastVerifierIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the the scan finds a different lastVerifierIdx\\n                if (verifierIdx != lastVerifierIdx) {\\n                    uint size = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory op = _options.slice(start, size);\\n                    _insertVerifierOptions(verifierOptions, verifierIndices, lastVerifierIdx, op);\\n\\n                    // reset the start and lastVerifierIdx\\n                    start += size;\\n                    lastVerifierIdx = verifierIdx;\\n                }\\n\\n                cursor += optionLength;\\n\\n                // if we have reached the end of the options, we need to process the last verifier\\n                if (cursor == _options.length) {\\n                    uint size = cursor - start;\\n                    bytes memory op = _options.slice(start, size);\\n                    _insertVerifierOptions(verifierOptions, verifierIndices, verifierIdx, op);\\n                }\\n            }\\n            require(cursor == _options.length, Errors.INVALID_SIZE);\\n\\n            // revert verifierIndices to start from 0\\n            for (uint8 i = 0; i < numVerifiers; ++i) {\\n                --verifierIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertVerifierOptions(\\n        bytes[] memory _verifierOptions,\\n        uint8[] memory _verifierIndices,\\n        uint8 _verifierIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // verifierIdx starts from 0 but default value of verifierIndices is 0, so we tell if the slot is empty by adding 1 to verifierIdx\\n        require(_verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n        uint8 verifierIdxAdj = _verifierIdx + 1;\\n\\n        for (uint8 j = 0; j < _verifierIndices.length; ++j) {\\n            uint8 index = _verifierIndices[j];\\n            if (verifierIdxAdj == index) {\\n                _verifierOptions[j] = abi.encodePacked(_verifierOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this verifier\\n                _verifierIndices[j] = verifierIdxAdj;\\n                _verifierOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique verifiers\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    function getNumVerifiers(bytes memory _options) internal pure returns (uint8 numVerifiers) {\\n        uint cursor;\\n        BitMaps.BitMap256 bitmap;\\n\\n        // find number of unique verifier_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                require(optionLength >= 2, Errors.INVALID_SIZE); // at least 1 byte for verifier_idx and 1 byte for option_type\\n\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                // verifierIdx starts from 0, add one for bitmap check/set\\n                require(verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n                uint8 verifierIdxAdj = verifierIdx + 1;\\n\\n                // if verifierIdx is not set, increment numVerifiers\\n                if (!bitmap.get(verifierIdxAdj)) {\\n                    ++numVerifiers;\\n                    bitmap = bitmap.set(verifierIdxAdj);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        require(cursor == _options.length, Errors.INVALID_SIZE);\\n    }\\n\\n    /// @dev decode the next verifier option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextVerifierOption(\\n        bytes calldata _options,\\n        uint _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip verifier_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint startCursor = cursor + 2; // skip option type and verifier_idx\\n            uint endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x64ce5ceb89a26cdcddd34f2d90838cc41de88beb510c810247648de085492b31\",\"license\":\"BUSL-1.1\"},\"contracts/uln/uln301/MessageLibBaseE1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {Origin} from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport \\\"./interfaces/IMessageLibE1.sol\\\";\\nimport \\\"./interfaces/ITreasuryFeeHandler.sol\\\";\\nimport \\\"./NonceContract.sol\\\";\\n\\nimport \\\"../../interfaces/ILayerZeroExecutor.sol\\\";\\nimport \\\"../../MessageLibBase.sol\\\";\\n\\n/// @dev base contract for msglib on endpoint v1. It enforces the path convention\\nabstract contract MessageLibBaseE1 is MessageLibBase, IMessageLibE1 {\\n    using PacketV1Codec for bytes;\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    NonceContract internal immutable nonceContract;\\n    address internal immutable treasuryFeeHandler;\\n\\n    // config\\n    address internal layerZeroToken;\\n    // EndpointV1 is using bytes as address. this map is for address length assertion\\n    mapping(uint32 dstEid => uint size) public addressSizes;\\n\\n    // this event is the same as the PacketReceived event on EndpointV2\\n    event PacketReceived(Origin origin, address receiver);\\n    // this event should be identical to the one on Endpoint V2\\n    event PacketSent(bytes encodedPayload, bytes options, uint nativeFee, uint lzTokenFee);\\n    event NativeFeeWithdrawn(address user, address receiver, uint amount);\\n    event InvalidDst(\\n        uint16 indexed srcChainId,\\n        bytes32 srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n\\n    constructor(\\n        address _endpoint,\\n        uint8 _packetVersion,\\n        uint _treasuryGasCap,\\n        address _nonceContract,\\n        uint32 _localEid,\\n        address _treasuryFeeHandler\\n    ) MessageLibBase(_endpoint, _localEid, _packetVersion, _treasuryGasCap) {\\n        nonceContract = NonceContract(_nonceContract);\\n        treasuryFeeHandler = _treasuryFeeHandler;\\n    }\\n\\n    // ======================= OnlyEndpoint =======================\\n    function send(\\n        address _sender,\\n        uint64, // _nonce\\n        uint16 _dstEid,\\n        bytes calldata _path, // remoteAddress + localAddress\\n        bytes calldata _message,\\n        address payable _refundAddress,\\n        address _lzTokenPaymentAddress,\\n        bytes calldata _options\\n    ) external payable onlyEndpoint {\\n        (bytes memory options, bytes memory encodedPacket, uint totalNativeFee) = _sendToWorkers(\\n            _sender,\\n            _dstEid,\\n            _path,\\n            _message,\\n            _options\\n        );\\n\\n        // quote treasury fee\\n        uint32 dstEid = _dstEid; // stack too deep\\n        address sender = _sender; // stack too deep\\n        bool payInLzToken = _lzTokenPaymentAddress != address(0x0) && address(layerZeroToken) != address(0x0);\\n        (uint treasuryNativeFee, uint lzTokenFee) = _sendToTreasury(sender, dstEid, totalNativeFee, payInLzToken);\\n        totalNativeFee += treasuryNativeFee;\\n\\n        // pay native fee\\n        // assert the user has attached enough native token for this address\\n        require(totalNativeFee <= msg.value, Errors.INVALID_AMOUNT);\\n        // refund if they send too much\\n        uint refundAmt = msg.value - totalNativeFee;\\n        if (refundAmt > 0) {\\n            _transferNative(_refundAddress, refundAmt);\\n        }\\n\\n        // pay lz token fee if needed\\n        if (lzTokenFee > 0) {\\n            _payLzTokenFee(sender, _lzTokenPaymentAddress, lzTokenFee);\\n        }\\n\\n        emit PacketSent(encodedPacket, options, totalNativeFee, lzTokenFee);\\n    }\\n\\n    // ======================= OnlyOwner =======================\\n    function setLayerZeroToken(address _layerZeroToken) external onlyOwner {\\n        layerZeroToken = _layerZeroToken;\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    function setAddressSize(uint16 _eid, uint _size) external onlyOwner {\\n        require(_size <= 32, Errors.INVALID_SIZE);\\n        require(addressSizes[_eid] == 0, Errors.ALREADY_EXISTS);\\n        addressSizes[_eid] = _size;\\n    }\\n\\n    // ======================= External =======================\\n    function withdrawFee(address _to, uint _amount) external {\\n        _assertAndDebitAmount(_to, _amount);\\n        _transferNative(_to, _amount);\\n        emit NativeFeeWithdrawn(msg.sender, _to, _amount);\\n    }\\n\\n    // ======================= View =======================\\n    function estimateFees(\\n        uint16 _dstEid,\\n        address _sender,\\n        bytes calldata _message,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (uint nativeFee, uint zroFee) {\\n        return _quote(_sender, _dstEid, _message.length, _payInLzToken, _options);\\n    }\\n\\n    // ======================= Internal =======================\\n    /// @dev path = remoteAddress + localAddress.\\n    function _assertPath(address _sender, bytes calldata _path, uint remoteAddressSize) internal pure {\\n        require(_path.length == 20 + remoteAddressSize, Errors.INVALID_ARGUMENT);\\n        address srcInPath = AddressCast.toAddress(_path[remoteAddressSize:]);\\n        require(_sender == srcInPath, Errors.INVALID_ARGUMENT);\\n    }\\n\\n    function _payLzTokenFee(address _sender, address _lzTokenPaymentAddress, uint _lzTokenFee) internal {\\n        ITreasuryFeeHandler(treasuryFeeHandler).payFee(\\n            layerZeroToken,\\n            _sender,\\n            _lzTokenPaymentAddress,\\n            _lzTokenFee, // the supplied fee is always equal to the required fee\\n            _lzTokenFee,\\n            treasury\\n        );\\n    }\\n\\n    /// @dev outbound does three things\\n    /// @dev 1) asserts path\\n    /// @dev 2) increments the nonce\\n    /// @dev 3) assemble packet\\n    /// @return packet to be sent to workers\\n    function _outbound(\\n        address _sender,\\n        uint16 _dstEid,\\n        bytes calldata _path,\\n        bytes calldata _message\\n    ) internal returns (Packet memory packet) {\\n        // assert toAddress size\\n        uint remoteAddressSize = addressSizes[_dstEid];\\n        _assertPath(_sender, _path, remoteAddressSize);\\n\\n        // increment nonce\\n        uint64 nonce = nonceContract.increment(_dstEid, _sender, _path);\\n\\n        bytes32 receiver = AddressCast.toBytes32(_path[0:remoteAddressSize]);\\n\\n        // todo: should use the PacketV1Codec?\\n        bytes32 guid = keccak256(abi.encodePacked(nonce, localEid, _sender.toBytes32(), uint32(_dstEid), receiver));\\n\\n        // assemble packet\\n        packet = Packet(nonce, localEid, _sender, _dstEid, receiver, guid, _message);\\n    }\\n\\n    function _sendToWorkers(\\n        address _sender,\\n        uint16 _dstEid,\\n        bytes calldata _path,\\n        bytes calldata _message,\\n        bytes calldata _options\\n    ) internal returns (bytes memory options, bytes memory encodedPacket, uint totalNativeFee) {\\n        Packet memory packet = _outbound(_sender, _dstEid, _path, _message);\\n        encodedPacket = PacketV1Codec.encode2(packetVersion, packet);\\n\\n        bytes memory executorOptions;\\n        WorkerOptions[] memory otherWorkerOptions;\\n        (options, executorOptions, otherWorkerOptions) = _getWorkerOptions(packet.dstEid, _options);\\n\\n        (uint otherWorkerFees, address executor, uint maxMsgSize) = _send(packet, otherWorkerOptions);\\n        totalNativeFee += otherWorkerFees;\\n\\n        uint msgSize = packet.message.length;\\n        _assertMessageSize(msgSize, maxMsgSize);\\n\\n        totalNativeFee += _sendToExecutor(executor, packet.dstEid, packet.sender, msgSize, executorOptions);\\n    }\\n\\n    /// @dev this function change pack the path as required for EndpointV1\\n    function _execute(\\n        uint16 _srcEid,\\n        bytes32 _sender,\\n        address _receiver,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        uint _gasLimit\\n    ) internal {\\n        if (_receiver.code.length == 0) {\\n            /// on chains where EOA has no codes, we will early return and emit InvalidDst event because it will result into a revert without msg ( call to non-contract account).\\n            // on chains where all address have codes, this will be skipped\\n            emit InvalidDst(_srcEid, _sender, _receiver, _nonce, keccak256(_message));\\n            return;\\n        }\\n\\n        bytes memory pathData = abi.encodePacked(_sender.toBytes(addressSizes[_srcEid]), _receiver);\\n        ILayerZeroEndpoint(endpoint).receivePayload(_srcEid, pathData, _receiver, _nonce, _gasLimit, _message);\\n\\n        Origin memory origin = Origin(_srcEid, _sender, _nonce);\\n        emit PacketReceived(origin, _receiver);\\n    }\\n\\n    function _endpointDeliverable(\\n        uint16 _srcEid,\\n        address _receiver,\\n        bytes calldata _packetHeader\\n    ) internal view returns (DeliveryState) {\\n        ILayerZeroEndpoint lzEndpoint = ILayerZeroEndpoint(endpoint);\\n\\n        bytes memory sender = _packetHeader.sender().toBytes(addressSizes[_srcEid]);\\n        bytes memory path = abi.encodePacked(sender, _receiver);\\n        uint64 nonce = _packetHeader.nonce();\\n\\n        // assert message library\\n        require(lzEndpoint.getReceiveLibraryAddress(_receiver) == address(this), Errors.PERMISSION_DENIED);\\n\\n        // 1. check if nonce is already delivered\\n        uint64 inboundNonce = lzEndpoint.getInboundNonce(_srcEid, path);\\n        if (nonce <= inboundNonce) return DeliveryState.Delivered;\\n\\n        // 2. check nonce is next nonce\\n        // 3. check there are no stored payload\\n        if (nonce > inboundNonce + 1 || lzEndpoint.hasStoredPayload(_srcEid, path)) return DeliveryState.Waiting;\\n\\n        return DeliveryState.Deliverable;\\n    }\\n\\n    // ======================= Virtual =======================\\n    // For implementation to override\\n    // packet is assembled in memory for endpoint-v1\\n    function _send(\\n        Packet memory _packet,\\n        WorkerOptions[] memory _options\\n    ) internal virtual returns (uint, address, uint);\\n}\\n\",\"keccak256\":\"0x54a339dc4ef416f52c1a5d053340d9dd2b7e716ca705759827708d5d31cd7ccf\",\"license\":\"BUSL-1.1\"},\"contracts/uln/uln301/NonceContract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\n\\ncontract NonceContract {\\n    ILayerZeroEndpoint public immutable endpoint;\\n    mapping(uint16 dstEid => mapping(bytes path => uint64 nonce)) public outboundNonce;\\n\\n    constructor(address _endpoint) {\\n        endpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function increment(uint16 _chainId, address _ua, bytes calldata _path) external returns (uint64) {\\n        require(\\n            endpoint.getSendLibraryAddress(_ua) == msg.sender,\\n            \\\"NonceContract: msg.sender is not valid sendlibrary\\\"\\n        );\\n        return ++outboundNonce[_chainId][_path];\\n    }\\n}\\n\",\"keccak256\":\"0x2bc18b0b5e44ff149a2a20b164123b7ec1f51a8f670ec8f224c0be0bc847d8e6\",\"license\":\"BUSL-1.1\"},\"contracts/uln/uln301/UltraLightNode301.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport \\\"./interfaces/IUltraLightNode301.sol\\\";\\nimport {UlnConfigStruct} from \\\"../interfaces/IUlnConfig.sol\\\";\\nimport \\\"../libs/UlnOptions.sol\\\";\\n\\nimport \\\"./MessageLibBaseE1.sol\\\";\\nimport \\\"../UlnBase.sol\\\";\\n\\n/// @dev ULN301 will be deployed on EndpointV1 and is for backward compatability with ULN302 on EndpointV2. 301 can talk to both 301 and 302\\ncontract UltraLightNode301 is IUltraLightNode301, UlnBase, MessageLibBaseE1 {\\n    using PacketV1Codec for bytes;\\n    using SafeCast for uint32; // for chain ID uint16 to uint32 conversion\\n    using AddressCast for bytes32; // for address type bytes to bytes32/address conversion\\n\\n    constructor(\\n        address _endpoint,\\n        uint _treasuryGasCap,\\n        address _nonceContract,\\n        uint32 _localEid,\\n        address _treasuryFeeHandler,\\n        address _ulnConfig\\n    )\\n        MessageLibBaseE1(_endpoint, 1, _treasuryGasCap, _nonceContract, _localEid, _treasuryFeeHandler)\\n        UlnBase(_ulnConfig)\\n    {}\\n\\n    // ============================ OnlyEndpoint ===================================\\n\\n    function setConfig(\\n        uint16 _eid,\\n        address _oapp,\\n        uint _configType,\\n        bytes calldata _config\\n    ) external override onlyEndpoint {\\n        ulnConfig.setConfigByType(_eid, _oapp, uint32(_configType), _config);\\n    }\\n\\n    // ============================ External ===================================\\n\\n    /// @dev in 301, this is equivalent to execution as in Endpoint V2\\n    /// @dev dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable.\\n    function deliver(bytes calldata _packet, uint _gasLimit) external {\\n        address receiver = _packet.receiverB20();\\n        uint16 srcEid = _packet.srcEid().toUint16();\\n\\n        UlnConfigStruct memory config = ulnConfig.getUlnConfig(receiver, srcEid);\\n        require(\\n            // the packet is considered delivered in 301 if all signatures are submitted\\n            _deliverable(config, _packet.header(), _packet.payloadHash()) == DeliveryState.Delivered,\\n            Errors.INVALID_ARGUMENT\\n        );\\n\\n        _execute(srcEid, _packet.sender(), receiver, _packet.nonce(), _packet.message(), _gasLimit);\\n    }\\n\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external {\\n        _verify(_packetHeader, _payloadHash, _confirmations);\\n    }\\n\\n    // ============================ View ===================================\\n\\n    function getConfig(\\n        uint16 _eid,\\n        address _oapp,\\n        uint _configType\\n    ) external view override returns (bytes memory config) {\\n        (config, ) = ulnConfig.getConfigByType(_eid, _oapp, uint32(_configType));\\n    }\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view override returns (bytes memory) {\\n        return ulnConfig.getDefaultConfigByType(_eid, _configType);\\n    }\\n\\n    function version() external pure override returns (uint64 major, uint8 minor, uint8 endpointVersion) {\\n        return (3, 0, 1);\\n    }\\n\\n    /// @dev keeping the same interface as 302\\n    /// @dev a deliverable message requires it to be endpoint deliverable and ULN deliverable\\n    function deliverable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (DeliveryState) {\\n        address receiver = _packetHeader.receiverB20();\\n        uint16 srcEid = _packetHeader.srcEid().toUint16();\\n\\n        DeliveryState endpointStatus = _endpointDeliverable(srcEid, receiver, _packetHeader);\\n        if (endpointStatus != DeliveryState.Deliverable) {\\n            return endpointStatus;\\n        }\\n\\n        // check verifier executable\\n        UlnConfigStruct memory config = ulnConfig.getUlnConfig(receiver, srcEid);\\n        return _deliverable(config, _packetHeader, _payloadHash);\\n    }\\n\\n    // ============================ Internal ===================================\\n\\n    function _quoteWorkers(\\n        address _sender,\\n        uint32 _dstEid,\\n        WorkerOptions[] memory _options\\n    ) internal view override returns (uint, address, uint) {\\n        return _quoteUlnWorkers(_sender, _dstEid, _options);\\n    }\\n\\n    function _send(\\n        Packet memory _packet,\\n        WorkerOptions[] memory _options\\n    ) internal virtual override returns (uint, address, uint) {\\n        return _ulnSend(fees, _options, _packet.sender, _packet.dstEid);\\n    }\\n\\n    /// @dev include only the validation logic of ulnv3\\n    function _deliverable(\\n        UlnConfigStruct memory _config,\\n        bytes calldata _packetHeader,\\n        bytes32 _payloadHash\\n    ) internal view returns (DeliveryState) {\\n        // assert packet header is of right size 81\\n        require(_packetHeader.length == 81, Errors.INVALID_SIZE);\\n        // assert packet header version is the same as ULN\\n        require(_packetHeader.version() == packetVersion, Errors.INVALID_VERSION);\\n        // assert the packet is for this endpoint\\n        require(_packetHeader.dstEid() == localEid, Errors.INVALID_EID);\\n\\n        bool signed = verifyConditionMet(_config, keccak256(_packetHeader), _payloadHash);\\n        if (signed) {\\n            // in 301, once all signature are gathered, it is ready to be executed\\n            // marked as Delivered to unify the behavior with 302\\n            return DeliveryState.Delivered;\\n        } else {\\n            return DeliveryState.Signing;\\n        }\\n    }\\n\\n    function _getExecutorOptions(\\n        bytes memory _options\\n    ) internal pure override returns (bytes memory, WorkerOptions[] memory) {\\n        return _getExecutorOptionsInternal(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x7826337c91ad97adf09084a4874702635d268634863fa5f7e57feebb9265f77d\",\"license\":\"BUSL-1.1\"},\"contracts/uln/uln301/interfaces/IMessageLibE1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-v1-0.7/contracts/interfaces/ILayerZeroMessagingLibrary.sol\\\";\\n\\n/// extends ILayerZeroMessagingLibrary instead of ILayerZeroMessagingLibraryV2 for reducing the contract size\\ninterface IMessageLibE1 is ILayerZeroMessagingLibrary {\\n    function setLayerZeroToken(address _treasury) external;\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function withdrawFee(address _to, uint _amount) external;\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n}\\n\",\"keccak256\":\"0xa1078d77fbb394f0abd880e8500a9dce7353d28ffba727444e84577b8cb89a76\",\"license\":\"BUSL-1.1\"},\"contracts/uln/uln301/interfaces/ITreasuryFeeHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ITreasuryFeeHandler {\\n    function payFee(\\n        address _lzToken,\\n        address _sender,\\n        address _lzTokenPaymentAddress,\\n        uint _required,\\n        uint _supplied,\\n        address _treasury\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6061e55ae2b6c6ed8dc9e3735ced51059934eb3e2b16de3a25e1520a770c9860\",\"license\":\"BUSL-1.1\"},\"contracts/uln/uln301/interfaces/IUltraLightNode301.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IUltraLightNode301 {\\n    function deliver(bytes calldata _packet, uint _gasLimit) external;\\n}\\n\",\"keccak256\":\"0x64a0b4ff028b037a703a55829d8e076ece96d22014e8e135ed693b0c98d04450\",\"license\":\"BUSL-1.1\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162005a0b38038062005a0b833981016040819052620000359162000109565b6001600160a01b038116608052856001868686868582868662000058336200009a565b6001600160a01b0393841660a05263ffffffff90921660c05260ff1660e052610100529283166101205290911661014052506200018b98505050505050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b03811681146200010457600080fd5b919050565b60008060008060008060c087890312156200012357600080fd5b6200012e87620000ec565b9550602087015194506200014560408801620000ec565b9350606087015163ffffffff811681146200015f57600080fd5b92506200016f60808801620000ec565b91506200017f60a08801620000ec565b90509295509295509295565b60805160a05160c05160e0516101005161012051610140516157d16200023a6000396000611639015260006123b7015260006122cb01526000818161140801526118570152600081816118de0152818161245401526125520152600081816105dd015281816110bb01528181611b100152611ca50152600081816107f60152818161093c01528181610ad901528181610d030152818161114d015281816129680152612c3801526157d16000f3fe60806040526004361061018b5760003560e01c8063715018a6116100d6578063e9817f341161007f578063f8e1734c11610059578063f8e1734c14610503578063faaebd2114610523578063fd9be5221461055057600080fd5b8063e9817f34146104a3578063f0f44260146104c3578063f2fde38b146104e357600080fd5b8063a5972ec5116100b0578063a5972ec514610433578063c773417314610463578063df1e309f1461048357600080fd5b8063715018a6146103c65780637c0cf763146103db5780638da5cb5b1461040857600080fd5b806352d3b5001161013857806361d027b31161011257806361d027b314610334578063690c6555146103865780636d26e5d0146103a657600080fd5b806352d3b500146102c757806354fd4d50146102e757806356fe19be1461031457600080fd5b806340a7bb101161016957806340a7bb10146102525780634d3a0f7c1461028757806352d2871f1461029a57600080fd5b80630223536e146101905780630f8355c0146101b25780633c782a52146101f2575b600080fd5b34801561019c57600080fd5b506101b06101ab366004614257565b610570565b005b3480156101be57600080fd5b506101df6101cd3660046142c8565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101fe57600080fd5b5061023961020d366004614312565b6000602081815293815260408082208552928152828120909352825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101e9565b34801561025e57600080fd5b5061027261026d366004614376565b610582565b604080519283526020830191909152016101e9565b6101b061029536600461441e565b6105a7565b3480156102a657600080fd5b506102ba6102b5366004614512565b610798565b6040516101e991906145a1565b3480156102d357600080fd5b506101b06102e23660046145b4565b610870565b3480156102f357600080fd5b506040805160038152600060208201526001918101919091526060016101e9565b34801561032057600080fd5b506101b061032f3660046145d1565b6108bf565b34801561034057600080fd5b506002546103619073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e9565b34801561039257600080fd5b506102ba6103a136600461461d565b610a9a565b3480156103b257600080fd5b506101b06103c1366004614656565b610b66565b3480156103d257600080fd5b506101b0610c4a565b3480156103e757600080fd5b506103fb6103f63660046145d1565b610c5e565b6040516101e991906146af565b34801561041457600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff16610361565b34801561043f57600080fd5b5061045361044e36600461482c565b610d90565b60405190151581526020016101e9565b34801561046f57600080fd5b5061045361047e366004614935565b610e88565b34801561048f57600080fd5b506101b061049e366004614974565b610ed7565b3480156104af57600080fd5b506102ba6104be3660046142c8565b610eff565b3480156104cf57600080fd5b506101b06104de3660046145b4565b610f99565b3480156104ef57600080fd5b506101b06104fe3660046145b4565b610fe8565b34801561050f57600080fd5b506101b061051e3660046149c9565b611085565b34801561052f57600080fd5b506101df61053e3660046145b4565b60046020526000908152604090205481565b34801561055c57600080fd5b506101b061056b366004614a3a565b6111c3565b61057c84848484611231565b50505050565b6000806105978861ffff8b16888888886112ef565b9150915097509795505050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461063a5760405162461bcd60e51b815260040161063191906145a1565b60405180910390fd5b5060008060006106508e8d8d8d8d8d8b8b6113ed565b9194509250905061ffff8c168e600073ffffffffffffffffffffffffffffffffffffffff89161580159061069b575060055473ffffffffffffffffffffffffffffffffffffffff1615155b90506000806106ac848688866114b0565b90925090506106bb8287614a87565b9550348611156040518060400160405280600781526020017f4c5a313030303300000000000000000000000000000000000000000000000000815250906107155760405162461bcd60e51b815260040161063191906145a1565b5060006107228734614a9a565b90508015610734576107348d82611510565b811561074557610745858d846115c8565b7f3dc6f2ede34d1db05729bbb76e5efd17ec1bc83f98f665e7fba0596dca438b96888a898560405161077a9493929190614aad565b60405180910390a15050505050505050505050505050505050505050565b6040517f8fd061fc00000000000000000000000000000000000000000000000000000000815261ffff8416600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015263ffffffff831660448301526060917f000000000000000000000000000000000000000000000000000000000000000090911690638fd061fc90606401600060405180830381865afa15801561083f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108679190810190614b55565b50949350505050565b61087861169c565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006108cb8484611703565b905060006108e76108dc8686611715565b63ffffffff16611738565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015261ffff831660248301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906343ea4fa990604401600060405180830381865afa158015610983573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ab9190810190614cec565b905060026109cc826109bd89896117b6565b6109c78b8b6117d2565b6117fc565b60038111156109dd576109dd614680565b146040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a325760405162461bcd60e51b815260040161063191906145a1565b50610a9282610a4188886119a9565b85610a4c8a8a6119c2565b610a568b8b6119e5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92506119f5915050565b505050505050565b6040517f560042df00000000000000000000000000000000000000000000000000000000815263ffffffff8084166004830152821660248201526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063560042df90604401600060405180830381865afa158015610b35573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b5d9190810190614d21565b90505b92915050565b610b6e61169c565b60208111156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090610bc75760405162461bcd60e51b815260040161063191906145a1565b5061ffff8216600090815260066020908152604091829020548251808401909352600783527f4c5a3830303030000000000000000000000000000000000000000000000000009183019190915215610c325760405162461bcd60e51b815260040161063191906145a1565b5061ffff909116600090815260066020526040902055565b610c5261169c565b610c5c6000611c18565b565b600080610c6b8585611703565b90506000610c7c6108dc8787611715565b90506000610c8c82848989611c8f565b90506001816003811115610ca257610ca2614680565b14610cb1579250610d89915050565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015261ffff841660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906343ea4fa990604401600060405180830381865afa158015610d4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d749190810190614cec565b9050610d82818989896117fc565b9450505050505b9392505050565b8251600090815b856060015160ff16811015610de657610dcf8660c001518281518110610dbf57610dbf614d56565b6020026020010151868685610e88565b610dde57600092505050610d89565b600101610d97565b506000856060015160ff16118015610e035750608085015160ff16155b15610e12576001915050610d89565b6000805b866080015160ff16811015610e7b57610e4e8760e001518281518110610e3e57610e3e614d56565b6020026020010151878786610e88565b15610e73578160010191508660a0015160ff168210610e735760019350505050610d89565b600101610e16565b5060009695505050505050565b600083815260208181526040808320858452825280832073ffffffffffffffffffffffffffffffffffffffff8816845290915290205467ffffffffffffffff828116911610155b949350505050565b610edf61169c565b63ffffffff8316600090815260036020526040902061057c828483614e1e565b60036020526000908152604090208054610f1890614d85565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4490614d85565b8015610f915780601f10610f6657610100808354040283529160200191610f91565b820191906000526020600020905b815481529060010190602001808311610f7457829003601f168201915b505050505081565b610fa161169c565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610ff061169c565b73ffffffffffffffffffffffffffffffffffffffff81166110795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610631565b61108281611c18565b50565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461110f5760405162461bcd60e51b815260040161063191906145a1565b506040517fd59104ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d59104ed9061118a9088908890889088908890600401614f46565b600060405180830381600087803b1580156111a457600080fd5b505af11580156111b8573d6000803e3d6000fd5b505050505050505050565b6111cd8282611fb2565b6111d78282611510565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201529081018290527f820b7fd51bf79c54350bab98400651b3314ff6e79b33528821871d94a66698839060600160405180910390a15050565b806000808686604051611245929190614f97565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352935281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff949094169390931790925590517fd57606ee258836ec1b40f83a128d2b514581eaf4f71801fbed3bc94b5358ecc0916112e1918790879086908890614fa7565b60405180910390a150505050565b600080600080611300898787612063565b925092505060008060006113158d8d8661216e565b9250925092506113258b8261218d565b8173ffffffffffffffffffffffffffffffffffffffff1663709eb6648d8f8e896040518563ffffffff1660e01b81526004016113649493929190614ff5565b602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190615040565b6113af9084614a87565b92506000806113c08f8f878f6121e7565b909250905081156113d8576113d58286614a87565b94505b939e939d50929b505050505050505050505050565b6060806000806114018c8c8c8c8c8c612323565b905061142d7f0000000000000000000000000000000000000000000000000000000000000000826125fb565b925060608061144183606001518989612063565b91975092509050600080806114568685612660565b919450925090506114678388614a87565b60c08701515190975061147a818361218d565b61148f8388606001518960400151848a612687565b6114999089614a87565b975050505050505050985098509895505050505050565b6000806114bf868686866121e7565b909250905081156115075760025473ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604081208054849290611501908490614a87565b90915550505b94509492505050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461156a576040519150601f19603f3d011682016040523d82523d6000602084013e61156f565b606091505b50509050806040518060400160405280600781526020017f4c5a3330303030000000000000000000000000000000000000000000000000008152509061057c5760405162461bcd60e51b815260040161063191906145a1565b6005546002546040517f67f8d2f200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015285831660248201528483166044820152606481018490526084810184905290821660a48201527f0000000000000000000000000000000000000000000000000000000000000000909116906367f8d2f29060c401600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b50505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c5c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610631565b6000610b5d61171284846127c0565b90565b6000611725600d60098486615059565b61172e91615083565b60e01c9392505050565b600061ffff8211156117b25760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f36206269747300000000000000000000000000000000000000000000000000006064820152608401610631565b5090565b3660006117c66051828587615059565b915091505b9250929050565b60006117de83836127d0565b6040516117ec929190614f97565b6040518091039020905092915050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090605184146118545760405162461bcd60e51b815260040161063191906145a1565b507f000000000000000000000000000000000000000000000000000000000000000060ff1661188385856127e0565b60ff16146040518060400160405280600781526020017f4c5a313030303700000000000000000000000000000000000000000000000000815250906118db5760405162461bcd60e51b815260040161063191906145a1565b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1661190d8585612802565b63ffffffff16146040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906119685760405162461bcd60e51b815260040161063191906145a1565b50600061198d86868660405161197f929190614f97565b604051809103902085610d90565b9050801561199f576002915050610ecf565b6000915050610ecf565b60006119b9602d600d8486615059565b610b5d916150cb565b60006119d2600960018486615059565b6119db91615107565b60c01c9392505050565b3660006117c68360718187615059565b8373ffffffffffffffffffffffffffffffffffffffff163b600003611a92578373ffffffffffffffffffffffffffffffffffffffff168661ffff167feca5e9e3d49c3ee9d9362efa82baa91c668a7f032b3a403638ae65e27368013687868680519060200120604051611a859392919092835267ffffffffffffffff919091166020830152604082015260600190565b60405180910390a3610a92565b61ffff8616600090815260066020526040812054611ab1908790612812565b85604051602001611ac392919061514d565b60408051601f19818403018152908290527fc2fa4813000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063c2fa481390611b4f908a9085908a908a9089908b90600401615197565b600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b5050604080516060808201835261ffff8c1680835260208084018d815267ffffffffffffffff8c8116868801908152875194855291519284019290925251169381019390935273ffffffffffffffffffffffffffffffffffffffff8a169083015292507f2d05fd3bd2a2620dfaf6174f2083d54fbfd9106a4ee93c81238ea5a5f731aede915060800160405180910390a15050505050505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61ffff84166000908152600660205260408120547f0000000000000000000000000000000000000000000000000000000000000000908290611cdb90611cd587876119a9565b90612812565b905060008187604051602001611cf292919061514d565b60405160208183030381529060405290506000611d0f87876119c2565b6040517f71ba2fd600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015291925030918616906371ba2fd690602401602060405180830381865afa158015611d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da49190615205565b73ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a35303030300000000000000000000000000000000000000000000000000081525090611e0f5760405162461bcd60e51b815260040161063191906145a1565b506040517ffdc07c7000000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff86169063fdc07c7090611e67908d908790600401615222565b602060405180830381865afa158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea8919061523f565b90508067ffffffffffffffff168267ffffffffffffffff1611611ed357600295505050505050610ecf565b611ede81600161525c565b67ffffffffffffffff168267ffffffffffffffff161180611f8f57506040517f0eaf6ea600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690630eaf6ea690611f4e908d908790600401615222565b602060405180830381865afa158015611f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8f9190615284565b15611fa257600395505050505050610ecf565b5060019998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff821615801590611fe65750336000908152600460205260409020548111155b6040518060400160405280600781526020017f4c5a3130303030000000000000000000000000000000000000000000000000008152509061203a5760405162461bcd60e51b815260040161063191906145a1565b50336000908152600460205260408120805483929061205a908490614a9a565b90915550505050565b6060808060008490036121155763ffffffff86166000908152600360205260409020805461209090614d85565b80601f01602080910402602001604051908101604052809291908181526020018280546120bc90614d85565b80156121095780601f106120de57610100808354040283529160200191612109565b820191906000526020600020905b8154815290600101906020018083116120ec57829003601f168201915b5050505050925061214f565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050505b8251156121655761215f836128f7565b90925090505b93509350939050565b600080600061217e86868661290c565b92509250925093509350939050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152818311156121e25760405162461bcd60e51b815260040161063191906145a1565b505050565b600254600090819073ffffffffffffffffffffffffffffffffffffffff1615611507576002546040517fd424422100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015263ffffffff881660248301526044820187905285151560648301529091169063d424422190608401602060405180830381865afa9250505080156122b1575060408051601f3d908101601f191682019092526122ae91810190615040565b60015b156115075783156122c457809150612319565b60006122f07f00000000000000000000000000000000000000000000000000000000000000003a6152a1565b905060008187116123015781612303565b865b90508083116123125782612314565b805b945050505b5094509492505050565b6040805160e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c084015261ffff8916825260069052919091205461237788878784612a65565b6040517f6fe7b67300000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636fe7b673906123f2908b908d908c908c906004016152b8565b6020604051808303816000875af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612435919061523f565b9050600061244d61244884838a8c615059565b612b60565b90506000827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8d1660405160c09390931b7fffffffffffffffff00000000000000000000000000000000000000000000000016602084015260e091821b7fffffffff00000000000000000000000000000000000000000000000000000000166028840152602c8301528b901b7dffff0000000000000000000000000000000000000000000000000000000016604c820152605081018390526070016040516020818303038152906040528051906020012090506040518060e001604052808467ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b61ffff1663ffffffff16815260200183815260200182815260200188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509b9a5050505050505050505050565b8051602080830151604080850151606080870151608088015160a089015160c08a015195519398612649988c989197919673ffffffffffffffffffffffffffffffffffffffff1695016152f2565b604051602081830303815290604052905092915050565b600080600061267a60048587604001518860600151612bdc565b9250925092509250925092565b6040517f717e8a4200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063717e8a42906126e2908890889088908890600401614ff5565b6020604051808303816000875af1158015612701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127259190615040565b905080156127685773ffffffffffffffffffffffffffffffffffffffff861660009081526004602052604081208054839290612762908490614a87565b90915550505b6040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018390527f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a910160405180910390a195945050505050565b60006119b9605160318486615059565b3660006117c68360518187615059565b60006127ef6001828486615059565b6127f8916153b8565b60f81c9392505050565b60006117256031602d8486615059565b6060600082118015612825575060208211155b6040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906128795760405162461bcd60e51b815260040161063191906145a1565b5060008360405160200161288f91815260200190565b60405160208183030381529060405290508267ffffffffffffffff8111156128b9576128b96146f0565b6040519080825280601f01601f1916602001820160405280156128e3576020820181803683370190505b506040939093030151602083015250919050565b60608061290383612d81565b91509150915091565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff8416602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa1580156129b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129d991908101906153fe565b9150915080604001519350806000015163ffffffff16925060008651600014612a205786600081518110612a0f57612a0f614d56565b602002602001015160200151612a31565b604051806020016040528060008152505b9050600080612a3f83612e6c565b91509150612a55858b86602001518e86866131cc565b9750505050505093509350939050565b612a70816014614a87565b60408051808201909152600781527f4c5a3130303030000000000000000000000000000000000000000000000000006020820152908314612ac45760405162461bcd60e51b815260040161063191906145a1565b506000612adb612ad684848188615059565b613369565b90508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a925760405162461bcd60e51b815260040161063191906145a1565b600060208383905011156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090612bbe5760405162461bcd60e51b815260040161063191906145a1565b50612bc982846150cb565b6020929092036008029190911c92915050565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015263ffffffff8316602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612c81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ca991908101906153fe565b9150915080604001519350806000015163ffffffff16925060008851600014612cf05788600081518110612cdf57612cdf614d56565b602002602001015160200151612d01565b604051806020016040528060008152505b9050600080612d0f83612e6c565b915091506060612d288d878c88602001518f88886133d6565b60c088015160e0890151604051939c509193507f4ec2ac8fdaa552cf8e85ded259f20fa01c58d98ceaf21c87f6db54dad6d4ec4992612d69929085906154ff565b60405180910390a15050505050509450945094915050565b606080600080612d9085613685565b915091508051600003612de857604080516000808252602082019092528391612ddc565b604080518082019091526000815260606020820152815260200190600190039081612db45790505b50935093505050915091565b604080516001808252818301909252600091816020015b604080518082019091526000815260606020820152815260200190600190039081612dff5790505090506040518060400160405280600260ff1681526020018381525081600081518110612e5557612e55614d56565b602090810291909101015291959194509092505050565b6060808251600003612e7d57915091565b6000612e888461384a565b90508060ff16600103612f3a5760408051600180825281830190925290816020015b6060815260200190600190039081612eaa5790505092508383600081518110612ed557612ed5614d56565b602090810291909101015260408051600180825281830190925290816020016020820280368337019050509150612f0d8460036139cc565b82600081518110612f2057612f20614d56565b602002602001019060ff16908160ff168152505050915091565b8060ff1667ffffffffffffffff811115612f5657612f566146f0565b604051908082528060200260200182016040528015612f7f578160200160208202803683370190505b5091508060ff1667ffffffffffffffff811115612f9e57612f9e6146f0565b604051908082528060200260200182016040528015612fd157816020015b6060815260200190600190039081612fbc5790505b50925060008060ff5b8651831015613108576001909201916000612ff58885613a32565b905060028401935060028161ffff1610156040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061305a5760405162461bcd60e51b815260040161063191906145a1565b50600061306789866139cc565b90508260ff1660ff03613078578092505b8260ff168160ff16146130cf577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8486030160006130b78b8784613a98565b90506130c58a8a8784613bc0565b5093909301929150815b8161ffff1685019450885185036131015783850360006130f08b8784613a98565b90506130fe8a8a8584613bc0565b50505b5050612fda565b865183146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906131605760405162461bcd60e51b815260040161063191906145a1565b5060005b8460ff168160ff1610156131c257858160ff168151811061318757613187614d56565b6020908102919091010180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff169052600101613164565b5050505050915091565b600080876080015188606001516131e39190615568565b905060005b8160ff1681101561335d57600060608a6060015160ff168310613231578a60e001518b6060015160ff1684038151811061322457613224614d56565b6020026020010151613250565b8a60c00151838151811061324757613247614d56565b60200260200101515b915060005b86518110156132aa578387828151811061327157613271614d56565b602002602001015160ff16036132a25787818151811061329357613293614d56565b602002602001015191506132aa565b600101613255565b506040517f30bb3aac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906330bb3aac90613303908d908d908d908790600401615581565b602060405180830381865afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133449190615040565b61334e9086614a87565b945082600101925050506131e8565b50509695505050505050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090601483146133c15760405162461bcd60e51b815260040161063191906145a1565b506133cc82846155cc565b60601c9392505050565b600060606000886080015189606001516133f09190615568565b90508060ff1667ffffffffffffffff81111561340e5761340e6146f0565b604051908082528060200260200182016040528015613437578160200160208202803683370190505b5091506000805b8260ff1681101561367657600060608c6060015160ff168310613487578c60e001518d6060015160ff1684038151811061347a5761347a614d56565b60200260200101516134a6565b8c60c00151838151811061349d5761349d614d56565b60200260200101515b9150600088511180156134d457508784815181106134c6576134c6614d56565b602002602001015160ff1683145b156134fb57885160018501948a9181106134f0576134f0614d56565b602002602001015190505b6040517fe4fbd90300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063e4fbd90390613553908f908f908f908790600401615581565b6020604051808303816000875af1158015613572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135969190615040565b8684815181106135a8576135a8614d56565b60200260200101818152505060008684815181106135c8576135c8614d56565b6020026020010151111561366c578583815181106135e8576135e8614d56565b60200260200101518e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461363d9190614a87565b9250508190555085838151811061365657613656614d56565b6020026020010151876136699190614a87565b96505b505060010161343e565b50505097509795505050505050565b60608060006136948482613a32565b905060027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff831601613836578060005b86518310156137d65760006136dc88856139cc565b90508160ff166000036136ed578091505b8160ff168160ff16146137265760006137098985808803613a98565b905061371788888584613d24565b90985096508493509091508190505b60019093019260006137388986613a32565b905060008161ffff16116040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906137965760405162461bcd60e51b815260040161063191906145a1565b508060020161ffff1685019450885185036137cf5760006137ba8a86808903613a98565b90506137c889898584613d24565b9099509750505b50506136c7565b865183146040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061382e5760405162461bcd60e51b815260040161063191906145a1565b505050613843565b6138408286613e3e565b93505b5050915091565b60008060005b835182101561396c57600190910190600061386b8584613a32565b905060028301925060028161ffff1610156040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906138d05760405162461bcd60e51b815260040161063191906145a1565b5060006138dd86856139cc565b905060ff8160ff16106040518060400160405280600781526020017f4c5a3130303131000000000000000000000000000000000000000000000000008152509061393a5760405162461bcd60e51b815260040161063191906145a1565b5060018181019060ff82161b841661395c5760019586019560ff82161b841793505b505061ffff169190910190613850565b835182146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906139c45760405162461bcd60e51b815260040161063191906145a1565b505050919050565b60006139d9826001614a87565b83511015613a295760405162461bcd60e51b815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e6473000000000000000000000000006044820152606401610631565b50016001015190565b6000613a3f826002614a87565b83511015613a8f5760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152606401610631565b50016002015190565b606081613aa681601f614a87565b1015613af45760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610631565b613afe8284614a87565b84511015613b4e5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610631565b606082158015613b6d5760405191506000825260208201604052610867565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613ba6578051835260209283019201613b8e565b5050858452601f01601f1916604052505090509392505050565b60408051808201909152600781527f4c5a313030313100000000000000000000000000000000000000000000000000602082015260ff83811610613c175760405162461bcd60e51b815260040161063191906145a1565b506000613c25836001615568565b905060005b84518160ff161015610a92576000858260ff1681518110613c4d57613c4d614d56565b602002602001015190508060ff168360ff1603613cc857868260ff1681518110613c7957613c79614d56565b602002602001015184604051602001613c93929190615612565b604051602081830303815290604052878360ff1681518110613cb757613cb7614d56565b602002602001018190525050610a92565b8060ff16600003613d135782868360ff1681518110613ce957613ce9614d56565b602002602001019060ff16908160ff168152505083878360ff1681518110613cb757613cb7614d56565b50613d1d81615641565b9050613c2a565b6060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff851601613d8857855115613d7f578583604051602001613d6b929190615612565b604051602081830303815290604052613d81565b825b9550613e34565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff851601613de957845115613de0578483604051602001613dcc929190615612565b604051602081830303815290604052613de2565b825b9450613e34565b604080518082018252600781527f4c5a3130303133000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b815261063191906004016145a1565b5093949293505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff841601613f785781516022146040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090613ec45760405162461bcd60e51b815260040161063191906145a1565b506000613eda613ed5846002614101565b614167565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082018190527e11000000000000000000000000000000000000000000000000000000000000602183015260238201527fffffffffffffffffffffffffffffffff00000000000000000000000000000000608083901b166024820152909150603401604051602081830303815290604052915050610b60565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61ffff8416016140b65760428251118015613fb657506062825111155b6040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061400a5760405162461bcd60e51b815260040161063191906145a1565b50600061401b613ed5846002614101565b9050600061402d613ed5856022614101565b84519091506000907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe0161406386604283613a98565b61406c90615660565b60405160086020938403029190911c925061409d916001916011918391889183916031916002918b918b91016156a2565b6040516020818303038152906040529350505050610b60565b604080518082018252600781527f4c5a4330303030000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b815261063191906004016145a1565b600061410e826020614a87565b8351101561415e5760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e647300000000000000000000006044820152606401610631565b50016020015190565b60006fffffffffffffffffffffffffffffffff8211156117b25760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610631565b60008083601f84011261420157600080fd5b50813567ffffffffffffffff81111561421957600080fd5b6020830191508360208285010111156117cb57600080fd5b67ffffffffffffffff8116811461108257600080fd5b803561425281614231565b919050565b6000806000806060858703121561426d57600080fd5b843567ffffffffffffffff81111561428457600080fd5b614290878288016141ef565b9095509350506020850135915060408501356142ab81614231565b939692955090935050565b63ffffffff8116811461108257600080fd5b6000602082840312156142da57600080fd5b8135610d89816142b6565b73ffffffffffffffffffffffffffffffffffffffff8116811461108257600080fd5b8035614252816142e5565b60008060006060848603121561432757600080fd5b83359250602084013591506040840135614340816142e5565b809150509250925092565b803561ffff8116811461425257600080fd5b801515811461108257600080fd5b80356142528161435d565b600080600080600080600060a0888a03121561439157600080fd5b61439a8861434b565b965060208801356143aa816142e5565b9550604088013567ffffffffffffffff808211156143c757600080fd5b6143d38b838c016141ef565b909750955060608a013591506143e88261435d565b909350608089013590808211156143fe57600080fd5b5061440b8a828b016141ef565b989b979a50959850939692959293505050565b60008060008060008060008060008060006101008c8e03121561444057600080fd5b6144498c614307565b9a5061445760208d01614247565b995061446560408d0161434b565b985067ffffffffffffffff8060608e0135111561448157600080fd5b6144918e60608f01358f016141ef565b909950975060808d01358110156144a757600080fd5b6144b78e60808f01358f016141ef565b90975095506144c860a08e01614307565b94506144d660c08e01614307565b93508060e08e013511156144e957600080fd5b506144fa8d60e08e01358e016141ef565b81935080925050509295989b509295989b9093969950565b60008060006060848603121561452757600080fd5b6145308461434b565b92506020840135614540816142e5565b929592945050506040919091013590565b60005b8381101561456c578181015183820152602001614554565b50506000910152565b6000815180845261458d816020860160208601614551565b601f01601f19169290920160200192915050565b602081526000610b5d6020830184614575565b6000602082840312156145c657600080fd5b8135610d89816142e5565b6000806000604084860312156145e657600080fd5b833567ffffffffffffffff8111156145fd57600080fd5b614609868287016141ef565b909790965060209590950135949350505050565b6000806040838503121561463057600080fd5b823561463b816142b6565b9150602083013561464b816142b6565b809150509250929050565b6000806040838503121561466957600080fd5b6146728361434b565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600483106146ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715614743576147436146f0565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614772576147726146f0565b604052919050565b60ff8116811461108257600080fd5b80356142528161477a565b600067ffffffffffffffff8211156147ae576147ae6146f0565b5060051b60200190565b600082601f8301126147c957600080fd5b813560206147de6147d983614794565b614749565b82815260059290921b840181019181810190868411156147fd57600080fd5b8286015b84811015614821578035614814816142e5565b8352918301918301614801565b509695505050505050565b60008060006060848603121561484157600080fd5b833567ffffffffffffffff8082111561485957600080fd5b90850190610100828803121561486e57600080fd5b61487661471f565b61487f83614247565b815261488d6020840161436b565b602082015261489e6040840161436b565b60408201526148af60608401614789565b60608201526148c060808401614789565b60808201526148d160a08401614789565b60a082015260c0830135828111156148e857600080fd5b6148f4898286016147b8565b60c08301525060e08301358281111561490c57600080fd5b614918898286016147b8565b60e083015250976020870135975060409096013595945050505050565b6000806000806080858703121561494b57600080fd5b8435614956816142e5565b9350602085013592506040850135915060608501356142ab81614231565b60008060006040848603121561498957600080fd5b8335614994816142b6565b9250602084013567ffffffffffffffff8111156149b057600080fd5b6149bc868287016141ef565b9497909650939450505050565b6000806000806000608086880312156149e157600080fd5b6149ea8661434b565b945060208601356149fa816142e5565b935060408601359250606086013567ffffffffffffffff811115614a1d57600080fd5b614a29888289016141ef565b969995985093965092949392505050565b60008060408385031215614a4d57600080fd5b8235614672816142e5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610b6057610b60614a58565b81810381811115610b6057610b60614a58565b608081526000614ac06080830187614575565b8281036020840152614ad28187614575565b604084019590955250506060015292915050565b600082601f830112614af757600080fd5b815167ffffffffffffffff811115614b1157614b116146f0565b614b246020601f19601f84011601614749565b818152846020838601011115614b3957600080fd5b610ecf826020830160208701614551565b80516142528161435d565b60008060408385031215614b6857600080fd5b825167ffffffffffffffff811115614b7f57600080fd5b614b8b85828601614ae6565b925050602083015161464b8161435d565b805161425281614231565b80516142528161477a565b600082601f830112614bc357600080fd5b81516020614bd36147d983614794565b82815260059290921b84018101918181019086841115614bf257600080fd5b8286015b84811015614821578051614c09816142e5565b8352918301918301614bf6565b60006101008284031215614c2957600080fd5b614c3161471f565b9050614c3c82614b9c565b8152614c4a60208301614b4a565b6020820152614c5b60408301614b4a565b6040820152614c6c60608301614ba7565b6060820152614c7d60808301614ba7565b6080820152614c8e60a08301614ba7565b60a082015260c082015167ffffffffffffffff80821115614cae57600080fd5b614cba85838601614bb2565b60c084015260e0840151915080821115614cd357600080fd5b50614ce084828501614bb2565b60e08301525092915050565b600060208284031215614cfe57600080fd5b815167ffffffffffffffff811115614d1557600080fd5b610ecf84828501614c16565b600060208284031215614d3357600080fd5b815167ffffffffffffffff811115614d4a57600080fd5b610ecf84828501614ae6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680614d9957607f821691505b602082108103614dd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156121e257600081815260208120601f850160051c81016020861015614dff5750805b601f850160051c820191505b81811015610a9257828155600101614e0b565b67ffffffffffffffff831115614e3657614e366146f0565b614e4a83614e448354614d85565b83614dd8565b6000601f841160018114614e9c5760008515614e665750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355614f14565b600083815260209020601f19861690835b82811015614ecd5786850135825560209485019460019092019101614ead565b5086821015614f08577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015263ffffffff84166040820152608060608201526000614f8c608083018486614f1b565b979650505050505050565b8183823760009101908152919050565b73ffffffffffffffffffffffffffffffffffffffff86168152608060208201526000614fd7608083018688614f1b565b67ffffffffffffffff94909416604083015250606001529392505050565b63ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006150366080830184614575565b9695505050505050565b60006020828403121561505257600080fd5b5051919050565b6000808585111561506957600080fd5b8386111561507657600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156150c35780818660040360031b1b83161692505b505092915050565b80356020831015610b60577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156150c35760089490940360031b84901b1690921692915050565b6000835161515f818460208801614551565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b61ffff8716815260c0602082015260006151b460c0830188614575565b73ffffffffffffffffffffffffffffffffffffffff8716604084015267ffffffffffffffff8616606084015284608084015282810360a08401526151f88185614575565b9998505050505050505050565b60006020828403121561521757600080fd5b8151610d89816142e5565b61ffff83168152604060208201526000610ecf6040830184614575565b60006020828403121561525157600080fd5b8151610d8981614231565b67ffffffffffffffff81811683821601908082111561527d5761527d614a58565b5092915050565b60006020828403121561529657600080fd5b8151610d898161435d565b8082028115828204841417610b6057610b60614a58565b61ffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152606060408201526000615036606083018486614f1b565b7fff000000000000000000000000000000000000000000000000000000000000008960f81b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008860c01b16600182015260007fffffffff00000000000000000000000000000000000000000000000000000000808960e01b16600984015287600d840152808760e01b16602d8401525084603183015283605183015282516153a4816071850160208701614551565b919091016071019998505050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156150c35760019490940360031b84901b1690921692915050565b600080828403608081121561541257600080fd5b835167ffffffffffffffff8082111561542a57600080fd5b61543687838801614c16565b94506060601f198401121561544a57600080fd5b60405192506060830191508282108183111715615469576154696146f0565b50604052602084015161547b816142b6565b8152604084015161548b81614231565b6020820152606084015161549e816142e5565b6040820152919491935090915050565b600081518084526020808501945080840160005b838110156154f457815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016154c2565b509495945050505050565b60608152600061551260608301866154ae565b60208382038185015261552582876154ae565b8481036040860152855180825282870193509082019060005b8181101561555a5784518352938301939183019160010161553e565b509098975050505050505050565b60ff8181168382160190811115610b6057610b60614a58565b63ffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006150366080830184614575565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156150c35760149490940360031b84901b1690921692915050565b60008351615624818460208801614551565b835190830190615638818360208801614551565b01949350505050565b600060ff821660ff810361565757615657614a58565b60010192915050565b80516020808301519190811015614dd2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b60007fff00000000000000000000000000000000000000000000000000000000000000808c60f81b1683527fffff000000000000000000000000000000000000000000000000000000000000808c60f01b166001850152818b60f81b1660038501527fffffffffffffffffffffffffffffffff000000000000000000000000000000008a60801b166004850152818960f81b166014850152808860f01b16601585015250808660f81b16601784015250615783601883018560801b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000169052565b5060288101919091526048019897505050505050505056fea26469706673582212204a46a6237f130b21d05c7fec335fe407e48609f92462e5ab7d81ea1ff3fe4de164736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061018b5760003560e01c8063715018a6116100d6578063e9817f341161007f578063f8e1734c11610059578063f8e1734c14610503578063faaebd2114610523578063fd9be5221461055057600080fd5b8063e9817f34146104a3578063f0f44260146104c3578063f2fde38b146104e357600080fd5b8063a5972ec5116100b0578063a5972ec514610433578063c773417314610463578063df1e309f1461048357600080fd5b8063715018a6146103c65780637c0cf763146103db5780638da5cb5b1461040857600080fd5b806352d3b5001161013857806361d027b31161011257806361d027b314610334578063690c6555146103865780636d26e5d0146103a657600080fd5b806352d3b500146102c757806354fd4d50146102e757806356fe19be1461031457600080fd5b806340a7bb101161016957806340a7bb10146102525780634d3a0f7c1461028757806352d2871f1461029a57600080fd5b80630223536e146101905780630f8355c0146101b25780633c782a52146101f2575b600080fd5b34801561019c57600080fd5b506101b06101ab366004614257565b610570565b005b3480156101be57600080fd5b506101df6101cd3660046142c8565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156101fe57600080fd5b5061023961020d366004614312565b6000602081815293815260408082208552928152828120909352825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101e9565b34801561025e57600080fd5b5061027261026d366004614376565b610582565b604080519283526020830191909152016101e9565b6101b061029536600461441e565b6105a7565b3480156102a657600080fd5b506102ba6102b5366004614512565b610798565b6040516101e991906145a1565b3480156102d357600080fd5b506101b06102e23660046145b4565b610870565b3480156102f357600080fd5b506040805160038152600060208201526001918101919091526060016101e9565b34801561032057600080fd5b506101b061032f3660046145d1565b6108bf565b34801561034057600080fd5b506002546103619073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e9565b34801561039257600080fd5b506102ba6103a136600461461d565b610a9a565b3480156103b257600080fd5b506101b06103c1366004614656565b610b66565b3480156103d257600080fd5b506101b0610c4a565b3480156103e757600080fd5b506103fb6103f63660046145d1565b610c5e565b6040516101e991906146af565b34801561041457600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff16610361565b34801561043f57600080fd5b5061045361044e36600461482c565b610d90565b60405190151581526020016101e9565b34801561046f57600080fd5b5061045361047e366004614935565b610e88565b34801561048f57600080fd5b506101b061049e366004614974565b610ed7565b3480156104af57600080fd5b506102ba6104be3660046142c8565b610eff565b3480156104cf57600080fd5b506101b06104de3660046145b4565b610f99565b3480156104ef57600080fd5b506101b06104fe3660046145b4565b610fe8565b34801561050f57600080fd5b506101b061051e3660046149c9565b611085565b34801561052f57600080fd5b506101df61053e3660046145b4565b60046020526000908152604090205481565b34801561055c57600080fd5b506101b061056b366004614a3a565b6111c3565b61057c84848484611231565b50505050565b6000806105978861ffff8b16888888886112ef565b9150915097509795505050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461063a5760405162461bcd60e51b815260040161063191906145a1565b60405180910390fd5b5060008060006106508e8d8d8d8d8d8b8b6113ed565b9194509250905061ffff8c168e600073ffffffffffffffffffffffffffffffffffffffff89161580159061069b575060055473ffffffffffffffffffffffffffffffffffffffff1615155b90506000806106ac848688866114b0565b90925090506106bb8287614a87565b9550348611156040518060400160405280600781526020017f4c5a313030303300000000000000000000000000000000000000000000000000815250906107155760405162461bcd60e51b815260040161063191906145a1565b5060006107228734614a9a565b90508015610734576107348d82611510565b811561074557610745858d846115c8565b7f3dc6f2ede34d1db05729bbb76e5efd17ec1bc83f98f665e7fba0596dca438b96888a898560405161077a9493929190614aad565b60405180910390a15050505050505050505050505050505050505050565b6040517f8fd061fc00000000000000000000000000000000000000000000000000000000815261ffff8416600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015263ffffffff831660448301526060917f000000000000000000000000000000000000000000000000000000000000000090911690638fd061fc90606401600060405180830381865afa15801561083f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108679190810190614b55565b50949350505050565b61087861169c565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006108cb8484611703565b905060006108e76108dc8686611715565b63ffffffff16611738565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015261ffff831660248301529192506000917f000000000000000000000000000000000000000000000000000000000000000016906343ea4fa990604401600060405180830381865afa158015610983573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109ab9190810190614cec565b905060026109cc826109bd89896117b6565b6109c78b8b6117d2565b6117fc565b60038111156109dd576109dd614680565b146040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a325760405162461bcd60e51b815260040161063191906145a1565b50610a9282610a4188886119a9565b85610a4c8a8a6119c2565b610a568b8b6119e5565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92506119f5915050565b505050505050565b6040517f560042df00000000000000000000000000000000000000000000000000000000815263ffffffff8084166004830152821660248201526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063560042df90604401600060405180830381865afa158015610b35573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b5d9190810190614d21565b90505b92915050565b610b6e61169c565b60208111156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090610bc75760405162461bcd60e51b815260040161063191906145a1565b5061ffff8216600090815260066020908152604091829020548251808401909352600783527f4c5a3830303030000000000000000000000000000000000000000000000000009183019190915215610c325760405162461bcd60e51b815260040161063191906145a1565b5061ffff909116600090815260066020526040902055565b610c5261169c565b610c5c6000611c18565b565b600080610c6b8585611703565b90506000610c7c6108dc8787611715565b90506000610c8c82848989611c8f565b90506001816003811115610ca257610ca2614680565b14610cb1579250610d89915050565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015261ffff841660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906343ea4fa990604401600060405180830381865afa158015610d4c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d749190810190614cec565b9050610d82818989896117fc565b9450505050505b9392505050565b8251600090815b856060015160ff16811015610de657610dcf8660c001518281518110610dbf57610dbf614d56565b6020026020010151868685610e88565b610dde57600092505050610d89565b600101610d97565b506000856060015160ff16118015610e035750608085015160ff16155b15610e12576001915050610d89565b6000805b866080015160ff16811015610e7b57610e4e8760e001518281518110610e3e57610e3e614d56565b6020026020010151878786610e88565b15610e73578160010191508660a0015160ff168210610e735760019350505050610d89565b600101610e16565b5060009695505050505050565b600083815260208181526040808320858452825280832073ffffffffffffffffffffffffffffffffffffffff8816845290915290205467ffffffffffffffff828116911610155b949350505050565b610edf61169c565b63ffffffff8316600090815260036020526040902061057c828483614e1e565b60036020526000908152604090208054610f1890614d85565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4490614d85565b8015610f915780601f10610f6657610100808354040283529160200191610f91565b820191906000526020600020905b815481529060010190602001808311610f7457829003601f168201915b505050505081565b610fa161169c565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610ff061169c565b73ffffffffffffffffffffffffffffffffffffffff81166110795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610631565b61108281611c18565b50565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331461110f5760405162461bcd60e51b815260040161063191906145a1565b506040517fd59104ed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d59104ed9061118a9088908890889088908890600401614f46565b600060405180830381600087803b1580156111a457600080fd5b505af11580156111b8573d6000803e3d6000fd5b505050505050505050565b6111cd8282611fb2565b6111d78282611510565b6040805133815273ffffffffffffffffffffffffffffffffffffffff841660208201529081018290527f820b7fd51bf79c54350bab98400651b3314ff6e79b33528821871d94a66698839060600160405180910390a15050565b806000808686604051611245929190614f97565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352935281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff949094169390931790925590517fd57606ee258836ec1b40f83a128d2b514581eaf4f71801fbed3bc94b5358ecc0916112e1918790879086908890614fa7565b60405180910390a150505050565b600080600080611300898787612063565b925092505060008060006113158d8d8661216e565b9250925092506113258b8261218d565b8173ffffffffffffffffffffffffffffffffffffffff1663709eb6648d8f8e896040518563ffffffff1660e01b81526004016113649493929190614ff5565b602060405180830381865afa158015611381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a59190615040565b6113af9084614a87565b92506000806113c08f8f878f6121e7565b909250905081156113d8576113d58286614a87565b94505b939e939d50929b505050505050505050505050565b6060806000806114018c8c8c8c8c8c612323565b905061142d7f0000000000000000000000000000000000000000000000000000000000000000826125fb565b925060608061144183606001518989612063565b91975092509050600080806114568685612660565b919450925090506114678388614a87565b60c08701515190975061147a818361218d565b61148f8388606001518960400151848a612687565b6114999089614a87565b975050505050505050985098509895505050505050565b6000806114bf868686866121e7565b909250905081156115075760025473ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604081208054849290611501908490614a87565b90915550505b94509492505050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461156a576040519150601f19603f3d011682016040523d82523d6000602084013e61156f565b606091505b50509050806040518060400160405280600781526020017f4c5a3330303030000000000000000000000000000000000000000000000000008152509061057c5760405162461bcd60e51b815260040161063191906145a1565b6005546002546040517f67f8d2f200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015285831660248201528483166044820152606481018490526084810184905290821660a48201527f0000000000000000000000000000000000000000000000000000000000000000909116906367f8d2f29060c401600060405180830381600087803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b50505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c5c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610631565b6000610b5d61171284846127c0565b90565b6000611725600d60098486615059565b61172e91615083565b60e01c9392505050565b600061ffff8211156117b25760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f36206269747300000000000000000000000000000000000000000000000000006064820152608401610631565b5090565b3660006117c66051828587615059565b915091505b9250929050565b60006117de83836127d0565b6040516117ec929190614f97565b6040518091039020905092915050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090605184146118545760405162461bcd60e51b815260040161063191906145a1565b507f000000000000000000000000000000000000000000000000000000000000000060ff1661188385856127e0565b60ff16146040518060400160405280600781526020017f4c5a313030303700000000000000000000000000000000000000000000000000815250906118db5760405162461bcd60e51b815260040161063191906145a1565b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff1661190d8585612802565b63ffffffff16146040518060400160405280600781526020017f4c5a313030303800000000000000000000000000000000000000000000000000815250906119685760405162461bcd60e51b815260040161063191906145a1565b50600061198d86868660405161197f929190614f97565b604051809103902085610d90565b9050801561199f576002915050610ecf565b6000915050610ecf565b60006119b9602d600d8486615059565b610b5d916150cb565b60006119d2600960018486615059565b6119db91615107565b60c01c9392505050565b3660006117c68360718187615059565b8373ffffffffffffffffffffffffffffffffffffffff163b600003611a92578373ffffffffffffffffffffffffffffffffffffffff168661ffff167feca5e9e3d49c3ee9d9362efa82baa91c668a7f032b3a403638ae65e27368013687868680519060200120604051611a859392919092835267ffffffffffffffff919091166020830152604082015260600190565b60405180910390a3610a92565b61ffff8616600090815260066020526040812054611ab1908790612812565b85604051602001611ac392919061514d565b60408051601f19818403018152908290527fc2fa4813000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063c2fa481390611b4f908a9085908a908a9089908b90600401615197565b600060405180830381600087803b158015611b6957600080fd5b505af1158015611b7d573d6000803e3d6000fd5b5050604080516060808201835261ffff8c1680835260208084018d815267ffffffffffffffff8c8116868801908152875194855291519284019290925251169381019390935273ffffffffffffffffffffffffffffffffffffffff8a169083015292507f2d05fd3bd2a2620dfaf6174f2083d54fbfd9106a4ee93c81238ea5a5f731aede915060800160405180910390a15050505050505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61ffff84166000908152600660205260408120547f0000000000000000000000000000000000000000000000000000000000000000908290611cdb90611cd587876119a9565b90612812565b905060008187604051602001611cf292919061514d565b60405160208183030381529060405290506000611d0f87876119c2565b6040517f71ba2fd600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015291925030918616906371ba2fd690602401602060405180830381865afa158015611d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da49190615205565b73ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a35303030300000000000000000000000000000000000000000000000000081525090611e0f5760405162461bcd60e51b815260040161063191906145a1565b506040517ffdc07c7000000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff86169063fdc07c7090611e67908d908790600401615222565b602060405180830381865afa158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea8919061523f565b90508067ffffffffffffffff168267ffffffffffffffff1611611ed357600295505050505050610ecf565b611ede81600161525c565b67ffffffffffffffff168267ffffffffffffffff161180611f8f57506040517f0eaf6ea600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690630eaf6ea690611f4e908d908790600401615222565b602060405180830381865afa158015611f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8f9190615284565b15611fa257600395505050505050610ecf565b5060019998505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff821615801590611fe65750336000908152600460205260409020548111155b6040518060400160405280600781526020017f4c5a3130303030000000000000000000000000000000000000000000000000008152509061203a5760405162461bcd60e51b815260040161063191906145a1565b50336000908152600460205260408120805483929061205a908490614a9a565b90915550505050565b6060808060008490036121155763ffffffff86166000908152600360205260409020805461209090614d85565b80601f01602080910402602001604051908101604052809291908181526020018280546120bc90614d85565b80156121095780601f106120de57610100808354040283529160200191612109565b820191906000526020600020905b8154815290600101906020018083116120ec57829003601f168201915b5050505050925061214f565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050505b8251156121655761215f836128f7565b90925090505b93509350939050565b600080600061217e86868661290c565b92509250925093509350939050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152818311156121e25760405162461bcd60e51b815260040161063191906145a1565b505050565b600254600090819073ffffffffffffffffffffffffffffffffffffffff1615611507576002546040517fd424422100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015263ffffffff881660248301526044820187905285151560648301529091169063d424422190608401602060405180830381865afa9250505080156122b1575060408051601f3d908101601f191682019092526122ae91810190615040565b60015b156115075783156122c457809150612319565b60006122f07f00000000000000000000000000000000000000000000000000000000000000003a6152a1565b905060008187116123015781612303565b865b90508083116123125782612314565b805b945050505b5094509492505050565b6040805160e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840183905260c084015261ffff8916825260069052919091205461237788878784612a65565b6040517f6fe7b67300000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636fe7b673906123f2908b908d908c908c906004016152b8565b6020604051808303816000875af1158015612411573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612435919061523f565b9050600061244d61244884838a8c615059565b612b60565b90506000827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8d1660405160c09390931b7fffffffffffffffff00000000000000000000000000000000000000000000000016602084015260e091821b7fffffffff00000000000000000000000000000000000000000000000000000000166028840152602c8301528b901b7dffff0000000000000000000000000000000000000000000000000000000016604c820152605081018390526070016040516020818303038152906040528051906020012090506040518060e001604052808467ffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018b61ffff1663ffffffff16815260200183815260200182815260200188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509b9a5050505050505050505050565b8051602080830151604080850151606080870151608088015160a089015160c08a015195519398612649988c989197919673ffffffffffffffffffffffffffffffffffffffff1695016152f2565b604051602081830303815290604052905092915050565b600080600061267a60048587604001518860600151612bdc565b9250925092509250925092565b6040517f717e8a4200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063717e8a42906126e2908890889088908890600401614ff5565b6020604051808303816000875af1158015612701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127259190615040565b905080156127685773ffffffffffffffffffffffffffffffffffffffff861660009081526004602052604081208054839290612762908490614a87565b90915550505b6040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018390527f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a910160405180910390a195945050505050565b60006119b9605160318486615059565b3660006117c68360518187615059565b60006127ef6001828486615059565b6127f8916153b8565b60f81c9392505050565b60006117256031602d8486615059565b6060600082118015612825575060208211155b6040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906128795760405162461bcd60e51b815260040161063191906145a1565b5060008360405160200161288f91815260200190565b60405160208183030381529060405290508267ffffffffffffffff8111156128b9576128b96146f0565b6040519080825280601f01601f1916602001820160405280156128e3576020820181803683370190505b506040939093030151602083015250919050565b60608061290383612d81565b91509150915091565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff8416602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa1580156129b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129d991908101906153fe565b9150915080604001519350806000015163ffffffff16925060008651600014612a205786600081518110612a0f57612a0f614d56565b602002602001015160200151612a31565b604051806020016040528060008152505b9050600080612a3f83612e6c565b91509150612a55858b86602001518e86866131cc565b9750505050505093509350939050565b612a70816014614a87565b60408051808201909152600781527f4c5a3130303030000000000000000000000000000000000000000000000000006020820152908314612ac45760405162461bcd60e51b815260040161063191906145a1565b506000612adb612ad684848188615059565b613369565b90508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a925760405162461bcd60e51b815260040161063191906145a1565b600060208383905011156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090612bbe5760405162461bcd60e51b815260040161063191906145a1565b50612bc982846150cb565b6020929092036008029190911c92915050565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015263ffffffff8316602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612c81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ca991908101906153fe565b9150915080604001519350806000015163ffffffff16925060008851600014612cf05788600081518110612cdf57612cdf614d56565b602002602001015160200151612d01565b604051806020016040528060008152505b9050600080612d0f83612e6c565b915091506060612d288d878c88602001518f88886133d6565b60c088015160e0890151604051939c509193507f4ec2ac8fdaa552cf8e85ded259f20fa01c58d98ceaf21c87f6db54dad6d4ec4992612d69929085906154ff565b60405180910390a15050505050509450945094915050565b606080600080612d9085613685565b915091508051600003612de857604080516000808252602082019092528391612ddc565b604080518082019091526000815260606020820152815260200190600190039081612db45790505b50935093505050915091565b604080516001808252818301909252600091816020015b604080518082019091526000815260606020820152815260200190600190039081612dff5790505090506040518060400160405280600260ff1681526020018381525081600081518110612e5557612e55614d56565b602090810291909101015291959194509092505050565b6060808251600003612e7d57915091565b6000612e888461384a565b90508060ff16600103612f3a5760408051600180825281830190925290816020015b6060815260200190600190039081612eaa5790505092508383600081518110612ed557612ed5614d56565b602090810291909101015260408051600180825281830190925290816020016020820280368337019050509150612f0d8460036139cc565b82600081518110612f2057612f20614d56565b602002602001019060ff16908160ff168152505050915091565b8060ff1667ffffffffffffffff811115612f5657612f566146f0565b604051908082528060200260200182016040528015612f7f578160200160208202803683370190505b5091508060ff1667ffffffffffffffff811115612f9e57612f9e6146f0565b604051908082528060200260200182016040528015612fd157816020015b6060815260200190600190039081612fbc5790505b50925060008060ff5b8651831015613108576001909201916000612ff58885613a32565b905060028401935060028161ffff1610156040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061305a5760405162461bcd60e51b815260040161063191906145a1565b50600061306789866139cc565b90508260ff1660ff03613078578092505b8260ff168160ff16146130cf577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8486030160006130b78b8784613a98565b90506130c58a8a8784613bc0565b5093909301929150815b8161ffff1685019450885185036131015783850360006130f08b8784613a98565b90506130fe8a8a8584613bc0565b50505b5050612fda565b865183146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906131605760405162461bcd60e51b815260040161063191906145a1565b5060005b8460ff168160ff1610156131c257858160ff168151811061318757613187614d56565b6020908102919091010180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff169052600101613164565b5050505050915091565b600080876080015188606001516131e39190615568565b905060005b8160ff1681101561335d57600060608a6060015160ff168310613231578a60e001518b6060015160ff1684038151811061322457613224614d56565b6020026020010151613250565b8a60c00151838151811061324757613247614d56565b60200260200101515b915060005b86518110156132aa578387828151811061327157613271614d56565b602002602001015160ff16036132a25787818151811061329357613293614d56565b602002602001015191506132aa565b600101613255565b506040517f30bb3aac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906330bb3aac90613303908d908d908d908790600401615581565b602060405180830381865afa158015613320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133449190615040565b61334e9086614a87565b945082600101925050506131e8565b50509695505050505050565b60408051808201909152600781527f4c5a3130303039000000000000000000000000000000000000000000000000006020820152600090601483146133c15760405162461bcd60e51b815260040161063191906145a1565b506133cc82846155cc565b60601c9392505050565b600060606000886080015189606001516133f09190615568565b90508060ff1667ffffffffffffffff81111561340e5761340e6146f0565b604051908082528060200260200182016040528015613437578160200160208202803683370190505b5091506000805b8260ff1681101561367657600060608c6060015160ff168310613487578c60e001518d6060015160ff1684038151811061347a5761347a614d56565b60200260200101516134a6565b8c60c00151838151811061349d5761349d614d56565b60200260200101515b9150600088511180156134d457508784815181106134c6576134c6614d56565b602002602001015160ff1683145b156134fb57885160018501948a9181106134f0576134f0614d56565b602002602001015190505b6040517fe4fbd90300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063e4fbd90390613553908f908f908f908790600401615581565b6020604051808303816000875af1158015613572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135969190615040565b8684815181106135a8576135a8614d56565b60200260200101818152505060008684815181106135c8576135c8614d56565b6020026020010151111561366c578583815181106135e8576135e8614d56565b60200260200101518e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461363d9190614a87565b9250508190555085838151811061365657613656614d56565b6020026020010151876136699190614a87565b96505b505060010161343e565b50505097509795505050505050565b60608060006136948482613a32565b905060027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff831601613836578060005b86518310156137d65760006136dc88856139cc565b90508160ff166000036136ed578091505b8160ff168160ff16146137265760006137098985808803613a98565b905061371788888584613d24565b90985096508493509091508190505b60019093019260006137388986613a32565b905060008161ffff16116040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906137965760405162461bcd60e51b815260040161063191906145a1565b508060020161ffff1685019450885185036137cf5760006137ba8a86808903613a98565b90506137c889898584613d24565b9099509750505b50506136c7565b865183146040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061382e5760405162461bcd60e51b815260040161063191906145a1565b505050613843565b6138408286613e3e565b93505b5050915091565b60008060005b835182101561396c57600190910190600061386b8584613a32565b905060028301925060028161ffff1610156040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906138d05760405162461bcd60e51b815260040161063191906145a1565b5060006138dd86856139cc565b905060ff8160ff16106040518060400160405280600781526020017f4c5a3130303131000000000000000000000000000000000000000000000000008152509061393a5760405162461bcd60e51b815260040161063191906145a1565b5060018181019060ff82161b841661395c5760019586019560ff82161b841793505b505061ffff169190910190613850565b835182146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906139c45760405162461bcd60e51b815260040161063191906145a1565b505050919050565b60006139d9826001614a87565b83511015613a295760405162461bcd60e51b815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e6473000000000000000000000000006044820152606401610631565b50016001015190565b6000613a3f826002614a87565b83511015613a8f5760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152606401610631565b50016002015190565b606081613aa681601f614a87565b1015613af45760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610631565b613afe8284614a87565b84511015613b4e5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610631565b606082158015613b6d5760405191506000825260208201604052610867565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613ba6578051835260209283019201613b8e565b5050858452601f01601f1916604052505090509392505050565b60408051808201909152600781527f4c5a313030313100000000000000000000000000000000000000000000000000602082015260ff83811610613c175760405162461bcd60e51b815260040161063191906145a1565b506000613c25836001615568565b905060005b84518160ff161015610a92576000858260ff1681518110613c4d57613c4d614d56565b602002602001015190508060ff168360ff1603613cc857868260ff1681518110613c7957613c79614d56565b602002602001015184604051602001613c93929190615612565b604051602081830303815290604052878360ff1681518110613cb757613cb7614d56565b602002602001018190525050610a92565b8060ff16600003613d135782868360ff1681518110613ce957613ce9614d56565b602002602001019060ff16908160ff168152505083878360ff1681518110613cb757613cb7614d56565b50613d1d81615641565b9050613c2a565b6060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff851601613d8857855115613d7f578583604051602001613d6b929190615612565b604051602081830303815290604052613d81565b825b9550613e34565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff851601613de957845115613de0578483604051602001613dcc929190615612565b604051602081830303815290604052613de2565b825b9450613e34565b604080518082018252600781527f4c5a3130303133000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b815261063191906004016145a1565b5093949293505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff841601613f785781516022146040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090613ec45760405162461bcd60e51b815260040161063191906145a1565b506000613eda613ed5846002614101565b614167565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082018190527e11000000000000000000000000000000000000000000000000000000000000602183015260238201527fffffffffffffffffffffffffffffffff00000000000000000000000000000000608083901b166024820152909150603401604051602081830303815290604052915050610b60565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61ffff8416016140b65760428251118015613fb657506062825111155b6040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061400a5760405162461bcd60e51b815260040161063191906145a1565b50600061401b613ed5846002614101565b9050600061402d613ed5856022614101565b84519091506000907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe0161406386604283613a98565b61406c90615660565b60405160086020938403029190911c925061409d916001916011918391889183916031916002918b918b91016156a2565b6040516020818303038152906040529350505050610b60565b604080518082018252600781527f4c5a4330303030000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b815261063191906004016145a1565b600061410e826020614a87565b8351101561415e5760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e647300000000000000000000006044820152606401610631565b50016020015190565b60006fffffffffffffffffffffffffffffffff8211156117b25760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f32382062697473000000000000000000000000000000000000000000000000006064820152608401610631565b60008083601f84011261420157600080fd5b50813567ffffffffffffffff81111561421957600080fd5b6020830191508360208285010111156117cb57600080fd5b67ffffffffffffffff8116811461108257600080fd5b803561425281614231565b919050565b6000806000806060858703121561426d57600080fd5b843567ffffffffffffffff81111561428457600080fd5b614290878288016141ef565b9095509350506020850135915060408501356142ab81614231565b939692955090935050565b63ffffffff8116811461108257600080fd5b6000602082840312156142da57600080fd5b8135610d89816142b6565b73ffffffffffffffffffffffffffffffffffffffff8116811461108257600080fd5b8035614252816142e5565b60008060006060848603121561432757600080fd5b83359250602084013591506040840135614340816142e5565b809150509250925092565b803561ffff8116811461425257600080fd5b801515811461108257600080fd5b80356142528161435d565b600080600080600080600060a0888a03121561439157600080fd5b61439a8861434b565b965060208801356143aa816142e5565b9550604088013567ffffffffffffffff808211156143c757600080fd5b6143d38b838c016141ef565b909750955060608a013591506143e88261435d565b909350608089013590808211156143fe57600080fd5b5061440b8a828b016141ef565b989b979a50959850939692959293505050565b60008060008060008060008060008060006101008c8e03121561444057600080fd5b6144498c614307565b9a5061445760208d01614247565b995061446560408d0161434b565b985067ffffffffffffffff8060608e0135111561448157600080fd5b6144918e60608f01358f016141ef565b909950975060808d01358110156144a757600080fd5b6144b78e60808f01358f016141ef565b90975095506144c860a08e01614307565b94506144d660c08e01614307565b93508060e08e013511156144e957600080fd5b506144fa8d60e08e01358e016141ef565b81935080925050509295989b509295989b9093969950565b60008060006060848603121561452757600080fd5b6145308461434b565b92506020840135614540816142e5565b929592945050506040919091013590565b60005b8381101561456c578181015183820152602001614554565b50506000910152565b6000815180845261458d816020860160208601614551565b601f01601f19169290920160200192915050565b602081526000610b5d6020830184614575565b6000602082840312156145c657600080fd5b8135610d89816142e5565b6000806000604084860312156145e657600080fd5b833567ffffffffffffffff8111156145fd57600080fd5b614609868287016141ef565b909790965060209590950135949350505050565b6000806040838503121561463057600080fd5b823561463b816142b6565b9150602083013561464b816142b6565b809150509250929050565b6000806040838503121561466957600080fd5b6146728361434b565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600483106146ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715614743576147436146f0565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614772576147726146f0565b604052919050565b60ff8116811461108257600080fd5b80356142528161477a565b600067ffffffffffffffff8211156147ae576147ae6146f0565b5060051b60200190565b600082601f8301126147c957600080fd5b813560206147de6147d983614794565b614749565b82815260059290921b840181019181810190868411156147fd57600080fd5b8286015b84811015614821578035614814816142e5565b8352918301918301614801565b509695505050505050565b60008060006060848603121561484157600080fd5b833567ffffffffffffffff8082111561485957600080fd5b90850190610100828803121561486e57600080fd5b61487661471f565b61487f83614247565b815261488d6020840161436b565b602082015261489e6040840161436b565b60408201526148af60608401614789565b60608201526148c060808401614789565b60808201526148d160a08401614789565b60a082015260c0830135828111156148e857600080fd5b6148f4898286016147b8565b60c08301525060e08301358281111561490c57600080fd5b614918898286016147b8565b60e083015250976020870135975060409096013595945050505050565b6000806000806080858703121561494b57600080fd5b8435614956816142e5565b9350602085013592506040850135915060608501356142ab81614231565b60008060006040848603121561498957600080fd5b8335614994816142b6565b9250602084013567ffffffffffffffff8111156149b057600080fd5b6149bc868287016141ef565b9497909650939450505050565b6000806000806000608086880312156149e157600080fd5b6149ea8661434b565b945060208601356149fa816142e5565b935060408601359250606086013567ffffffffffffffff811115614a1d57600080fd5b614a29888289016141ef565b969995985093965092949392505050565b60008060408385031215614a4d57600080fd5b8235614672816142e5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610b6057610b60614a58565b81810381811115610b6057610b60614a58565b608081526000614ac06080830187614575565b8281036020840152614ad28187614575565b604084019590955250506060015292915050565b600082601f830112614af757600080fd5b815167ffffffffffffffff811115614b1157614b116146f0565b614b246020601f19601f84011601614749565b818152846020838601011115614b3957600080fd5b610ecf826020830160208701614551565b80516142528161435d565b60008060408385031215614b6857600080fd5b825167ffffffffffffffff811115614b7f57600080fd5b614b8b85828601614ae6565b925050602083015161464b8161435d565b805161425281614231565b80516142528161477a565b600082601f830112614bc357600080fd5b81516020614bd36147d983614794565b82815260059290921b84018101918181019086841115614bf257600080fd5b8286015b84811015614821578051614c09816142e5565b8352918301918301614bf6565b60006101008284031215614c2957600080fd5b614c3161471f565b9050614c3c82614b9c565b8152614c4a60208301614b4a565b6020820152614c5b60408301614b4a565b6040820152614c6c60608301614ba7565b6060820152614c7d60808301614ba7565b6080820152614c8e60a08301614ba7565b60a082015260c082015167ffffffffffffffff80821115614cae57600080fd5b614cba85838601614bb2565b60c084015260e0840151915080821115614cd357600080fd5b50614ce084828501614bb2565b60e08301525092915050565b600060208284031215614cfe57600080fd5b815167ffffffffffffffff811115614d1557600080fd5b610ecf84828501614c16565b600060208284031215614d3357600080fd5b815167ffffffffffffffff811115614d4a57600080fd5b610ecf84828501614ae6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680614d9957607f821691505b602082108103614dd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156121e257600081815260208120601f850160051c81016020861015614dff5750805b601f850160051c820191505b81811015610a9257828155600101614e0b565b67ffffffffffffffff831115614e3657614e366146f0565b614e4a83614e448354614d85565b83614dd8565b6000601f841160018114614e9c5760008515614e665750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355614f14565b600083815260209020601f19861690835b82811015614ecd5786850135825560209485019460019092019101614ead565b5086821015614f08577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015263ffffffff84166040820152608060608201526000614f8c608083018486614f1b565b979650505050505050565b8183823760009101908152919050565b73ffffffffffffffffffffffffffffffffffffffff86168152608060208201526000614fd7608083018688614f1b565b67ffffffffffffffff94909416604083015250606001529392505050565b63ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006150366080830184614575565b9695505050505050565b60006020828403121561505257600080fd5b5051919050565b6000808585111561506957600080fd5b8386111561507657600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156150c35780818660040360031b1b83161692505b505092915050565b80356020831015610b60577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156150c35760089490940360031b84901b1690921692915050565b6000835161515f818460208801614551565b60609390931b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190920190815260140192915050565b61ffff8716815260c0602082015260006151b460c0830188614575565b73ffffffffffffffffffffffffffffffffffffffff8716604084015267ffffffffffffffff8616606084015284608084015282810360a08401526151f88185614575565b9998505050505050505050565b60006020828403121561521757600080fd5b8151610d89816142e5565b61ffff83168152604060208201526000610ecf6040830184614575565b60006020828403121561525157600080fd5b8151610d8981614231565b67ffffffffffffffff81811683821601908082111561527d5761527d614a58565b5092915050565b60006020828403121561529657600080fd5b8151610d898161435d565b8082028115828204841417610b6057610b60614a58565b61ffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152606060408201526000615036606083018486614f1b565b7fff000000000000000000000000000000000000000000000000000000000000008960f81b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008860c01b16600182015260007fffffffff00000000000000000000000000000000000000000000000000000000808960e01b16600984015287600d840152808760e01b16602d8401525084603183015283605183015282516153a4816071850160208701614551565b919091016071019998505050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156150c35760019490940360031b84901b1690921692915050565b600080828403608081121561541257600080fd5b835167ffffffffffffffff8082111561542a57600080fd5b61543687838801614c16565b94506060601f198401121561544a57600080fd5b60405192506060830191508282108183111715615469576154696146f0565b50604052602084015161547b816142b6565b8152604084015161548b81614231565b6020820152606084015161549e816142e5565b6040820152919491935090915050565b600081518084526020808501945080840160005b838110156154f457815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016154c2565b509495945050505050565b60608152600061551260608301866154ae565b60208382038185015261552582876154ae565b8481036040860152855180825282870193509082019060005b8181101561555a5784518352938301939183019160010161553e565b509098975050505050505050565b60ff8181168382160190811115610b6057610b60614a58565b63ffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006150366080830184614575565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156150c35760149490940360031b84901b1690921692915050565b60008351615624818460208801614551565b835190830190615638818360208801614551565b01949350505050565b600060ff821660ff810361565757615657614a58565b60010192915050565b80516020808301519190811015614dd2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b60007fff00000000000000000000000000000000000000000000000000000000000000808c60f81b1683527fffff000000000000000000000000000000000000000000000000000000000000808c60f01b166001850152818b60f81b1660038501527fffffffffffffffffffffffffffffffff000000000000000000000000000000008a60801b166004850152818960f81b166014850152808860f01b16601585015250808660f81b16601784015250615783601883018560801b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000169052565b5060288101919091526048019897505050505050505056fea26469706673582212204a46a6237f130b21d05c7fec335fe407e48609f92462e5ab7d81ea1ff3fe4de164736f6c63430008130033",
  "devdoc": {
    "details": "ULN301 will be deployed on EndpointV1 and is for backward compatability with ULN302 on EndpointV2. 301 can talk to both 301 and 302",
    "kind": "dev",
    "methods": {
      "deliver(bytes,uint256)": {
        "details": "in 301, this is equivalent to execution as in Endpoint V2dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable."
      },
      "deliverable(bytes,bytes32)": {
        "details": "keeping the same interface as 302a deliverable message requires it to be endpoint deliverable and ULN deliverable"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": {
        "details": "requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13715,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "hashLookup",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))"
      },
      {
        "astId": 5168,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10253,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10257,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "defaultOptions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_bytes_storage)"
      },
      {
        "astId": 10261,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "fees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17629,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "layerZeroToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 17633,
        "contract": "contracts/uln/uln301/UltraLightNode301.sol:UltraLightNode301",
        "label": "addressSizes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint64)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(address => uint64)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))"
      },
      "t_mapping(t_uint32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}