{
  "address": "0x5528593912B9Ca5caB963565e970751B587E9335",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "quorum",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "defaultMultiplierBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IVerifierFeeLib.FeeParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            }
          ],
          "internalType": "struct IVerifier.DstConfig",
          "name": "_dstConfig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "confirmations",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "quorum",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "defaultMultiplierBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct IVerifierFeeLib.FeeParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            }
          ],
          "internalType": "struct IVerifier.DstConfig",
          "name": "_dstConfig",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getFeeOnSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb533159199f8b3533c29d57be37edf6c15fefdc69d3859cc62291a27483fdd25",
  "receipt": {
    "to": null,
    "from": "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6",
    "contractAddress": "0x5528593912B9Ca5caB963565e970751B587E9335",
    "transactionIndex": 2,
    "gasUsed": "620570",
    "logsBloom": "0x
    "blockHash": "0x2a42fab1a85f4c232c1c622265c29170c73eedf00741289a0fdb3033c1cb4c85",
    "transactionHash": "0xb533159199f8b3533c29d57be37edf6c15fefdc69d3859cc62291a27483fdd25",
    "logs": [],
    "blockNumber": 24270561,
    "cumulativeGasUsed": "941119",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "23618ae04a8987a244e2ff990cbbeac7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quorum\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"defaultMultiplierBps\",\"type\":\"uint16\"}],\"internalType\":\"struct IVerifierFeeLib.FeeParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"}],\"internalType\":\"struct IVerifier.DstConfig\",\"name\":\"_dstConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quorum\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"defaultMultiplierBps\",\"type\":\"uint16\"}],\"internalType\":\"struct IVerifierFeeLib.FeeParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"}],\"internalType\":\"struct IVerifier.DstConfig\",\"name\":\"_dstConfig\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getFeeOnSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)\":{\"details\":\"get fee view function\",\"params\":{\"\":\"//_options options\",\"_dstConfig\":\"dst config\",\"_params\":\"fee params\"}},\"getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)\":{\"details\":\"get fee function that can change state. e.g. paying priceFeed\",\"params\":{\"\":\"//_options options\",\"_dstConfig\":\"dst config\",\"_params\":\"fee params\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uln/VerifierFeeLib.sol\":\"VerifierFeeLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint _start) internal pure returns (address) {\\n        unchecked {\\n            uint end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6984a7e7f292ec4533ac684583e5d0505bee3bc4348776072413ceb521a6acc8\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // Invalid Argument (http: 400)\\n    string internal constant INVALID_ARGUMENT = \\\"LZ10000\\\";\\n    string internal constant ONLY_REGISTERED = \\\"LZ10001\\\";\\n    string internal constant ONLY_REGISTERED_OR_DEFAULT = \\\"LZ10002\\\";\\n    string internal constant INVALID_AMOUNT = \\\"LZ10003\\\";\\n    string internal constant INVALID_NONCE = \\\"LZ10004\\\";\\n    string internal constant SAME_VALUE = \\\"LZ10005\\\";\\n    string internal constant UNSORTED = \\\"LZ10006\\\";\\n    string internal constant INVALID_VERSION = \\\"LZ10007\\\";\\n    string internal constant INVALID_EID = \\\"LZ10008\\\";\\n    string internal constant INVALID_SIZE = \\\"LZ10009\\\";\\n    string internal constant ONLY_NON_DEFAULT = \\\"LZ10010\\\";\\n    string internal constant INVALID_VERIFIERS = \\\"LZ10011\\\";\\n    string internal constant DUPLICATED = \\\"LZ10012\\\";\\n    string internal constant INVALID_WORKER_ID = \\\"LZ10013\\\";\\n\\n    // Out of Range (http: 400)\\n    string internal constant OUT_OF_RANGE = \\\"LZ20000\\\";\\n\\n    // Invalid State (http: 400)\\n    string internal constant INVALID_STATE = \\\"LZ30000\\\";\\n    string internal constant SEND_REENTRANCY = \\\"LZ30001\\\";\\n    string internal constant RECEIVE_REENTRANCY = \\\"LZ30002\\\";\\n    string internal constant COMPOSE_REENTRANCY = \\\"LZ30003\\\";\\n\\n    // Permission Denied (http: 403)\\n    string internal constant PERMISSION_DENIED = \\\"LZ50000\\\";\\n\\n    // Not Found (http: 404)\\n    string internal constant NOT_FOUND = \\\"LZ60000\\\";\\n\\n    // Already Exists (http: 409)\\n    string internal constant ALREADY_EXISTS = \\\"LZ80000\\\";\\n\\n    // Not Implemented (http: 501)\\n    string internal constant NOT_IMPLEMENTED = \\\"LZC0000\\\";\\n    string internal constant UNSUPPORTED_INTERFACE = \\\"LZC0001\\\";\\n\\n    // Unavailable (http: 503)\\n    string internal constant UNAVAILABLE = \\\"LZD0000\\\";\\n    string internal constant NATIVE_COIN_UNAVAILABLE = \\\"LZD0001\\\";\\n    string internal constant TOKEN_UNAVAILABLE = \\\"LZD0002\\\";\\n    string internal constant DEFAULT_LIBRARY_UNAVAILABLE = \\\"LZD0003\\\";\\n    string internal constant VERIFIERS_UNAVAILABLE = \\\"LZD0004\\\";\\n}\\n\",\"keccak256\":\"0x00c68dee6968a14fa9a120a7447a3f568379c86f2a59d363e902128d4f361a6e\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.19;\\n\\nlibrary BitMaps {\\n    type BitMap256 is uint;\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << (index & 0xff);\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << (index & 0xff);\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0x29b1fb7dda9d3d6a699938da8610c0aa58d2eeb4244c6889a657eaf24117ac8e\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroPriceFeed {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 20, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^20 = 10 ^ 30.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint32 eid;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint32 eid;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    function nativeTokenPriceUSD() external view returns (uint128);\\n\\n    function getFee(uint32 _dstEid, uint _callDataSize, uint _gas) external returns (uint);\\n\\n    function getPrice(uint32 _dstEid) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n\\n    function estimateFeeByEid(\\n        uint32 _dstEid,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external view returns (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n\\n    function estimateFeeOnSend(\\n        uint32 _dstEid,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external payable returns (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n}\\n\",\"keccak256\":\"0x110a23e06954a46cb8db6fcb8b40d1d1bd395a74a7d861daa48999ab5c2114a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWorker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWorker {\\n    event SetWorkerLib(address workerLib);\\n    event SetPriceFeed(address priceFeed);\\n    event SetDefaultMultiplierBps(uint16 multiplierBps);\\n    event Withdraw(address lib, address to, uint amount);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function priceFeed() external view returns (address);\\n\\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external;\\n\\n    function defaultMultiplierBps() external view returns (uint16);\\n\\n    function withdrawFee(address _lib, address _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xa3b5b849fe4643c969557baf7b6cc330eb2e734b3c1d49ffdbb75037d94eb538\",\"license\":\"BUSL-1.1\"},\"contracts/uln/VerifierFeeLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\n\\nimport \\\"../interfaces/ILayerZeroPriceFeed.sol\\\";\\nimport \\\"./interfaces/IVerifier.sol\\\";\\nimport \\\"./interfaces/IVerifierFeeLib.sol\\\";\\nimport \\\"./libs/VerifierOptions.sol\\\";\\n\\ncontract VerifierFeeLib is IVerifierFeeLib {\\n    using BitMaps for BitMaps.BitMap256;\\n    using VerifierOptions for bytes;\\n\\n    uint16 internal constant EXECUTE_FIXED_BYTES = 68; // encoded: funcSigHash + params -> 4  + (32 * 2)\\n    uint16 internal constant SIGNATURE_RAW_BYTES = 65; // not encoded\\n    // callData(updateHash) = 132 (4 + 32 * 4), padded to 32 = 160 and encoded as bytes with an 64 byte overhead = 224\\n    uint16 internal constant UPDATE_HASH_BYTES = 224;\\n    uint internal constant NATIVE_DECIMALS_RATE = 1e18;\\n\\n    // ========================= External =========================\\n\\n    /// @dev get fee function that can change state. e.g. paying priceFeed\\n    /// @param _params fee params\\n    /// @param _dstConfig dst config\\n    /// @param //_options options\\n    function getFeeOnSend(\\n        FeeParams memory _params,\\n        IVerifier.DstConfig memory _dstConfig,\\n        bytes memory /* _options */\\n    ) external returns (uint) {\\n        uint callDataSize = _getCallDataSize(_params.quorum);\\n\\n        uint priceFeedFee = ILayerZeroPriceFeed(_params.priceFeed).getFee(_params.dstEid, callDataSize, _dstConfig.gas);\\n        (uint fee, , , uint128 nativePriceUSD) = ILayerZeroPriceFeed(_params.priceFeed).estimateFeeOnSend{\\n            value: priceFeedFee\\n        }(_params.dstEid, callDataSize, _dstConfig.gas);\\n\\n        return\\n            _applyPremium(\\n                fee,\\n                _dstConfig.multiplierBps,\\n                _params.defaultMultiplierBps,\\n                _dstConfig.floorMarginUSD,\\n                nativePriceUSD\\n            );\\n    }\\n\\n    // ========================= View =========================\\n\\n    /// @dev get fee view function\\n    /// @param _params fee params\\n    /// @param _dstConfig dst config\\n    /// @param //_options options\\n    function getFee(\\n        FeeParams calldata _params,\\n        IVerifier.DstConfig calldata _dstConfig,\\n        bytes calldata /* _options */\\n    ) external view returns (uint) {\\n        uint callDataSize = _getCallDataSize(_params.quorum);\\n        (uint fee, , , uint128 nativePriceUSD) = ILayerZeroPriceFeed(_params.priceFeed).estimateFeeByEid(\\n            _params.dstEid,\\n            callDataSize,\\n            _dstConfig.gas\\n        );\\n        return\\n            _applyPremium(\\n                fee,\\n                _dstConfig.multiplierBps,\\n                _params.defaultMultiplierBps,\\n                _dstConfig.floorMarginUSD,\\n                nativePriceUSD\\n            );\\n    }\\n\\n    // ========================= Internal =========================\\n\\n    function _getCallDataSize(uint _quorum) internal pure returns (uint) {\\n        uint totalSignatureBytes = _quorum * SIGNATURE_RAW_BYTES;\\n        if (totalSignatureBytes % 32 != 0) {\\n            totalSignatureBytes = totalSignatureBytes - (totalSignatureBytes % 32) + 32;\\n        }\\n        // getFee should charge on execute(updateHash)\\n        // totalSignatureBytesPadded also has 64 overhead for bytes\\n        return uint(EXECUTE_FIXED_BYTES) + UPDATE_HASH_BYTES + totalSignatureBytes + 64;\\n    }\\n\\n    function _applyPremium(\\n        uint _fee,\\n        uint16 _bps,\\n        uint16 _defaultBps,\\n        uint128 _marginUSD,\\n        uint128 _nativePriceUSD\\n    ) internal pure returns (uint) {\\n        uint16 multiplierBps = _bps == 0 ? _defaultBps : _bps;\\n\\n        uint feeWithMultiplier = (_fee * multiplierBps) / 10000;\\n        if (_nativePriceUSD == 0 || _marginUSD == 0) {\\n            return feeWithMultiplier;\\n        }\\n\\n        uint feeWithFloorMargin = _fee + (_marginUSD * NATIVE_DECIMALS_RATE) / _nativePriceUSD;\\n\\n        return feeWithFloorMargin > feeWithMultiplier ? feeWithFloorMargin : feeWithMultiplier;\\n    }\\n\\n    // todo: add to getFee and getFeeOnSend\\n    function _decodeVerifierOptions(bytes calldata _options) internal pure returns (uint totalFee) {\\n        BitMaps.BitMap256 bitmap;\\n        uint cursor;\\n\\n        while (cursor < _options.length) {\\n            (uint8 optionType, , uint newCursor) = _options.nextVerifierOption(cursor);\\n            cursor = newCursor;\\n\\n            // check if option type is duplicated\\n            require(!bitmap.get(optionType), Errors.DUPLICATED);\\n            bitmap = bitmap.set(optionType);\\n\\n            if (optionType == VerifierOptions.OPTION_TYPE_PRECRIME) {\\n                totalFee += 100; //todo: confirm fee\\n            } else {\\n                revert(\\\"VerifierFeeLib: invalid option type\\\");\\n            }\\n        }\\n        require(cursor == _options.length, Errors.INVALID_SIZE);\\n    }\\n}\\n\",\"keccak256\":\"0xe3b50251712fab0a5c2c426ddc589a561ee51ba3fca6cdc1f957b608b7caeb1e\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/ILayerZeroVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroVerifier {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function assignJob(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external payable returns (uint fee);\\n\\n    // @notice query the verifier fee for relaying block information to the destination chain\\n    // @param _dstEid the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view returns (uint fee);\\n}\\n\",\"keccak256\":\"0x1b67dc834fa9d7148bc6a7261c14ab50cb70dd3fbf34191cfefdb747bfcb4f28\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IWorker.sol\\\";\\nimport \\\"./ILayerZeroVerifier.sol\\\";\\n\\ninterface IVerifier is IWorker, ILayerZeroVerifier {\\n    struct DstConfigParam {\\n        uint32 dstEid;\\n        uint64 gas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD;\\n    }\\n\\n    struct DstConfig {\\n        uint64 gas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD; // uses priceFeed PRICE_RATIO_DENOMINATOR\\n    }\\n\\n    event AssignJob(uint32 dstEid, address oapp, uint64 confirmations, uint totalFee);\\n    event SetDstConfig(DstConfigParam[] params);\\n\\n    function dstConfig(uint32 _dstEid) external view returns (uint64, uint16, uint128);\\n}\\n\",\"keccak256\":\"0xd69af95b2050a711986309e2b553e0b617c0312f1f8e23efd53c848323f2a962\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/IVerifierFeeLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IVerifier.sol\\\";\\n\\ninterface IVerifierFeeLib {\\n    struct FeeParams {\\n        address priceFeed;\\n        uint32 dstEid;\\n        uint64 confirmations;\\n        address sender;\\n        uint64 quorum;\\n        uint16 defaultMultiplierBps;\\n    }\\n\\n    function getFeeOnSend(\\n        FeeParams memory _params,\\n        IVerifier.DstConfig memory _dstConfig,\\n        bytes memory _options\\n    ) external returns (uint fee);\\n\\n    function getFee(\\n        FeeParams calldata _params,\\n        IVerifier.DstConfig calldata _dstConfig,\\n        bytes calldata _options\\n    ) external view returns (uint fee);\\n}\\n\",\"keccak256\":\"0xa8ac802e58403a8455b61e4e0b63d179223c0299de91069210c4b84f2026b15f\",\"license\":\"BUSL-1.1\"},\"contracts/uln/libs/VerifierOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary VerifierOptions {\\n    using BitMaps for BitMaps.BitMap256;\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    /// @dev group verifier options by its idx\\n    /// @param _options [verifier_id][verifier_option][verifier_id][verifier_option]...\\n    ///        verifier_option = [option_size][verifier_idx][option_type][option]\\n    ///        option_size = len(verifier_idx) + len(option_type) + len(option)\\n    ///        verifier_id: uint8, verifier_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return verifierOptions the grouped options, still share the same format of _options\\n    /// @return verifierIndices the verifier indices\\n    function groupVerifierOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory verifierOptions, uint8[] memory verifierIndices) {\\n        if (_options.length == 0) return (verifierOptions, verifierIndices);\\n\\n        uint8 numVerifiers = getNumVerifiers(_options);\\n\\n        // if there is only 1 verifier, we can just return the whole options\\n        if (numVerifiers == 1) {\\n            verifierOptions = new bytes[](1);\\n            verifierOptions[0] = _options;\\n\\n            verifierIndices = new uint8[](1);\\n            verifierIndices[0] = _options.toUint8(3); // verifier idx\\n            return (verifierOptions, verifierIndices);\\n        }\\n\\n        // otherwise, we need to group the options by verifier_idx\\n        verifierIndices = new uint8[](numVerifiers);\\n        verifierOptions = new bytes[](numVerifiers);\\n        unchecked {\\n            uint cursor;\\n            uint start;\\n            uint8 lastVerifierIdx = 255; // 255 is an invalid verifier_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                require(optionLength >= 2, Errors.INVALID_SIZE); // at least 1 byte for option_type and 1 byte for verifier_idx\\n\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                if (lastVerifierIdx == 255) {\\n                    lastVerifierIdx = verifierIdx;\\n                }\\n\\n                // verifierIdx must equal to the lastVerifierIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the the scan finds a different lastVerifierIdx\\n                if (verifierIdx != lastVerifierIdx) {\\n                    uint size = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory op = _options.slice(start, size);\\n                    _insertVerifierOptions(verifierOptions, verifierIndices, lastVerifierIdx, op);\\n\\n                    // reset the start and lastVerifierIdx\\n                    start += size;\\n                    lastVerifierIdx = verifierIdx;\\n                }\\n\\n                cursor += optionLength;\\n\\n                // if we have reached the end of the options, we need to process the last verifier\\n                if (cursor == _options.length) {\\n                    uint size = cursor - start;\\n                    bytes memory op = _options.slice(start, size);\\n                    _insertVerifierOptions(verifierOptions, verifierIndices, verifierIdx, op);\\n                }\\n            }\\n            require(cursor == _options.length, Errors.INVALID_SIZE);\\n\\n            // revert verifierIndices to start from 0\\n            for (uint8 i = 0; i < numVerifiers; ++i) {\\n                --verifierIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertVerifierOptions(\\n        bytes[] memory _verifierOptions,\\n        uint8[] memory _verifierIndices,\\n        uint8 _verifierIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // verifierIdx starts from 0 but default value of verifierIndices is 0, so we tell if the slot is empty by adding 1 to verifierIdx\\n        require(_verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n        uint8 verifierIdxAdj = _verifierIdx + 1;\\n\\n        for (uint8 j = 0; j < _verifierIndices.length; ++j) {\\n            uint8 index = _verifierIndices[j];\\n            if (verifierIdxAdj == index) {\\n                _verifierOptions[j] = abi.encodePacked(_verifierOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this verifier\\n                _verifierIndices[j] = verifierIdxAdj;\\n                _verifierOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique verifiers\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    function getNumVerifiers(bytes memory _options) internal pure returns (uint8 numVerifiers) {\\n        uint cursor;\\n        BitMaps.BitMap256 bitmap;\\n\\n        // find number of unique verifier_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                require(optionLength >= 2, Errors.INVALID_SIZE); // at least 1 byte for verifier_idx and 1 byte for option_type\\n\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                // verifierIdx starts from 0, add one for bitmap check/set\\n                require(verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n                uint8 verifierIdxAdj = verifierIdx + 1;\\n\\n                // if verifierIdx is not set, increment numVerifiers\\n                if (!bitmap.get(verifierIdxAdj)) {\\n                    ++numVerifiers;\\n                    bitmap = bitmap.set(verifierIdxAdj);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        require(cursor == _options.length, Errors.INVALID_SIZE);\\n    }\\n\\n    /// @dev decode the next verifier option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextVerifierOption(\\n        bytes calldata _options,\\n        uint _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip verifier_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint startCursor = cursor + 2; // skip option type and verifier_idx\\n            uint endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x64ce5ceb89a26cdcddd34f2d90838cc41de88beb510c810247648de085492b31\",\"license\":\"BUSL-1.1\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a4d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637bfa20a91461003b578063df2b057e14610060575b600080fd5b61004e6100493660046104ca565b610073565b60405190815260200160405180910390f35b61004e61006e366004610787565b6101c7565b60008061009861008960a0880160808901610857565b67ffffffffffffffff1661037c565b90506000806100aa6020890189610872565b73ffffffffffffffffffffffffffffffffffffffff166388a4124c6100d560408b0160208c0161088d565b856100e360208c018c610857565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815263ffffffff939093166004840152602483019190915267ffffffffffffffff166044820152606401608060405180830381865afa158015610154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017891906108a8565b9350505091506101bb8288602001602081019061019591906108fd565b6101a560c08c0160a08d016108fd565b6101b560608c0160408d01610918565b856103e8565b98975050505050505050565b6000806101e1856080015167ffffffffffffffff1661037c565b8551602087015186516040517f11f2c34300000000000000000000000000000000000000000000000000000000815263ffffffff90921660048301526024820184905267ffffffffffffffff16604482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906311f2c343906064016020604051808303816000875af115801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610935565b8651602088015187516040517fc1723a1d00000000000000000000000000000000000000000000000000000000815263ffffffff90921660048301526024820186905267ffffffffffffffff166044820152919250600091829173ffffffffffffffffffffffffffffffffffffffff169063c1723a1d90859060640160806040518083038185885af1158015610338573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061035d91906108a8565b9350505091506101bb8288602001518a60a001518a60400151856103e8565b60008061038a60418461097d565b90506103976020826109c9565b156103bf576103a76020826109c9565b6103b190826109dd565b6103bc9060206109f0565b90505b806103cc60e060446109f0565b6103d691906109f0565b6103e19060406109f0565b9392505050565b60008061ffff8616156103fb57856103fd565b845b9050600061271061041261ffff84168a61097d565b61041c9190610a03565b90506fffffffffffffffffffffffffffffffff8416158061044d57506fffffffffffffffffffffffffffffffff8516155b1561045b5791506104c19050565b6000846fffffffffffffffffffffffffffffffff16670de0b6b3a7640000876fffffffffffffffffffffffffffffffff16610496919061097d565b6104a09190610a03565b6104aa908a6109f0565b90508181116104b957816104bb565b805b93505050505b95945050505050565b6000806000808486036101408112156104e257600080fd5b60c08112156104f057600080fd5b85945060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408201121561052357600080fd5b5060c08501925061012085013567ffffffffffffffff8082111561054657600080fd5b818701915087601f83011261055a57600080fd5b81358181111561056957600080fd5b88602082850101111561057b57600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156105dc576105dc61058a565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461060657600080fd5b919050565b803563ffffffff8116811461060657600080fd5b803567ffffffffffffffff8116811461060657600080fd5b803561ffff8116811461060657600080fd5b6fffffffffffffffffffffffffffffffff8116811461066757600080fd5b50565b60006060828403121561067c57600080fd5b6040516060810181811067ffffffffffffffff8211171561069f5761069f61058a565b6040529050806106ae8361061f565b81526106bc60208401610637565b602082015260408301356106cf81610649565b6040919091015292915050565b600082601f8301126106ed57600080fd5b813567ffffffffffffffff808211156107085761070861058a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561074e5761074e61058a565b8160405283815286602085880101111561076757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600083850361014081121561079e57600080fd5b60c08112156107ac57600080fd5b506107b56105b9565b6107be856105e2565b81526107cc6020860161060b565b60208201526107dd6040860161061f565b60408201526107ee606086016105e2565b60608201526107ff6080860161061f565b608082015261081060a08601610637565b60a082015292506108248560c0860161066a565b915061012084013567ffffffffffffffff81111561084157600080fd5b61084d868287016106dc565b9150509250925092565b60006020828403121561086957600080fd5b6103e18261061f565b60006020828403121561088457600080fd5b6103e1826105e2565b60006020828403121561089f57600080fd5b6103e18261060b565b600080600080608085870312156108be57600080fd5b8451935060208501516108d081610649565b60408601519093506108e181610649565b60608601519092506108f281610649565b939692955090935050565b60006020828403121561090f57600080fd5b6103e182610637565b60006020828403121561092a57600080fd5b81356103e181610649565b60006020828403121561094757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176109945761099461094e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826109d8576109d861099a565b500690565b818103818111156109945761099461094e565b808201808211156109945761099461094e565b600082610a1257610a1261099a565b50049056fea2646970667358221220aacf4aeb7f3b10efb8d3086cb34d2fd939ae3b69c13a8317b5989e3e3497a6bb64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80637bfa20a91461003b578063df2b057e14610060575b600080fd5b61004e6100493660046104ca565b610073565b60405190815260200160405180910390f35b61004e61006e366004610787565b6101c7565b60008061009861008960a0880160808901610857565b67ffffffffffffffff1661037c565b90506000806100aa6020890189610872565b73ffffffffffffffffffffffffffffffffffffffff166388a4124c6100d560408b0160208c0161088d565b856100e360208c018c610857565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815263ffffffff939093166004840152602483019190915267ffffffffffffffff166044820152606401608060405180830381865afa158015610154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017891906108a8565b9350505091506101bb8288602001602081019061019591906108fd565b6101a560c08c0160a08d016108fd565b6101b560608c0160408d01610918565b856103e8565b98975050505050505050565b6000806101e1856080015167ffffffffffffffff1661037c565b8551602087015186516040517f11f2c34300000000000000000000000000000000000000000000000000000000815263ffffffff90921660048301526024820184905267ffffffffffffffff16604482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906311f2c343906064016020604051808303816000875af115801561027a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029e9190610935565b8651602088015187516040517fc1723a1d00000000000000000000000000000000000000000000000000000000815263ffffffff90921660048301526024820186905267ffffffffffffffff166044820152919250600091829173ffffffffffffffffffffffffffffffffffffffff169063c1723a1d90859060640160806040518083038185885af1158015610338573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061035d91906108a8565b9350505091506101bb8288602001518a60a001518a60400151856103e8565b60008061038a60418461097d565b90506103976020826109c9565b156103bf576103a76020826109c9565b6103b190826109dd565b6103bc9060206109f0565b90505b806103cc60e060446109f0565b6103d691906109f0565b6103e19060406109f0565b9392505050565b60008061ffff8616156103fb57856103fd565b845b9050600061271061041261ffff84168a61097d565b61041c9190610a03565b90506fffffffffffffffffffffffffffffffff8416158061044d57506fffffffffffffffffffffffffffffffff8516155b1561045b5791506104c19050565b6000846fffffffffffffffffffffffffffffffff16670de0b6b3a7640000876fffffffffffffffffffffffffffffffff16610496919061097d565b6104a09190610a03565b6104aa908a6109f0565b90508181116104b957816104bb565b805b93505050505b95945050505050565b6000806000808486036101408112156104e257600080fd5b60c08112156104f057600080fd5b85945060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408201121561052357600080fd5b5060c08501925061012085013567ffffffffffffffff8082111561054657600080fd5b818701915087601f83011261055a57600080fd5b81358181111561056957600080fd5b88602082850101111561057b57600080fd5b95989497505060200194505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156105dc576105dc61058a565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461060657600080fd5b919050565b803563ffffffff8116811461060657600080fd5b803567ffffffffffffffff8116811461060657600080fd5b803561ffff8116811461060657600080fd5b6fffffffffffffffffffffffffffffffff8116811461066757600080fd5b50565b60006060828403121561067c57600080fd5b6040516060810181811067ffffffffffffffff8211171561069f5761069f61058a565b6040529050806106ae8361061f565b81526106bc60208401610637565b602082015260408301356106cf81610649565b6040919091015292915050565b600082601f8301126106ed57600080fd5b813567ffffffffffffffff808211156107085761070861058a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561074e5761074e61058a565b8160405283815286602085880101111561076757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600083850361014081121561079e57600080fd5b60c08112156107ac57600080fd5b506107b56105b9565b6107be856105e2565b81526107cc6020860161060b565b60208201526107dd6040860161061f565b60408201526107ee606086016105e2565b60608201526107ff6080860161061f565b608082015261081060a08601610637565b60a082015292506108248560c0860161066a565b915061012084013567ffffffffffffffff81111561084157600080fd5b61084d868287016106dc565b9150509250925092565b60006020828403121561086957600080fd5b6103e18261061f565b60006020828403121561088457600080fd5b6103e1826105e2565b60006020828403121561089f57600080fd5b6103e18261060b565b600080600080608085870312156108be57600080fd5b8451935060208501516108d081610649565b60408601519093506108e181610649565b60608601519092506108f281610649565b939692955090935050565b60006020828403121561090f57600080fd5b6103e182610637565b60006020828403121561092a57600080fd5b81356103e181610649565b60006020828403121561094757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176109945761099461094e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826109d8576109d861099a565b500690565b818103818111156109945761099461094e565b808201808211156109945761099461094e565b600082610a1257610a1261099a565b50049056fea2646970667358221220aacf4aeb7f3b10efb8d3086cb34d2fd939ae3b69c13a8317b5989e3e3497a6bb64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": {
        "details": "get fee view function",
        "params": {
          "": "//_options options",
          "_dstConfig": "dst config",
          "_params": "fee params"
        }
      },
      "getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)": {
        "details": "get fee function that can change state. e.g. paying priceFeed",
        "params": {
          "": "//_options options",
          "_dstConfig": "dst config",
          "_params": "fee params"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}