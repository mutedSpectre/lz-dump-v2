{
  "address": "0x8984fBd2AdB3ea088C0bE13c72e8bF847192b400",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "code",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "SimulateRevert",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "remoteEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "remoteAddress",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "trusted",
          "type": "bool"
        }
      ],
      "name": "SetRemote",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CODE_INTERNAL_REVERT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_MISS_SIMULATE_RESULT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_PACKETS_OVERSIZE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_PACKETS_UNSORTED",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_PRECRIME_FAILURE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_SUCCESS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_VERSION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECRIME_VERSION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "_handleBurntMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "srcAddress",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "_packets",
          "type": "tuple[]"
        }
      ],
      "name": "_simulateAndRevert",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_remoteAddress",
          "type": "bytes32"
        }
      ],
      "name": "assertRemoteAddress",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_types",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_options",
          "type": "bytes[]"
        }
      ],
      "name": "batchIncrement",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "brokenIncrement",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "composedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "srcAddress",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "_packets",
          "type": "tuple[]"
        }
      ],
      "name": "getPrecrimeConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "inboundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "increment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "isAcceptableNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOrdered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_remoteAddress",
          "type": "bytes32"
        }
      ],
      "name": "isRemoteAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "lzCompose",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_srcAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callerParams",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "outboundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pMaxBatchSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pRemoteAddrs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "pRemoteEidToAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pRemoteEids",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "srcAddress",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "_packets",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_simulation",
          "type": "bytes[]"
        }
      ],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "code",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrimeVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_types",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_options",
          "type": "bytes[]"
        }
      ],
      "name": "quoteBatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "remoteAddresses",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "remoteEids",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageLib",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        }
      ],
      "name": "resetConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        }
      ],
      "name": "safeGetRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "remoteAddress",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageLib",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setPrecrimeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_maxBatchSize",
          "type": "uint64"
        }
      ],
      "name": "setPrecrimeMaxBatchSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_remoteEids",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_remoteAddrs",
          "type": "bytes32[]"
        }
      ],
      "name": "setPrecrimeRemoteAddrs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newLib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setReceiveMessageLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "setReceiveMessageLibTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_remoteAddress",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_toBeTrusted",
          "type": "bool"
        }
      ],
      "name": "setRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newLib",
          "type": "address"
        }
      ],
      "name": "setSendMessageLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "srcAddress",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "_packets",
          "type": "tuple[]"
        }
      ],
      "name": "simulate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "code",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "skipInboundNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageLib",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        }
      ],
      "name": "snapshotConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa309fffc239c84fd1cf6ef9ce1a93ea8681f4aa3284ab069c5863839381038e5",
  "receipt": {
    "to": null,
    "from": "0x7ed0222FEF0C668e389D8E38c68aA73ef4EE6B3d",
    "contractAddress": "0x8984fBd2AdB3ea088C0bE13c72e8bF847192b400",
    "transactionIndex": 17,
    "gasUsed": "5435722",
    "logsBloom": "0x
    "blockHash": "0x452b2e3f1e3397ac575be13976faf4926b11cfbc90cb0fec42382ed5c33e807c",
    "transactionHash": "0xa309fffc239c84fd1cf6ef9ce1a93ea8681f4aa3284ab069c5863839381038e5",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 9020727,
        "transactionHash": "0xa309fffc239c84fd1cf6ef9ce1a93ea8681f4aa3284ab069c5863839381038e5",
        "address": "0x8984fBd2AdB3ea088C0bE13c72e8bF847192b400",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007ed0222fef0c668e389d8e38c68aa73ef4ee6b3d"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x452b2e3f1e3397ac575be13976faf4926b11cfbc90cb0fec42382ed5c33e807c"
      }
    ],
    "blockNumber": 9020727,
    "cumulativeGasUsed": "24612473",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6626B4A7073C6517705d36c06F7B5Eab4C349180"
  ],
  "numDeployments": 1,
  "solcInputHash": "d653af02adfb4f7c2d3dcb77cfb070f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"code\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"SimulateRevert\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"remoteEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"remoteAddress\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"SetRemote\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CODE_INTERNAL_REVERT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_MISS_SIMULATE_RESULT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_PACKETS_OVERSIZE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_PACKETS_UNSORTED\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_PRECRIME_FAILURE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_SUCCESS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECRIME_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"_handleBurntMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"}],\"name\":\"_simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_remoteAddress\",\"type\":\"bytes32\"}],\"name\":\"assertRemoteAddress\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_types\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_options\",\"type\":\"bytes[]\"}],\"name\":\"batchIncrement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"brokenIncrement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"composedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"}],\"name\":\"getPrecrimeConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"inboundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"isAcceptableNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOrdered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_remoteAddress\",\"type\":\"bytes32\"}],\"name\":\"isRemoteAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callerParams\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"outboundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pMaxBatchSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pRemoteAddrs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"pRemoteEidToAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pRemoteEids\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_simulation\",\"type\":\"bytes[]\"}],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"code\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrimeVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_types\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_options\",\"type\":\"bytes[]\"}],\"name\":\"quoteBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"remoteAddresses\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remoteEids\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageLib\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"}],\"name\":\"resetConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"}],\"name\":\"safeGetRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"remoteAddress\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageLib\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setPrecrimeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxBatchSize\",\"type\":\"uint64\"}],\"name\":\"setPrecrimeMaxBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_remoteEids\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_remoteAddrs\",\"type\":\"bytes32[]\"}],\"name\":\"setPrecrimeRemoteAddrs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setReceiveMessageLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setReceiveMessageLibTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_remoteAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_toBeTrusted\",\"type\":\"bool\"}],\"name\":\"setRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"}],\"name\":\"setSendMessageLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"code\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"skipInboundNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageLib\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"}],\"name\":\"snapshotConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_simulateAndRevert((uint32,bytes32,uint64,bytes,bytes32,bytes)[])\":{\"details\":\"internal function, no one should call\",\"params\":{\"_packets\":\"packets\"}},\"getPrecrimeConfig((uint32,bytes32,uint64,bytes,bytes32,bytes)[])\":{\"details\":\"get precrime config,\",\"params\":{\"_packets\":\"packets\"},\"returns\":{\"_0\":\"configation bytes\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"precrime((uint32,bytes32,uint64,bytes,bytes32,bytes)[],bytes[])\":{\"details\":\"@param _simulation all simulation results from difference endpoints\",\"returns\":{\"code\":\"    precrime result code; check out the error code defination\",\"reason\":\"  error reason\"}},\"precrimeVersion()\":{\"details\":\"precrime version\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"simulate((uint32,bytes32,uint64,bytes,bytes32,bytes)[])\":{\"details\":\"simulate run cross chain packets and get a simulation result for precrime later.      note: always use callStatic to simulate.\",\"params\":{\"_packets\":\"packets, the packets item should group by srcEid, srcAddress, then sort by nonce\"},\"returns\":{\"code\":\"  simulation result code; see the error code defination\",\"data\":\"the result is use for precrime params\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_handleBurntMessage(uint32,bytes32,uint64,bytes32,bytes)\":{\"notice\":\"function to be called post burning message the app may want to partially apply the message\"},\"setConfig(address,uint32,uint32,bytes)\":{\"notice\":\"----------------------------- UA Config Functions -----------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/OmniCounter.sol\":\"OmniCounter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroComposer {\\n    function lzCompose(\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _caller,\\n        bytes calldata _callerParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x6d6c8228020e75f08e2c4d4fb3e3e270eedf7508e9371955a971bec9f3e6f6c1\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMessageLibManager.sol\\\";\\nimport \\\"./IMessagingComposer.sol\\\";\\n\\ninterface ILayerZeroEndpoint is IMessageLibManager, IMessagingComposer {\\n    struct MessagingParams {\\n        uint32 dstEid;\\n        bytes32 receiver;\\n        bytes message;\\n        bytes options;\\n    }\\n\\n    struct MessagingReceipt {\\n        bytes32 guid;\\n        uint64 nonce;\\n        MessagingFee fee;\\n    }\\n\\n    struct MessagingFee {\\n        uint nativeFee;\\n        uint lzTokenFee;\\n    }\\n\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketDelivered(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address receiveLibrary\\n    );\\n\\n    event PacketReceived(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address caller\\n    );\\n\\n    event LzReceiveFailed(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address caller,\\n        bytes reason\\n    );\\n\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n\\n    event FeePaid(address sender, uint nativeOrAltTokenFee, uint lzTokenFee);\\n\\n    event LayerZeroTokenSet(address token);\\n\\n    function quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        bytes calldata _message,\\n        bool _payInZro,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        address payable _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function sendWithAlt(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        uint _altTokenFee\\n    ) external returns (MessagingReceipt memory);\\n\\n    function deliver(uint32 _srcEid, bytes32 _sender, address _receiver, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function lzReceive(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _callerParams,\\n        bool _tryCatch\\n    ) external payable;\\n\\n    function clear(\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message\\n    ) external returns (bytes32 payloadHash);\\n\\n    function skip(uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function eid() external view returns (uint32);\\n\\n    function setLayerZeroToken(address _layerZeroToken) external;\\n\\n    function layerZeroToken() external view returns (address);\\n\\n    function altFeeToken() external view returns (address);\\n\\n    function getInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function getOutboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function getInboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32, address);\\n\\n    function isReceivingMessage() external view returns (bool);\\n\\n    function getReceiveContext() external view returns (uint32, address);\\n}\\n\",\"keccak256\":\"0x97a6887bc26a0f2a842b2a65d85f6059c5eabad75ce06dae72b9e2c8266e599b\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice indicate the Receiver to receive the message in order or not\\n    function isOrdered() external view returns (bool);\\n\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcEid - the source endpoint identifier\\n    // @param _sender - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    function lzReceive(\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _callerParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x71280cdfede8894c8962438311697f821145c1cf220f4b82b456d3229f3db404\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address oldLib, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address oldLib, address newLib);\\n    event ReceiveLibraryTimoutSet(address receiver, uint32 eid, address oldLib, uint timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function defaultConfig(address _messageLib, uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibrary(uint32 _eid, address _newLib, uint _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(uint32 _eid, address _lib, uint _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function setConfig(address _messageLib, uint32 _eid, uint32 _configType, bytes calldata _config) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _messageLib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function snapshotConfig(address _messageLib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _messageLib, uint32[] calldata _eids) external;\\n}\\n\",\"keccak256\":\"0x349e667ea1885307c0323e84805372ce323bd7b0195aa0a2f9a6f0b41bee968f\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposedMessageDelivered(address receiver, address composer, bytes32 guid, bytes message);\\n    event ComposedMessageReceived(\\n        address receiver,\\n        address composer,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller\\n    );\\n    event LzComposeFailed(\\n        address sender,\\n        address receiver,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller,\\n        bytes reason\\n    );\\n\\n    function deliverComposedMessage(address _composer, bytes32 _guid, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _receiver,\\n        address _composer,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _callerParams,\\n        bool _tryCatch\\n    ) external payable;\\n\\n    function isComposingMessage() external view returns (bool);\\n\\n    function getComposeContext() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5b0c911c9386259ceb30e62be24057a85d3e15c5568fa4fc9aab04c890d4c756\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/Options.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nlibrary Options {\\n    using BytesLib for bytes;\\n\\n    struct WorkerOptions {\\n        uint16 workerId;\\n        bytes options;\\n    }\\n\\n    struct Option {\\n        uint16 optionType;\\n        bytes params;\\n    }\\n\\n    uint16 public constant RELAYER_WORKER_ID = 1; // matches RelayerOptions WORKER_ID\\n\\n    uint16 public constant TYPE_1 = 1; // simple option type 1\\n    uint16 public constant TYPE_2 = 2; // simple option type 2\\n    uint16 public constant TYPE_3 = 3; // cannot overlap with simple option types\\n\\n    /// ======================= Decoding Functions =======================\\n    function decodeOptions(bytes memory _options) internal pure returns (WorkerOptions[] memory) {\\n        uint16 formatType = _options.toUint16(0);\\n        if (formatType == TYPE_1 || formatType == TYPE_2) {\\n            WorkerOptions[] memory options = _convert(formatType, _options);\\n            return options;\\n        }\\n\\n        // new format type 3\\n        // [type3][numWorkers][workerOps][workerOps]...\\n        // [workerOps] -> [workerId][size][options]\\n        if (formatType == 3) {\\n            uint16 numWorkers = _options.toUint16(2);\\n            WorkerOptions[] memory options = new WorkerOptions[](numWorkers);\\n\\n            // parse options for each worker\\n            uint cursor = 4;\\n            uint16 lastWorkerId;\\n            for (uint i = 0; i < uint(numWorkers); i++) {\\n                // must be ascending order\\n                uint16 workerId = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // no duplicated worker id, and the first worker id can be 0 because of enum type\\n                require(i == 0 || workerId > lastWorkerId, \\\"LZ10006\\\");\\n                lastWorkerId = workerId;\\n\\n                // option size\\n                uint16 size = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                options[i] = WorkerOptions(workerId, _options.slice(cursor, size));\\n                cursor += size;\\n            }\\n            require(cursor == _options.length, \\\"LZ10009\\\");\\n            return options;\\n        }\\n\\n        revert(\\\"LZC0000\\\");\\n    }\\n\\n    /// @dev decode worker options\\n    function decodeWorkerOptions(bytes memory _options) internal pure returns (Option[] memory) {\\n        uint cursor = 0;\\n        uint16 numOptions = _options.toUint16(cursor);\\n        cursor += 2;\\n\\n        Option[] memory options = new Option[](numOptions);\\n        uint16 lastOptionType;\\n        for (uint16 i = 0; i < numOptions; i++) {\\n            uint16 optionType = _options.toUint16(cursor);\\n            cursor += 2;\\n            // no duplicated option type\\n            require(optionType > lastOptionType, \\\"LZ10006\\\");\\n            lastOptionType = optionType;\\n\\n            uint16 paramSize = _options.toUint16(cursor);\\n            cursor += 2;\\n\\n            bytes memory param = _options.slice(cursor, paramSize);\\n            cursor += paramSize;\\n            options[i] = Option(optionType, param);\\n        }\\n        return options;\\n    }\\n\\n    // relayer only\\n    // legacy type 1\\n    // bytes  [32      ]\\n    // fields [extraGas]\\n    // legacy type 2\\n    // bytes  [32        32            bytes[]         ]\\n    // fields [extraGas  dstNativeAmt  dstNativeAddress]\\n    function _convert(\\n        uint _optionType,\\n        bytes memory _options\\n    ) private pure returns (WorkerOptions[] memory workerOptions) {\\n        workerOptions = new WorkerOptions[](1);\\n        bytes memory options;\\n\\n        if (_optionType == TYPE_1) {\\n            require(_options.length == 34, \\\"LZ10009\\\");\\n\\n            // execution gas\\n            uint executionGas = _options.toUint256(2);\\n\\n            options = abi.encodePacked(uint16(1)); // option num\\n            options = abi.encodePacked(options, TYPE_1, uint16(32), executionGas);\\n        } else if (_optionType == TYPE_2) {\\n            require(_options.length > 66 && _options.length <= 98, \\\"LZ10009\\\");\\n\\n            // execution gas\\n            uint executionGas = _options.toUint256(2);\\n\\n            // airdrop (amount + receiver)\\n            uint amount = _options.toUint256(34);\\n            uint receiverLen = _options.length - 66;\\n            bytes32 receiver = bytes32(_options.slice(66, receiverLen));\\n            receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\\n            bytes memory airdrop = abi.encodePacked(amount, receiver);\\n\\n            options = abi.encodePacked(uint16(2)); // option num\\n            options = abi.encodePacked(options, TYPE_1, uint16(32), executionGas);\\n            options = abi.encodePacked(options, TYPE_2, uint16(airdrop.length), airdrop);\\n        } else {\\n            revert(\\\"LZC0000\\\");\\n        }\\n\\n        workerOptions[0] = WorkerOptions(RELAYER_WORKER_ID, options);\\n    }\\n\\n    /// ======================= Encoding Functions =======================\\n\\n    function encodeWorkerOptions(Option memory _option) internal pure returns (bytes memory) {\\n        Option[] memory options = new Option[](1);\\n        options[0] = _option;\\n        return encodeWorkerOptions(options);\\n    }\\n\\n    function encodeWorkerOptions(Option[] memory _options) internal pure returns (bytes memory) {\\n        require(_options.length > 0, \\\"LZ10009\\\");\\n        uint16 numOptions = _safeToUint16(_options.length);\\n        bytes memory options = abi.encodePacked(numOptions);\\n\\n        uint16 lastOptionType;\\n        for (uint i = 0; i < numOptions; i++) {\\n            // no duplicated option type\\n            uint16 optionType = _options[i].optionType;\\n            require(i == 0 || optionType > lastOptionType, \\\"LZ10006\\\");\\n            lastOptionType = optionType;\\n\\n            uint16 paramSize = _safeToUint16(_options[i].params.length);\\n            bytes memory option = abi.encodePacked(_options[i].optionType, paramSize, _options[i].params);\\n\\n            options = options.concat(option);\\n        }\\n\\n        return options;\\n    }\\n\\n    function encodeOptions(WorkerOptions[] memory _workerOptions) internal pure returns (bytes memory) {\\n        uint16 numWorkers = _safeToUint16(_workerOptions.length);\\n        bytes memory options = abi.encodePacked(TYPE_3, numWorkers);\\n\\n        uint16 lastWorkerId;\\n        for (uint i = 0; i < numWorkers; i++) {\\n            uint16 workerId = uint16(_workerOptions[i].workerId);\\n            // prevent duplicated worker id\\n            require(i == 0 || workerId > lastWorkerId, \\\"LZ10006\\\");\\n\\n            uint16 optionSize = _safeToUint16(_workerOptions[i].options.length);\\n            options = abi.encodePacked(options, workerId, optionSize, _workerOptions[i].options);\\n\\n            lastWorkerId = workerId;\\n        }\\n\\n        return options;\\n    }\\n\\n    function encodeSimpleOptionsType1(uint _executionGas) internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_1, _executionGas);\\n    }\\n\\n    function encodeSimpleOptionsType2(\\n        uint _executionGas,\\n        uint _amount,\\n        bytes32 _receiver\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_2, _executionGas, _amount, _receiver);\\n    }\\n\\n    /// ======================= Getter Functions =======================\\n\\n    function getWorkerOptionsByWorkerId(\\n        WorkerOptions[] memory _workerOptions,\\n        uint16 _workerId\\n    ) internal pure returns (bool, uint, bytes memory) {\\n        for (uint i = 0; i < _workerOptions.length; i++) {\\n            if (_workerOptions[i].workerId == _workerId) {\\n                return (true, i, _workerOptions[i].options);\\n            }\\n        }\\n        return (false, 0, bytes(\\\"\\\"));\\n    }\\n\\n    function getOptionByOptionType(\\n        Option[] memory _options,\\n        uint16 _optionType\\n    ) internal pure returns (bool, uint, bytes memory) {\\n        for (uint i = 0; i < _options.length; i++) {\\n            if (_options[i].optionType == _optionType) {\\n                return (true, i, _options[i].params);\\n            }\\n        }\\n        return (false, 0, bytes(\\\"\\\"));\\n    }\\n\\n    function getOptionByWorkerIdAndOptionType(\\n        WorkerOptions[] memory _workerOptions,\\n        uint16 _workerId,\\n        uint16 _optionType\\n    ) internal pure returns (bool, bytes memory) {\\n        (bool found, , bytes memory options) = getWorkerOptionsByWorkerId(_workerOptions, _workerId);\\n        if (!found) {\\n            return (false, bytes(\\\"\\\"));\\n        }\\n\\n        (found, , options) = getOptionByOptionType(decodeWorkerOptions(options), _optionType);\\n        return (found, options);\\n    }\\n\\n    function _safeToUint16(uint _value) private pure returns (uint16) {\\n        require(_value <= type(uint16).max, \\\"LZ10009\\\");\\n        return uint16(_value);\\n    }\\n}\\n\",\"keccak256\":\"0xce60119d3aab135c174c03a81517a8e6cc326dd2cd00adf99497807d3f76fea8\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/RelayerOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"./Options.sol\\\";\\n\\nlibrary RelayerOptions {\\n    using BytesLib for bytes;\\n\\n    uint16 public constant WORKER_ID = 1;\\n\\n    uint16 public constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint16 public constant OPTION_TYPE_AIRDROP = 2;\\n    uint16 public constant OPTION_TYPE_LZCOMPOSE = 3;\\n\\n    function decodeLzReceiveParams(bytes memory _params) internal pure returns (uint gas, uint value) {\\n        require(_params.length == 32 || _params.length == 64, \\\"LZ10009\\\");\\n        gas = _params.toUint256(0);\\n        value = _params.length == 64 ? _params.toUint256(32) : 0;\\n    }\\n\\n    function decodeAirdropParams(bytes memory _params) internal pure returns (uint amount, bytes32 receiver) {\\n        require(_params.length == 64, \\\"LZ10009\\\");\\n        amount = _params.toUint256(0);\\n        receiver = _params.toBytes32(32);\\n    }\\n\\n    function decodeLzComposeParams(bytes memory _params) internal pure returns (uint gas, uint value) {\\n        require(_params.length == 64, \\\"LZ10009\\\");\\n        gas = _params.toUint256(0);\\n        value = _params.toUint256(32);\\n    }\\n\\n    function encodeLzReceiveOption(uint _gas, uint _value) internal pure returns (Options.Option memory) {\\n        bytes memory params = _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n        return Options.Option(OPTION_TYPE_LZRECEIVE, params);\\n    }\\n\\n    function encodeAirdropOption(uint _amount, bytes32 _receiver) internal pure returns (Options.Option memory) {\\n        return Options.Option(OPTION_TYPE_AIRDROP, abi.encodePacked(_amount, _receiver));\\n    }\\n\\n    function encodeLzComposeOption(uint _gas, uint _value) internal pure returns (Options.Option memory) {\\n        return Options.Option(OPTION_TYPE_LZCOMPOSE, abi.encodePacked(_gas, _value));\\n    }\\n}\\n\",\"keccak256\":\"0x133bd50ed93293cce6988d20251081c756aa65302b002aff2c9c36ae7cace770\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/Options.sol\\\";\\n\\nimport \\\"./Remote.sol\\\";\\nimport \\\"./interfaces/IOApp.sol\\\";\\n\\nabstract contract OApp is Remote, IOApp {\\n    uint public version = 1;\\n    ILayerZeroEndpoint public immutable endpoint;\\n\\n    constructor(address _endpoint) {\\n        endpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function _quote(\\n        uint32 _eid,\\n        bytes memory _message,\\n        bool _useZro,\\n        bytes memory _options\\n    ) internal view returns (uint nativeFee, uint zroFee) {\\n        ILayerZeroEndpoint.MessagingFee memory fee = endpoint.quote(address(this), _eid, _message, _useZro, _options);\\n        return (fee.nativeFee, fee.lzTokenFee);\\n    }\\n\\n    function _quoteMultiSend(\\n        uint32[] memory _eids,\\n        bytes[] memory _messages,\\n        bytes[] memory _options,\\n        bool _useZro\\n    ) internal view returns (uint nativeFee, uint lzTokenFee) {\\n        require(_eids.length == _messages.length && _eids.length == _options.length, \\\"OApp: length mismatch\\\");\\n\\n        for (uint i = 0; i < _eids.length; i++) {\\n            (uint native, uint zro) = _quote(_eids[i], _messages[i], _useZro, _options[i]);\\n            nativeFee += native;\\n            lzTokenFee += zro;\\n        }\\n    }\\n\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        uint _nativeFee,\\n        uint _lzTokenFee,\\n        address payable _refundAddress\\n    ) internal virtual returns (ILayerZeroEndpoint.MessagingReceipt memory) {\\n        bytes32 dstAddress = safeGetRemoteAddress(_dstEid);\\n        ILayerZeroEndpoint.MessagingReceipt memory receipt = endpoint.send{value: _nativeFee}(\\n            ILayerZeroEndpoint.MessagingParams(_dstEid, dstAddress, _message, _options),\\n            _lzTokenFee,\\n            _refundAddress\\n        );\\n        return receipt;\\n    }\\n\\n    function _lzMultiSend(\\n        uint32[] memory _dstEids,\\n        bytes[] memory _messages,\\n        bytes[] memory _options\\n    ) internal virtual returns (ILayerZeroEndpoint.MessagingReceipt[] memory) {\\n        require(_dstEids.length == _messages.length && _messages.length == _options.length, \\\"OApp: length mismatch\\\");\\n        uint providedFee = msg.value;\\n        ILayerZeroEndpoint.MessagingReceipt[] memory receipts = new ILayerZeroEndpoint.MessagingReceipt[](\\n            _dstEids.length\\n        );\\n        for (uint i = 0; i < _dstEids.length; i++) {\\n            bytes32 dstAddress = safeGetRemoteAddress(_dstEids[i]);\\n            address refundAddress = i == _dstEids.length - 1 ? msg.sender : address(this);\\n            ILayerZeroEndpoint.MessagingReceipt memory receipt = endpoint.send{value: providedFee}(\\n                ILayerZeroEndpoint.MessagingParams(_dstEids[i], dstAddress, _messages[i], _options[i]),\\n                0,\\n                payable(refundAddress)\\n            );\\n            providedFee -= receipt.fee.nativeFee;\\n            receipts[i] = receipt;\\n        }\\n        return receipts;\\n    }\\n\\n    function _lzMultiSendWithOptions(\\n        uint32[] memory _dstEids,\\n        bytes32[] memory _dstAddresses,\\n        bytes[] memory _messages,\\n        bytes[] memory _options,\\n        uint _nativeFee,\\n        uint _lzTokenFee,\\n        address payable _refundAddress\\n    ) internal virtual returns (ILayerZeroEndpoint.MessagingReceipt[] memory) {\\n        require(\\n            _dstEids.length == _dstAddresses.length &&\\n                _dstEids.length == _messages.length &&\\n                _dstEids.length == _options.length,\\n            \\\"OApp: length mismatch\\\"\\n        );\\n\\n        uint providedNativeFee = _nativeFee;\\n        uint providedLzTokenFee = _lzTokenFee;\\n        ILayerZeroEndpoint.MessagingReceipt[] memory receipts = new ILayerZeroEndpoint.MessagingReceipt[](\\n            _dstEids.length\\n        );\\n        for (uint i = 0; i < _dstEids.length; i++) {\\n            assertRemoteAddress(_dstEids[i], _dstAddresses[i]);\\n            address refundAddress = i == _dstEids.length - 1 ? _refundAddress : address(this);\\n            ILayerZeroEndpoint.MessagingReceipt memory receipt = endpoint.send{value: providedNativeFee}(\\n                ILayerZeroEndpoint.MessagingParams(_dstEids[i], _dstAddresses[i], _messages[i], _options[i]),\\n                providedLzTokenFee,\\n                payable(refundAddress)\\n            );\\n            providedNativeFee -= receipt.fee.nativeFee;\\n            providedLzTokenFee -= receipt.fee.lzTokenFee;\\n            receipts[i] = receipt;\\n        }\\n        return receipts;\\n    }\\n\\n    function lzReceive(\\n        uint32 _srcEid,\\n        bytes32 _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _callerParams\\n    ) public payable virtual override {\\n        // check if the message is from the endpoint or self. If it's from self, it's a call for gas estimation\\n        require(address(endpoint) == msg.sender, \\\"OApp: endpoint only\\\");\\n        assertRemoteAddress(_srcEid, _srcAddress);\\n        _acceptNonce(_srcEid, _srcAddress, _nonce);\\n        _lzReceive(_srcEid, _srcAddress, _nonce, _guid, _message, _executor, _callerParams);\\n    }\\n\\n    function isAcceptableNonce(\\n        uint32 /*_srcEid*/,\\n        bytes32 /*_srcAddress*/,\\n        uint64 /*_nonce*/\\n    ) public view virtual returns (bool) {\\n        return true; // default to be non-ordered\\n    }\\n\\n    function _acceptNonce(uint32 _srcEid, bytes32 _srcAddress, uint64 _nonce) internal virtual {\\n        require(isAcceptableNonce(_srcEid, _srcAddress, _nonce), \\\"OApp: invalid nonce\\\");\\n    }\\n\\n    // burn message\\n    function burn(\\n        uint32 _srcEid,\\n        bytes32 _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message\\n    ) public virtual onlyOwner {\\n        endpoint.clear(_srcEid, _srcAddress, _nonce, _guid, _message);\\n        assertRemoteAddress(_srcEid, _srcAddress);\\n        _handleBurntMessage(_srcEid, _srcAddress, _nonce, _guid, _message);\\n    }\\n\\n    function skipInboundNonce(uint32 _srcEid, bytes32 _sender, uint64 _nonce) public virtual onlyOwner {\\n        endpoint.skip(_srcEid, _sender, _nonce);\\n    }\\n\\n    /// function to be called post burning message\\n    /// the app may want to partially apply the message\\n    function _handleBurntMessage(\\n        uint32 _srcEid,\\n        bytes32 _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message\\n    ) public virtual {}\\n\\n    function _lzReceive(\\n        uint32 _srcEid,\\n        bytes32 _srcAddress,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _callerParams\\n    ) internal virtual;\\n\\n    function isOrdered() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// receive ETH from lz endpoint when multiSend\\n    receive() external payable virtual {}\\n\\n    // todo: simulate and revert for precrime\\n\\n    /// ----------------------------- UA Config Functions -----------------------------\\n    function setConfig(\\n        address _messageLib,\\n        uint32 _eid,\\n        uint32 _configType,\\n        bytes calldata _config\\n    ) public virtual onlyOwner {\\n        endpoint.setConfig(_messageLib, _eid, _configType, _config);\\n    }\\n\\n    function snapshotConfig(address _messageLib, uint32[] calldata _eids) public virtual onlyOwner {\\n        endpoint.snapshotConfig(_messageLib, _eids);\\n    }\\n\\n    function resetConfig(address _messageLib, uint32[] calldata _eids) public virtual onlyOwner {\\n        endpoint.resetConfig(_messageLib, _eids);\\n    }\\n\\n    function setSendMessageLib(uint32 _eid, address _newLib) public virtual onlyOwner {\\n        endpoint.setSendLibrary(_eid, _newLib);\\n    }\\n\\n    function setReceiveMessageLib(uint32 _eid, address _newLib, uint _gracePeriod) public virtual onlyOwner {\\n        endpoint.setReceiveLibrary(_eid, _newLib, _gracePeriod);\\n    }\\n\\n    function setReceiveMessageLibTimeout(uint32 _eid, address _lib, uint _timeout) public virtual onlyOwner {\\n        endpoint.setReceiveLibraryTimeout(_eid, _lib, _timeout);\\n    }\\n}\\n\",\"keccak256\":\"0x0a7435d1b4c0ea54c735c3a3eb746bbd22bf1ab8faf2572114c0a7c0b5e91bd2\",\"license\":\"MIT\"},\"contracts/PreCrime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\n\\nimport \\\"./interfaces/IPreCrime.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract PreCrime is IPreCrime {\\n    uint16 public constant PRECRIME_VERSION = 1;\\n    uint16 public constant CONFIG_VERSION = 1;\\n\\n    //---------------- error code ----------------------\\n    // --- UA scope code ---\\n    uint16 public constant CODE_SUCCESS = 0; // success\\n    uint16 public constant CODE_PRECRIME_FAILURE = 1; // !!! crimes found\\n    uint16 public constant CODE_INTERNAL_REVERT = 500; // app internal error\\n\\n    // --- protocol scope error code ---\\n    // simualte\\n    uint16 public constant CODE_PACKETS_OVERSIZE = 400; // packets number bigger then max size\\n    uint16 public constant CODE_PACKETS_UNSORTED = 401; // packets are unsorted, need backfill and keep order\\n    // precrime\\n    uint16 public constant CODE_MISS_SIMULATE_RESULT = 402; // miss simulation result\\n\\n    error SimulateRevert(uint16 code, bytes message);\\n    bytes4 private constant SIMULATE_REVERT_SELECTOR = bytes4(keccak256(\\\"SimulateRevert(uint16,bytes)\\\"));\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    uint32 public localEid;\\n\\n    address public pAdmin;\\n\\n    uint64 public pMaxBatchSize;\\n    uint32[] public pRemoteEids;\\n    bytes32[] public pRemoteAddrs;\\n    mapping(uint32 => bytes32) public pRemoteEidToAddr;\\n\\n    modifier onlyPrecrimeAdmin() {\\n        require(msg.sender == pAdmin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n        localEid = lzEndpoint.eid();\\n        pAdmin = msg.sender;\\n    }\\n\\n    // ----------------- admin functions -----------------\\n    function setPrecrimeAdmin(address _admin) external onlyPrecrimeAdmin {\\n        pAdmin = _admin;\\n    }\\n\\n    function setPrecrimeMaxBatchSize(uint64 _maxBatchSize) external onlyPrecrimeAdmin {\\n        pMaxBatchSize = _maxBatchSize;\\n    }\\n\\n    function setPrecrimeRemoteAddrs(\\n        uint32[] memory _remoteEids,\\n        bytes32[] memory _remoteAddrs\\n    ) external onlyPrecrimeAdmin {\\n        pRemoteEids = _remoteEids;\\n        pRemoteAddrs = _remoteAddrs;\\n        for (uint i = 0; i < _remoteEids.length; i++) {\\n            pRemoteEidToAddr[_remoteEids[i]] = _remoteAddrs[i];\\n        }\\n    }\\n\\n    // ----------------- view functions -----------------\\n\\n    /**\\n     * @dev get precrime config,\\n     * @param _packets packets\\n     * @return configation bytes\\n     */\\n    function getPrecrimeConfig(Packet[] calldata _packets) external view virtual override returns (bytes memory) {\\n        (uint32[] memory remoteChains, bytes32[] memory remoteAddresses) = _getPrecrimeRemotes(_packets);\\n        return\\n            abi.encodePacked(\\n                CONFIG_VERSION,\\n                //---- max packets size for simulate batch ---\\n                pMaxBatchSize,\\n                //------------- remote precrimes -------------\\n                remoteChains.length,\\n                remoteChains,\\n                remoteAddresses\\n            );\\n    }\\n\\n    /**\\n     * @dev simulate run cross chain packets and get a simulation result for precrime later.\\n     *      note: always use callStatic to simulate.\\n     * @param _packets packets, the packets item should group by srcEid, srcAddress, then sort by nonce\\n     * @return code   simulation result code; see the error code defination\\n     * @return data the result is use for precrime params\\n     */\\n    function simulate(Packet[] calldata _packets) external payable override returns (uint16 code, bytes memory data) {\\n        require(tx.origin == msg.sender, \\\"only EOA can call simulate\\\");\\n\\n        if (_packets.length > pMaxBatchSize) {\\n            return (\\n                CODE_PACKETS_OVERSIZE,\\n                abi.encodePacked(\\\"packets size exceed limited \\\", Strings.toString(uint256(pMaxBatchSize)))\\n            );\\n        }\\n\\n        // check packets nonce, sequence order\\n        // packets should group by srcEid and srcAddress, then sort by nonce ascending\\n        if (_packets.length > 0) {\\n            uint32 srcEid;\\n            bytes32 srcAddress;\\n            uint64 nonce;\\n            for (uint256 i = 0; i < _packets.length; i++) {\\n                Packet memory packet = _packets[i];\\n                // start from a new chain packet or a new source UA\\n                if (packet.srcEid != srcEid || packet.srcAddress != srcAddress) {\\n                    srcEid = packet.srcEid;\\n                    srcAddress = packet.srcAddress;\\n                    nonce = packet.nonce;\\n                    uint64 nextInboundNonce = lzEndpoint.getInboundNonce(\\n                        _receiver(),\\n                        packet.srcEid,\\n                        packet.srcAddress\\n                    ) + 1;\\n                    // the first packet's nonce must equal to dst InboundNonce+1\\n                    if (nonce != nextInboundNonce) {\\n                        return (\\n                            CODE_PACKETS_UNSORTED,\\n                            abi.encodePacked(\\\"skipped inboundNonce, packet index: \\\", Strings.toString(i))\\n                        );\\n                    }\\n                } else {\\n                    // the following packet's nonce add 1 in order\\n                    if (packet.nonce != ++nonce) {\\n                        return (\\n                            CODE_PACKETS_UNSORTED,\\n                            abi.encodePacked(\\\"unsorted packets, packet index: \\\", Strings.toString(i))\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n\\n        (bool success, bytes memory result) = address(this).call{value: msg.value}(\\n            abi.encodeWithSelector(this._simulateAndRevert.selector, _packets)\\n        );\\n        // refund for those who send eth to simulate accidentally\\n        if (msg.value > 0) {\\n            payable(msg.sender).transfer(msg.value);\\n        }\\n        // the _simulateAndRevert will never return success\\n        require(!success, \\\"simulate should never return success\\\");\\n\\n        (code, data) = _parseRevertResult(result);\\n        if (code == CODE_SUCCESS) {\\n            data = abi.encode(localEid, data); // add localEid to the header\\n        }\\n    }\\n\\n    /**\\n     * @dev\\n     * @param _simulation all simulation results from difference endpoints\\n     * @return code     precrime result code; check out the error code defination\\n     * @return reason   error reason\\n     */\\n    function precrime(\\n        Packet[] calldata _packets,\\n        bytes[] calldata _simulation\\n    ) external view override returns (uint16 code, bytes memory reason) {\\n        bytes[] memory originSimulateResult = new bytes[](_simulation.length);\\n        uint32[] memory eids = new uint32[](_simulation.length);\\n        for (uint256 i = 0; i < _simulation.length; i++) {\\n            (uint32 eid, bytes memory simulateResult) = abi.decode(_simulation[i], (uint32, bytes));\\n            eids[i] = eid;\\n            originSimulateResult[i] = simulateResult;\\n        }\\n\\n        (code, reason) = _checkResultsCompleteness(_packets, eids);\\n        if (code != CODE_SUCCESS) {\\n            return (code, reason);\\n        }\\n\\n        (code, reason) = _precrime(originSimulateResult);\\n    }\\n\\n    function _checkResultsCompleteness(\\n        Packet[] calldata _packets,\\n        uint32[] memory _resultEids\\n    ) internal view returns (uint16 code, bytes memory reason) {\\n        // check if all remote result included\\n        if (_packets.length > 0) {\\n            (uint32[] memory remoteEids, ) = _getPrecrimeRemotes(_packets);\\n            for (uint256 i = 0; i < remoteEids.length; i++) {\\n                bool resultEidChecked;\\n                for (uint256 j = 0; j < _resultEids.length; j++) {\\n                    if (_resultEids[j] == remoteEids[i]) {\\n                        resultEidChecked = true;\\n                        break;\\n                    }\\n                }\\n                if (!resultEidChecked) {\\n                    return (CODE_MISS_SIMULATE_RESULT, \\\"missing remote simulation result\\\");\\n                }\\n            }\\n        }\\n        // check if local resut included\\n        bool localEidResultChecked;\\n        for (uint256 j = 0; j < _resultEids.length; j++) {\\n            if (_resultEids[j] == localEid) {\\n                localEidResultChecked = true;\\n                break;\\n            }\\n        }\\n        if (!localEidResultChecked) {\\n            return (CODE_MISS_SIMULATE_RESULT, \\\"missing local simulation result\\\");\\n        }\\n\\n        return (CODE_SUCCESS, \\\"\\\");\\n    }\\n\\n    function _parseRevertResult(bytes memory result) internal pure returns (uint16 code, bytes memory data) {\\n        if (bytes4(result) != SIMULATE_REVERT_SELECTOR) {\\n            return (CODE_INTERNAL_REVERT, result);\\n        }\\n        // parse code and result\\n        assembly {\\n            // Slice the sighash. Remove the selector which is the first 4 bytes\\n            result := add(result, 0x04)\\n        }\\n        return abi.decode(result, (uint16, bytes));\\n    }\\n\\n    /**\\n     * @dev internal function, no one should call\\n     * @param _packets packets\\n     */\\n    function _simulateAndRevert(Packet[] calldata _packets) external payable {\\n        require(msg.sender == address(this), \\\"Precrime: only self\\\");\\n        (uint16 code, bytes memory result) = _simulate(_packets);\\n        revert SimulateRevert(code, result);\\n    }\\n\\n    function precrimeVersion() external pure override returns (uint16) {\\n        return PRECRIME_VERSION;\\n    }\\n\\n    /**\\n     * @dev UA return trusted remote precrimes by packets\\n     * @param _packets packets\\n     * @return\\n     */\\n    function _getPrecrimeRemotes(Packet[] calldata _packets) internal view returns (uint32[] memory, bytes32[] memory) {\\n        if (_packets.length == 0) {\\n            return (pRemoteEids, pRemoteAddrs);\\n        }\\n\\n        // only return related remotes\\n        return _filterByPackets(_packets);\\n    }\\n\\n    function _filterByPackets(\\n        Packet[] calldata _packets\\n    ) internal view returns (uint32[] memory eids, bytes32[] memory remotes) {\\n        uint16 size;\\n        for (uint i = 0; i < _packets.length; i++) {\\n            if (pRemoteEidToAddr[_packets[i].srcEid] != bytes32(0x0)) {\\n                size++;\\n            }\\n        }\\n\\n        eids = new uint32[](size);\\n        remotes = new bytes32[](size);\\n        for (uint i = 0; i < _packets.length; i++) {\\n            bytes32 remote = pRemoteEidToAddr[_packets[i].srcEid];\\n            if (remote != bytes32(0x0)) {\\n                eids[i] = _packets[i].srcEid;\\n                remotes[i] = remote;\\n            }\\n        }\\n        return (eids, remotes);\\n    }\\n\\n    /**\\n     * @dev\\n     * @param _simulation all simulation results from difference endpoints\\n     * @return code     precrime result code; check out the error code defination\\n     * @return reason   error reason\\n     */\\n    function _precrime(bytes[] memory _simulation) internal view virtual returns (uint16 code, bytes memory reason);\\n\\n    /**\\n     * @dev UA execute the logic by _packets, and return simulation result for precrime. would revert state after returned result.\\n     * @param _packets packets\\n     * @return code\\n     * @return result\\n     */\\n    function _simulate(Packet[] calldata _packets) internal virtual returns (uint16 code, bytes memory result);\\n\\n    /**\\n     * @dev UA return the receiver address\\n     * @return\\n     */\\n    function _receiver() internal view virtual returns (address);\\n}\\n\",\"keccak256\":\"0xfb33c00fca5ff1ad4cd4fa0035bc892f16d6f431a939bc42f49c40c3e383d50f\",\"license\":\"MIT\"},\"contracts/Remote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @notice Remote manages the remote UAs on other chains. There is a single remote UA per chain.\\n/// If several remote contracts need to be called, they can be called from a single remote UA,\\nabstract contract Remote is Ownable {\\n    uint32[] public remoteEids;\\n    mapping(uint32 => bytes32) public remoteAddresses;\\n\\n    event SetRemote(uint32 remoteEid, bytes32 remoteAddress, bool trusted);\\n\\n    function setRemote(uint32 _remoteEid, bytes32 _remoteAddress, bool _toBeTrusted) public virtual onlyOwner {\\n        _setRemote(_remoteEid, _remoteAddress, _toBeTrusted);\\n    }\\n\\n    function _setRemote(uint32 _remoteEid, bytes32 _remoteAddress, bool _toBeTrusted) internal virtual {\\n        bool isNowTrusted = remoteAddresses[_remoteEid] != bytes32(0);\\n        if (isNowTrusted == _toBeTrusted) {\\n            revert(\\\"\\\");\\n        }\\n\\n        if (_toBeTrusted) {\\n            remoteEids.push(_remoteEid);\\n            remoteAddresses[_remoteEid] = _remoteAddress;\\n        } else {\\n            // remove from eids\\n            for (uint i = 0; i < remoteEids.length; i++) {\\n                if (remoteEids[i] == _remoteEid) {\\n                    remoteEids[i] = remoteEids[remoteEids.length - 1];\\n                    remoteEids.pop();\\n                    break;\\n                }\\n            }\\n            delete remoteAddresses[_remoteEid];\\n        }\\n        emit SetRemote(_remoteEid, _remoteAddress, _toBeTrusted);\\n    }\\n\\n    function assertRemoteAddress(uint32 _remoteEid, bytes32 _remoteAddress) public view virtual {\\n        if (!isRemoteAddress(_remoteEid, _remoteAddress)) {\\n            revert(\\\"\\\");\\n        }\\n    }\\n\\n    function isRemoteAddress(uint32 _remoteEid, bytes32 _remoteAddress) public view virtual returns (bool) {\\n        return remoteAddresses[_remoteEid] == _remoteAddress;\\n    }\\n\\n    function safeGetRemoteAddress(uint32 _remoteEid) public view virtual returns (bytes32 remoteAddress) {\\n        remoteAddress = remoteAddresses[_remoteEid];\\n        if (remoteAddress == bytes32(0)) {\\n            revert(\\\"\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f396b1d720e82efc1685432ca4fc41f74576e881627f38f121d7c199f54def\",\"license\":\"MIT\"},\"contracts/examples/OmniCounter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../OApp.sol\\\";\\nimport \\\"../PreCrime.sol\\\";\\nimport \\\"../libs/OptionsBuilder.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\\\";\\n\\nlibrary MsgCodec {\\n    uint8 public constant VANILLA_TYPE = 1;\\n    uint8 public constant COMPOSED_TYPE = 2;\\n    uint8 public constant ABA_TYPE = 3;\\n    uint8 public constant COMPOSED_ABA_TYPE = 4;\\n\\n    uint8 public constant MSG_TYPE_OFFSET = 0;\\n    uint8 public constant SRC_EID_OFFSET = 1;\\n\\n    function encode(uint8 _type, uint32 _srcEid) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_type, _srcEid);\\n    }\\n\\n    function msgType(bytes calldata _message) internal pure returns (uint8) {\\n        return uint8(bytes1(_message[MSG_TYPE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[SRC_EID_OFFSET:]));\\n    }\\n}\\n\\nabstract contract OmniCounterPreCrime is PreCrime {\\n    constructor(address _endpoint) PreCrime(_endpoint) {}\\n\\n    struct Count {\\n        uint32 eid;\\n        uint inboundCount;\\n        uint outboundCount;\\n    }\\n\\n    struct SimulationResult {\\n        uint32 eid;\\n        Count[] counts;\\n    }\\n\\n    mapping(uint32 => uint) public inboundCount;\\n    mapping(uint32 => uint) public outboundCount;\\n\\n    // -------------------------------\\n    // Internal\\n\\n    function _incrementInbound(uint32 _eid) internal {\\n        inboundCount[_eid]++;\\n    }\\n\\n    function _incrementOutbound(uint32 _eid) internal {\\n        outboundCount[_eid]++;\\n    }\\n\\n    function _findCounts(SimulationResult memory _result, uint32 _eid) internal pure returns (uint, uint) {\\n        for (uint i = 0; i < _result.counts.length; i++) {\\n            if (_result.counts[i].eid == _eid) {\\n                return (_result.counts[i].inboundCount, _result.counts[i].outboundCount);\\n            }\\n        }\\n        return (0, 0);\\n    }\\n\\n    // -------------------------------\\n    // Precrime\\n    function _receiver() internal view override returns (address) {\\n        return address(this);\\n    }\\n\\n    // outboundCount >= inboundCount\\n    function _precrime(bytes[] memory _simulation) internal view override returns (uint16 code, bytes memory reason) {\\n        SimulationResult memory localResult;\\n        // decode results\\n        SimulationResult[] memory results = new SimulationResult[](_simulation.length);\\n        for (uint i = 0; i < _simulation.length; i++) {\\n            results[i] = abi.decode(_simulation[i], (SimulationResult));\\n\\n            if (results[i].eid == localEid) {\\n                localResult = results[i];\\n            }\\n        }\\n\\n        // check results\\n        for (uint i = 0; i < results.length; i++) {\\n            (uint _inboundCount, ) = _findCounts(localResult, results[i].eid);\\n            (, uint _outboundCount) = _findCounts(results[i], localEid);\\n\\n            if (_inboundCount > _outboundCount) {\\n                return (CODE_PRECRIME_FAILURE, \\\"OmniCounterPreCrime: inboundCount > outboundCount\\\");\\n            }\\n        }\\n        return (CODE_SUCCESS, \\\"\\\");\\n    }\\n\\n    function _simulate(Packet[] calldata _packets) internal override returns (uint16, bytes memory) {\\n        for (uint i = 0; i < _packets.length; i++) {\\n            _lzReceiveByPacket(_packets[i]);\\n        }\\n\\n        Count[] memory counts = new Count[](pRemoteEids.length);\\n        for (uint i = 0; i < pRemoteEids.length; i++) {\\n            uint32 remoteEid = pRemoteEids[i];\\n            counts[i] = Count(remoteEid, inboundCount[remoteEid], outboundCount[remoteEid]);\\n        }\\n        return (CODE_SUCCESS, abi.encode(SimulationResult(localEid, counts)));\\n    }\\n\\n    //    // temporary function to get simulation\\n    //    function simulateNow(Packet[] calldata _packets) public returns (bytes memory) {\\n    //        (uint16 code, bytes memory data) = _simulate(_packets);\\n    //        return abi.encode(localEid, data);\\n    //    }\\n\\n    function _lzReceiveByPacket(Packet calldata _packet) internal virtual;\\n}\\n\\ncontract OmniCounter is ILayerZeroComposer, OApp, OmniCounterPreCrime {\\n    using MsgCodec for bytes;\\n    using OptionsBuilder for bytes;\\n\\n    uint public count;\\n    uint public composedCount;\\n\\n    address public admin;\\n\\n    constructor(address _endpoint) OApp(_endpoint) OmniCounterPreCrime(_endpoint) {\\n        admin = msg.sender;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    // -------------------------------\\n    // Only Admin\\n    function setAdmin(address _admin) external onlyAdmin {\\n        admin = _admin;\\n    }\\n\\n    function withdraw(address payable _to, uint _amount) external onlyAdmin {\\n        _to.transfer(_amount);\\n    }\\n\\n    // -------------------------------\\n    // Send\\n    function increment(uint32 _eid, uint8 _type, bytes calldata _options) external payable {\\n        bytes memory message = MsgCodec.encode(_type, localEid);\\n        _lzSend(_eid, message, _options, msg.value, 0, payable(msg.sender));\\n        _incrementOutbound(_eid);\\n    }\\n\\n    // this is a broken function to skip incrementing outbound count\\n    // so that precrime will fail\\n    function brokenIncrement(uint32 _eid, uint8 _type, bytes calldata _options) external payable onlyAdmin {\\n        bytes memory message = MsgCodec.encode(_type, localEid);\\n        _lzSend(_eid, message, _options, msg.value, 0, payable(msg.sender));\\n    }\\n\\n    //todo: test\\n    function batchIncrement(\\n        uint32[] calldata _eids,\\n        uint8[] calldata _types,\\n        bytes[] calldata _options\\n    ) external payable {\\n        if (_eids.length != _options.length) {\\n            revert(\\\"\\\");\\n        }\\n\\n        // send the same message to all chains\\n        bytes[] memory messages = new bytes[](_eids.length);\\n        for (uint i = 0; i < _eids.length; i++) {\\n            messages[i] = MsgCodec.encode(_types[i], localEid);\\n            _incrementOutbound(_eids[i]);\\n        }\\n\\n        _lzMultiSend(_eids, messages, _options);\\n    }\\n\\n    // -------------------------------\\n    // View\\n    function quote(\\n        uint32 _eid,\\n        uint8 _type,\\n        bytes calldata _options\\n    ) public view returns (uint nativeFee, uint zroFee) {\\n        return _quote(_eid, MsgCodec.encode(_type, localEid), false, _options);\\n    }\\n\\n    function quoteBatch(\\n        uint32[] calldata _eids,\\n        uint8[] calldata _types,\\n        bytes[] calldata _options\\n    ) public view returns (uint nativeFee, uint zroFee) {\\n        if (_eids.length != _options.length) {\\n            revert(\\\"\\\");\\n        }\\n\\n        // send the same message to all chains\\n        bytes[] memory messages = new bytes[](_eids.length);\\n        for (uint i = 0; i < _eids.length; i++) {\\n            messages[i] = MsgCodec.encode(_types[i], localEid);\\n        }\\n\\n        return _quoteMultiSend(_eids, messages, _options, false);\\n    }\\n\\n    // -------------------------------\\n    // Receive\\n    function _lzReceive(\\n        uint32 _srcEid,\\n        bytes32 /*_srcAddress*/,\\n        uint64 /*_nonce*/,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address /*_executor*/,\\n        bytes calldata\\n    ) internal override {\\n        uint8 messageType = _message.msgType();\\n\\n        if (messageType == MsgCodec.VANILLA_TYPE) {\\n            count++;\\n            _incrementInbound(_srcEid);\\n        } else if (messageType == MsgCodec.COMPOSED_TYPE || messageType == MsgCodec.COMPOSED_ABA_TYPE) {\\n            count++;\\n            _incrementInbound(_srcEid);\\n            endpoint.deliverComposedMessage(address(this), _guid, _message);\\n        } else if (messageType == MsgCodec.ABA_TYPE) {\\n            count++;\\n            _incrementInbound(_srcEid);\\n\\n            // send back to the sender\\n            _incrementOutbound(_srcEid);\\n            bytes memory options = OptionsBuilder.newOptions().addRelayerLzReceiveOption(200000, 0);\\n            _lzSend(\\n                _srcEid,\\n                MsgCodec.encode(MsgCodec.VANILLA_TYPE, localEid),\\n                options,\\n                msg.value,\\n                0,\\n                payable(address(this))\\n            );\\n        } else {\\n            revert(\\\"invalid message type\\\");\\n        }\\n    }\\n\\n    function lzCompose(\\n        address /*_oapp*/,\\n        bytes32 /*_guid*/,\\n        bytes calldata _message,\\n        address,\\n        bytes calldata\\n    ) external payable override {\\n        require(msg.sender == address(endpoint), \\\"!endpoint\\\");\\n\\n        uint8 msgType = _message.msgType();\\n        if (msgType == MsgCodec.COMPOSED_TYPE) {\\n            composedCount += 1;\\n        } else if (msgType == MsgCodec.COMPOSED_ABA_TYPE) {\\n            composedCount += 1;\\n\\n            uint32 srcEid = _message.srcEid();\\n            _incrementOutbound(srcEid);\\n            bytes memory options = OptionsBuilder.newOptions().addRelayerLzReceiveOption(200000, 0);\\n            _lzSend(\\n                srcEid,\\n                MsgCodec.encode(MsgCodec.VANILLA_TYPE, localEid),\\n                options,\\n                msg.value,\\n                0,\\n                payable(address(this))\\n            );\\n        } else {\\n            revert(\\\"invalid message type\\\");\\n        }\\n    }\\n\\n    // -------------------------------\\n    // Precrime\\n\\n    function _lzReceiveByPacket(Packet calldata _packet) internal override {\\n        bool isTrustedRemote = remoteAddresses[_packet.srcEid] == _packet.srcAddress;\\n        if (isTrustedRemote) {\\n            _lzReceive(\\n                _packet.srcEid,\\n                _packet.srcAddress,\\n                _packet.nonce,\\n                _packet.guid,\\n                _packet.message,\\n                msg.sender,\\n                _packet.callParams\\n            );\\n        }\\n    }\\n\\n    // be able to receive ether\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x0253e8b1cf6ed9fe3ef676b07d355251b10322a82121f7e8493041011a4f3157\",\"license\":\"MIT\"},\"contracts/interfaces/IOApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOApp is ILayerZeroReceiver {\\n    function setConfig(address _messageLib, uint32 _eid, uint32 _configType, bytes calldata _config) external;\\n\\n    function snapshotConfig(address _messageLib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _messageLib, uint32[] calldata _eids) external;\\n\\n    function setSendMessageLib(uint32 _eid, address _newLib) external;\\n\\n    function setReceiveMessageLib(uint32 _eid, address _newLib, uint _gracePeriod) external;\\n\\n    function setReceiveMessageLibTimeout(uint32 _eid, address _lib, uint _timeout) external;\\n\\n    function version() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x5dc273217c0acc959ca677877502f20024a23bb8bffd86474aa7a1c36eedabdc\",\"license\":\"MIT\"},\"contracts/interfaces/IPreCrime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface IPreCrime {\\n    struct Packet {\\n        uint32 srcEid; // source endpoint id\\n        bytes32 srcAddress; // source UA address\\n        uint64 nonce;\\n        bytes message;\\n        bytes32 guid;\\n        bytes callParams;\\n    }\\n\\n    /**\\n     * @dev get precrime config,\\n     * @param _packets packets\\n     * @return bytes of [maxBatchSize, remotePrecrimes]\\n     */\\n    function getPrecrimeConfig(Packet[] calldata _packets) external view returns (bytes memory);\\n\\n    /**\\n     * @dev simulate run cross chain packets and get a simulation result for precrime later\\n     * @param _packets packets, the packets item should group by srcChainId, srcAddress, then sort by nonce\\n     * @return code   simulation result code; see the error code defination\\n     * @return result the result is use for precrime params\\n     */\\n    function simulate(Packet[] calldata _packets) external payable returns (uint16 code, bytes memory result);\\n\\n    /**\\n     * @dev\\n     * @param _simulation all simulation results from difference chains\\n     * @return code     precrime result code; check out the error code defination\\n     * @return reason   error reason\\n     */\\n    function precrime(\\n        Packet[] calldata _packets,\\n        bytes[] calldata _simulation\\n    ) external view returns (uint16 code, bytes memory reason);\\n\\n    /**\\n     * @dev precrime version\\n     */\\n    function precrimeVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xf40db342f598b2e9d0971426b8f533ec1c57d60b156c63f5cf68e1ea3a6b8368\",\"license\":\"MIT\"},\"contracts/libs/OptionsBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/Options.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/RelayerOptions.sol\\\";\\n\\nlibrary OptionsBuilder {\\n    using BytesLib for bytes;\\n\\n    modifier onlyType3(bytes memory _options) {\\n        require(_options.toUint16(0) == Options.TYPE_3, \\\"OptionsBuilder: invalid options type\\\");\\n        _;\\n    }\\n\\n    function newOptions() internal pure returns (bytes memory) {\\n        return Options.encodeOptions(new Options.WorkerOptions[](0));\\n    }\\n\\n    function addRelayerLzReceiveOption(\\n        bytes memory _options,\\n        uint _gas,\\n        uint _value\\n    ) internal pure returns (bytes memory) {\\n        Options.Option memory option = RelayerOptions.encodeLzReceiveOption(_gas, _value);\\n        return addOption(_options, RelayerOptions.WORKER_ID, option);\\n    }\\n\\n    function addRelayerAirdropOption(\\n        bytes memory _options,\\n        uint _amount,\\n        bytes32 _receiver\\n    ) internal pure returns (bytes memory) {\\n        Options.Option memory option = RelayerOptions.encodeAirdropOption(_amount, _receiver);\\n        return addOption(_options, RelayerOptions.WORKER_ID, option);\\n    }\\n\\n    function addRelayerLzComposeOption(\\n        bytes memory _options,\\n        uint _gas,\\n        uint _value\\n    ) internal pure returns (bytes memory) {\\n        Options.Option memory option = RelayerOptions.encodeLzComposeOption(_gas, _value);\\n        return addOption(_options, RelayerOptions.WORKER_ID, option);\\n    }\\n\\n    function addOption(\\n        bytes memory _options,\\n        uint16 _workerId,\\n        Options.Option memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        Options.WorkerOptions[] memory allWorkerOptions = Options.decodeOptions(_options);\\n        (bool found, uint index, bytes memory workerOptions) = Options.getWorkerOptionsByWorkerId(\\n            allWorkerOptions,\\n            _workerId\\n        );\\n        if (found) {\\n            Options.Option[] memory options = Options.decodeWorkerOptions(workerOptions);\\n            options = _insertNewOption(options, _option);\\n            allWorkerOptions[index].options = Options.encodeWorkerOptions(options);\\n        } else {\\n            // the only one relayer option\\n            bytes memory options = Options.encodeWorkerOptions(_option);\\n            Options.WorkerOptions memory newWorkerOptions = Options.WorkerOptions(_workerId, options);\\n            allWorkerOptions = _insertNewWorkerOptions(allWorkerOptions, newWorkerOptions);\\n        }\\n\\n        return Options.encodeOptions(allWorkerOptions);\\n    }\\n\\n    /// @dev insert a new worker options into worker options array and sort by worker id\\n    function _insertNewWorkerOptions(\\n        Options.WorkerOptions[] memory _workerOptions,\\n        Options.WorkerOptions memory _newOptions\\n    ) private pure returns (Options.WorkerOptions[] memory) {\\n        Options.WorkerOptions[] memory newWorkerOptions = new Options.WorkerOptions[](_workerOptions.length + 1);\\n        if (newWorkerOptions.length == 1) {\\n            newWorkerOptions[0] = _newOptions;\\n            return newWorkerOptions;\\n        }\\n\\n        for (uint i = 0; i < _workerOptions.length; i++) {\\n            require(_workerOptions[i].workerId != _newOptions.workerId, \\\"OptionsBuilder: worker id already exists\\\");\\n\\n            if (_workerOptions[i].workerId < _newOptions.workerId) {\\n                newWorkerOptions[i] = _workerOptions[i];\\n            } else {\\n                newWorkerOptions[i] = _newOptions;\\n                for (uint j = i; j < _workerOptions.length; j++) {\\n                    newWorkerOptions[j + 1] = _workerOptions[j];\\n                }\\n                break;\\n            }\\n\\n            if (i == _workerOptions.length - 1) {\\n                newWorkerOptions[i + 1] = _newOptions;\\n            }\\n        }\\n        return newWorkerOptions;\\n    }\\n\\n    /// @dev insert a new option into options array and sort by option type\\n    function _insertNewOption(\\n        Options.Option[] memory _options,\\n        Options.Option memory _newOption\\n    ) private pure returns (Options.Option[] memory) {\\n        Options.Option[] memory newAllOptions = new Options.Option[](_options.length + 1);\\n        if (newAllOptions.length == 1) {\\n            newAllOptions[0] = _newOption;\\n            return newAllOptions;\\n        }\\n\\n        for (uint i = 0; i < _options.length; i++) {\\n            require(_options[i].optionType != _newOption.optionType, \\\"OptionsBuilder: option type already exists\\\");\\n\\n            if (_options[i].optionType < _newOption.optionType) {\\n                newAllOptions[i] = _options[i];\\n            } else {\\n                newAllOptions[i] = _newOption;\\n                for (uint j = i; j < _options.length; j++) {\\n                    newAllOptions[j + 1] = _options[j];\\n                }\\n                break;\\n            }\\n\\n            if (i == _options.length - 1) {\\n                newAllOptions[i + 1] = _newOption;\\n            }\\n        }\\n        return newAllOptions;\\n    }\\n}\\n\",\"keccak256\":\"0x45f2f2fea8fa1f1d365466d664d55a99191f9d41fdd27e73650fbe600d40e7d4\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c060405260016003553480156200001657600080fd5b50604051620061d7380380620061d7833981016040819052620000399162000155565b808080620000473362000105565b6001600160a01b03908116608052811660a08190526040805163416ecebf60e01b8152905163416ecebf916004808201926020929091908290030181865afa15801562000098573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000be919062000187565b60048054640100000000339081026001600160c01b031990921663ffffffff9490941693909317179055600c80546001600160a01b031916909117905550620001af915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200016857600080fd5b81516001600160a01b03811681146200018057600080fd5b9392505050565b6000602082840312156200019a57600080fd5b815163ffffffff811681146200018057600080fd5b60805160a051615f996200023e600039600081816108be015261109401526000818161065401528181610c4d01528181610ce201528181611580015281816116ec015281816117b6015281816118d00152818161193201528181611a1c01528181611bde01528181611c9f0152818161277a01528181612d4201528181612ec70152612ffb0152615f996000f3fe6080604052600436106103605760003560e01c8063715018a6116101c4578063c95c55be116100f6578063f199a0f31161009a578063f51a246f1161006c578063f51a246f14610a7e578063f8400a7a14610a9e578063f851a44014610abe578063f95d14041461057d57005b8063f199a0f314610a0a578063f2fde38b14610a1e578063f3fef3a314610a3e578063f508f17c14610a5e57005b8063e270fdf9116100d3578063e270fdf91461098f578063e2a0844e146109a2578063e51ac4b0146109c2578063ee634d14146109ea57005b8063c95c55be14610949578063d0a102601461095c578063d22446ce1461096f57005b8063aaab4eb511610168578063b7abbb5d1161013a578063b7abbb5d146108e0578063baa460fd146108f3578063bc4374f914610913578063c6be4b9b1461093357005b8063aaab4eb514610849578063acead6b014610869578063b0f569a51461088c578063b353aaa7146108ac57005b80638da5cb5b116101a15780638da5cb5b146107c757806392d99a7f146107e5578063993d1da9146108055780639e7fffcc1461082957005b8063715018a61461074e578063726075371461076357806372cf91461461078057005b806334964bae1161029d57806356a47289116102415780636d41812d116102135780636d41812d146106ce5780636ece7d36146106ee578063704b6c021461070e5780637112f86f1461072e57005b806356a47289146106155780635e280f1114610642578063622f17f61461068e578063628142b1146106bb57005b806349d6889e1161027a57806349d6889e146105925780634d1d0f35146105bf578063542e7b56146105ec57806354fd4d50146105ff57005b806334964bae1461054857806334e300971461057d578063472641c11461057d57005b80630e735a63116103045780632c79305d116102e15780632c79305d146104b45780632f946f1e146104c857806330515e56146104f6578063333656f21461053557005b80630e735a631461047357806317c9efb014610489578063257f4e051461049e57005b806306661abd1161033d57806306661abd146103ec5780630678327f14610410578063069875db146104305780630c7503721461045d57005b806303cbbafa1461036957806303e83c13146103a35780630638fb64146103c357005b3661036757005b005b34801561037557600080fd5b506103896103843660046148f3565b610ade565b604080519283526020830191909152015b60405180910390f35b3480156103af57600080fd5b506103676103be3660046149ff565b610c2e565b3480156103cf57600080fd5b506103d961019081565b60405161ffff909116815260200161039a565b3480156103f857600080fd5b50610402600a5481565b60405190815260200161039a565b34801561041c57600080fd5b5061036761042b366004614a7a565b610cc3565b34801561043c57600080fd5b5061045061044b366004614ace565b610d52565b60405161039a9190614b5f565b34801561046957600080fd5b506103d96101f481565b34801561047f57600080fd5b506103d961019181565b34801561049557600080fd5b506103d9600081565b3480156104aa57600080fd5b50610402600b5481565b3480156104c057600080fd5b5060016103d9565b3480156104d457600080fd5b506104e86104e3366004614b72565b610daf565b60405161039a929190614bdd565b34801561050257600080fd5b5060045461051d90600160c01b90046001600160401b031681565b6040516001600160401b03909116815260200161039a565b6104e8610543366004614ace565b610f27565b34801561055457600080fd5b50610568610563366004614bfa565b611369565b60405163ffffffff909116815260200161039a565b34801561058957600080fd5b506103d9600181565b34801561059e57600080fd5b506104026105ad366004614c13565b60026020526000908152604090205481565b3480156105cb57600080fd5b506104026105da366004614c13565b60076020526000908152604090205481565b6103676105fa3660046148f3565b6113a3565b34801561060b57600080fd5b5061040260035481565b34801561062157600080fd5b50610402610630366004614c13565b60086020526000908152604090205481565b34801561064e57600080fd5b506106767f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161039a565b34801561069a57600080fd5b506104026106a9366004614c13565b60096020526000908152604090205481565b6103676106c9366004614ace565b6114ee565b3480156106da57600080fd5b506103676106e9366004614c50565b611561565b3480156106fa57600080fd5b50610367610709366004614cb9565b61160d565b34801561071a57600080fd5b50610367610729366004614cd6565b611667565b34801561073a57600080fd5b50610367610749366004614cf3565b6116b3565b34801561075a57600080fd5b50610367611723565b34801561076f57600080fd5b506004546105689063ffffffff1681565b34801561078c57600080fd5b506107b761079b366004614d35565b63ffffffff919091166000908152600260205260409020541490565b604051901515815260200161039a565b3480156107d357600080fd5b506000546001600160a01b0316610676565b3480156107f157600080fd5b50610367610800366004614cd6565b611737565b34801561081157600080fd5b506107b7610820366004614cf3565b60019392505050565b34801561083557600080fd5b50610367610844366004614a7a565b611797565b34801561085557600080fd5b50610402610864366004614bfa565b6117ef565b34801561087557600080fd5b50610367610884366004614c50565b505050505050565b34801561089857600080fd5b506103676108a7366004614d61565b611810565b3480156108b857600080fd5b506106767f000000000000000000000000000000000000000000000000000000000000000081565b6103676108ee366004614dae565b611828565b3480156108ff57600080fd5b5061036761090e366004614e04565b611896565b34801561091f57600080fd5b5061036761092e366004614e45565b6118ff565b34801561093f57600080fd5b506103d961019281565b610367610957366004614dae565b61198a565b61036761096a366004614e7e565b611a11565b34801561097b57600080fd5b5061038961098a366004614dae565b611b72565b61036761099d366004614f1e565b611bdc565b3480156109ae57600080fd5b506103676109bd366004614e04565b611c65565b3480156109ce57600080fd5b506004546106769064010000000090046001600160a01b031681565b3480156109f657600080fd5b50610367610a0536600461511c565b611cce565b348015610a1657600080fd5b5060006107b7565b348015610a2a57600080fd5b50610367610a39366004614cd6565b611d9d565b348015610a4a57600080fd5b50610367610a593660046151dd565b611e16565b348015610a6a57600080fd5b50610367610a79366004614d35565b611e76565b348015610a8a57600080fd5b50610568610a99366004614bfa565b611eb8565b348015610aaa57600080fd5b50610402610ab9366004614c13565b611ec8565b348015610aca57600080fd5b50600c54610676906001600160a01b031681565b600080868314610b0f5760405162461bcd60e51b815260206004820152600060248201526044015b60405180910390fd5b6000876001600160401b03811115610b2957610b29614fdc565b604051908082528060200260200182016040528015610b5c57816020015b6060815260200190600190039081610b475790505b50905060005b88811015610bd257610ba2888883818110610b7f57610b7f6151fb565b9050602002016020810190610b949190615211565b60045463ffffffff16611f0a565b828281518110610bb457610bb46151fb565b60200260200101819052508080610bca90615242565b915050610b62565b50610c1e898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250610c179150889050896152d3565b6000611f4c565b9250925050965096945050505050565b610c36612047565b6040516303e83c1360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906303e83c1390610c8a908890889088908890889060040161536f565b600060405180830381600087803b158015610ca457600080fd5b505af1158015610cb8573d6000803e3d6000fd5b505050505050505050565b610ccb612047565b604051630678327f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630678327f90610d1b908690869086906004016153b3565b600060405180830381600087803b158015610d3557600080fd5b505af1158015610d49573d6000803e3d6000fd5b50505050505050565b6060600080610d6185856120a1565b915091506001600460189054906101000a90046001600160401b031683518484604051602001610d95959493929190615411565b604051602081830303815290604052925050505b92915050565b6000606081836001600160401b03811115610dcc57610dcc614fdc565b604051908082528060200260200182016040528015610dff57816020015b6060815260200190600190039081610dea5790505b5090506000846001600160401b03811115610e1c57610e1c614fdc565b604051908082528060200260200182016040528015610e45578160200160208202803683370190505b50905060005b85811015610eeb57600080888884818110610e6857610e686151fb565b9050602002810190610e7a91906154a4565b810190610e8791906154ea565b9150915081848481518110610e9e57610e9e6151fb565b602002602001019063ffffffff16908163ffffffff168152505080858481518110610ecb57610ecb6151fb565b602002602001018190525050508080610ee390615242565b915050610e4b565b50610ef788888361219f565b909450925061ffff841615610f0d575050610f1e565b610f1682612350565b909450925050505b94509492505050565b60006060323314610f7a5760405162461bcd60e51b815260206004820152601a60248201527f6f6e6c7920454f412063616e2063616c6c2073696d756c6174650000000000006044820152606401610b06565b600454600160c01b90046001600160401b0316831115610fdc5760045461019090610fb490600160c01b90046001600160401b0316612567565b604051602001610fc4919061552f565b60405160208183030381529060405291509150611362565b82156111de5760008080805b868110156111d9576000888883818110611004576110046151fb565b90506020028101906110169190615574565b61101f90615594565b90508463ffffffff16816000015163ffffffff16141580611044575083816020015114155b15611165578051602080830151604080850151815163223b02bb60e11b815230600482015263ffffffff861660248201526044810184905291519499509197509095506000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692634476057692606480820193918290030181865afa1580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff9190615636565b61110a906001615653565b9050806001600160401b0316846001600160401b03161461115f5761019161113184612567565b604051602001611141919061567a565b60405160208183030381529060405297509750505050505050611362565b506111c6565b61116e836156cc565b9250826001600160401b031681604001516001600160401b0316146111c65761019161119983612567565b6040516020016111a991906156f2565b604051602081830303815290604052965096505050505050611362565b50806111d181615242565b915050610fe8565b505050505b600080306001600160a01b03163463628142b160e01b888860405160240161120792919061577c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516112459190615871565b60006040518083038185875af1925050503d8060008114611282576040519150601f19603f3d011682016040523d82523d6000602084013e611287565b606091505b50909250905034156112c15760405133903480156108fc02916000818181858888f193505050501580156112bf573d6000803e3d6000fd5b505b811561131b5760405162461bcd60e51b8152602060048201526024808201527f73696d756c6174652073686f756c64206e657665722072657475726e207375636044820152636365737360e01b6064820152608401610b06565b611324816125f9565b909450925061ffff841661135f5760045460405161134d9163ffffffff16908590602001615883565b60405160208183030381529060405292505b50505b9250929050565b6001818154811061137957600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b8481146113cc5760405162461bcd60e51b81526020600482015260006024820152604401610b06565b6000856001600160401b038111156113e6576113e6614fdc565b60405190808252806020026020018201604052801561141957816020015b60608152602001906001900390816114045790505b50905060005b8681101561149a5761143c868683818110610b7f57610b7f6151fb565b82828151811061144e5761144e6151fb565b602002602001018190525061148888888381811061146e5761146e6151fb565b90506020020160208101906114839190614c13565b612649565b8061149281615242565b91505061141f565b506114e48787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508592506114df9150869050876152d3565b612672565b5050505050505050565b3330146115335760405162461bcd60e51b8152602060048201526013602482015272283932b1b934b6b29d1037b7363c9039b2b63360691b6044820152606401610b06565b60008061154084846128d1565b915091508181604051631f78298160e11b8152600401610b06929190614bdd565b611569612047565b604051635a898aef60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b51315de906115bf908990899089908990899089906004016158a2565b6020604051808303816000875af11580156115de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160291906158e9565b506108848686611e76565b60045464010000000090046001600160a01b0316331461163f5760405162461bcd60e51b8152600401610b0690615902565b600480546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b600c546001600160a01b031633146116915760405162461bcd60e51b8152600401610b0690615902565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6116bb612047565b60405163eaeacd6360e01b815263ffffffff84166004820152602481018390526001600160401b03821660448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eaeacd6390606401610d1b565b61172b612047565b6117356000612a8f565b565b60045464010000000090046001600160a01b031633146117695760405162461bcd60e51b8152600401610b0690615902565b600480546001600160a01b0390921664010000000002640100000000600160c01b0319909216919091179055565b61179f612047565b60405163279ffff360e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7fffcc90610d1b908690869086906004016153b3565b600681815481106117ff57600080fd5b600091825260209091200154905081565b611818612047565b611823838383612adf565b505050565b60045460009061183f90859063ffffffff16611f0a565b9050611885858285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052503493509150339050612d29565b5061188f85612649565b5050505050565b61189e612047565b60405163b8849ac960e01b815263ffffffff841660048201526001600160a01b038381166024830152604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063b8849ac990606401610d1b565b611907612047565b60405163e16f964d60e01b815263ffffffff831660048201526001600160a01b0382811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e16f964d90604401600060405180830381600087803b15801561197657600080fd5b505af1158015610884573d6000803e3d6000fd5b600c546001600160a01b031633146119b45760405162461bcd60e51b8152600401610b0690615902565b6004546000906119cb90859063ffffffff16611f0a565b9050610884858285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052503493509150339050612d29565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a755760405162461bcd60e51b815260206004820152600960248201526808595b991c1bda5b9d60ba1b6044820152606401610b06565b6000611a818686612e07565b905060011960ff821601611aad576001600b6000828254611aa29190615926565b909155506114e49050565b60031960ff821601611b33576001600b6000828254611acc9190615926565b9091555060009050611ade8787612e29565b9050611ae981612649565b6000611b0362030d406000611afc612e4b565b9190612e9b565b600454909150611b2b908390611b219060019063ffffffff16611f0a565b8334600030612d29565b5050506114e4565b60405162461bcd60e51b8152602060048201526014602482015273696e76616c6964206d657373616765207479706560601b6044820152606401610b06565b6004546000908190611bcf908790611b9190889063ffffffff16611f0a565b600087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ec092505050565b9150915094509492505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314611c4a5760405162461bcd60e51b81526020600482015260136024820152724f4170703a20656e64706f696e74206f6e6c7960681b6044820152606401610b06565b611c548989611e76565b610cb8898989898989898989612f6f565b611c6d612047565b60405163335fa1eb60e11b815263ffffffff841660048201526001600160a01b038381166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906366bf43d690606401610d1b565b60045464010000000090046001600160a01b03163314611d005760405162461bcd60e51b8152600401610b0690615902565b8151611d1390600590602085019061476d565b508051611d27906006906020840190614818565b5060005b825181101561182357818181518110611d4657611d466151fb565b602002602001015160076000858481518110611d6457611d646151fb565b602002602001015163ffffffff1663ffffffff168152602001908152602001600020819055508080611d9590615242565b915050611d2b565b611da5612047565b6001600160a01b038116611e0a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b06565b611e1381612a8f565b50565b600c546001600160a01b03163314611e405760405162461bcd60e51b8152600401610b0690615902565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611823573d6000803e3d6000fd5b63ffffffff82166000908152600260205260409020548114611eb45760405162461bcd60e51b81526020600482015260006024820152604401610b06565b5050565b6005818154811061137957600080fd5b63ffffffff811660009081526002602052604090205480611f055760405162461bcd60e51b81526020600482015260006024820152604401610b06565b919050565b6040805160f89390931b6001600160f81b031916602084015260e09190911b6001600160e01b0319166021830152805160058184030181526025909201905290565b60008084518651148015611f61575083518651145b611fa55760405162461bcd60e51b815260206004820152601560248201527409e82e0e07440d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610b06565b60005b865181101561203d5760008061200b898481518110611fc957611fc96151fb565b6020026020010151898581518110611fe357611fe36151fb565b6020026020010151888a8781518110611ffe57611ffe6151fb565b6020026020010151612ec0565b909250905061201a8286615926565b94506120268185615926565b93505050808061203590615242565b915050611fa8565b5094509492505050565b6000546001600160a01b031633146117355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b06565b606080600083900361218a57600560068180548060200260200160405190810160405280929190818152602001828054801561212857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116120eb5790505b505050505091508080548060200260200160405190810160405280929190818152602001828054801561217a57602002820191906000526020600020905b815481526020019060010190808311612166575b5050505050905091509150611362565b61219484846130e0565b915091509250929050565b6000606083156122925760006121b586866120a1565b50905060005b815181101561228f576000805b8651811015612231578383815181106121e3576121e36151fb565b602002602001015163ffffffff16878281518110612203576122036151fb565b602002602001015163ffffffff160361221f5760019150612231565b8061222981615242565b9150506121c8565b508061227c576101926040518060400160405280602081526020017f6d697373696e672072656d6f74652073696d756c6174696f6e20726573756c7481525094509450505050612348565b508061228781615242565b9150506121bb565b50505b6000805b84518110156122ed57600454855163ffffffff909116908690839081106122bf576122bf6151fb565b602002602001015163ffffffff16036122db57600191506122ed565b806122e581615242565b915050612296565b508061233357505060408051808201909152601f81527f6d697373696e67206c6f63616c2073696d756c6174696f6e20726573756c740060208201526101929150612348565b50506040805160208101909152600080825291505b935093915050565b600060606123776040518060400160405280600063ffffffff168152602001606081525090565b600084516001600160401b0381111561239257612392614fdc565b6040519080825280602002602001820160405280156123d857816020015b6040805180820190915260008152606060208201528152602001906001900390816123b05790505b50905060005b8551811015612497578581815181106123f9576123f96151fb565b60200260200101518060200190518101906124149190615939565b828281518110612426576124266151fb565b6020908102919091010152600454825163ffffffff90911690839083908110612451576124516151fb565b60200260200101516000015163ffffffff16036124855781818151811061247a5761247a6151fb565b602002602001015192505b8061248f81615242565b9150506123de565b5060005b81518110156125495760006124cd848484815181106124bc576124bc6151fb565b6020026020010151600001516132ea565b50905060006125008484815181106124e7576124e76151fb565b602090810291909101015160045463ffffffff166132ea565b91505080821115612534576001604051806060016040528060318152602001615f3360319139965096505050505050915091565b5050808061254190615242565b91505061249b565b50600060405180602001604052806000815250935093505050915091565b606060006125748361339e565b60010190506000816001600160401b0381111561259357612593614fdc565b6040519080825280601f01601f1916602001820160405280156125bd576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846125c757509392505050565b60006060631f78298160e11b61260e84615a47565b6001600160e01b0319161461262657506101f4929050565b600483019250828060200190518101906126409190615a7e565b91509150915091565b63ffffffff8116600090815260096020526040812080549161266a83615242565b919050555050565b606082518451148015612686575081518351145b6126ca5760405162461bcd60e51b815260206004820152601560248201527409e82e0e07440d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610b06565b835134906000906001600160401b038111156126e8576126e8614fdc565b60405190808252806020026020018201604052801561272157816020015b61270e614853565b8152602001906001900390816127065790505b50905060005b86518110156128c7576000612754888381518110612747576127476151fb565b6020026020010151611ec8565b90506000600189516127669190615b11565b83146127725730612774565b335b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aca1b45a8760405180608001604052808e89815181106127c5576127c56151fb565b602002602001015163ffffffff1681526020018781526020018d89815181106127f0576127f06151fb565b602002602001015181526020018c898151811061280f5761280f6151fb565b60200260200101518152506000866040518563ffffffff1660e01b815260040161283b93929190615b6c565b60806040518083038185885af1158015612859573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061287e9190615bcf565b6040810151519091506128919087615b11565b9550808585815181106128a6576128a66151fb565b602002602001018190525050505080806128bf90615242565b915050612727565b5095945050505050565b6000606060005b8381101561291e5761290c8585838181106128f5576128f56151fb565b90506020028101906129079190615574565b613476565b8061291681615242565b9150506128d8565b506005546000906001600160401b0381111561293c5761293c614fdc565b60405190808252806020026020018201604052801561299757816020015b6129846040518060600160405280600063ffffffff16815260200160008152602001600081525090565b81526020019060019003908161295a5790505b50905060005b600554811015612a47576000600582815481106129bc576129bc6151fb565b600091825260208083206008808404909101546040805160608101825260079095166004026101000a90910463ffffffff1680855280865291835280852054848401528185526009909252928190205490820152845191925090849084908110612a2857612a286151fb565b6020026020010181905250508080612a3f90615242565b91505061299d565b5060408051808201825260045463ffffffff16815260208082018490529151600092612a74929101615c19565b60405160208183030381529060405292509250509250929050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b63ffffffff831660009081526002602052604090205415158115158103612b225760405162461bcd60e51b81526020600482015260006024820152604401610b06565b8115612b935760018054808201909155600881047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805463ffffffff80881660046007909516949094026101000a8481029102199091161790556000908152600260205260409020839055612cdc565b60005b600154811015612cc4578463ffffffff1660018281548110612bba57612bba6151fb565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1603612cb25760018054612bf2908290615b11565b81548110612c0257612c026151fb565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1660018281548110612c3b57612c3b6151fb565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055506001805480612c7f57612c7f615c94565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a02191690559055612cc4565b80612cbc81615242565b915050612b96565b5063ffffffff84166000908152600260205260408120555b6040805163ffffffff86168152602081018590528315158183015290517f7b1e465a093e7e36f4ae16c797af02d76be92306f3499151e32c10c5f5a607189181900360600190a150505050565b612d31614853565b6000612d3c88611ec8565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aca1b45a8760405180608001604052808d63ffffffff1681526020018681526020018c81526020018b81525088886040518563ffffffff1660e01b8152600401612db793929190615b6c565b60806040518083038185885af1158015612dd5573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612dfa9190615bcf565b9998505050505050505050565b6000612e166001828486615caa565b612e1f91615cd4565b60f81c9392505050565b6000612e388260018186615caa565b612e4191615d04565b60e01c9392505050565b60408051600080825260208201909252606091612e969190612e90565b604080518082019091526000815260606020820152815260200190600190039081612e685790505b506134fc565b905090565b60606000612ea98484613637565b9050612eb7856001836136b6565b95945050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166383c4755930898989896040518663ffffffff1660e01b8152600401612f19959493929190615d32565b6040805180830381865afa158015612f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f599190615d7c565b8051602090910151909890975095505050505050565b6000612f7b8686612e07565b905060001960ff821601612fac57600a8054906000612f9983615242565b9190505550612fa78a6137d2565b6130d4565b60ff811660021480612fc1575060ff81166004145b1561306d57600a8054906000612fd683615242565b9190505550612fe48a6137d2565b604051631d534ee760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063754d3b9c906130369030908b908b908b90600401615d98565b600060405180830381600087803b15801561305057600080fd5b505af1158015613064573d6000803e3d6000fd5b505050506130d4565b60021960ff821601611b3357600a805490600061308983615242565b91905055506130978a6137d2565b6130a08a612649565b60006130b362030d406000611afc612e4b565b6004549091506130d1908c90611b219060019063ffffffff16611f0a565b50505b50505050505050505050565b6060806000805b84811015613166576000600781888885818110613106576131066151fb565b90506020028101906131189190615574565b613126906020810190614c13565b63ffffffff1663ffffffff1681526020019081526020016000205414613154578161315081615dca565b9250505b8061315e81615242565b9150506130e7565b508061ffff166001600160401b0381111561318357613183614fdc565b6040519080825280602002602001820160405280156131ac578160200160208202803683370190505b5092508061ffff166001600160401b038111156131cb576131cb614fdc565b6040519080825280602002602001820160405280156131f4578160200160208202803683370190505b50915060005b8481101561135f5760006007600088888581811061321a5761321a6151fb565b905060200281019061322c9190615574565b61323a906020810190614c13565b63ffffffff168152602081019190915260400160002054905080156132d75786868381811061326b5761326b6151fb565b905060200281019061327d9190615574565b61328b906020810190614c13565b85838151811061329d5761329d6151fb565b602002602001019063ffffffff16908163ffffffff1681525050808483815181106132ca576132ca6151fb565b6020026020010181815250505b50806132e281615242565b9150506131fa565b60008060005b846020015151811015613391578363ffffffff168560200151828151811061331a5761331a6151fb565b60200260200101516000015163ffffffff160361337f5784602001518181518110613347576133476151fb565b60200260200101516020015185602001518281518110613369576133696151fb565b6020026020010151604001519250925050611362565b8061338981615242565b9150506132f0565b5060009485945092505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106133dd5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613409576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061342757662386f26fc10000830492506010015b6305f5e100831061343f576305f5e100830492506008015b612710831061345357612710830492506004015b60648310613465576064830492506002015b600a8310610da95760010192915050565b600060208201803590600290839061348e9086614c13565b63ffffffff1663ffffffff168152602001908152602001600020541490508015611eb457611eb46134c26020840184614c13565b60208401356134d76060860160408701614cb9565b60808601356134e960608801886154a4565b336134f760a08b018b6154a4565b612f6f565b6060600061350a83516137f3565b60408051600360f01b60208201526001600160f01b031960f084901b1660228201528151600481830301815260249091019091529091506000805b8361ffff1681101561362d576000868281518110613565576135656151fb565b6020026020010151600001519050816000148061358957508261ffff168161ffff16115b6135a55760405162461bcd60e51b8152600401610b0690615de1565b60006135ce8884815181106135bc576135bc6151fb565b602002602001015160200151516137f3565b90508482828a86815181106135e5576135e56151fb565b6020026020010151602001516040516020016136049493929190615e02565b60405160208183030381529060405294508193505050808061362590615242565b915050613545565b5090949350505050565b6040805180820190915260008152606060208201526000821561367c576040805160208101869052908101849052606001604051602081830303815290604052613698565b6040805160208101869052016040516020818303038152906040525b60408051808201909152600181526020810191909152949350505050565b60608360036136c682600061381b565b61ffff16146137235760405162461bcd60e51b8152602060048201526024808201527f4f7074696f6e734275696c6465723a20696e76616c6964206f7074696f6e73206044820152637479706560e01b6064820152608401610b06565b600061372e86613878565b9050600080600061373f8489613a8a565b925092509250821561379457600061375682613b25565b90506137628189613c91565b905061376d81613f12565b85848151811061377f5761377f6151fb565b602002602001015160200181905250506137c9565b600061379f88614073565b6040805180820190915261ffff8b168152602081018290529091506137c486826140e7565b955050505b612dfa846134fc565b63ffffffff8116600090815260086020526040812080549161266a83615242565b600061ffff8211156138175760405162461bcd60e51b8152600401610b0690615e54565b5090565b6000613828826002615926565b8351101561386f5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610b06565b50016002015190565b60606000613886838261381b565b905061ffff81166001148061389f575061ffff81166002145b156138bc5760006138b48261ffff1685614346565b949350505050565b8061ffff16600303613a585760006138d584600261381b565b905060008161ffff166001600160401b038111156138f5576138f5614fdc565b60405190808252806020026020018201604052801561393b57816020015b6040805180820190915260008152606060208201528152602001906001900390816139135790505b50905060046000805b8461ffff16811015613a2c57600061395c898561381b565b9050613969600285615926565b935081158061397f57508261ffff168161ffff16115b61399b5760405162461bcd60e51b8152600401610b0690615de1565b91508160006139aa8a8661381b565b90506139b7600286615926565b945060405180604001604052808361ffff1681526020016139e7878461ffff168e6145859092919063ffffffff16565b8152508684815181106139fc576139fc6151fb565b6020908102919091010152613a1561ffff821686615926565b945050508080613a2490615242565b915050613944565b5086518214613a4d5760405162461bcd60e51b8152600401610b0690615e54565b509095945050505050565b60405162461bcd60e51b815260206004820152600760248201526604c5a43303030360cc1b6044820152606401610b06565b600080606060005b8551811015613b06578461ffff16868281518110613ab257613ab26151fb565b60200260200101516000015161ffff1603613af457600181878381518110613adc57613adc6151fb565b60200260200101516020015193509350935050613b1e565b80613afe81615242565b915050613a92565b50506040805160208101909152600080825292508291505b9250925092565b6060600080613b34848261381b565b9050613b41600283615926565b915060008161ffff166001600160401b03811115613b6157613b61614fdc565b604051908082528060200260200182016040528015613ba757816020015b604080518082019091526000815260606020820152815260200190600190039081613b7f5790505b5090506000805b8361ffff168161ffff161015613a4d576000613bca888761381b565b9050613bd7600287615926565b95508261ffff168161ffff1611613c005760405162461bcd60e51b8152600401610b0690615de1565b9150816000613c0f898861381b565b9050613c1c600288615926565b96506000613c2f8a8961ffff8516614585565b9050613c3f61ffff831689615926565b975060405180604001604052808461ffff16815260200182815250868561ffff1681518110613c7057613c706151fb565b60200260200101819052505050508080613c8990615dca565b915050613bae565b6060600083516001613ca39190615926565b6001600160401b03811115613cba57613cba614fdc565b604051908082528060200260200182016040528015613d0057816020015b604080518082019091526000815260606020820152815260200190600190039081613cd85790505b5090508051600103613d32578281600081518110613d2057613d206151fb565b60209081029190910101529050610da9565b60005b8451811015613f0a57836000015161ffff16858281518110613d5957613d596151fb565b60200260200101516000015161ffff1603613dc95760405162461bcd60e51b815260206004820152602a60248201527f4f7074696f6e734275696c6465723a206f7074696f6e207479706520616c72656044820152696164792065786973747360b01b6064820152608401610b06565b836000015161ffff16858281518110613de457613de46151fb565b60200260200101516000015161ffff161015613e3657848181518110613e0c57613e0c6151fb565b6020026020010151828281518110613e2657613e266151fb565b6020026020010181905250613ebb565b83828281518110613e4957613e496151fb565b6020908102919091010152805b8551811015613eb557858181518110613e7157613e716151fb565b602002602001015183826001613e879190615926565b81518110613e9757613e976151fb565b60200260200101819052508080613ead90615242565b915050613e56565b50613f0a565b60018551613ec99190615b11565b8103613ef8578382613edc836001615926565b81518110613eec57613eec6151fb565b60200260200101819052505b80613f0281615242565b915050613d35565b509392505050565b60606000825111613f355760405162461bcd60e51b8152600401610b0690615e54565b6000613f4183516137f3565b6040805160f083901b6001600160f01b03191660208201528151600281830301815260229091019091529091506000805b8361ffff1681101561362d576000868281518110613f9257613f926151fb565b60200260200101516000015190508160001480613fb657508261ffff168161ffff16115b613fd25760405162461bcd60e51b8152600401610b0690615de1565b8092506000613fec8884815181106135bc576135bc6151fb565b90506000888481518110614002576140026151fb565b602002602001015160000151828a8681518110614021576140216151fb565b60200260200101516020015160405160200161403f93929190615e75565b60408051601f19818403018152919052905061405b8682614692565b9550505050808061406b90615242565b915050613f72565b60408051600180825281830190925260609160009190816020015b60408051808201909152600081526060602082015281526020019060019003908161408e57905050905082816000815181106140cc576140cc6151fb565b60200260200101819052506140e081613f12565b9392505050565b60606000835160016140f99190615926565b6001600160401b0381111561411057614110614fdc565b60405190808252806020026020018201604052801561415657816020015b60408051808201909152600081526060602082015281526020019060019003908161412e5790505b5090508051600103614176578281600081518110613d2057613d206151fb565b60005b8451811015613f0a57836000015161ffff1685828151811061419d5761419d6151fb565b60200260200101516000015161ffff160361420b5760405162461bcd60e51b815260206004820152602860248201527f4f7074696f6e734275696c6465723a20776f726b657220696420616c72656164604482015267792065786973747360c01b6064820152608401610b06565b836000015161ffff16858281518110614226576142266151fb565b60200260200101516000015161ffff1610156142785784818151811061424e5761424e6151fb565b6020026020010151828281518110614268576142686151fb565b60200260200101819052506142f7565b8382828151811061428b5761428b6151fb565b6020908102919091010152805b8551811015613eb5578581815181106142b3576142b36151fb565b6020026020010151838260016142c99190615926565b815181106142d9576142d96151fb565b602002602001018190525080806142ef90615242565b915050614298565b600185516143059190615b11565b8103614334578382614318836001615926565b81518110614328576143286151fb565b60200260200101819052505b8061433e81615242565b915050614179565b604080516001808252818301909252606091816020015b60408051808201909152600081526060602082015281526020019060019003908161435d579050509050606060001984016144145782516022146143b35760405162461bcd60e51b8152600401610b0690615e54565b60006143c084600261470f565b604051600160f01b602082015290915060220160405160208183030381529060405291508160016020836040516020016143fd9493929190615eb3565b604051602081830303815290604052915050614546565b6001198401613a58576042835111801561443057506062835111155b61444c5760405162461bcd60e51b8152600401610b0690615e54565b600061445984600261470f565b9050600061446885602261470f565b905060006042865161447a9190615b11565b9050600061448a87604284614585565b61449390615ef4565b90506144a0826020615b11565b6144ab906008615f1b565b6040805160208082018790529390921c828201819052815180840383018152606084018352600160f11b6080850152825160628186030181526082850190935291975092909161450591889160019190899060a201615eb3565b604051602081830303815290604052955085600282518360405160200161452f9493929190615e02565b604051602081830303815290604052955050505050505b6040518060400160405280600161ffff1681526020018281525082600081518110614573576145736151fb565b60200260200101819052505092915050565b60608161459381601f615926565b10156145d25760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610b06565b6145dc8284615926565b845110156146205760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610b06565b60608215801561463f5760405191506000825260208201604052614689565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015614678578051835260209283019201614660565b5050858452601f01601f1916604052505b50949350505050565b6060806040519050835180825260208201818101602087015b818310156146c35780518352602092830192016146ab565b50855184518101855292509050808201602086015b818310156146f05780518352602092830192016146d8565b508651929092011591909101601f01601f191660405250905092915050565b600061471c826020615926565b835110156147645760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152606401610b06565b50016020015190565b8280548282559060005260206000209060070160089004810192821561480c5791602002820160005b838211156147da57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302614796565b801561480a5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026147da565b505b5061381792915061489a565b82805482825590600052602060002090810192821561480c579160200282015b8281111561480c578251825591602001919060010190614838565b60405180606001604052806000801916815260200160006001600160401b03168152602001614895604051806040016040528060008152602001600081525090565b905290565b5b80821115613817576000815560010161489b565b60008083601f8401126148c157600080fd5b5081356001600160401b038111156148d857600080fd5b6020830191508360208260051b850101111561136257600080fd5b6000806000806000806060878903121561490c57600080fd5b86356001600160401b038082111561492357600080fd5b61492f8a838b016148af565b9098509650602089013591508082111561494857600080fd5b6149548a838b016148af565b9096509450604089013591508082111561496d57600080fd5b5061497a89828a016148af565b979a9699509497509295939492505050565b6001600160a01b0381168114611e1357600080fd5b63ffffffff81168114611e1357600080fd5b8035611f05816149a1565b60008083601f8401126149d057600080fd5b5081356001600160401b038111156149e757600080fd5b60208301915083602082850101111561136257600080fd5b600080600080600060808688031215614a1757600080fd5b8535614a228161498c565b94506020860135614a32816149a1565b93506040860135614a42816149a1565b925060608601356001600160401b03811115614a5d57600080fd5b614a69888289016149be565b969995985093965092949392505050565b600080600060408486031215614a8f57600080fd5b8335614a9a8161498c565b925060208401356001600160401b03811115614ab557600080fd5b614ac1868287016148af565b9497909650939450505050565b60008060208385031215614ae157600080fd5b82356001600160401b03811115614af757600080fd5b614b03858286016148af565b90969095509350505050565b60005b83811015614b2a578181015183820152602001614b12565b50506000910152565b60008151808452614b4b816020860160208601614b0f565b601f01601f19169290920160200192915050565b6020815260006140e06020830184614b33565b60008060008060408587031215614b8857600080fd5b84356001600160401b0380821115614b9f57600080fd5b614bab888389016148af565b90965094506020870135915080821115614bc457600080fd5b50614bd1878288016148af565b95989497509550505050565b61ffff831681526040602082015260006138b46040830184614b33565b600060208284031215614c0c57600080fd5b5035919050565b600060208284031215614c2557600080fd5b81356140e0816149a1565b6001600160401b0381168114611e1357600080fd5b8035611f0581614c30565b60008060008060008060a08789031215614c6957600080fd5b8635614c74816149a1565b9550602087013594506040870135614c8b81614c30565b93506060870135925060808701356001600160401b03811115614cad57600080fd5b61497a89828a016149be565b600060208284031215614ccb57600080fd5b81356140e081614c30565b600060208284031215614ce857600080fd5b81356140e08161498c565b600080600060608486031215614d0857600080fd5b8335614d13816149a1565b9250602084013591506040840135614d2a81614c30565b809150509250925092565b60008060408385031215614d4857600080fd5b8235614d53816149a1565b946020939093013593505050565b600080600060608486031215614d7657600080fd5b8335614d81816149a1565b92506020840135915060408401358015158114614d2a57600080fd5b803560ff81168114611f0557600080fd5b60008060008060608587031215614dc457600080fd5b8435614dcf816149a1565b9350614ddd60208601614d9d565b925060408501356001600160401b03811115614df857600080fd5b614bd1878288016149be565b600080600060608486031215614e1957600080fd5b8335614e24816149a1565b92506020840135614e348161498c565b929592945050506040919091013590565b60008060408385031215614e5857600080fd5b8235614e63816149a1565b91506020830135614e738161498c565b809150509250929050565b600080600080600080600060a0888a031215614e9957600080fd5b8735614ea48161498c565b96506020880135955060408801356001600160401b0380821115614ec757600080fd5b614ed38b838c016149be565b909750955060608a01359150614ee88261498c565b90935060808901359080821115614efe57600080fd5b50614f0b8a828b016149be565b989b979a50959850939692959293505050565b600080600080600080600080600060e08a8c031215614f3c57600080fd5b8935614f47816149a1565b985060208a0135975060408a0135614f5e81614c30565b965060608a0135955060808a01356001600160401b0380821115614f8157600080fd5b614f8d8d838e016149be565b909750955060a08c01359150614fa28261498c565b90935060c08b01359080821115614fb857600080fd5b50614fc58c828d016149be565b915080935050809150509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b038111828210171561501457615014614fdc565b60405290565b604080519081016001600160401b038111828210171561501457615014614fdc565b604051606081016001600160401b038111828210171561501457615014614fdc565b604051601f8201601f191681016001600160401b038111828210171561508657615086614fdc565b604052919050565b60006001600160401b038211156150a7576150a7614fdc565b5060051b60200190565b600082601f8301126150c257600080fd5b813560206150d76150d28361508e565b61505e565b82815260059290921b840181019181810190868411156150f657600080fd5b8286015b8481101561511157803583529183019183016150fa565b509695505050505050565b6000806040838503121561512f57600080fd5b82356001600160401b038082111561514657600080fd5b818501915085601f83011261515a57600080fd5b8135602061516a6150d28361508e565b82815260059290921b8401810191818101908984111561518957600080fd5b948201945b838610156151b05785356151a1816149a1565b8252948201949082019061518e565b965050860135925050808211156151c657600080fd5b506151d3858286016150b1565b9150509250929050565b600080604083850312156151f057600080fd5b8235614d538161498c565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561522357600080fd5b6140e082614d9d565b634e487b7160e01b600052601160045260246000fd5b6000600182016152545761525461522c565b5060010190565b60006001600160401b0382111561527457615274614fdc565b50601f01601f191660200190565b600082601f83011261529357600080fd5b81356152a16150d28261525b565b8181528460208386010111156152b657600080fd5b816020850160208301376000918101602001919091529392505050565b60006152e16150d28461508e565b80848252602080830192508560051b8501368111156152ff57600080fd5b855b8181101561533a5780356001600160401b038111156153205760008081fd5b61532c36828a01615282565b865250938201938201615301565b50919695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038616815263ffffffff8581166020830152841660408201526080606082018190526000906153a89083018486615346565b979650505050505050565b6001600160a01b038416815260406020808301829052908201839052600090849060608401835b868110156154055783356153ed816149a1565b63ffffffff16825292820192908201906001016153da565b50979650505050505050565b61ffff60f01b8660f01b1681526001600160401b0360c01b8560c01b16600282015283600a8201526000602a82018451602080870160005b8381101561546b57815163ffffffff1685529382019390820190600101615449565b5050855181870193925060005b8181101561549457845184529382019392820192600101615478565b50919a9950505050505050505050565b6000808335601e198436030181126154bb57600080fd5b8301803591506001600160401b038211156154d557600080fd5b60200191503681900382131561136257600080fd5b600080604083850312156154fd57600080fd5b8235615508816149a1565b915060208301356001600160401b0381111561552357600080fd5b6151d385828601615282565b7f7061636b6574732073697a6520657863656564206c696d69746564200000000081526000825161556781601c850160208701614b0f565b91909101601c0192915050565b6000823560be1983360301811261558a57600080fd5b9190910192915050565b600060c082360312156155a657600080fd5b6155ae614ff2565b6155b7836149b3565b8152602083013560208201526155cf60408401614c45565b604082015260608301356001600160401b03808211156155ee57600080fd5b6155fa36838701615282565b60608401526080850135608084015260a085013591508082111561561d57600080fd5b5061562a36828601615282565b60a08301525092915050565b60006020828403121561564857600080fd5b81516140e081614c30565b6001600160401b038181168382160190808211156156735761567361522c565b5092915050565b7f736b697070656420696e626f756e644e6f6e63652c207061636b657420696e64815263032bc1d160e51b6020820152600082516156bf816024850160208701614b0f565b9190910160240192915050565b60006001600160401b038083168181036156e8576156e861522c565b6001019392505050565b7f756e736f72746564207061636b6574732c207061636b657420696e6465783a2081526000825161572a816020850160208701614b0f565b9190910160200192915050565b6000808335601e1984360301811261574e57600080fd5b83016020810192503590506001600160401b0381111561576d57600080fd5b80360382131561136257600080fd5b60208082528181018390526000906040808401600586901b850182018785805b8981101561586257888403603f190185528235368c900360be190181126157c1578283fd5b8b0160c081356157d0816149a1565b63ffffffff1686528189013589870152878201356157ed81614c30565b6001600160401b031686890152606061580883820184615737565b83838a015261581a848a018284615346565b9350505050608080830135818801525060a061583881840184615737565b93508783038289015261584c838583615346565b988b01989750505093880193505060010161579c565b50919998505050505050505050565b6000825161558a818460208701614b0f565b63ffffffff831681526040602082015260006138b46040830184614b33565b63ffffffff871681528560208201526001600160401b038516604082015283606082015260a0608082015260006158dd60a083018486615346565b98975050505050505050565b6000602082840312156158fb57600080fd5b5051919050565b6020808252600a908201526937b7363c9030b236b4b760b11b604082015260600190565b80820180821115610da957610da961522c565b6000602080838503121561594c57600080fd5b82516001600160401b038082111561596357600080fd5b8185019150604080838803121561597957600080fd5b61598161501a565b835161598c816149a1565b8152838501518381111561599f57600080fd5b80850194505087601f8501126159b457600080fd5b835192506159c46150d28461508e565b8381526060938402850186019386820191908a8611156159e357600080fd5b958701955b85871015615a345780878c031215615a005760008081fd5b615a0861503c565b8751615a13816149a1565b815287890151898201528588015186820152835295860195918701916159e8565b5095820195909552979650505050505050565b805160208201516001600160e01b03198082169291906004831015615a765780818460040360031b1b83161693505b505050919050565b60008060408385031215615a9157600080fd5b825161ffff81168114615aa357600080fd5b60208401519092506001600160401b03811115615abf57600080fd5b8301601f81018513615ad057600080fd5b8051615ade6150d28261525b565b818152866020838501011115615af357600080fd5b615b04826020830160208601614b0f565b8093505050509250929050565b81810381811115610da957610da961522c565b63ffffffff8151168252602081015160208301526000604082015160806040850152615b536080850182614b33565b905060608301518482036060860152612eb78282614b33565b606081526000615b7f6060830186615b24565b6020830194909452506001600160a01b0391909116604090910152919050565b600060408284031215615bb157600080fd5b615bb961501a565b9050815181526020820151602082015292915050565b600060808284031215615be157600080fd5b615be961503c565b825181526020830151615bfb81614c30565b6020820152615c0d8460408501615b9f565b60408201529392505050565b60006020808352606080840163ffffffff8087511684870152838701516040808189015283825180865260808a0191508784019550600093505b80841015615c86578551805186168352888101518984015283015183830152948701946001939093019290860190615c53565b509998505050505050505050565b634e487b7160e01b600052603160045260246000fd5b60008085851115615cba57600080fd5b83861115615cc757600080fd5b5050820193919092039150565b6001600160f81b03198135818116916001851015615cfc5780818660010360031b1b83161692505b505092915050565b6001600160e01b03198135818116916004851015615cfc5760049490940360031b84901b1690921692915050565b6001600160a01b038616815263ffffffff8516602082015260a060408201819052600090615d6290830186614b33565b841515606084015282810360808401526158dd8185614b33565b600060408284031215615d8e57600080fd5b6140e08383615b9f565b60018060a01b0385168152836020820152606060408201526000615dc0606083018486615346565b9695505050505050565b600061ffff8083168181036156e8576156e861522c565b602080825260079082015266262d189818181b60c91b604082015260600190565b60008551615e14818460208a01614b0f565b6001600160f01b031960f087811b821692850192835286901b1660028201528351615e46816004840160208801614b0f565b016004019695505050505050565b6020808252600790820152664c5a313030303960c81b604082015260600190565b600061ffff60f01b808660f01b168352808560f01b166002840152508251615ea4816004850160208701614b0f565b91909101600401949350505050565b60008551615ec5818460208a01614b0f565b6001600160f01b031960f096871b8116919093019081529390941b166002830152600482015260240192915050565b80516020808301519190811015615f15576000198160200360031b1b821691505b50919050565b8082028115828204841417610da957610da961522c56fe4f6d6e69436f756e7465725072656372696d653a20696e626f756e64436f756e74203e206f7574626f756e64436f756e74a2646970667358221220a1eaf0ba94f38654b4cce7b0e6890a042ff5a9648504a677d424517c19af542064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103605760003560e01c8063715018a6116101c4578063c95c55be116100f6578063f199a0f31161009a578063f51a246f1161006c578063f51a246f14610a7e578063f8400a7a14610a9e578063f851a44014610abe578063f95d14041461057d57005b8063f199a0f314610a0a578063f2fde38b14610a1e578063f3fef3a314610a3e578063f508f17c14610a5e57005b8063e270fdf9116100d3578063e270fdf91461098f578063e2a0844e146109a2578063e51ac4b0146109c2578063ee634d14146109ea57005b8063c95c55be14610949578063d0a102601461095c578063d22446ce1461096f57005b8063aaab4eb511610168578063b7abbb5d1161013a578063b7abbb5d146108e0578063baa460fd146108f3578063bc4374f914610913578063c6be4b9b1461093357005b8063aaab4eb514610849578063acead6b014610869578063b0f569a51461088c578063b353aaa7146108ac57005b80638da5cb5b116101a15780638da5cb5b146107c757806392d99a7f146107e5578063993d1da9146108055780639e7fffcc1461082957005b8063715018a61461074e578063726075371461076357806372cf91461461078057005b806334964bae1161029d57806356a47289116102415780636d41812d116102135780636d41812d146106ce5780636ece7d36146106ee578063704b6c021461070e5780637112f86f1461072e57005b806356a47289146106155780635e280f1114610642578063622f17f61461068e578063628142b1146106bb57005b806349d6889e1161027a57806349d6889e146105925780634d1d0f35146105bf578063542e7b56146105ec57806354fd4d50146105ff57005b806334964bae1461054857806334e300971461057d578063472641c11461057d57005b80630e735a63116103045780632c79305d116102e15780632c79305d146104b45780632f946f1e146104c857806330515e56146104f6578063333656f21461053557005b80630e735a631461047357806317c9efb014610489578063257f4e051461049e57005b806306661abd1161033d57806306661abd146103ec5780630678327f14610410578063069875db146104305780630c7503721461045d57005b806303cbbafa1461036957806303e83c13146103a35780630638fb64146103c357005b3661036757005b005b34801561037557600080fd5b506103896103843660046148f3565b610ade565b604080519283526020830191909152015b60405180910390f35b3480156103af57600080fd5b506103676103be3660046149ff565b610c2e565b3480156103cf57600080fd5b506103d961019081565b60405161ffff909116815260200161039a565b3480156103f857600080fd5b50610402600a5481565b60405190815260200161039a565b34801561041c57600080fd5b5061036761042b366004614a7a565b610cc3565b34801561043c57600080fd5b5061045061044b366004614ace565b610d52565b60405161039a9190614b5f565b34801561046957600080fd5b506103d96101f481565b34801561047f57600080fd5b506103d961019181565b34801561049557600080fd5b506103d9600081565b3480156104aa57600080fd5b50610402600b5481565b3480156104c057600080fd5b5060016103d9565b3480156104d457600080fd5b506104e86104e3366004614b72565b610daf565b60405161039a929190614bdd565b34801561050257600080fd5b5060045461051d90600160c01b90046001600160401b031681565b6040516001600160401b03909116815260200161039a565b6104e8610543366004614ace565b610f27565b34801561055457600080fd5b50610568610563366004614bfa565b611369565b60405163ffffffff909116815260200161039a565b34801561058957600080fd5b506103d9600181565b34801561059e57600080fd5b506104026105ad366004614c13565b60026020526000908152604090205481565b3480156105cb57600080fd5b506104026105da366004614c13565b60076020526000908152604090205481565b6103676105fa3660046148f3565b6113a3565b34801561060b57600080fd5b5061040260035481565b34801561062157600080fd5b50610402610630366004614c13565b60086020526000908152604090205481565b34801561064e57600080fd5b506106767f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161039a565b34801561069a57600080fd5b506104026106a9366004614c13565b60096020526000908152604090205481565b6103676106c9366004614ace565b6114ee565b3480156106da57600080fd5b506103676106e9366004614c50565b611561565b3480156106fa57600080fd5b50610367610709366004614cb9565b61160d565b34801561071a57600080fd5b50610367610729366004614cd6565b611667565b34801561073a57600080fd5b50610367610749366004614cf3565b6116b3565b34801561075a57600080fd5b50610367611723565b34801561076f57600080fd5b506004546105689063ffffffff1681565b34801561078c57600080fd5b506107b761079b366004614d35565b63ffffffff919091166000908152600260205260409020541490565b604051901515815260200161039a565b3480156107d357600080fd5b506000546001600160a01b0316610676565b3480156107f157600080fd5b50610367610800366004614cd6565b611737565b34801561081157600080fd5b506107b7610820366004614cf3565b60019392505050565b34801561083557600080fd5b50610367610844366004614a7a565b611797565b34801561085557600080fd5b50610402610864366004614bfa565b6117ef565b34801561087557600080fd5b50610367610884366004614c50565b505050505050565b34801561089857600080fd5b506103676108a7366004614d61565b611810565b3480156108b857600080fd5b506106767f000000000000000000000000000000000000000000000000000000000000000081565b6103676108ee366004614dae565b611828565b3480156108ff57600080fd5b5061036761090e366004614e04565b611896565b34801561091f57600080fd5b5061036761092e366004614e45565b6118ff565b34801561093f57600080fd5b506103d961019281565b610367610957366004614dae565b61198a565b61036761096a366004614e7e565b611a11565b34801561097b57600080fd5b5061038961098a366004614dae565b611b72565b61036761099d366004614f1e565b611bdc565b3480156109ae57600080fd5b506103676109bd366004614e04565b611c65565b3480156109ce57600080fd5b506004546106769064010000000090046001600160a01b031681565b3480156109f657600080fd5b50610367610a0536600461511c565b611cce565b348015610a1657600080fd5b5060006107b7565b348015610a2a57600080fd5b50610367610a39366004614cd6565b611d9d565b348015610a4a57600080fd5b50610367610a593660046151dd565b611e16565b348015610a6a57600080fd5b50610367610a79366004614d35565b611e76565b348015610a8a57600080fd5b50610568610a99366004614bfa565b611eb8565b348015610aaa57600080fd5b50610402610ab9366004614c13565b611ec8565b348015610aca57600080fd5b50600c54610676906001600160a01b031681565b600080868314610b0f5760405162461bcd60e51b815260206004820152600060248201526044015b60405180910390fd5b6000876001600160401b03811115610b2957610b29614fdc565b604051908082528060200260200182016040528015610b5c57816020015b6060815260200190600190039081610b475790505b50905060005b88811015610bd257610ba2888883818110610b7f57610b7f6151fb565b9050602002016020810190610b949190615211565b60045463ffffffff16611f0a565b828281518110610bb457610bb46151fb565b60200260200101819052508080610bca90615242565b915050610b62565b50610c1e898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250610c179150889050896152d3565b6000611f4c565b9250925050965096945050505050565b610c36612047565b6040516303e83c1360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906303e83c1390610c8a908890889088908890889060040161536f565b600060405180830381600087803b158015610ca457600080fd5b505af1158015610cb8573d6000803e3d6000fd5b505050505050505050565b610ccb612047565b604051630678327f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630678327f90610d1b908690869086906004016153b3565b600060405180830381600087803b158015610d3557600080fd5b505af1158015610d49573d6000803e3d6000fd5b50505050505050565b6060600080610d6185856120a1565b915091506001600460189054906101000a90046001600160401b031683518484604051602001610d95959493929190615411565b604051602081830303815290604052925050505b92915050565b6000606081836001600160401b03811115610dcc57610dcc614fdc565b604051908082528060200260200182016040528015610dff57816020015b6060815260200190600190039081610dea5790505b5090506000846001600160401b03811115610e1c57610e1c614fdc565b604051908082528060200260200182016040528015610e45578160200160208202803683370190505b50905060005b85811015610eeb57600080888884818110610e6857610e686151fb565b9050602002810190610e7a91906154a4565b810190610e8791906154ea565b9150915081848481518110610e9e57610e9e6151fb565b602002602001019063ffffffff16908163ffffffff168152505080858481518110610ecb57610ecb6151fb565b602002602001018190525050508080610ee390615242565b915050610e4b565b50610ef788888361219f565b909450925061ffff841615610f0d575050610f1e565b610f1682612350565b909450925050505b94509492505050565b60006060323314610f7a5760405162461bcd60e51b815260206004820152601a60248201527f6f6e6c7920454f412063616e2063616c6c2073696d756c6174650000000000006044820152606401610b06565b600454600160c01b90046001600160401b0316831115610fdc5760045461019090610fb490600160c01b90046001600160401b0316612567565b604051602001610fc4919061552f565b60405160208183030381529060405291509150611362565b82156111de5760008080805b868110156111d9576000888883818110611004576110046151fb565b90506020028101906110169190615574565b61101f90615594565b90508463ffffffff16816000015163ffffffff16141580611044575083816020015114155b15611165578051602080830151604080850151815163223b02bb60e11b815230600482015263ffffffff861660248201526044810184905291519499509197509095506000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692634476057692606480820193918290030181865afa1580156110db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ff9190615636565b61110a906001615653565b9050806001600160401b0316846001600160401b03161461115f5761019161113184612567565b604051602001611141919061567a565b60405160208183030381529060405297509750505050505050611362565b506111c6565b61116e836156cc565b9250826001600160401b031681604001516001600160401b0316146111c65761019161119983612567565b6040516020016111a991906156f2565b604051602081830303815290604052965096505050505050611362565b50806111d181615242565b915050610fe8565b505050505b600080306001600160a01b03163463628142b160e01b888860405160240161120792919061577c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516112459190615871565b60006040518083038185875af1925050503d8060008114611282576040519150601f19603f3d011682016040523d82523d6000602084013e611287565b606091505b50909250905034156112c15760405133903480156108fc02916000818181858888f193505050501580156112bf573d6000803e3d6000fd5b505b811561131b5760405162461bcd60e51b8152602060048201526024808201527f73696d756c6174652073686f756c64206e657665722072657475726e207375636044820152636365737360e01b6064820152608401610b06565b611324816125f9565b909450925061ffff841661135f5760045460405161134d9163ffffffff16908590602001615883565b60405160208183030381529060405292505b50505b9250929050565b6001818154811061137957600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b8481146113cc5760405162461bcd60e51b81526020600482015260006024820152604401610b06565b6000856001600160401b038111156113e6576113e6614fdc565b60405190808252806020026020018201604052801561141957816020015b60608152602001906001900390816114045790505b50905060005b8681101561149a5761143c868683818110610b7f57610b7f6151fb565b82828151811061144e5761144e6151fb565b602002602001018190525061148888888381811061146e5761146e6151fb565b90506020020160208101906114839190614c13565b612649565b8061149281615242565b91505061141f565b506114e48787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508592506114df9150869050876152d3565b612672565b5050505050505050565b3330146115335760405162461bcd60e51b8152602060048201526013602482015272283932b1b934b6b29d1037b7363c9039b2b63360691b6044820152606401610b06565b60008061154084846128d1565b915091508181604051631f78298160e11b8152600401610b06929190614bdd565b611569612047565b604051635a898aef60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b51315de906115bf908990899089908990899089906004016158a2565b6020604051808303816000875af11580156115de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160291906158e9565b506108848686611e76565b60045464010000000090046001600160a01b0316331461163f5760405162461bcd60e51b8152600401610b0690615902565b600480546001600160401b03909216600160c01b026001600160c01b03909216919091179055565b600c546001600160a01b031633146116915760405162461bcd60e51b8152600401610b0690615902565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6116bb612047565b60405163eaeacd6360e01b815263ffffffff84166004820152602481018390526001600160401b03821660448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eaeacd6390606401610d1b565b61172b612047565b6117356000612a8f565b565b60045464010000000090046001600160a01b031633146117695760405162461bcd60e51b8152600401610b0690615902565b600480546001600160a01b0390921664010000000002640100000000600160c01b0319909216919091179055565b61179f612047565b60405163279ffff360e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7fffcc90610d1b908690869086906004016153b3565b600681815481106117ff57600080fd5b600091825260209091200154905081565b611818612047565b611823838383612adf565b505050565b60045460009061183f90859063ffffffff16611f0a565b9050611885858285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052503493509150339050612d29565b5061188f85612649565b5050505050565b61189e612047565b60405163b8849ac960e01b815263ffffffff841660048201526001600160a01b038381166024830152604482018390527f0000000000000000000000000000000000000000000000000000000000000000169063b8849ac990606401610d1b565b611907612047565b60405163e16f964d60e01b815263ffffffff831660048201526001600160a01b0382811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063e16f964d90604401600060405180830381600087803b15801561197657600080fd5b505af1158015610884573d6000803e3d6000fd5b600c546001600160a01b031633146119b45760405162461bcd60e51b8152600401610b0690615902565b6004546000906119cb90859063ffffffff16611f0a565b9050610884858285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052503493509150339050612d29565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a755760405162461bcd60e51b815260206004820152600960248201526808595b991c1bda5b9d60ba1b6044820152606401610b06565b6000611a818686612e07565b905060011960ff821601611aad576001600b6000828254611aa29190615926565b909155506114e49050565b60031960ff821601611b33576001600b6000828254611acc9190615926565b9091555060009050611ade8787612e29565b9050611ae981612649565b6000611b0362030d406000611afc612e4b565b9190612e9b565b600454909150611b2b908390611b219060019063ffffffff16611f0a565b8334600030612d29565b5050506114e4565b60405162461bcd60e51b8152602060048201526014602482015273696e76616c6964206d657373616765207479706560601b6044820152606401610b06565b6004546000908190611bcf908790611b9190889063ffffffff16611f0a565b600087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ec092505050565b9150915094509492505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314611c4a5760405162461bcd60e51b81526020600482015260136024820152724f4170703a20656e64706f696e74206f6e6c7960681b6044820152606401610b06565b611c548989611e76565b610cb8898989898989898989612f6f565b611c6d612047565b60405163335fa1eb60e11b815263ffffffff841660048201526001600160a01b038381166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906366bf43d690606401610d1b565b60045464010000000090046001600160a01b03163314611d005760405162461bcd60e51b8152600401610b0690615902565b8151611d1390600590602085019061476d565b508051611d27906006906020840190614818565b5060005b825181101561182357818181518110611d4657611d466151fb565b602002602001015160076000858481518110611d6457611d646151fb565b602002602001015163ffffffff1663ffffffff168152602001908152602001600020819055508080611d9590615242565b915050611d2b565b611da5612047565b6001600160a01b038116611e0a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b06565b611e1381612a8f565b50565b600c546001600160a01b03163314611e405760405162461bcd60e51b8152600401610b0690615902565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611823573d6000803e3d6000fd5b63ffffffff82166000908152600260205260409020548114611eb45760405162461bcd60e51b81526020600482015260006024820152604401610b06565b5050565b6005818154811061137957600080fd5b63ffffffff811660009081526002602052604090205480611f055760405162461bcd60e51b81526020600482015260006024820152604401610b06565b919050565b6040805160f89390931b6001600160f81b031916602084015260e09190911b6001600160e01b0319166021830152805160058184030181526025909201905290565b60008084518651148015611f61575083518651145b611fa55760405162461bcd60e51b815260206004820152601560248201527409e82e0e07440d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610b06565b60005b865181101561203d5760008061200b898481518110611fc957611fc96151fb565b6020026020010151898581518110611fe357611fe36151fb565b6020026020010151888a8781518110611ffe57611ffe6151fb565b6020026020010151612ec0565b909250905061201a8286615926565b94506120268185615926565b93505050808061203590615242565b915050611fa8565b5094509492505050565b6000546001600160a01b031633146117355760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b06565b606080600083900361218a57600560068180548060200260200160405190810160405280929190818152602001828054801561212857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116120eb5790505b505050505091508080548060200260200160405190810160405280929190818152602001828054801561217a57602002820191906000526020600020905b815481526020019060010190808311612166575b5050505050905091509150611362565b61219484846130e0565b915091509250929050565b6000606083156122925760006121b586866120a1565b50905060005b815181101561228f576000805b8651811015612231578383815181106121e3576121e36151fb565b602002602001015163ffffffff16878281518110612203576122036151fb565b602002602001015163ffffffff160361221f5760019150612231565b8061222981615242565b9150506121c8565b508061227c576101926040518060400160405280602081526020017f6d697373696e672072656d6f74652073696d756c6174696f6e20726573756c7481525094509450505050612348565b508061228781615242565b9150506121bb565b50505b6000805b84518110156122ed57600454855163ffffffff909116908690839081106122bf576122bf6151fb565b602002602001015163ffffffff16036122db57600191506122ed565b806122e581615242565b915050612296565b508061233357505060408051808201909152601f81527f6d697373696e67206c6f63616c2073696d756c6174696f6e20726573756c740060208201526101929150612348565b50506040805160208101909152600080825291505b935093915050565b600060606123776040518060400160405280600063ffffffff168152602001606081525090565b600084516001600160401b0381111561239257612392614fdc565b6040519080825280602002602001820160405280156123d857816020015b6040805180820190915260008152606060208201528152602001906001900390816123b05790505b50905060005b8551811015612497578581815181106123f9576123f96151fb565b60200260200101518060200190518101906124149190615939565b828281518110612426576124266151fb565b6020908102919091010152600454825163ffffffff90911690839083908110612451576124516151fb565b60200260200101516000015163ffffffff16036124855781818151811061247a5761247a6151fb565b602002602001015192505b8061248f81615242565b9150506123de565b5060005b81518110156125495760006124cd848484815181106124bc576124bc6151fb565b6020026020010151600001516132ea565b50905060006125008484815181106124e7576124e76151fb565b602090810291909101015160045463ffffffff166132ea565b91505080821115612534576001604051806060016040528060318152602001615f3360319139965096505050505050915091565b5050808061254190615242565b91505061249b565b50600060405180602001604052806000815250935093505050915091565b606060006125748361339e565b60010190506000816001600160401b0381111561259357612593614fdc565b6040519080825280601f01601f1916602001820160405280156125bd576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846125c757509392505050565b60006060631f78298160e11b61260e84615a47565b6001600160e01b0319161461262657506101f4929050565b600483019250828060200190518101906126409190615a7e565b91509150915091565b63ffffffff8116600090815260096020526040812080549161266a83615242565b919050555050565b606082518451148015612686575081518351145b6126ca5760405162461bcd60e51b815260206004820152601560248201527409e82e0e07440d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610b06565b835134906000906001600160401b038111156126e8576126e8614fdc565b60405190808252806020026020018201604052801561272157816020015b61270e614853565b8152602001906001900390816127065790505b50905060005b86518110156128c7576000612754888381518110612747576127476151fb565b6020026020010151611ec8565b90506000600189516127669190615b11565b83146127725730612774565b335b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aca1b45a8760405180608001604052808e89815181106127c5576127c56151fb565b602002602001015163ffffffff1681526020018781526020018d89815181106127f0576127f06151fb565b602002602001015181526020018c898151811061280f5761280f6151fb565b60200260200101518152506000866040518563ffffffff1660e01b815260040161283b93929190615b6c565b60806040518083038185885af1158015612859573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061287e9190615bcf565b6040810151519091506128919087615b11565b9550808585815181106128a6576128a66151fb565b602002602001018190525050505080806128bf90615242565b915050612727565b5095945050505050565b6000606060005b8381101561291e5761290c8585838181106128f5576128f56151fb565b90506020028101906129079190615574565b613476565b8061291681615242565b9150506128d8565b506005546000906001600160401b0381111561293c5761293c614fdc565b60405190808252806020026020018201604052801561299757816020015b6129846040518060600160405280600063ffffffff16815260200160008152602001600081525090565b81526020019060019003908161295a5790505b50905060005b600554811015612a47576000600582815481106129bc576129bc6151fb565b600091825260208083206008808404909101546040805160608101825260079095166004026101000a90910463ffffffff1680855280865291835280852054848401528185526009909252928190205490820152845191925090849084908110612a2857612a286151fb565b6020026020010181905250508080612a3f90615242565b91505061299d565b5060408051808201825260045463ffffffff16815260208082018490529151600092612a74929101615c19565b60405160208183030381529060405292509250509250929050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b63ffffffff831660009081526002602052604090205415158115158103612b225760405162461bcd60e51b81526020600482015260006024820152604401610b06565b8115612b935760018054808201909155600881047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805463ffffffff80881660046007909516949094026101000a8481029102199091161790556000908152600260205260409020839055612cdc565b60005b600154811015612cc4578463ffffffff1660018281548110612bba57612bba6151fb565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1603612cb25760018054612bf2908290615b11565b81548110612c0257612c026151fb565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1660018281548110612c3b57612c3b6151fb565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055506001805480612c7f57612c7f615c94565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a02191690559055612cc4565b80612cbc81615242565b915050612b96565b5063ffffffff84166000908152600260205260408120555b6040805163ffffffff86168152602081018590528315158183015290517f7b1e465a093e7e36f4ae16c797af02d76be92306f3499151e32c10c5f5a607189181900360600190a150505050565b612d31614853565b6000612d3c88611ec8565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aca1b45a8760405180608001604052808d63ffffffff1681526020018681526020018c81526020018b81525088886040518563ffffffff1660e01b8152600401612db793929190615b6c565b60806040518083038185885af1158015612dd5573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612dfa9190615bcf565b9998505050505050505050565b6000612e166001828486615caa565b612e1f91615cd4565b60f81c9392505050565b6000612e388260018186615caa565b612e4191615d04565b60e01c9392505050565b60408051600080825260208201909252606091612e969190612e90565b604080518082019091526000815260606020820152815260200190600190039081612e685790505b506134fc565b905090565b60606000612ea98484613637565b9050612eb7856001836136b6565b95945050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166383c4755930898989896040518663ffffffff1660e01b8152600401612f19959493929190615d32565b6040805180830381865afa158015612f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f599190615d7c565b8051602090910151909890975095505050505050565b6000612f7b8686612e07565b905060001960ff821601612fac57600a8054906000612f9983615242565b9190505550612fa78a6137d2565b6130d4565b60ff811660021480612fc1575060ff81166004145b1561306d57600a8054906000612fd683615242565b9190505550612fe48a6137d2565b604051631d534ee760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063754d3b9c906130369030908b908b908b90600401615d98565b600060405180830381600087803b15801561305057600080fd5b505af1158015613064573d6000803e3d6000fd5b505050506130d4565b60021960ff821601611b3357600a805490600061308983615242565b91905055506130978a6137d2565b6130a08a612649565b60006130b362030d406000611afc612e4b565b6004549091506130d1908c90611b219060019063ffffffff16611f0a565b50505b50505050505050505050565b6060806000805b84811015613166576000600781888885818110613106576131066151fb565b90506020028101906131189190615574565b613126906020810190614c13565b63ffffffff1663ffffffff1681526020019081526020016000205414613154578161315081615dca565b9250505b8061315e81615242565b9150506130e7565b508061ffff166001600160401b0381111561318357613183614fdc565b6040519080825280602002602001820160405280156131ac578160200160208202803683370190505b5092508061ffff166001600160401b038111156131cb576131cb614fdc565b6040519080825280602002602001820160405280156131f4578160200160208202803683370190505b50915060005b8481101561135f5760006007600088888581811061321a5761321a6151fb565b905060200281019061322c9190615574565b61323a906020810190614c13565b63ffffffff168152602081019190915260400160002054905080156132d75786868381811061326b5761326b6151fb565b905060200281019061327d9190615574565b61328b906020810190614c13565b85838151811061329d5761329d6151fb565b602002602001019063ffffffff16908163ffffffff1681525050808483815181106132ca576132ca6151fb565b6020026020010181815250505b50806132e281615242565b9150506131fa565b60008060005b846020015151811015613391578363ffffffff168560200151828151811061331a5761331a6151fb565b60200260200101516000015163ffffffff160361337f5784602001518181518110613347576133476151fb565b60200260200101516020015185602001518281518110613369576133696151fb565b6020026020010151604001519250925050611362565b8061338981615242565b9150506132f0565b5060009485945092505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106133dd5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310613409576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061342757662386f26fc10000830492506010015b6305f5e100831061343f576305f5e100830492506008015b612710831061345357612710830492506004015b60648310613465576064830492506002015b600a8310610da95760010192915050565b600060208201803590600290839061348e9086614c13565b63ffffffff1663ffffffff168152602001908152602001600020541490508015611eb457611eb46134c26020840184614c13565b60208401356134d76060860160408701614cb9565b60808601356134e960608801886154a4565b336134f760a08b018b6154a4565b612f6f565b6060600061350a83516137f3565b60408051600360f01b60208201526001600160f01b031960f084901b1660228201528151600481830301815260249091019091529091506000805b8361ffff1681101561362d576000868281518110613565576135656151fb565b6020026020010151600001519050816000148061358957508261ffff168161ffff16115b6135a55760405162461bcd60e51b8152600401610b0690615de1565b60006135ce8884815181106135bc576135bc6151fb565b602002602001015160200151516137f3565b90508482828a86815181106135e5576135e56151fb565b6020026020010151602001516040516020016136049493929190615e02565b60405160208183030381529060405294508193505050808061362590615242565b915050613545565b5090949350505050565b6040805180820190915260008152606060208201526000821561367c576040805160208101869052908101849052606001604051602081830303815290604052613698565b6040805160208101869052016040516020818303038152906040525b60408051808201909152600181526020810191909152949350505050565b60608360036136c682600061381b565b61ffff16146137235760405162461bcd60e51b8152602060048201526024808201527f4f7074696f6e734275696c6465723a20696e76616c6964206f7074696f6e73206044820152637479706560e01b6064820152608401610b06565b600061372e86613878565b9050600080600061373f8489613a8a565b925092509250821561379457600061375682613b25565b90506137628189613c91565b905061376d81613f12565b85848151811061377f5761377f6151fb565b602002602001015160200181905250506137c9565b600061379f88614073565b6040805180820190915261ffff8b168152602081018290529091506137c486826140e7565b955050505b612dfa846134fc565b63ffffffff8116600090815260086020526040812080549161266a83615242565b600061ffff8211156138175760405162461bcd60e51b8152600401610b0690615e54565b5090565b6000613828826002615926565b8351101561386f5760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606401610b06565b50016002015190565b60606000613886838261381b565b905061ffff81166001148061389f575061ffff81166002145b156138bc5760006138b48261ffff1685614346565b949350505050565b8061ffff16600303613a585760006138d584600261381b565b905060008161ffff166001600160401b038111156138f5576138f5614fdc565b60405190808252806020026020018201604052801561393b57816020015b6040805180820190915260008152606060208201528152602001906001900390816139135790505b50905060046000805b8461ffff16811015613a2c57600061395c898561381b565b9050613969600285615926565b935081158061397f57508261ffff168161ffff16115b61399b5760405162461bcd60e51b8152600401610b0690615de1565b91508160006139aa8a8661381b565b90506139b7600286615926565b945060405180604001604052808361ffff1681526020016139e7878461ffff168e6145859092919063ffffffff16565b8152508684815181106139fc576139fc6151fb565b6020908102919091010152613a1561ffff821686615926565b945050508080613a2490615242565b915050613944565b5086518214613a4d5760405162461bcd60e51b8152600401610b0690615e54565b509095945050505050565b60405162461bcd60e51b815260206004820152600760248201526604c5a43303030360cc1b6044820152606401610b06565b600080606060005b8551811015613b06578461ffff16868281518110613ab257613ab26151fb565b60200260200101516000015161ffff1603613af457600181878381518110613adc57613adc6151fb565b60200260200101516020015193509350935050613b1e565b80613afe81615242565b915050613a92565b50506040805160208101909152600080825292508291505b9250925092565b6060600080613b34848261381b565b9050613b41600283615926565b915060008161ffff166001600160401b03811115613b6157613b61614fdc565b604051908082528060200260200182016040528015613ba757816020015b604080518082019091526000815260606020820152815260200190600190039081613b7f5790505b5090506000805b8361ffff168161ffff161015613a4d576000613bca888761381b565b9050613bd7600287615926565b95508261ffff168161ffff1611613c005760405162461bcd60e51b8152600401610b0690615de1565b9150816000613c0f898861381b565b9050613c1c600288615926565b96506000613c2f8a8961ffff8516614585565b9050613c3f61ffff831689615926565b975060405180604001604052808461ffff16815260200182815250868561ffff1681518110613c7057613c706151fb565b60200260200101819052505050508080613c8990615dca565b915050613bae565b6060600083516001613ca39190615926565b6001600160401b03811115613cba57613cba614fdc565b604051908082528060200260200182016040528015613d0057816020015b604080518082019091526000815260606020820152815260200190600190039081613cd85790505b5090508051600103613d32578281600081518110613d2057613d206151fb565b60209081029190910101529050610da9565b60005b8451811015613f0a57836000015161ffff16858281518110613d5957613d596151fb565b60200260200101516000015161ffff1603613dc95760405162461bcd60e51b815260206004820152602a60248201527f4f7074696f6e734275696c6465723a206f7074696f6e207479706520616c72656044820152696164792065786973747360b01b6064820152608401610b06565b836000015161ffff16858281518110613de457613de46151fb565b60200260200101516000015161ffff161015613e3657848181518110613e0c57613e0c6151fb565b6020026020010151828281518110613e2657613e266151fb565b6020026020010181905250613ebb565b83828281518110613e4957613e496151fb565b6020908102919091010152805b8551811015613eb557858181518110613e7157613e716151fb565b602002602001015183826001613e879190615926565b81518110613e9757613e976151fb565b60200260200101819052508080613ead90615242565b915050613e56565b50613f0a565b60018551613ec99190615b11565b8103613ef8578382613edc836001615926565b81518110613eec57613eec6151fb565b60200260200101819052505b80613f0281615242565b915050613d35565b509392505050565b60606000825111613f355760405162461bcd60e51b8152600401610b0690615e54565b6000613f4183516137f3565b6040805160f083901b6001600160f01b03191660208201528151600281830301815260229091019091529091506000805b8361ffff1681101561362d576000868281518110613f9257613f926151fb565b60200260200101516000015190508160001480613fb657508261ffff168161ffff16115b613fd25760405162461bcd60e51b8152600401610b0690615de1565b8092506000613fec8884815181106135bc576135bc6151fb565b90506000888481518110614002576140026151fb565b602002602001015160000151828a8681518110614021576140216151fb565b60200260200101516020015160405160200161403f93929190615e75565b60408051601f19818403018152919052905061405b8682614692565b9550505050808061406b90615242565b915050613f72565b60408051600180825281830190925260609160009190816020015b60408051808201909152600081526060602082015281526020019060019003908161408e57905050905082816000815181106140cc576140cc6151fb565b60200260200101819052506140e081613f12565b9392505050565b60606000835160016140f99190615926565b6001600160401b0381111561411057614110614fdc565b60405190808252806020026020018201604052801561415657816020015b60408051808201909152600081526060602082015281526020019060019003908161412e5790505b5090508051600103614176578281600081518110613d2057613d206151fb565b60005b8451811015613f0a57836000015161ffff1685828151811061419d5761419d6151fb565b60200260200101516000015161ffff160361420b5760405162461bcd60e51b815260206004820152602860248201527f4f7074696f6e734275696c6465723a20776f726b657220696420616c72656164604482015267792065786973747360c01b6064820152608401610b06565b836000015161ffff16858281518110614226576142266151fb565b60200260200101516000015161ffff1610156142785784818151811061424e5761424e6151fb565b6020026020010151828281518110614268576142686151fb565b60200260200101819052506142f7565b8382828151811061428b5761428b6151fb565b6020908102919091010152805b8551811015613eb5578581815181106142b3576142b36151fb565b6020026020010151838260016142c99190615926565b815181106142d9576142d96151fb565b602002602001018190525080806142ef90615242565b915050614298565b600185516143059190615b11565b8103614334578382614318836001615926565b81518110614328576143286151fb565b60200260200101819052505b8061433e81615242565b915050614179565b604080516001808252818301909252606091816020015b60408051808201909152600081526060602082015281526020019060019003908161435d579050509050606060001984016144145782516022146143b35760405162461bcd60e51b8152600401610b0690615e54565b60006143c084600261470f565b604051600160f01b602082015290915060220160405160208183030381529060405291508160016020836040516020016143fd9493929190615eb3565b604051602081830303815290604052915050614546565b6001198401613a58576042835111801561443057506062835111155b61444c5760405162461bcd60e51b8152600401610b0690615e54565b600061445984600261470f565b9050600061446885602261470f565b905060006042865161447a9190615b11565b9050600061448a87604284614585565b61449390615ef4565b90506144a0826020615b11565b6144ab906008615f1b565b6040805160208082018790529390921c828201819052815180840383018152606084018352600160f11b6080850152825160628186030181526082850190935291975092909161450591889160019190899060a201615eb3565b604051602081830303815290604052955085600282518360405160200161452f9493929190615e02565b604051602081830303815290604052955050505050505b6040518060400160405280600161ffff1681526020018281525082600081518110614573576145736151fb565b60200260200101819052505092915050565b60608161459381601f615926565b10156145d25760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610b06565b6145dc8284615926565b845110156146205760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610b06565b60608215801561463f5760405191506000825260208201604052614689565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015614678578051835260209283019201614660565b5050858452601f01601f1916604052505b50949350505050565b6060806040519050835180825260208201818101602087015b818310156146c35780518352602092830192016146ab565b50855184518101855292509050808201602086015b818310156146f05780518352602092830192016146d8565b508651929092011591909101601f01601f191660405250905092915050565b600061471c826020615926565b835110156147645760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b6044820152606401610b06565b50016020015190565b8280548282559060005260206000209060070160089004810192821561480c5791602002820160005b838211156147da57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302614796565b801561480a5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026147da565b505b5061381792915061489a565b82805482825590600052602060002090810192821561480c579160200282015b8281111561480c578251825591602001919060010190614838565b60405180606001604052806000801916815260200160006001600160401b03168152602001614895604051806040016040528060008152602001600081525090565b905290565b5b80821115613817576000815560010161489b565b60008083601f8401126148c157600080fd5b5081356001600160401b038111156148d857600080fd5b6020830191508360208260051b850101111561136257600080fd5b6000806000806000806060878903121561490c57600080fd5b86356001600160401b038082111561492357600080fd5b61492f8a838b016148af565b9098509650602089013591508082111561494857600080fd5b6149548a838b016148af565b9096509450604089013591508082111561496d57600080fd5b5061497a89828a016148af565b979a9699509497509295939492505050565b6001600160a01b0381168114611e1357600080fd5b63ffffffff81168114611e1357600080fd5b8035611f05816149a1565b60008083601f8401126149d057600080fd5b5081356001600160401b038111156149e757600080fd5b60208301915083602082850101111561136257600080fd5b600080600080600060808688031215614a1757600080fd5b8535614a228161498c565b94506020860135614a32816149a1565b93506040860135614a42816149a1565b925060608601356001600160401b03811115614a5d57600080fd5b614a69888289016149be565b969995985093965092949392505050565b600080600060408486031215614a8f57600080fd5b8335614a9a8161498c565b925060208401356001600160401b03811115614ab557600080fd5b614ac1868287016148af565b9497909650939450505050565b60008060208385031215614ae157600080fd5b82356001600160401b03811115614af757600080fd5b614b03858286016148af565b90969095509350505050565b60005b83811015614b2a578181015183820152602001614b12565b50506000910152565b60008151808452614b4b816020860160208601614b0f565b601f01601f19169290920160200192915050565b6020815260006140e06020830184614b33565b60008060008060408587031215614b8857600080fd5b84356001600160401b0380821115614b9f57600080fd5b614bab888389016148af565b90965094506020870135915080821115614bc457600080fd5b50614bd1878288016148af565b95989497509550505050565b61ffff831681526040602082015260006138b46040830184614b33565b600060208284031215614c0c57600080fd5b5035919050565b600060208284031215614c2557600080fd5b81356140e0816149a1565b6001600160401b0381168114611e1357600080fd5b8035611f0581614c30565b60008060008060008060a08789031215614c6957600080fd5b8635614c74816149a1565b9550602087013594506040870135614c8b81614c30565b93506060870135925060808701356001600160401b03811115614cad57600080fd5b61497a89828a016149be565b600060208284031215614ccb57600080fd5b81356140e081614c30565b600060208284031215614ce857600080fd5b81356140e08161498c565b600080600060608486031215614d0857600080fd5b8335614d13816149a1565b9250602084013591506040840135614d2a81614c30565b809150509250925092565b60008060408385031215614d4857600080fd5b8235614d53816149a1565b946020939093013593505050565b600080600060608486031215614d7657600080fd5b8335614d81816149a1565b92506020840135915060408401358015158114614d2a57600080fd5b803560ff81168114611f0557600080fd5b60008060008060608587031215614dc457600080fd5b8435614dcf816149a1565b9350614ddd60208601614d9d565b925060408501356001600160401b03811115614df857600080fd5b614bd1878288016149be565b600080600060608486031215614e1957600080fd5b8335614e24816149a1565b92506020840135614e348161498c565b929592945050506040919091013590565b60008060408385031215614e5857600080fd5b8235614e63816149a1565b91506020830135614e738161498c565b809150509250929050565b600080600080600080600060a0888a031215614e9957600080fd5b8735614ea48161498c565b96506020880135955060408801356001600160401b0380821115614ec757600080fd5b614ed38b838c016149be565b909750955060608a01359150614ee88261498c565b90935060808901359080821115614efe57600080fd5b50614f0b8a828b016149be565b989b979a50959850939692959293505050565b600080600080600080600080600060e08a8c031215614f3c57600080fd5b8935614f47816149a1565b985060208a0135975060408a0135614f5e81614c30565b965060608a0135955060808a01356001600160401b0380821115614f8157600080fd5b614f8d8d838e016149be565b909750955060a08c01359150614fa28261498c565b90935060c08b01359080821115614fb857600080fd5b50614fc58c828d016149be565b915080935050809150509295985092959850929598565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b038111828210171561501457615014614fdc565b60405290565b604080519081016001600160401b038111828210171561501457615014614fdc565b604051606081016001600160401b038111828210171561501457615014614fdc565b604051601f8201601f191681016001600160401b038111828210171561508657615086614fdc565b604052919050565b60006001600160401b038211156150a7576150a7614fdc565b5060051b60200190565b600082601f8301126150c257600080fd5b813560206150d76150d28361508e565b61505e565b82815260059290921b840181019181810190868411156150f657600080fd5b8286015b8481101561511157803583529183019183016150fa565b509695505050505050565b6000806040838503121561512f57600080fd5b82356001600160401b038082111561514657600080fd5b818501915085601f83011261515a57600080fd5b8135602061516a6150d28361508e565b82815260059290921b8401810191818101908984111561518957600080fd5b948201945b838610156151b05785356151a1816149a1565b8252948201949082019061518e565b965050860135925050808211156151c657600080fd5b506151d3858286016150b1565b9150509250929050565b600080604083850312156151f057600080fd5b8235614d538161498c565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561522357600080fd5b6140e082614d9d565b634e487b7160e01b600052601160045260246000fd5b6000600182016152545761525461522c565b5060010190565b60006001600160401b0382111561527457615274614fdc565b50601f01601f191660200190565b600082601f83011261529357600080fd5b81356152a16150d28261525b565b8181528460208386010111156152b657600080fd5b816020850160208301376000918101602001919091529392505050565b60006152e16150d28461508e565b80848252602080830192508560051b8501368111156152ff57600080fd5b855b8181101561533a5780356001600160401b038111156153205760008081fd5b61532c36828a01615282565b865250938201938201615301565b50919695505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038616815263ffffffff8581166020830152841660408201526080606082018190526000906153a89083018486615346565b979650505050505050565b6001600160a01b038416815260406020808301829052908201839052600090849060608401835b868110156154055783356153ed816149a1565b63ffffffff16825292820192908201906001016153da565b50979650505050505050565b61ffff60f01b8660f01b1681526001600160401b0360c01b8560c01b16600282015283600a8201526000602a82018451602080870160005b8381101561546b57815163ffffffff1685529382019390820190600101615449565b5050855181870193925060005b8181101561549457845184529382019392820192600101615478565b50919a9950505050505050505050565b6000808335601e198436030181126154bb57600080fd5b8301803591506001600160401b038211156154d557600080fd5b60200191503681900382131561136257600080fd5b600080604083850312156154fd57600080fd5b8235615508816149a1565b915060208301356001600160401b0381111561552357600080fd5b6151d385828601615282565b7f7061636b6574732073697a6520657863656564206c696d69746564200000000081526000825161556781601c850160208701614b0f565b91909101601c0192915050565b6000823560be1983360301811261558a57600080fd5b9190910192915050565b600060c082360312156155a657600080fd5b6155ae614ff2565b6155b7836149b3565b8152602083013560208201526155cf60408401614c45565b604082015260608301356001600160401b03808211156155ee57600080fd5b6155fa36838701615282565b60608401526080850135608084015260a085013591508082111561561d57600080fd5b5061562a36828601615282565b60a08301525092915050565b60006020828403121561564857600080fd5b81516140e081614c30565b6001600160401b038181168382160190808211156156735761567361522c565b5092915050565b7f736b697070656420696e626f756e644e6f6e63652c207061636b657420696e64815263032bc1d160e51b6020820152600082516156bf816024850160208701614b0f565b9190910160240192915050565b60006001600160401b038083168181036156e8576156e861522c565b6001019392505050565b7f756e736f72746564207061636b6574732c207061636b657420696e6465783a2081526000825161572a816020850160208701614b0f565b9190910160200192915050565b6000808335601e1984360301811261574e57600080fd5b83016020810192503590506001600160401b0381111561576d57600080fd5b80360382131561136257600080fd5b60208082528181018390526000906040808401600586901b850182018785805b8981101561586257888403603f190185528235368c900360be190181126157c1578283fd5b8b0160c081356157d0816149a1565b63ffffffff1686528189013589870152878201356157ed81614c30565b6001600160401b031686890152606061580883820184615737565b83838a015261581a848a018284615346565b9350505050608080830135818801525060a061583881840184615737565b93508783038289015261584c838583615346565b988b01989750505093880193505060010161579c565b50919998505050505050505050565b6000825161558a818460208701614b0f565b63ffffffff831681526040602082015260006138b46040830184614b33565b63ffffffff871681528560208201526001600160401b038516604082015283606082015260a0608082015260006158dd60a083018486615346565b98975050505050505050565b6000602082840312156158fb57600080fd5b5051919050565b6020808252600a908201526937b7363c9030b236b4b760b11b604082015260600190565b80820180821115610da957610da961522c565b6000602080838503121561594c57600080fd5b82516001600160401b038082111561596357600080fd5b8185019150604080838803121561597957600080fd5b61598161501a565b835161598c816149a1565b8152838501518381111561599f57600080fd5b80850194505087601f8501126159b457600080fd5b835192506159c46150d28461508e565b8381526060938402850186019386820191908a8611156159e357600080fd5b958701955b85871015615a345780878c031215615a005760008081fd5b615a0861503c565b8751615a13816149a1565b815287890151898201528588015186820152835295860195918701916159e8565b5095820195909552979650505050505050565b805160208201516001600160e01b03198082169291906004831015615a765780818460040360031b1b83161693505b505050919050565b60008060408385031215615a9157600080fd5b825161ffff81168114615aa357600080fd5b60208401519092506001600160401b03811115615abf57600080fd5b8301601f81018513615ad057600080fd5b8051615ade6150d28261525b565b818152866020838501011115615af357600080fd5b615b04826020830160208601614b0f565b8093505050509250929050565b81810381811115610da957610da961522c565b63ffffffff8151168252602081015160208301526000604082015160806040850152615b536080850182614b33565b905060608301518482036060860152612eb78282614b33565b606081526000615b7f6060830186615b24565b6020830194909452506001600160a01b0391909116604090910152919050565b600060408284031215615bb157600080fd5b615bb961501a565b9050815181526020820151602082015292915050565b600060808284031215615be157600080fd5b615be961503c565b825181526020830151615bfb81614c30565b6020820152615c0d8460408501615b9f565b60408201529392505050565b60006020808352606080840163ffffffff8087511684870152838701516040808189015283825180865260808a0191508784019550600093505b80841015615c86578551805186168352888101518984015283015183830152948701946001939093019290860190615c53565b509998505050505050505050565b634e487b7160e01b600052603160045260246000fd5b60008085851115615cba57600080fd5b83861115615cc757600080fd5b5050820193919092039150565b6001600160f81b03198135818116916001851015615cfc5780818660010360031b1b83161692505b505092915050565b6001600160e01b03198135818116916004851015615cfc5760049490940360031b84901b1690921692915050565b6001600160a01b038616815263ffffffff8516602082015260a060408201819052600090615d6290830186614b33565b841515606084015282810360808401526158dd8185614b33565b600060408284031215615d8e57600080fd5b6140e08383615b9f565b60018060a01b0385168152836020820152606060408201526000615dc0606083018486615346565b9695505050505050565b600061ffff8083168181036156e8576156e861522c565b602080825260079082015266262d189818181b60c91b604082015260600190565b60008551615e14818460208a01614b0f565b6001600160f01b031960f087811b821692850192835286901b1660028201528351615e46816004840160208801614b0f565b016004019695505050505050565b6020808252600790820152664c5a313030303960c81b604082015260600190565b600061ffff60f01b808660f01b168352808560f01b166002840152508251615ea4816004850160208701614b0f565b91909101600401949350505050565b60008551615ec5818460208a01614b0f565b6001600160f01b031960f096871b8116919093019081529390941b166002830152600482015260240192915050565b80516020808301519190811015615f15576000198160200360031b1b821691505b50919050565b8082028115828204841417610da957610da961522c56fe4f6d6e69436f756e7465725072656372696d653a20696e626f756e64436f756e74203e206f7574626f756e64436f756e74a2646970667358221220a1eaf0ba94f38654b4cce7b0e6890a042ff5a9648504a677d424517c19af542064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_simulateAndRevert((uint32,bytes32,uint64,bytes,bytes32,bytes)[])": {
        "details": "internal function, no one should call",
        "params": {
          "_packets": "packets"
        }
      },
      "getPrecrimeConfig((uint32,bytes32,uint64,bytes,bytes32,bytes)[])": {
        "details": "get precrime config,",
        "params": {
          "_packets": "packets"
        },
        "returns": {
          "_0": "configation bytes"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "precrime((uint32,bytes32,uint64,bytes,bytes32,bytes)[],bytes[])": {
        "details": "@param _simulation all simulation results from difference endpoints",
        "returns": {
          "code": "    precrime result code; check out the error code defination",
          "reason": "  error reason"
        }
      },
      "precrimeVersion()": {
        "details": "precrime version"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "simulate((uint32,bytes32,uint64,bytes,bytes32,bytes)[])": {
        "details": "simulate run cross chain packets and get a simulation result for precrime later.      note: always use callStatic to simulate.",
        "params": {
          "_packets": "packets, the packets item should group by srcEid, srcAddress, then sort by nonce"
        },
        "returns": {
          "code": "  simulation result code; see the error code defination",
          "data": "the result is use for precrime params"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_handleBurntMessage(uint32,bytes32,uint64,bytes32,bytes)": {
        "notice": "function to be called post burning message the app may want to partially apply the message"
      },
      "setConfig(address,uint32,uint32,bytes)": {
        "notice": "----------------------------- UA Config Functions -----------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1765,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4709,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "remoteEids",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 4713,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "remoteAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 2945,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "version",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3859,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "localEid",
        "offset": 0,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 3861,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "pAdmin",
        "offset": 4,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3863,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "pMaxBatchSize",
        "offset": 24,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 3866,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "pRemoteEids",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 3869,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "pRemoteAddrs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3873,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "pRemoteEidToAddr",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 5002,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "inboundCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 5006,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "outboundCount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 5315,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "count",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5317,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "composedCount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5319,
        "contract": "contracts/examples/OmniCounter.sol:OmniCounter",
        "label": "admin",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}