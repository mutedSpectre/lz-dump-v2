{
  "address": "0xfbfbfDdd6e35dA57b7B0F9a2C10E34Be70B3A4E9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_messageLibs",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint64",
          "name": "_quorum",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "_admins",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oapp",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "confirmations",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "name": "AssignJob",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "ExecuteFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signatures",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct ExecuteParam",
          "name": "param",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "HashAlreadyUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "multiplierBps",
          "type": "uint16"
        }
      ],
      "name": "SetDefaultMultiplierBps",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct IVerifier.DstConfigParam[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "SetDstConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "SetPriceFeed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "workerLib",
          "type": "address"
        }
      ],
      "name": "SetWorkerLib",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_quorum",
          "type": "uint64"
        }
      ],
      "name": "UpdateQuorum",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "UpdateSigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lib",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowlistSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultMultiplierBps",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "dstConfig",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "gas",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "multiplierBps",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "floorMarginUSD",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signatures",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExecuteParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstEid",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "hashCallData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_multiplierBps",
          "type": "uint16"
        }
      ],
      "name": "setDefaultMultiplierBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "gas",
              "type": "uint64"
            },
            {
              "internalType": "uint16",
              "name": "multiplierBps",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMarginUSD",
              "type": "uint128"
            }
          ],
          "internalType": "struct IVerifier.DstConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setDstConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_quorum",
          "type": "uint64"
        }
      ],
      "name": "setQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_workerFeeLib",
          "type": "address"
        }
      ],
      "name": "setWorkerFeeLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signerSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "executableHash",
          "type": "bytes32"
        }
      ],
      "name": "usedHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "used",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUltraLightNode",
          "name": "_uln",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        }
      ],
      "name": "verifyAndDeliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "verifySignatures",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFeeFromUlnV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workerFeeLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x30ea5803610b53a4a208d59be32176c92d6357f06ce0cdaa2b8251a31592b383",
  "receipt": {
    "to": null,
    "from": "0xBcd4042DE499D14e55001CcbB24a551F3b954096",
    "contractAddress": "0xfbfbfDdd6e35dA57b7B0F9a2C10E34Be70B3A4E9",
    "transactionIndex": 0,
    "gasUsed": "3833303",
    "logsBloom": "0x
    "blockHash": "0x0a6bc40fba9c6eec3dc04545bd7732054ccc8cb9ae07be34f0b81a3880c456b8",
    "transactionHash": "0x30ea5803610b53a4a208d59be32176c92d6357f06ce0cdaa2b8251a31592b383",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 209,
        "transactionHash": "0x30ea5803610b53a4a208d59be32176c92d6357f06ce0cdaa2b8251a31592b383",
        "address": "0xfbfbfDdd6e35dA57b7B0F9a2C10E34Be70B3A4E9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bcd4042de499d14e55001ccbb24a551f3b954096"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0a6bc40fba9c6eec3dc04545bd7732054ccc8cb9ae07be34f0b81a3880c456b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 209,
        "transactionHash": "0x30ea5803610b53a4a208d59be32176c92d6357f06ce0cdaa2b8251a31592b383",
        "address": "0xfbfbfDdd6e35dA57b7B0F9a2C10E34Be70B3A4E9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de",
          "0x0000000000000000000000000f5d1ef48f12b6f691401bfe88c2037c690a6afe",
          "0x000000000000000000000000bcd4042de499d14e55001ccbb24a551f3b954096"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0a6bc40fba9c6eec3dc04545bd7732054ccc8cb9ae07be34f0b81a3880c456b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 209,
        "transactionHash": "0x30ea5803610b53a4a208d59be32176c92d6357f06ce0cdaa2b8251a31592b383",
        "address": "0xfbfbfDdd6e35dA57b7B0F9a2C10E34Be70B3A4E9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de",
          "0x000000000000000000000000e6b98f104c1bef218f3893adab4160dc73eb8367",
          "0x000000000000000000000000bcd4042de499d14e55001ccbb24a551f3b954096"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0a6bc40fba9c6eec3dc04545bd7732054ccc8cb9ae07be34f0b81a3880c456b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 209,
        "transactionHash": "0x30ea5803610b53a4a208d59be32176c92d6357f06ce0cdaa2b8251a31592b383",
        "address": "0xfbfbfDdd6e35dA57b7B0F9a2C10E34Be70B3A4E9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de",
          "0x000000000000000000000000bcf26943c0197d2ee0e5d05c716be60cc2761508",
          "0x000000000000000000000000bcd4042de499d14e55001ccbb24a551f3b954096"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0a6bc40fba9c6eec3dc04545bd7732054ccc8cb9ae07be34f0b81a3880c456b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 209,
        "transactionHash": "0x30ea5803610b53a4a208d59be32176c92d6357f06ce0cdaa2b8251a31592b383",
        "address": "0xfbfbfDdd6e35dA57b7B0F9a2C10E34Be70B3A4E9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000c13b65f7c53cd6db2ea205a4b574b4a0858720a6",
          "0x000000000000000000000000bcd4042de499d14e55001ccbb24a551f3b954096"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x0a6bc40fba9c6eec3dc04545bd7732054ccc8cb9ae07be34f0b81a3880c456b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 209,
        "transactionHash": "0x30ea5803610b53a4a208d59be32176c92d6357f06ce0cdaa2b8251a31592b383",
        "address": "0xfbfbfDdd6e35dA57b7B0F9a2C10E34Be70B3A4E9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000000e9971c0005d91336c1441b8f03c1c4fe5fb4584",
          "0x000000000000000000000000bcd4042de499d14e55001ccbb24a551f3b954096"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x0a6bc40fba9c6eec3dc04545bd7732054ccc8cb9ae07be34f0b81a3880c456b8"
      }
    ],
    "blockNumber": 209,
    "cumulativeGasUsed": "3833303",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
      "0xe6b98F104c1BEf218F3893ADab4160Dc73Eb8367",
      "0xbCF26943C0197d2eE0E5D05c716Be60cc2761508"
    ],
    "0x8438Ad1C834623CfF278AB6829a248E37C2D7E3f",
    [
      "0x9c79357189d6aF261691ECF48de9A6bbF30438Fc",
      "0xC4c81D5C1851702d27d602aA8ff830A7689F17cc"
    ],
    1,
    [
      "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6",
      "0x0e9971c0005D91336c1441b8F03c1C4fe5FB4584"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "23618ae04a8987a244e2ff990cbbeac7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_messageLibs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint64\",\"name\":\"_quorum\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oapp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"AssignJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ExecuteFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct ExecuteParam\",\"name\":\"param\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"HashAlreadyUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"}],\"name\":\"SetDefaultMultiplierBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct IVerifier.DstConfigParam[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"SetDstConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"SetPriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"workerLib\",\"type\":\"address\"}],\"name\":\"SetWorkerLib\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_quorum\",\"type\":\"uint64\"}],\"name\":\"UpdateQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"UpdateSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMultiplierBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"dstConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecuteParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstEid\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"hashCallData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_multiplierBps\",\"type\":\"uint16\"}],\"name\":\"setDefaultMultiplierBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"gas\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"multiplierBps\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMarginUSD\",\"type\":\"uint128\"}],\"internalType\":\"struct IVerifier.DstConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setDstConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_quorum\",\"type\":\"uint64\"}],\"name\":\"setQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerFeeLib\",\"type\":\"address\"}],\"name\":\"setWorkerFeeLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"executableHash\",\"type\":\"bytes32\"}],\"name\":\"usedHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUltraLightNode\",\"name\":\"_uln\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"}],\"name\":\"verifyAndDeliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signatures\",\"type\":\"bytes\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFeeFromUlnV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workerFeeLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"assignJob(uint16,uint16,uint64,address)\":{\"details\":\"to support ULNv2verifier network can reject job from _sender by adding/removing them from allowlist/denylist\",\"params\":{\"\":\"//_outboundProofType outbound proof type\",\"_confirmations\":\"block confirmations\",\"_dstEid\":\"destination EndpointId\",\"_sender\":\"message sender address\"}},\"assignJob(uint32,uint64,address,bytes)\":{\"details\":\"for ULN301, ULN302 and more to assign jobverifier network can reject job from _sender by adding/removing them from allowlist/denylist\",\"params\":{\"_confirmations\":\"block confirmations\",\"_dstEid\":\"destination EndpointId\",\"_options\":\"verifier options\",\"_sender\":\"message sender address\"}},\"constructor\":{\"details\":\"VerifierNetwork doesn't have a roleAdmin (address(0x0))Supports all of ULNv2, ULN301, ULN302 and more\",\"params\":{\"_admins\":\"array of admin addresses that are granted the ADMIN_ROLE\",\"_messageLibs\":\"array of message lib addresses that are granted the MESSAGE_LIB_ROLE\",\"_priceFeed\":\"price feed address\",\"_quorum\":\"quorum for multisig\",\"_signers\":\"array of signer addresses for multisig\"}},\"execute((address,bytes,uint256,bytes)[])\":{\"details\":\"takes a list of instructions and executes them in orderif any of the instructions fail, it will emit an error event and continue to execute the rest of the instructions\",\"params\":{\"_params\":\"array of ExecuteParam, includes target, callData, expiration, signatures\"}},\"getFee(uint16,uint16,uint64,address)\":{\"details\":\"to support ULNv2getFee can revert if _sender doesn't pass ACL\",\"params\":{\"\":\"//_outboundProofType outbound proof type\",\"_confirmations\":\"block confirmations\",\"_dstEid\":\"destination EndpointId\",\"_sender\":\"message sender address\"}},\"getFee(uint32,uint64,address,bytes)\":{\"details\":\"getFee can revert if _sender doesn't pass ACL\",\"params\":{\"_confirmations\":\"block confirmations\",\"_dstEid\":\"destination EndpointId\",\"_options\":\"verifier options\",\"_sender\":\"message sender address\"},\"returns\":{\"fee\":\"fee in native amount\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"overrides AccessControl to allow self/admin to grant role'\",\"params\":{\"_account\":\"account to grant role to\",\"_role\":\"role to grant\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hashCallData(address,bytes,uint256)\":{\"params\":{\"_callData\":\"call data\",\"_expiration\":\"expiration timestamp\",\"_target\":\"target address\"},\"returns\":{\"_0\":\"hash of above\"}},\"renounceRole(bytes32,address)\":{\"details\":\"overrides AccessControl to disable renouncing of roles\"},\"revokeRole(bytes32,address)\":{\"details\":\"overrides AccessControl to allow self/admin to revoke role\",\"params\":{\"_account\":\"account to revoke role from\",\"_role\":\"role to revoke\"}},\"setDefaultMultiplierBps(uint16)\":{\"params\":{\"_multiplierBps\":\"default multiplier for worker fee\"}},\"setDstConfig((uint32,uint64,uint16,uint128)[])\":{\"params\":{\"_params\":\"array of DstConfigParam\"}},\"setPaused(bool)\":{\"details\":\"flag to pause execution of workers (if used with whenNotPaused modifier)\",\"params\":{\"_paused\":\"true to pause, false to unpause\"}},\"setPriceFeed(address)\":{\"params\":{\"_priceFeed\":\"price feed address\"}},\"setQuorum(uint64)\":{\"details\":\"set quorum for multisig\",\"params\":{\"_quorum\":\"to set\"}},\"setSigner(address,bool)\":{\"details\":\"set signers for multisig\",\"params\":{\"_active\":\"true to add, false to remove\",\"_signer\":\"signer address\"}},\"setWorkerFeeLib(address)\":{\"params\":{\"_workerFeeLib\":\"worker fee lib address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"verifyAndDeliver(address,bytes,bytes32,uint64)\":{\"details\":\"one function to verify and deliver to ULN302 and more (does not support ULN301)\",\"params\":{\"_confirmations\":\"block confirmations\",\"_packetHeader\":\"packet header\",\"_payloadHash\":\"payload hash\",\"_uln\":\"IUltraLightNode compatible contract\"}},\"withdrawFee(address,address,uint256)\":{\"details\":\"supports withdrawing fee from ULN301, ULN302 and more\",\"params\":{\"_amount\":\"amount to withdraw\",\"_lib\":\"message lib address\",\"_to\":\"address to withdraw fee to\"}},\"withdrawFeeFromUlnV2(address,address,uint256)\":{\"details\":\"to support ULNv2\",\"params\":{\"_amount\":\"amount to withdraw\",\"_lib\":\"message lib address\",\"_to\":\"address to withdraw to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uln/VerifierNetwork.sol\":\"VerifierNetwork\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMessageLibManager.sol\\\";\\nimport \\\"./IMessagingComposer.sol\\\";\\nimport \\\"./IMessagingChannel.sol\\\";\\nimport \\\"./IMessagingContext.sol\\\";\\nimport \\\"./IMessageOrigin.sol\\\";\\n\\ninterface ILayerZeroEndpointV2 is\\n    IMessageLibManager,\\n    IMessagingComposer,\\n    IMessagingChannel,\\n    IMessagingContext,\\n    IMessageOrigin\\n{\\n    struct MessagingParams {\\n        uint32 dstEid;\\n        bytes32 receiver;\\n        bytes message;\\n        bytes options;\\n    }\\n\\n    struct MessagingReceipt {\\n        bytes32 guid;\\n        uint64 nonce;\\n        MessagingFee fee;\\n    }\\n\\n    struct MessagingFee {\\n        uint nativeFee;\\n        uint lzTokenFee;\\n    }\\n\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketDelivered(MessageOrigin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketReceived(MessageOrigin origin, address receiver);\\n\\n    event LzReceiveFailed(MessageOrigin origin, address receiver, bytes reason);\\n\\n    event FeePaid(MessagingFee fee);\\n\\n    event LayerZeroTokenSet(address token);\\n\\n    function quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        bytes calldata _message,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        address payable _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function sendWithAlt(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        uint _altTokenFee\\n    ) external returns (MessagingReceipt memory);\\n\\n    function deliver(MessageOrigin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function deliverable(\\n        MessageOrigin calldata _origin,\\n        address _receiveLib,\\n        address _receiver\\n    ) external view returns (bool);\\n\\n    function lzReceive(\\n        MessageOrigin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable returns (bool, bytes memory);\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are delivered in order\\n    function clear(MessageOrigin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLayerZeroToken(address _layerZeroToken) external;\\n\\n    function layerZeroToken() external view returns (address);\\n\\n    function altFeeToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93a91a12df3614cabdd1964097718da66cb8487964ad7f013a6f5f2dd507f768\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport \\\"./IPacket.sol\\\";\\n\\ninterface IMessageLib is IERC165, IPacket {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (ILayerZeroEndpointV2.MessagingReceipt memory, bytes memory encodedPacket, bytes memory options);\\n\\n    function quote(\\n        PacketForQuote calldata _packet,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (ILayerZeroEndpointV2.MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function setConfig(address _oapp, uint32 _eid, ILayerZeroEndpointV2.SetConfigParam[] calldata _config) external;\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function withdrawFee(address _to, uint _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint _amount) external;\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n}\\n\",\"keccak256\":\"0xbb4357dfe2f9783e888f9731b85611c440d1028fd17669064cde56acd1cdf8e5\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageLibManager {\\n    struct SetConfigParam {\\n        uint32 configType;\\n        bytes config;\\n    }\\n\\n    struct Timeout {\\n        address lib;\\n        uint expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address oldLib, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address oldLib, address newLib);\\n    event ReceiveLibraryTimoutSet(address receiver, uint32 eid, address oldLib, uint timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function defaultConfig(address _lib, uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(uint32 _eid, address _newLib, uint _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(uint32 _eid, address _lib, uint _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function setConfig(address _lib, uint32 _eid, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function snapshotConfig(address _lib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _lib, uint32[] calldata _eids) external;\\n}\\n\",\"keccak256\":\"0xb013b61a9b8c4950aa5bfa966dc4876203dd8a3f55a890cd107f549edca41463\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageOrigin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageOrigin {\\n    struct MessageOrigin {\\n        uint32 srcEid;\\n        bytes32 sender;\\n        uint64 nonce;\\n    }\\n}\\n\",\"keccak256\":\"0x17fe98500a8ff512f22020c5a9522b676af101e6fc11a073ebf162ea02aa2f47\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message can not be delivered for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function hasPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe9c180ca201e8af11747079224729e0552addf70d65c60e7a61a4624a28d4e5c\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposedMessageDelivered(address receiver, address composer, bytes32 guid, bytes message);\\n    event ComposedMessageReceived(\\n        address receiver,\\n        address composer,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller\\n    );\\n    event LzComposeFailed(\\n        address sender,\\n        address receiver,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller,\\n        bytes reason\\n    );\\n\\n    function deliverComposedMessage(address _composer, bytes32 _guid, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _receiver,\\n        address _composer,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable returns (bool, bytes memory);\\n}\\n\",\"keccak256\":\"0x3993726690a51a8660c2145d3d1483e03d93de7a578afc4130467bf6804f6896\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32, address);\\n}\\n\",\"keccak256\":\"0x6af87d5d41d060363fe554ff0ce9138f1ad8e20c1aaeec777d4132fc505e74e8\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IPacket.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPacket {\\n    struct PacketForQuote {\\n        address sender;\\n        uint32 dstEid;\\n        bytes message;\\n    }\\n\\n    struct Packet {\\n        uint64 nonce;\\n        uint32 srcEid;\\n        address sender;\\n        uint32 dstEid;\\n        bytes32 receiver;\\n        bytes32 guid;\\n        bytes message;\\n    }\\n}\\n\",\"keccak256\":\"0x592a61c0cab10494b72da5f4604f2288f5f965e2e941a1622797a9f2aaad597a\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-v1-0.8/contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroUltraLightNodeV2 {\\n    // Relayer functions\\n    function validateTransactionProof(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _lookupHash,\\n        bytes32 _blockData,\\n        bytes calldata _transactionProof\\n    ) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function getAppConfig(\\n        uint16 _remoteChainId,\\n        address _userApplicationAddress\\n    ) external view returns (ApplicationConfiguration memory);\\n\\n    function accruedNativeFee(address _address) external view returns (uint);\\n\\n    struct ApplicationConfiguration {\\n        uint16 inboundProofLibraryVersion;\\n        uint64 inboundBlockConfirmations;\\n        address relayer;\\n        uint16 outboundProofType;\\n        uint64 outboundBlockConfirmations;\\n        address oracle;\\n    }\\n\\n    event HashReceived(\\n        uint16 indexed srcChainId,\\n        address indexed oracle,\\n        bytes32 lookupHash,\\n        bytes32 blockData,\\n        uint confirmations\\n    );\\n    event RelayerParams(bytes adapterParams, uint16 outboundProofType);\\n    event Packet(bytes payload);\\n    event InvalidDst(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event PacketReceived(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);\\n    event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);\\n    event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);\\n    event SetChainAddressSize(uint16 indexed chainId, uint size);\\n    event SetDefaultConfigForChainId(\\n        uint16 indexed chainId,\\n        uint16 inboundProofLib,\\n        uint64 inboundBlockConfirm,\\n        address relayer,\\n        uint16 outboundProofType,\\n        uint64 outboundBlockConfirm,\\n        address oracle\\n    );\\n    event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);\\n    event SetLayerZeroToken(address indexed tokenAddress);\\n    event SetRemoteUln(uint16 indexed chainId, bytes32 uln);\\n    event SetTreasury(address indexed treasuryAddress);\\n    event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);\\n    event WithdrawNative(address indexed msgSender, address indexed to, uint amount);\\n}\\n\",\"keccak256\":\"0x33ca8c5ddf2293c995e0a5a31ed3357ef6a9f399a8af894af8231d4ca2c2f7b3\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Worker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\\\";\\nimport \\\"./interfaces/ILayerZeroPriceFeed.sol\\\";\\nimport \\\"./interfaces/IWorker.sol\\\";\\n\\nabstract contract Worker is AccessControl, IWorker {\\n    bytes32 internal constant MESSAGE_LIB_ROLE = keccak256(\\\"MESSAGE_LIB_ROLE\\\");\\n    bytes32 internal constant ALLOWLIST = keccak256(\\\"ALLOWLIST\\\");\\n    bytes32 internal constant DENYLIST = keccak256(\\\"DENYLIST\\\");\\n    bytes32 internal constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    address public workerFeeLib;\\n\\n    uint64 public allowlistSize;\\n    uint16 public defaultMultiplierBps;\\n    address public priceFeed;\\n\\n    bool public paused;\\n\\n    // ========================= Constructor =========================\\n\\n    /// @param _messageLibs array of message lib addresses that are granted the MESSAGE_LIB_ROLE\\n    /// @param _priceFeed price feed address\\n    /// @param _defaultMultiplierBps default multiplier for worker fee\\n    /// @param _roleAdmin address that is granted the DEFAULT_ADMIN_ROLE (can grant and revoke all roles)\\n    /// @param _admins array of admin addresses that are granted the ADMIN_ROLE\\n    constructor(\\n        address[] memory _messageLibs,\\n        address _priceFeed,\\n        uint16 _defaultMultiplierBps,\\n        address _roleAdmin,\\n        address[] memory _admins\\n    ) {\\n        defaultMultiplierBps = _defaultMultiplierBps;\\n        priceFeed = _priceFeed;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _roleAdmin); // _roleAdmin can grant and revoke all roles\\n\\n        for (uint i = 0; i < _messageLibs.length; ++i) {\\n            _grantRole(MESSAGE_LIB_ROLE, _messageLibs[i]);\\n        }\\n\\n        for (uint i = 0; i < _admins.length; ++i) {\\n            _grantRole(ADMIN_ROLE, _admins[i]);\\n        }\\n    }\\n\\n    // ========================= Modifier =========================\\n\\n    /// @dev Access control list using allowlist and denylist\\n    /// @dev 1) if one address is in the denylist -> deny\\n    /// @dev 2) else if address in the allowlist OR allowlist is empty (allows everyone)-> allow\\n    /// @dev 3) else deny\\n    /// @param _sender address to check\\n    modifier onlyAcl(address _sender) {\\n        if (hasRole(DENYLIST, _sender)) {\\n            revert(\\\"Worker: not allowed\\\");\\n        } else if (allowlistSize == 0 || hasRole(ALLOWLIST, _sender)) {\\n            _;\\n        } else {\\n            revert(\\\"Worker: not allowed\\\");\\n        }\\n    }\\n\\n    /// @dev can be used to pause execution of workers\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Worker: paused\\\");\\n        _;\\n    }\\n\\n    // ========================= OnyDefaultAdmin =========================\\n\\n    /// @dev flag to pause execution of workers (if used with whenNotPaused modifier)\\n    /// @param _paused true to pause, false to unpause\\n    function setPaused(bool _paused) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        paused = _paused;\\n    }\\n\\n    // ========================= OnlyAdmin =========================\\n\\n    /// @param _priceFeed price feed address\\n    function setPriceFeed(address _priceFeed) external onlyRole(ADMIN_ROLE) {\\n        priceFeed = _priceFeed;\\n        emit SetPriceFeed(_priceFeed);\\n    }\\n\\n    /// @param _workerFeeLib worker fee lib address\\n    function setWorkerFeeLib(address _workerFeeLib) external onlyRole(ADMIN_ROLE) {\\n        workerFeeLib = _workerFeeLib;\\n        emit SetWorkerLib(_workerFeeLib);\\n    }\\n\\n    /// @param _multiplierBps default multiplier for worker fee\\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external onlyRole(ADMIN_ROLE) {\\n        defaultMultiplierBps = _multiplierBps;\\n        emit SetDefaultMultiplierBps(_multiplierBps);\\n    }\\n\\n    /// @dev supports withdrawing fee from ULN301, ULN302 and more\\n    /// @param _lib message lib address\\n    /// @param _to address to withdraw fee to\\n    /// @param _amount amount to withdraw\\n    function withdrawFee(address _lib, address _to, uint _amount) external onlyRole(ADMIN_ROLE) {\\n        require(hasRole(MESSAGE_LIB_ROLE, _lib), \\\"Worker: Invalid message lib\\\");\\n        IMessageLib(_lib).withdrawFee(_to, _amount);\\n        emit Withdraw(_lib, _to, _amount);\\n    }\\n\\n    /// @dev overrides AccessControl to allow for counting of allowlistSize\\n    /// @param _role role to grant\\n    /// @param _account address to grant role to\\n    function _grantRole(bytes32 _role, address _account) internal override {\\n        if (_role == ALLOWLIST && !hasRole(_role, _account)) {\\n            ++allowlistSize;\\n        }\\n        super._grantRole(_role, _account);\\n    }\\n\\n    /// @dev overrides AccessControl to allow for counting of allowlistSize\\n    /// @param _role role to revoke\\n    /// @param _account address to revoke role from\\n    function _revokeRole(bytes32 _role, address _account) internal override {\\n        if (_role == ALLOWLIST && hasRole(_role, _account)) {\\n            --allowlistSize;\\n        }\\n        super._revokeRole(_role, _account);\\n    }\\n\\n    /// @dev overrides AccessControl to disable renouncing of roles\\n    function renounceRole(bytes32 /*role*/, address /*account*/) public pure override {\\n        revert(\\\"Worker: cannot renounce role\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf880b288e27253e4d212af8ffc773594ce071c8b86d1f11a12b93d5d7ca78d59\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroPriceFeed {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 20, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^20 = 10 ^ 30.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint32 eid;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint32 eid;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    function nativeTokenPriceUSD() external view returns (uint128);\\n\\n    function getFee(uint32 _dstEid, uint _callDataSize, uint _gas) external returns (uint);\\n\\n    function getPrice(uint32 _dstEid) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n\\n    function estimateFeeByEid(\\n        uint32 _dstEid,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external view returns (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n\\n    function estimateFeeOnSend(\\n        uint32 _dstEid,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external payable returns (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n}\\n\",\"keccak256\":\"0x110a23e06954a46cb8db6fcb8b40d1d1bd395a74a7d861daa48999ab5c2114a7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IMessageLibBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageLibBase {\\n    enum DeliveryState {\\n        Signing,\\n        Deliverable,\\n        Delivered,\\n        Waiting\\n    }\\n}\\n\",\"keccak256\":\"0xc4654f618f55ce5724282ce4e28f9f9e8a6d51f32cfe6c114068e3f75bd34c45\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWorker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWorker {\\n    event SetWorkerLib(address workerLib);\\n    event SetPriceFeed(address priceFeed);\\n    event SetDefaultMultiplierBps(uint16 multiplierBps);\\n    event Withdraw(address lib, address to, uint amount);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function priceFeed() external view returns (address);\\n\\n    function setDefaultMultiplierBps(uint16 _multiplierBps) external;\\n\\n    function defaultMultiplierBps() external view returns (uint16);\\n\\n    function withdrawFee(address _lib, address _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xa3b5b849fe4643c969557baf7b6cc330eb2e734b3c1d49ffdbb75037d94eb538\",\"license\":\"BUSL-1.1\"},\"contracts/uln/MultiSig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nabstract contract MultiSig {\\n    mapping(address signer => bool active) public signers;\\n    uint64 public signerSize;\\n    uint64 public quorum;\\n\\n    event UpdateSigner(address _signer, bool _active);\\n    event UpdateQuorum(uint64 _quorum);\\n\\n    modifier onlySigner() {\\n        require(signers[msg.sender], \\\"MultiSig: caller must be signer\\\");\\n        _;\\n    }\\n\\n    constructor(address[] memory _signers, uint64 _quorum) {\\n        require(_signers.length >= _quorum && _quorum > 0, \\\"MultiSig: signers too few\\\");\\n\\n        address lastSigner = address(0);\\n        for (uint i = 0; i < _signers.length; i++) {\\n            address signer = _signers[i];\\n            require(signer > lastSigner, \\\"MultiSig: signers not sorted\\\"); // to ensure no duplicates\\n            signers[signer] = true;\\n            lastSigner = signer;\\n        }\\n        signerSize = uint64(_signers.length);\\n        quorum = _quorum;\\n    }\\n\\n    function _setSigner(address _signer, bool _active) internal {\\n        require(signers[_signer] != _active, \\\"MultiSig: signer already in that state\\\");\\n        signers[_signer] = _active;\\n        signerSize = _active ? signerSize + 1 : signerSize - 1;\\n        require(signerSize >= quorum, \\\"MultiSig: committee size < threshold\\\");\\n        emit UpdateSigner(_signer, _active);\\n    }\\n\\n    function _setQuorum(uint64 _quorum) internal {\\n        require(_quorum <= signerSize && _quorum > 0, \\\"MultiSig: invalid quorum\\\");\\n        quorum = _quorum;\\n        emit UpdateQuorum(_quorum);\\n    }\\n\\n    function verifySignatures(bytes32 _hash, bytes calldata _signatures) public view returns (bool) {\\n        if (_signatures.length < uint(quorum) * 65) {\\n            return false;\\n        }\\n\\n        bytes32 messageDigest = _getEthSignedMessageHash(_hash);\\n\\n        address lastSigner = address(0); // There cannot be a signer with address 0.\\n        for (uint i = 0; i < quorum; i++) {\\n            (uint8 v, bytes32 r, bytes32 s) = _splitSignature(_signatures, i);\\n            address currentSigner = ecrecover(messageDigest, v, r, s);\\n\\n            if (currentSigner <= lastSigner) return false; // prevent duplicate signatures\\n            if (!signers[currentSigner]) return false; // signature is not from a signer\\n            lastSigner = currentSigner;\\n        }\\n        return true;\\n    }\\n\\n    /// divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\\n    function _splitSignature(\\n        bytes memory _signatures,\\n        uint256 _pos\\n    ) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        // The signature format is a compact form of:\\n        //   {bytes32 r}{bytes32 s}{uint8 v}\\n        // Compact means, uint8 is not padded to 32 bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, _pos)\\n            r := mload(add(_signatures, add(signaturePos, 0x20)))\\n            s := mload(add(_signatures, add(signaturePos, 0x40)))\\n            // Here we are loading the last 32 bytes, including 31 bytes\\n            // of 's'. There is no 'mload8' to do this.\\n            //\\n            // 'byte' is not working due to the Solidity parser, so lets\\n            // use the second best option, 'and'\\n            v := and(mload(add(_signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n\\n    function _getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe6ab9c526b60412995be7b18ec694862ec143487c19e429500deef1a7202255a\",\"license\":\"BUSL-1.1\"},\"contracts/uln/VerifierNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@layerzerolabs/lz-evm-v1-0.8/contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\\\";\\n\\nimport \\\"../Worker.sol\\\";\\nimport \\\"./MultiSig.sol\\\";\\nimport \\\"./interfaces/IVerifier.sol\\\";\\nimport \\\"./interfaces/IVerifierFeeLib.sol\\\";\\nimport \\\"./interfaces/IUltraLightNode.sol\\\";\\nimport \\\"../interfaces/IMessageLibBase.sol\\\";\\n\\nstruct ExecuteParam {\\n    address target;\\n    bytes callData;\\n    uint expiration;\\n    bytes signatures;\\n}\\n\\ncontract VerifierNetwork is Worker, MultiSig, IVerifier {\\n    mapping(uint32 dstEid => DstConfig) public dstConfig;\\n    mapping(bytes32 executableHash => bool used) public usedHashes;\\n\\n    event ExecuteFailed(uint _index, bytes _data);\\n    event HashAlreadyUsed(ExecuteParam param, bytes32 _hash);\\n\\n    // ========================= Constructor =========================\\n\\n    /// @dev VerifierNetwork doesn't have a roleAdmin (address(0x0))\\n    /// @dev Supports all of ULNv2, ULN301, ULN302 and more\\n    /// @param _messageLibs array of message lib addresses that are granted the MESSAGE_LIB_ROLE\\n    /// @param _priceFeed price feed address\\n    /// @param _signers array of signer addresses for multisig\\n    /// @param _quorum quorum for multisig\\n    /// @param _admins array of admin addresses that are granted the ADMIN_ROLE\\n    constructor(\\n        address[] memory _messageLibs,\\n        address _priceFeed,\\n        address[] memory _signers,\\n        uint64 _quorum,\\n        address[] memory _admins\\n    ) Worker(_messageLibs, _priceFeed, 12000, address(0x0), _admins) MultiSig(_signers, _quorum) {}\\n\\n    // ========================= Modifier =========================\\n\\n    /// @dev depending on role, restrict access to only self or admin\\n    /// @dev ALLOWLIST, DENYLIST, MESSAGE_LIB_ROLE can only be granted/revoked by self\\n    /// @dev ADMIN_ROLE can only be granted/revoked by admin\\n    /// @dev reverts if not one of the above roles\\n    /// @param _role role to check\\n    modifier onlySelfOrAdmin(bytes32 _role) {\\n        if (_role == ALLOWLIST || _role == DENYLIST || _role == MESSAGE_LIB_ROLE) {\\n            // self required\\n            require(address(this) == msg.sender, \\\"Verifier: caller must be self\\\");\\n        } else if (_role == ADMIN_ROLE) {\\n            // admin required\\n            _checkRole(ADMIN_ROLE);\\n        } else {\\n            revert(\\\"Verifier: invalid role\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlySelf() {\\n        require(address(this) == msg.sender, \\\"Verifier: caller must be self\\\");\\n        _;\\n    }\\n\\n    // ========================= OnlySelf =========================\\n\\n    /// @dev set signers for multisig\\n    /// @param _signer signer address\\n    /// @param _active true to add, false to remove\\n    function setSigner(address _signer, bool _active) external onlySelf {\\n        _setSigner(_signer, _active);\\n    }\\n\\n    /// @dev set quorum for multisig\\n    /// @param _quorum to set\\n    function setQuorum(uint64 _quorum) external onlySelf {\\n        _setQuorum(_quorum);\\n    }\\n\\n    /// @dev one function to verify and deliver to ULN302 and more (does not support ULN301)\\n    /// @param _uln IUltraLightNode compatible contract\\n    /// @param _packetHeader packet header\\n    /// @param _payloadHash payload hash\\n    /// @param _confirmations block confirmations\\n    function verifyAndDeliver(\\n        IUltraLightNode _uln,\\n        bytes calldata _packetHeader,\\n        bytes32 _payloadHash,\\n        uint64 _confirmations\\n    ) external onlySelf {\\n        require(hasRole(MESSAGE_LIB_ROLE, address(_uln)), \\\"Verifier: invalid uln\\\");\\n        _uln.verify(_packetHeader, _payloadHash, _confirmations);\\n        if (_uln.deliverable(_packetHeader, _payloadHash) == IMessageLibBase.DeliveryState.Deliverable) {\\n            _uln.deliver(_packetHeader, _payloadHash);\\n        }\\n    }\\n\\n    // ========================= OnlySelf / OnlyAdmin =========================\\n\\n    /// @dev overrides AccessControl to allow self/admin to grant role'\\n    /// @param _role role to grant\\n    /// @param _account account to grant role to\\n    function grantRole(bytes32 _role, address _account) public override onlySelfOrAdmin(_role) {\\n        _grantRole(_role, _account);\\n    }\\n\\n    /// @dev overrides AccessControl to allow self/admin to revoke role\\n    /// @param _role role to revoke\\n    /// @param _account account to revoke role from\\n    function revokeRole(bytes32 _role, address _account) public override onlySelfOrAdmin(_role) {\\n        _revokeRole(_role, _account);\\n    }\\n\\n    // ========================= OnlyAdmin =========================\\n\\n    /// @param _params array of DstConfigParam\\n    function setDstConfig(DstConfigParam[] calldata _params) external onlyRole(ADMIN_ROLE) {\\n        for (uint i = 0; i < _params.length; ++i) {\\n            DstConfigParam calldata param = _params[i];\\n            dstConfig[param.dstEid] = DstConfig(param.gas, param.multiplierBps, param.floorMarginUSD);\\n        }\\n        emit SetDstConfig(_params);\\n    }\\n\\n    /// @dev takes a list of instructions and executes them in order\\n    /// @dev if any of the instructions fail, it will emit an error event and continue to execute the rest of the instructions\\n    /// @param _params array of ExecuteParam, includes target, callData, expiration, signatures\\n    function execute(ExecuteParam[] calldata _params) external onlyRole(ADMIN_ROLE) {\\n        for (uint i = 0; i < _params.length; ++i) {\\n            ExecuteParam calldata param = _params[i];\\n\\n            // 1. skip if expired\\n            if (param.expiration <= block.timestamp) {\\n                continue;\\n            }\\n\\n            // generate and validate hash\\n            bytes32 hash = hashCallData(param.target, param.callData, param.expiration);\\n\\n            // 2. skip if hash used\\n            if (_shouldCheckHash(bytes4(param.callData))) {\\n                if (usedHashes[hash]) {\\n                    emit HashAlreadyUsed(param, hash);\\n                    continue;\\n                } else {\\n                    usedHashes[hash] = true; // prevent reentry and replay attack\\n                }\\n            }\\n\\n            // 3. check signatures\\n            if (verifySignatures(hash, param.signatures)) {\\n                // execute call data\\n                (bool success, bytes memory rtnData) = param.target.call(param.callData);\\n                if (!success) {\\n                    emit ExecuteFailed(i, rtnData);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev to support ULNv2\\n    /// @param _lib message lib address\\n    /// @param _to address to withdraw to\\n    /// @param _amount amount to withdraw\\n    function withdrawFeeFromUlnV2(address _lib, address payable _to, uint _amount) external onlyRole(ADMIN_ROLE) {\\n        require(hasRole(MESSAGE_LIB_ROLE, _lib), \\\"Verifier: Invalid message lib\\\");\\n        ILayerZeroUltraLightNodeV2(_lib).withdrawNative(_to, _amount);\\n    }\\n\\n    // ========================= OnlyMessageLib =========================\\n\\n    /// @dev for ULN301, ULN302 and more to assign job\\n    /// @dev verifier network can reject job from _sender by adding/removing them from allowlist/denylist\\n    /// @param _dstEid destination EndpointId\\n    /// @param _confirmations block confirmations\\n    /// @param _sender message sender address\\n    /// @param _options verifier options\\n    function assignJob(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external payable onlyRole(MESSAGE_LIB_ROLE) onlyAcl(_sender) returns (uint totalFee) {\\n        IVerifierFeeLib.FeeParams memory params = IVerifierFeeLib.FeeParams(\\n            priceFeed,\\n            _dstEid,\\n            _confirmations,\\n            _sender,\\n            quorum,\\n            defaultMultiplierBps\\n        );\\n        totalFee = IVerifierFeeLib(workerFeeLib).getFeeOnSend(params, dstConfig[_dstEid], _options);\\n        emit AssignJob(_dstEid, _sender, _confirmations, totalFee);\\n    }\\n\\n    /// @dev to support ULNv2\\n    /// @dev verifier network can reject job from _sender by adding/removing them from allowlist/denylist\\n    /// @param _dstEid destination EndpointId\\n    /// @param //_outboundProofType outbound proof type\\n    /// @param _confirmations block confirmations\\n    /// @param _sender message sender address\\n    function assignJob(\\n        uint16 _dstEid,\\n        uint16 /*_outboundProofType*/,\\n        uint64 _confirmations,\\n        address _sender\\n    ) external onlyRole(MESSAGE_LIB_ROLE) onlyAcl(_sender) returns (uint totalFee) {\\n        uint32 dstEid = uint32(_dstEid);\\n\\n        IVerifierFeeLib.FeeParams memory params = IVerifierFeeLib.FeeParams(\\n            priceFeed,\\n            _dstEid,\\n            _confirmations,\\n            _sender,\\n            quorum,\\n            defaultMultiplierBps\\n        );\\n        totalFee = IVerifierFeeLib(workerFeeLib).getFeeOnSend(params, dstConfig[_dstEid], bytes(\\\"\\\"));\\n        emit AssignJob(dstEid, _sender, _confirmations, totalFee);\\n    }\\n\\n    // ========================= View =========================\\n\\n    /// @dev getFee can revert if _sender doesn't pass ACL\\n    /// @param _dstEid destination EndpointId\\n    /// @param _confirmations block confirmations\\n    /// @param _sender message sender address\\n    /// @param _options verifier options\\n    /// @return fee fee in native amount\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view onlyAcl(_sender) returns (uint fee) {\\n        IVerifierFeeLib.FeeParams memory params = IVerifierFeeLib.FeeParams(\\n            priceFeed,\\n            _dstEid,\\n            _confirmations,\\n            _sender,\\n            quorum,\\n            defaultMultiplierBps\\n        );\\n        return IVerifierFeeLib(workerFeeLib).getFee(params, dstConfig[_dstEid], _options);\\n    }\\n\\n    /// @dev to support ULNv2\\n    /// @dev getFee can revert if _sender doesn't pass ACL\\n    /// @param _dstEid destination EndpointId\\n    /// @param //_outboundProofType outbound proof type\\n    /// @param _confirmations block confirmations\\n    /// @param _sender message sender address\\n    function getFee(\\n        uint16 _dstEid,\\n        uint16 /*_outboundProofType*/,\\n        uint64 _confirmations,\\n        address _sender\\n    ) public view onlyAcl(_sender) returns (uint fee) {\\n        IVerifierFeeLib.FeeParams memory params = IVerifierFeeLib.FeeParams(\\n            priceFeed,\\n            _dstEid,\\n            _confirmations,\\n            _sender,\\n            quorum,\\n            defaultMultiplierBps\\n        );\\n        return IVerifierFeeLib(workerFeeLib).getFee(params, dstConfig[_dstEid], bytes(\\\"\\\"));\\n    }\\n\\n    /// @param _target target address\\n    /// @param _callData call data\\n    /// @param _expiration expiration timestamp\\n    /// @return hash of above\\n    function hashCallData(address _target, bytes calldata _callData, uint _expiration) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_target, _expiration, _callData));\\n    }\\n\\n    // ========================= Internal =========================\\n\\n    /// @dev to save gas, we don't check hash for some functions (where replaying won't change the state)\\n    /// @param _functionSig function signature\\n    /// @return true if should check hash\\n    function _shouldCheckHash(bytes4 _functionSig) internal pure returns (bool) {\\n        // never check for these selectors to save gas\\n        return\\n            _functionSig != IUltraLightNode.verify.selector && // replaying won't change the state\\n            _functionSig != this.verifyAndDeliver.selector && // replaying calls deliver on top of verify, which will be rejected at uln if not deliverable\\n            _functionSig != ILayerZeroUltraLightNodeV2.updateHash.selector; // replaying will be revert at uln\\n    }\\n}\\n\",\"keccak256\":\"0x1156e01aac12e21e757a3106237a428c58df74ca16258a91de0335f8a8e5c56a\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/ILayerZeroVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroVerifier {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function assignJob(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external payable returns (uint fee);\\n\\n    // @notice query the verifier fee for relaying block information to the destination chain\\n    // @param _dstEid the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view returns (uint fee);\\n}\\n\",\"keccak256\":\"0x1b67dc834fa9d7148bc6a7261c14ab50cb70dd3fbf34191cfefdb747bfcb4f28\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/IUltraLightNode.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IMessageLibBase.sol\\\";\\n\\ninterface IUltraLightNode is IMessageLibBase {\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external;\\n\\n    function deliver(bytes calldata _packetHeader, bytes32 _payloadHash) external;\\n\\n    function deliverable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (DeliveryState);\\n}\\n\",\"keccak256\":\"0xb706f75353289251ba46e50f10bbfed03b69610a7c1ec6a09d5cc1c9d14c6cbd\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IWorker.sol\\\";\\nimport \\\"./ILayerZeroVerifier.sol\\\";\\n\\ninterface IVerifier is IWorker, ILayerZeroVerifier {\\n    struct DstConfigParam {\\n        uint32 dstEid;\\n        uint64 gas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD;\\n    }\\n\\n    struct DstConfig {\\n        uint64 gas;\\n        uint16 multiplierBps;\\n        uint128 floorMarginUSD; // uses priceFeed PRICE_RATIO_DENOMINATOR\\n    }\\n\\n    event AssignJob(uint32 dstEid, address oapp, uint64 confirmations, uint totalFee);\\n    event SetDstConfig(DstConfigParam[] params);\\n\\n    function dstConfig(uint32 _dstEid) external view returns (uint64, uint16, uint128);\\n}\\n\",\"keccak256\":\"0xd69af95b2050a711986309e2b553e0b617c0312f1f8e23efd53c848323f2a962\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/IVerifierFeeLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IVerifier.sol\\\";\\n\\ninterface IVerifierFeeLib {\\n    struct FeeParams {\\n        address priceFeed;\\n        uint32 dstEid;\\n        uint64 confirmations;\\n        address sender;\\n        uint64 quorum;\\n        uint16 defaultMultiplierBps;\\n    }\\n\\n    function getFeeOnSend(\\n        FeeParams memory _params,\\n        IVerifier.DstConfig memory _dstConfig,\\n        bytes memory _options\\n    ) external returns (uint fee);\\n\\n    function getFee(\\n        FeeParams calldata _params,\\n        IVerifier.DstConfig calldata _dstConfig,\\n        bytes calldata _options\\n    ) external view returns (uint fee);\\n}\\n\",\"keccak256\":\"0xa8ac802e58403a8455b61e4e0b63d179223c0299de91069210c4b84f2026b15f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620045d0380380620045d08339810160408190526200003491620004fa565b6001805461ffff60e01b191661017760e51b179055600280546001600160a01b0319166001600160a01b03861617905582828686612ee06000866200007a8280620002cc565b60005b8551811015620000e857620000d57f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de878381518110620000c157620000c1620005b8565b6020026020010151620002cc60201b60201c565b620000e081620005e4565b90506200007d565b5060005b81518110156200014357620001307fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775838381518110620000c157620000c1620005b8565b6200013b81620005e4565b9050620000ec565b505050505050806001600160401b03168251101580156200016d57506000816001600160401b0316115b620001bf5760405162461bcd60e51b815260206004820152601960248201527f4d756c74695369673a207369676e65727320746f6f206665770000000000000060448201526064015b60405180910390fd5b6000805b83518110156200028b576000848281518110620001e457620001e4620005b8565b60200260200101519050826001600160a01b0316816001600160a01b031611620002515760405162461bcd60e51b815260206004820152601c60248201527f4d756c74695369673a207369676e657273206e6f7420736f72746564000000006044820152606401620001b6565b6001600160a01b0381166000908152600360205260409020805460ff191660011790559150806200028281620005e4565b915050620001c3565b50509051600480546001600160401b0393841668010000000000000000026001600160801b0319909116939092169290921717905550620006319350505050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca821480156200031d57506000828152602081815260408083206001600160a01b038516845290915290205460ff16155b156200036a57600180546014906200034590600160a01b90046001600160401b031662000600565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505b6200037682826200037a565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000376576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003d63390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200044857600080fd5b919050565b600082601f8301126200045f57600080fd5b815160206001600160401b03808311156200047e576200047e6200041a565b8260051b604051601f19603f83011681018181108482111715620004a657620004a66200041a565b604052938452858101830193838101925087851115620004c557600080fd5b83870191505b84821015620004ef57620004df8262000430565b83529183019190830190620004cb565b979650505050505050565b600080600080600060a086880312156200051357600080fd5b85516001600160401b03808211156200052b57600080fd5b6200053989838a016200044d565b9650620005496020890162000430565b955060408801519150808211156200056057600080fd5b6200056e89838a016200044d565b94506060880151915080821682146200058657600080fd5b6080880151919350808211156200059c57600080fd5b50620005ab888289016200044d565b9150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620005f957620005f9620005ce565b5060010190565b60006001600160401b038281166002600160401b03198101620006275762000627620005ce565b6001019392505050565b613f8f80620006416000396000f3fe6080604052600436106102185760003560e01c80638585c9451161011d578063c5e193cd116100b0578063d547741f1161007f578063e4fbd90311610064578063e4fbd903146107bb578063f3ad31f4146107ce578063fd62e750146107ee57600080fd5b8063d547741f1461077b578063dafe0ccc1461079b57600080fd5b8063c5e193cd146106e2578063c7a823e014610702578063c7b2370b14610722578063d2ae21041461074257600080fd5b8063aef18bf7116100ec578063aef18bf714610645578063b724b13314610675578063c358de0a14610695578063c416aa51146106b557600080fd5b80638585c9451461051a57806391d148541461053a5780639e9449651461058b578063a217fddf1461063057600080fd5b806330bb3aac116101b05780635553fb8e1161017f578063724e78da11610164578063724e78da14610478578063736c0d5b14610498578063741bef1a146104c857600080fd5b80635553fb8e146104265780635c975abb1461044657600080fd5b806330bb3aac146103a657806331cb6105146103c657806336568abe146103e657806352d3b8711461040657600080fd5b80631703a018116101ec5780631703a018146102e2578063248a9ca3146103285780632d80eb36146103665780632f2ff15d1461038657600080fd5b8062bf2e801461021d57806301ffc9a7146102705780631095b6d7146102a057806316c38b3c146102c2575b600080fd5b34801561022957600080fd5b50600154610258907c0100000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561027c57600080fd5b5061029061028b36600461317f565b61080f565b6040519015158152602001610267565b3480156102ac57600080fd5b506102c06102bb3660046131e3565b6108a8565b005b3480156102ce57600080fd5b506102c06102dd366004613239565b610a6c565b3480156102ee57600080fd5b5060045461030f9068010000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610267565b34801561033457600080fd5b50610358610343366004613254565b60009081526020819052604090206001015490565b604051908152602001610267565b34801561037257600080fd5b506102c061038136600461326d565b610ac2565b34801561039257600080fd5b506102c06103a13660046132e2565b610d05565b3480156103b257600080fd5b506103586103c1366004613387565b610eb1565b3480156103d257600080fd5b506102c06103e13660046133ff565b611171565b3480156103f257600080fd5b506102c06104013660046132e2565b6111e8565b34801561041257600080fd5b506102c0610421366004613434565b61124a565b34801561043257600080fd5b506103586104413660046134a9565b61141e565b34801561045257600080fd5b506002546102909074010000000000000000000000000000000000000000900460ff1681565b34801561048457600080fd5b506102c06104933660046134ff565b61167a565b3480156104a457600080fd5b506102906104b33660046134ff565b60036020526000908152604090205460ff1681565b3480156104d457600080fd5b506002546104f59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610267565b34801561052657600080fd5b506102c061053536600461351c565b61171f565b34801561054657600080fd5b506102906105553660046132e2565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561059757600080fd5b506105f56105a6366004613537565b60056020526000908152604090205467ffffffffffffffff81169068010000000000000000810461ffff16906a010000000000000000000090046fffffffffffffffffffffffffffffffff1683565b6040805167ffffffffffffffff909416845261ffff90921660208401526fffffffffffffffffffffffffffffffff1690820152606001610267565b34801561063c57600080fd5b50610358600081565b34801561065157600080fd5b50610290610660366004613254565b60066020526000908152604090205460ff1681565b34801561068157600080fd5b506102c0610690366004613552565b611794565b3480156106a157600080fd5b506102c06106b03660046135c2565b611a7b565b3480156106c157600080fd5b506001546104f59073ffffffffffffffffffffffffffffffffffffffff1681565b3480156106ee57600080fd5b506103586106fd3660046134a9565b611b28565b34801561070e57600080fd5b5061029061071d3660046135dd565b611e23565b34801561072e57600080fd5b506102c061073d3660046134ff565b612039565b34801561074e57600080fd5b5060015461030f9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b34801561078757600080fd5b506102c06107963660046132e2565b6120d6565b3480156107a757600080fd5b506102c06107b63660046131e3565b61221b565b6103586107c9366004613387565b612381565b3480156107da57600080fd5b506103586107e9366004613629565b612676565b3480156107fa57600080fd5b5060045461030f9067ffffffffffffffff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806108a257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756108d2816126af565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff16610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f576f726b65723a20496e76616c6964206d657373616765206c6962000000000060448201526064015b60405180910390fd5b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b6000610a77816126af565b506002805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610aec816126af565b60005b82811015610cff5736848483818110610b0a57610b0a613685565b9050602002810190610b1c91906136b4565b905042816040013511610b2f5750610cef565b6000610b58610b4160208401846134ff565b610b4e60208501856136f2565b8560400135612676565b9050610b78610b6a60208401846136f2565b610b7391613757565b6126b9565b15610c0c5760008181526006602052604090205460ff1615610bd4577f9c26528f222eb4f79639dea7fe30c7257c124af7ed741437170674ca68249e4e8282604051610bc592919061384c565b60405180910390a15050610cef565b600081815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b610c1d8161071d60608501856136f2565b15610cec57600080610c3260208501856134ff565b73ffffffffffffffffffffffffffffffffffffffff16610c5560208601866136f2565b604051610c639291906138fb565b6000604051808303816000865af19150503d8060008114610ca0576040519150601f19603f3d011682016040523d82523d6000602084013e610ca5565b606091505b509150915081610ce9577fdc8cdd96296241bbefda4a8e18ad2e0985a8da6495b34d409cfc4c886ee3b0cf8582604051610ce0929190613979565b60405180910390a15b50505b50505b610cf8816139c9565b9050610aef565b50505050565b817f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca811480610d5357507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e481145b80610d7d57507f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de81145b15610df057303314610deb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b610ea2565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758103610e4057610deb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756126af565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f56657269666965723a20696e76616c696420726f6c6500000000000000000000604482015260640161097c565b610eac83836127a2565b505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e866305536020526040812054849060ff1615610f62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff161580610fd7575073ffffffffffffffffffffffffffffffffffffffff811660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15611105576040805160c08101825260025473ffffffffffffffffffffffffffffffffffffffff908116825263ffffffff8a16602080840182905267ffffffffffffffff808c16858701528a8416606086015260048054680100000000000000009004909116608086015260015461ffff7c010000000000000000000000000000000000000000000000000000000082041660a0870152600093845260059092529185902094517f7bfa20a90000000000000000000000000000000000000000000000000000000081529394921692637bfa20a9926110bc9286928b918b9101613a01565b602060405180830381865afa1580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd9190613ace565b925050611167565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b5095945050505050565b3033146111da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b6111e48282612867565b5050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f576f726b65723a2063616e6e6f742072656e6f756e636520726f6c6500000000604482015260640161097c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611274816126af565b60005b828110156113df573684848381811061129257611292613685565b905060800201905060405180606001604052808260200160208101906112b8919061351c565b67ffffffffffffffff1681526020016112d760608401604085016135c2565b61ffff1681526020016112f06080840160608501613b07565b6fffffffffffffffffffffffffffffffff169052600560006113156020850185613537565b63ffffffff1681526020808201929092526040908101600020835181549385015194909201516fffffffffffffffffffffffffffffffff166a0100000000000000000000027fffffffffffff00000000000000000000000000000000ffffffffffffffffffff61ffff90951668010000000000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090941667ffffffffffffffff909316929092179290921792909216919091179055506113d8816139c9565b9050611277565b507f7dd21e42791b013d1929e86f0c59085e4fca24251f0f1aa81917b3b1611766e08383604051611411929190613b22565b60405180910390a1505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e866305536020526040812054829060ff16156114cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff161580611544575073ffffffffffffffffffffffffffffffffffffffff811660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15611105576040805160c08101825260025473ffffffffffffffffffffffffffffffffffffffff908116825261ffff808a16602080850182905267ffffffffffffffff808b168688015289851660608701526004805468010000000000000000900490911660808701526001547c0100000000000000000000000000000000000000000000000000000000810490941660a08701526000928352600582528683208751928301885292825295517f7bfa20a900000000000000000000000000000000000000000000000000000000815294959290931693637bfa20a99361162e9387939201613bc0565b602060405180830381865afa15801561164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166f9190613ace565b979650505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756116a4816126af565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b303314611788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b61179181612ad1565b50565b3033146117fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b73ffffffffffffffffffffffffffffffffffffffff851660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff166118ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f56657269666965723a20696e76616c696420756c6e0000000000000000000000604482015260640161097c565b6040517f0223536e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690630223536e90611903908790879087908790600401613c96565b600060405180830381600087803b15801561191d57600080fd5b505af1158015611931573d6000803e3d6000fd5b506001925061193e915050565b6040517f7c0cf76300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690637c0cf7639061199490889088908890600401613cfa565b602060405180830381865afa1580156119b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d59190613d1e565b60038111156119e6576119e6613ccb565b03611a74576040517f5ed31c5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690635ed31c5990611a4190879087908790600401613cfa565b600060405180830381600087803b158015611a5b57600080fd5b505af1158015611a6f573d6000803e3d6000fd5b505050505b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611aa5816126af565b600180547fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001611713565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de611b54816126af565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e866305536020526040902054839060ff1615611c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff161580611c7a575073ffffffffffffffffffffffffffffffffffffffff811660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15611105576040805160c08101825260025473ffffffffffffffffffffffffffffffffffffffff908116825261ffff808b16602080850182905267ffffffffffffffff808c16868801528a851660608701526004805468010000000000000000900490911660808701526001547c0100000000000000000000000000000000000000000000000000000000810490941660a08701526000838152600583528781208851938401895290835296517fdf2b057e0000000000000000000000000000000000000000000000000000000081529296939094169363df2b057e93611d65938793919201613bc0565b6020604051808303816000875af1158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da89190613ace565b6040805163ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff8916602082015267ffffffffffffffff8a16818301526060810183905290519196507f2fc4e514b16a8f0f9f15009b848663b25939a33de41fa2b98a534b3ac4d5a572919081900360800190a150505050949350505050565b600454600090611e4a9068010000000000000000900467ffffffffffffffff166041613d3f565b821015611e5957506000612032565b6000611eb2856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506000805b60045468010000000000000000900467ffffffffffffffff1681101561202a576000806000611f1e89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250612bdc915050565b925092509250600060018785858560405160008152602001604052604051611f62949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611f84573d6000803e3d6000fd5b5050506020604051035190508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611611fd3576000975050505050505050612032565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090205460ff16612010576000975050505050505050612032565b809550505050508080612022906139c9565b915050611eb8565b506001925050505b9392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612063816126af565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001611713565b817f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca81148061212457507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e481145b8061214e57507f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de81145b156121c1573033146121bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b612211565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758103610e40576121bc7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756126af565b610eac8383612bfa565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612245816126af565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff166122f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a20496e76616c6964206d657373616765206c6962000000604482015260640161097c565b6040517f07b18bde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490528516906307b18bde90604401600060405180830381600087803b15801561236357600080fd5b505af1158015612377573d6000803e3d6000fd5b5050505050505050565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de6123ad816126af565b73ffffffffffffffffffffffffffffffffffffffff851660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e866305536020526040902054859060ff161561245e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff1615806124d3575073ffffffffffffffffffffffffffffffffffffffff811660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15611105576040805160c08101825260025473ffffffffffffffffffffffffffffffffffffffff908116825263ffffffff8b16602080840182905267ffffffffffffffff808d16858701528b8416606086015260048054680100000000000000009004909116608086015260015461ffff7c010000000000000000000000000000000000000000000000000000000082041660a0870152600093845260059092529185902094517fdf2b057e000000000000000000000000000000000000000000000000000000008152939492169263df2b057e926125b89286928c918c9101613a01565b6020604051808303816000875af11580156125d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fb9190613ace565b6040805163ffffffff8c16815273ffffffffffffffffffffffffffffffffffffffff8a16602082015267ffffffffffffffff8b16818301526060810183905290519195507f2fc4e514b16a8f0f9f15009b848663b25939a33de41fa2b98a534b3ac4d5a572919081900360800190a150505095945050505050565b60008482858560405160200161268f9493929190613d56565b604051602081830303815290604052805190602001209050949350505050565b6117918133612cbe565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f0223536e000000000000000000000000000000000000000000000000000000001480159061274f57507fffffffff0000000000000000000000000000000000000000000000000000000082167fb724b1330000000000000000000000000000000000000000000000000000000014155b80156108a257507fffffffff0000000000000000000000000000000000000000000000000000000082167f704316e500000000000000000000000000000000000000000000000000000000141592915050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca821480156127ff575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b1561285d57600180546014906128369074010000000000000000000000000000000000000000900467ffffffffffffffff16613d9c565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6111e48282612d76565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604090205481151560ff909116151503612924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d756c74695369673a207369676e657220616c726561647920696e207468617460448201527f2073746174650000000000000000000000000000000000000000000000000000606482015260840161097c565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682151517905580612996576004546129919060019067ffffffffffffffff16613dc3565b6129ae565b6004546129ae9067ffffffffffffffff166001613deb565b600480547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92831690811791829055680100000000000000009091049091161115612a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4d756c74695369673a20636f6d6d69747465652073697a65203c20746872657360448201527f686f6c6400000000000000000000000000000000000000000000000000000000606482015260840161097c565b6040805173ffffffffffffffffffffffffffffffffffffffff8416815282151560208201527f863d338cad74814b108a06288ad5e0e80d56495e0332238b1d2cdcfa0ca8e5ce9101611713565b60045467ffffffffffffffff90811690821611801590612afb575060008167ffffffffffffffff16115b612b61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4d756c74695369673a20696e76616c69642071756f72756d0000000000000000604482015260640161097c565b600480547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff8416908102919091179091556040519081527fb600f3cf7f38a4b49bb0c75f722ef69f7e3e39ef3bb4aa8207fd86e724a232499060200160405180910390a150565b60419081029190910160208101516040820151919092015160ff1692565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015612c56575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b15612cb45760018054601490612c8d9074010000000000000000000000000000000000000000900467ffffffffffffffff16613e0c565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6111e48282612e66565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166111e457612cfc81612f1d565b612d07836020612f3c565b604051602001612d18929190613e4e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261097c91600401613ecf565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166111e45760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055612e083390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156111e45760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606108a273ffffffffffffffffffffffffffffffffffffffff831660145b60606000612f4b836002613d3f565b612f56906002613ee2565b67ffffffffffffffff811115612f6e57612f6e613ef5565b6040519080825280601f01601f191660200182016040528015612f98576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612fcf57612fcf613685565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061303257613032613685565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061306e846002613d3f565b613079906001613ee2565b90505b6001811115613116577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106130ba576130ba613685565b1a60f81b8282815181106130d0576130d0613685565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361310f81613f24565b905061307c565b508315612032576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161097c565b60006020828403121561319157600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461203257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461179157600080fd5b6000806000606084860312156131f857600080fd5b8335613203816131c1565b92506020840135613213816131c1565b929592945050506040919091013590565b8035801515811461323457600080fd5b919050565b60006020828403121561324b57600080fd5b61203282613224565b60006020828403121561326657600080fd5b5035919050565b6000806020838503121561328057600080fd5b823567ffffffffffffffff8082111561329857600080fd5b818501915085601f8301126132ac57600080fd5b8135818111156132bb57600080fd5b8660208260051b85010111156132d057600080fd5b60209290920196919550909350505050565b600080604083850312156132f557600080fd5b823591506020830135613307816131c1565b809150509250929050565b803563ffffffff8116811461323457600080fd5b803567ffffffffffffffff8116811461323457600080fd5b60008083601f84011261335057600080fd5b50813567ffffffffffffffff81111561336857600080fd5b60208301915083602082850101111561338057600080fd5b9250929050565b60008060008060006080868803121561339f57600080fd5b6133a886613312565b94506133b660208701613326565b935060408601356133c6816131c1565b9250606086013567ffffffffffffffff8111156133e257600080fd5b6133ee8882890161333e565b969995985093965092949392505050565b6000806040838503121561341257600080fd5b823561341d816131c1565b915061342b60208401613224565b90509250929050565b6000806020838503121561344757600080fd5b823567ffffffffffffffff8082111561345f57600080fd5b818501915085601f83011261347357600080fd5b81358181111561348257600080fd5b8660208260071b85010111156132d057600080fd5b803561ffff8116811461323457600080fd5b600080600080608085870312156134bf57600080fd5b6134c885613497565b93506134d660208601613497565b92506134e460408601613326565b915060608501356134f4816131c1565b939692955090935050565b60006020828403121561351157600080fd5b8135612032816131c1565b60006020828403121561352e57600080fd5b61203282613326565b60006020828403121561354957600080fd5b61203282613312565b60008060008060006080868803121561356a57600080fd5b8535613575816131c1565b9450602086013567ffffffffffffffff81111561359157600080fd5b61359d8882890161333e565b909550935050604086013591506135b660608701613326565b90509295509295909350565b6000602082840312156135d457600080fd5b61203282613497565b6000806000604084860312156135f257600080fd5b83359250602084013567ffffffffffffffff81111561361057600080fd5b61361c8682870161333e565b9497909650939450505050565b6000806000806060858703121561363f57600080fd5b843561364a816131c1565b9350602085013567ffffffffffffffff81111561366657600080fd5b6136728782880161333e565b9598909750949560400135949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126136e857600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261372757600080fd5b83018035915067ffffffffffffffff82111561374257600080fd5b60200191503681900382131561338057600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156137975780818660040360031b1b83161692505b505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126137d457600080fd5b830160208101925035905067ffffffffffffffff8111156137f457600080fd5b80360382131561338057600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000833561385d816131c1565b73ffffffffffffffffffffffffffffffffffffffff166040830152613885602085018561379f565b6080606085015261389a60c085018284613803565b915050604085013560808401526138b4606086018661379f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08584030160a08601526138e9838284613803565b93505050508260208301529392505050565b8183823760009101908152919050565b60005b8381101561392657818101518382015260200161390e565b50506000910152565b6000815180845261394781602086016020860161390b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b828152604060208201526000613992604083018461392f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139fa576139fa61399a565b5060010190565b6000610140613a79838873ffffffffffffffffffffffffffffffffffffffff80825116835263ffffffff6020830151166020840152604082015167ffffffffffffffff808216604086015282606085015116606086015280608085015116608086015250505061ffff60a08201511660a08301525050565b613aba60c08401875467ffffffffffffffff81168252604081811c61ffff16602084015260509190911c6fffffffffffffffffffffffffffffffff16910152565b8061012084015261166f8184018587613803565b600060208284031215613ae057600080fd5b5051919050565b80356fffffffffffffffffffffffffffffffff8116811461323457600080fd5b600060208284031215613b1957600080fd5b61203282613ae7565b6020808252818101839052600090604080840186845b87811015613bb35763ffffffff613b4e83613312565b16835267ffffffffffffffff613b65868401613326565b168584015261ffff613b78858401613497565b168484015260606fffffffffffffffffffffffffffffffff613b9b828501613ae7565b16908401526080928301929190910190600101613b38565b5090979650505050505050565b6000610140613c38838773ffffffffffffffffffffffffffffffffffffffff80825116835263ffffffff6020830151166020840152604082015167ffffffffffffffff808216604086015282606085015116606086015280608085015116608086015250505061ffff60a08201511660a08301525050565b613c7960c08401865467ffffffffffffffff81168252604081811c61ffff16602084015260509190911c6fffffffffffffffffffffffffffffffff16910152565b80610120840152613c8c8184018561392f565b9695505050505050565b606081526000613caa606083018688613803565b905083602083015267ffffffffffffffff8316604083015295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b604081526000613d0e604083018587613803565b9050826020830152949350505050565b600060208284031215613d3057600080fd5b81516004811061203257600080fd5b80820281158282048414176108a2576108a261399a565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b16815283601482015281836034830137600091016034019081529392505050565b600067ffffffffffffffff808316818103613db957613db961399a565b6001019392505050565b67ffffffffffffffff828116828216039080821115613de457613de461399a565b5092915050565b67ffffffffffffffff818116838216019080821115613de457613de461399a565b600067ffffffffffffffff821680613e2657613e2661399a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e8681601785016020880161390b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613ec381602884016020880161390b565b01602801949350505050565b602081526000612032602083018461392f565b808201808211156108a2576108a261399a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081613f3357613f3361399a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220bc695a5c9982d5ee84f109dacb8905ea40b0310ee8de48cafae38d0f679ac15564736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102185760003560e01c80638585c9451161011d578063c5e193cd116100b0578063d547741f1161007f578063e4fbd90311610064578063e4fbd903146107bb578063f3ad31f4146107ce578063fd62e750146107ee57600080fd5b8063d547741f1461077b578063dafe0ccc1461079b57600080fd5b8063c5e193cd146106e2578063c7a823e014610702578063c7b2370b14610722578063d2ae21041461074257600080fd5b8063aef18bf7116100ec578063aef18bf714610645578063b724b13314610675578063c358de0a14610695578063c416aa51146106b557600080fd5b80638585c9451461051a57806391d148541461053a5780639e9449651461058b578063a217fddf1461063057600080fd5b806330bb3aac116101b05780635553fb8e1161017f578063724e78da11610164578063724e78da14610478578063736c0d5b14610498578063741bef1a146104c857600080fd5b80635553fb8e146104265780635c975abb1461044657600080fd5b806330bb3aac146103a657806331cb6105146103c657806336568abe146103e657806352d3b8711461040657600080fd5b80631703a018116101ec5780631703a018146102e2578063248a9ca3146103285780632d80eb36146103665780632f2ff15d1461038657600080fd5b8062bf2e801461021d57806301ffc9a7146102705780631095b6d7146102a057806316c38b3c146102c2575b600080fd5b34801561022957600080fd5b50600154610258907c0100000000000000000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b34801561027c57600080fd5b5061029061028b36600461317f565b61080f565b6040519015158152602001610267565b3480156102ac57600080fd5b506102c06102bb3660046131e3565b6108a8565b005b3480156102ce57600080fd5b506102c06102dd366004613239565b610a6c565b3480156102ee57600080fd5b5060045461030f9068010000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610267565b34801561033457600080fd5b50610358610343366004613254565b60009081526020819052604090206001015490565b604051908152602001610267565b34801561037257600080fd5b506102c061038136600461326d565b610ac2565b34801561039257600080fd5b506102c06103a13660046132e2565b610d05565b3480156103b257600080fd5b506103586103c1366004613387565b610eb1565b3480156103d257600080fd5b506102c06103e13660046133ff565b611171565b3480156103f257600080fd5b506102c06104013660046132e2565b6111e8565b34801561041257600080fd5b506102c0610421366004613434565b61124a565b34801561043257600080fd5b506103586104413660046134a9565b61141e565b34801561045257600080fd5b506002546102909074010000000000000000000000000000000000000000900460ff1681565b34801561048457600080fd5b506102c06104933660046134ff565b61167a565b3480156104a457600080fd5b506102906104b33660046134ff565b60036020526000908152604090205460ff1681565b3480156104d457600080fd5b506002546104f59073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610267565b34801561052657600080fd5b506102c061053536600461351c565b61171f565b34801561054657600080fd5b506102906105553660046132e2565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561059757600080fd5b506105f56105a6366004613537565b60056020526000908152604090205467ffffffffffffffff81169068010000000000000000810461ffff16906a010000000000000000000090046fffffffffffffffffffffffffffffffff1683565b6040805167ffffffffffffffff909416845261ffff90921660208401526fffffffffffffffffffffffffffffffff1690820152606001610267565b34801561063c57600080fd5b50610358600081565b34801561065157600080fd5b50610290610660366004613254565b60066020526000908152604090205460ff1681565b34801561068157600080fd5b506102c0610690366004613552565b611794565b3480156106a157600080fd5b506102c06106b03660046135c2565b611a7b565b3480156106c157600080fd5b506001546104f59073ffffffffffffffffffffffffffffffffffffffff1681565b3480156106ee57600080fd5b506103586106fd3660046134a9565b611b28565b34801561070e57600080fd5b5061029061071d3660046135dd565b611e23565b34801561072e57600080fd5b506102c061073d3660046134ff565b612039565b34801561074e57600080fd5b5060015461030f9074010000000000000000000000000000000000000000900467ffffffffffffffff1681565b34801561078757600080fd5b506102c06107963660046132e2565b6120d6565b3480156107a757600080fd5b506102c06107b63660046131e3565b61221b565b6103586107c9366004613387565b612381565b3480156107da57600080fd5b506103586107e9366004613629565b612676565b3480156107fa57600080fd5b5060045461030f9067ffffffffffffffff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806108a257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756108d2816126af565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff16610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f576f726b65723a20496e76616c6964206d657373616765206c6962000000000060448201526064015b60405180910390fd5b6040517ffd9be52200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063fd9be52290604401600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8089168252871660208201529081018590527f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9250606001905060405180910390a150505050565b6000610a77816126af565b506002805491151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610aec816126af565b60005b82811015610cff5736848483818110610b0a57610b0a613685565b9050602002810190610b1c91906136b4565b905042816040013511610b2f5750610cef565b6000610b58610b4160208401846134ff565b610b4e60208501856136f2565b8560400135612676565b9050610b78610b6a60208401846136f2565b610b7391613757565b6126b9565b15610c0c5760008181526006602052604090205460ff1615610bd4577f9c26528f222eb4f79639dea7fe30c7257c124af7ed741437170674ca68249e4e8282604051610bc592919061384c565b60405180910390a15050610cef565b600081815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b610c1d8161071d60608501856136f2565b15610cec57600080610c3260208501856134ff565b73ffffffffffffffffffffffffffffffffffffffff16610c5560208601866136f2565b604051610c639291906138fb565b6000604051808303816000865af19150503d8060008114610ca0576040519150601f19603f3d011682016040523d82523d6000602084013e610ca5565b606091505b509150915081610ce9577fdc8cdd96296241bbefda4a8e18ad2e0985a8da6495b34d409cfc4c886ee3b0cf8582604051610ce0929190613979565b60405180910390a15b50505b50505b610cf8816139c9565b9050610aef565b50505050565b817f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca811480610d5357507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e481145b80610d7d57507f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de81145b15610df057303314610deb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b610ea2565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758103610e4057610deb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756126af565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f56657269666965723a20696e76616c696420726f6c6500000000000000000000604482015260640161097c565b610eac83836127a2565b505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e866305536020526040812054849060ff1615610f62576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff161580610fd7575073ffffffffffffffffffffffffffffffffffffffff811660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15611105576040805160c08101825260025473ffffffffffffffffffffffffffffffffffffffff908116825263ffffffff8a16602080840182905267ffffffffffffffff808c16858701528a8416606086015260048054680100000000000000009004909116608086015260015461ffff7c010000000000000000000000000000000000000000000000000000000082041660a0870152600093845260059092529185902094517f7bfa20a90000000000000000000000000000000000000000000000000000000081529394921692637bfa20a9926110bc9286928b918b9101613a01565b602060405180830381865afa1580156110d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fd9190613ace565b925050611167565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b5095945050505050565b3033146111da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b6111e48282612867565b5050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f576f726b65723a2063616e6e6f742072656e6f756e636520726f6c6500000000604482015260640161097c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611274816126af565b60005b828110156113df573684848381811061129257611292613685565b905060800201905060405180606001604052808260200160208101906112b8919061351c565b67ffffffffffffffff1681526020016112d760608401604085016135c2565b61ffff1681526020016112f06080840160608501613b07565b6fffffffffffffffffffffffffffffffff169052600560006113156020850185613537565b63ffffffff1681526020808201929092526040908101600020835181549385015194909201516fffffffffffffffffffffffffffffffff166a0100000000000000000000027fffffffffffff00000000000000000000000000000000ffffffffffffffffffff61ffff90951668010000000000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090941667ffffffffffffffff909316929092179290921792909216919091179055506113d8816139c9565b9050611277565b507f7dd21e42791b013d1929e86f0c59085e4fca24251f0f1aa81917b3b1611766e08383604051611411929190613b22565b60405180910390a1505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e866305536020526040812054829060ff16156114cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff161580611544575073ffffffffffffffffffffffffffffffffffffffff811660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15611105576040805160c08101825260025473ffffffffffffffffffffffffffffffffffffffff908116825261ffff808a16602080850182905267ffffffffffffffff808b168688015289851660608701526004805468010000000000000000900490911660808701526001547c0100000000000000000000000000000000000000000000000000000000810490941660a08701526000928352600582528683208751928301885292825295517f7bfa20a900000000000000000000000000000000000000000000000000000000815294959290931693637bfa20a99361162e9387939201613bc0565b602060405180830381865afa15801561164b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166f9190613ace565b979650505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756116a4816126af565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527ff724a45d041687842411f2b977ef22ab8f43c8f1104f4592b42a00f9b34a643d906020015b60405180910390a15050565b303314611788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b61179181612ad1565b50565b3033146117fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b73ffffffffffffffffffffffffffffffffffffffff851660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff166118ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f56657269666965723a20696e76616c696420756c6e0000000000000000000000604482015260640161097c565b6040517f0223536e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690630223536e90611903908790879087908790600401613c96565b600060405180830381600087803b15801561191d57600080fd5b505af1158015611931573d6000803e3d6000fd5b506001925061193e915050565b6040517f7c0cf76300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690637c0cf7639061199490889088908890600401613cfa565b602060405180830381865afa1580156119b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d59190613d1e565b60038111156119e6576119e6613ccb565b03611a74576040517f5ed31c5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861690635ed31c5990611a4190879087908790600401613cfa565b600060405180830381600087803b158015611a5b57600080fd5b505af1158015611a6f573d6000803e3d6000fd5b505050505b5050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611aa5816126af565b600180547fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000061ffff8516908102919091179091556040519081527f7af0ac740036ffb1c97b03697859d729e80a44ae5030543d64971c313565ab4d90602001611713565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de611b54816126af565b73ffffffffffffffffffffffffffffffffffffffff831660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e866305536020526040902054839060ff1615611c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff161580611c7a575073ffffffffffffffffffffffffffffffffffffffff811660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15611105576040805160c08101825260025473ffffffffffffffffffffffffffffffffffffffff908116825261ffff808b16602080850182905267ffffffffffffffff808c16868801528a851660608701526004805468010000000000000000900490911660808701526001547c0100000000000000000000000000000000000000000000000000000000810490941660a08701526000838152600583528781208851938401895290835296517fdf2b057e0000000000000000000000000000000000000000000000000000000081529296939094169363df2b057e93611d65938793919201613bc0565b6020604051808303816000875af1158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da89190613ace565b6040805163ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff8916602082015267ffffffffffffffff8a16818301526060810183905290519196507f2fc4e514b16a8f0f9f15009b848663b25939a33de41fa2b98a534b3ac4d5a572919081900360800190a150505050949350505050565b600454600090611e4a9068010000000000000000900467ffffffffffffffff166041613d3f565b821015611e5957506000612032565b6000611eb2856040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506000805b60045468010000000000000000900467ffffffffffffffff1681101561202a576000806000611f1e89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250612bdc915050565b925092509250600060018785858560405160008152602001604052604051611f62949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015611f84573d6000803e3d6000fd5b5050506020604051035190508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1611611fd3576000975050505050505050612032565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090205460ff16612010576000975050505050505050612032565b809550505050508080612022906139c9565b915050611eb8565b506001925050505b9392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612063816126af565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f1399be28223800f8669b3ba5f8721d9fc16fc4e8d0bbf98378791c8c5a3015e090602001611713565b817f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca81148061212457507f4270fae16c6d150d00e80b689daca99e8073b1838ff2b6063a37be9d851283e481145b8061214e57507f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de81145b156121c1573033146121bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a2063616c6c6572206d7573742062652073656c66000000604482015260640161097c565b612211565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758103610e40576121bc7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756126af565b610eac8383612bfa565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612245816126af565b73ffffffffffffffffffffffffffffffffffffffff841660009081527f9b50f4667d2d24216ccbf0dce3a90c0f620fa4d895e7b069d80ff6247fd25620602052604090205460ff166122f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f56657269666965723a20496e76616c6964206d657373616765206c6962000000604482015260640161097c565b6040517f07b18bde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490528516906307b18bde90604401600060405180830381600087803b15801561236357600080fd5b505af1158015612377573d6000803e3d6000fd5b5050505050505050565b60007f724aface199fe5bed93ae8508474576a9adf3dc443b2c451842a2242919f19de6123ad816126af565b73ffffffffffffffffffffffffffffffffffffffff851660009081527f93c430521711328044ae92d0f1f1286cf040bc4a382f1642bd89984e866305536020526040902054859060ff161561245e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f576f726b65723a206e6f7420616c6c6f77656400000000000000000000000000604482015260640161097c565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff1615806124d3575073ffffffffffffffffffffffffffffffffffffffff811660009081527f4ac82e3087b7dedf7f532cbc6915c722df8c1e31f1388c318a617b52760eaf8b602052604090205460ff165b15611105576040805160c08101825260025473ffffffffffffffffffffffffffffffffffffffff908116825263ffffffff8b16602080840182905267ffffffffffffffff808d16858701528b8416606086015260048054680100000000000000009004909116608086015260015461ffff7c010000000000000000000000000000000000000000000000000000000082041660a0870152600093845260059092529185902094517fdf2b057e000000000000000000000000000000000000000000000000000000008152939492169263df2b057e926125b89286928c918c9101613a01565b6020604051808303816000875af11580156125d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fb9190613ace565b6040805163ffffffff8c16815273ffffffffffffffffffffffffffffffffffffffff8a16602082015267ffffffffffffffff8b16818301526060810183905290519195507f2fc4e514b16a8f0f9f15009b848663b25939a33de41fa2b98a534b3ac4d5a572919081900360800190a150505095945050505050565b60008482858560405160200161268f9493929190613d56565b604051602081830303815290604052805190602001209050949350505050565b6117918133612cbe565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f0223536e000000000000000000000000000000000000000000000000000000001480159061274f57507fffffffff0000000000000000000000000000000000000000000000000000000082167fb724b1330000000000000000000000000000000000000000000000000000000014155b80156108a257507fffffffff0000000000000000000000000000000000000000000000000000000082167f704316e500000000000000000000000000000000000000000000000000000000141592915050565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca821480156127ff575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16155b1561285d57600180546014906128369074010000000000000000000000000000000000000000900467ffffffffffffffff16613d9c565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6111e48282612d76565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604090205481151560ff909116151503612924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d756c74695369673a207369676e657220616c726561647920696e207468617460448201527f2073746174650000000000000000000000000000000000000000000000000000606482015260840161097c565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682151517905580612996576004546129919060019067ffffffffffffffff16613dc3565b6129ae565b6004546129ae9067ffffffffffffffff166001613deb565b600480547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92831690811791829055680100000000000000009091049091161115612a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4d756c74695369673a20636f6d6d69747465652073697a65203c20746872657360448201527f686f6c6400000000000000000000000000000000000000000000000000000000606482015260840161097c565b6040805173ffffffffffffffffffffffffffffffffffffffff8416815282151560208201527f863d338cad74814b108a06288ad5e0e80d56495e0332238b1d2cdcfa0ca8e5ce9101611713565b60045467ffffffffffffffff90811690821611801590612afb575060008167ffffffffffffffff16115b612b61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4d756c74695369673a20696e76616c69642071756f72756d0000000000000000604482015260640161097c565b600480547fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000067ffffffffffffffff8416908102919091179091556040519081527fb600f3cf7f38a4b49bb0c75f722ef69f7e3e39ef3bb4aa8207fd86e724a232499060200160405180910390a150565b60419081029190910160208101516040820151919092015160ff1692565b7f74845de37cfabd357633214b47fa91ccd19b05b7c5a08ac22c187f811fb62bca82148015612c56575060008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff165b15612cb45760018054601490612c8d9074010000000000000000000000000000000000000000900467ffffffffffffffff16613e0c565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b6111e48282612e66565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166111e457612cfc81612f1d565b612d07836020612f3c565b604051602001612d18929190613e4e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261097c91600401613ecf565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166111e45760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055612e083390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156111e45760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606108a273ffffffffffffffffffffffffffffffffffffffff831660145b60606000612f4b836002613d3f565b612f56906002613ee2565b67ffffffffffffffff811115612f6e57612f6e613ef5565b6040519080825280601f01601f191660200182016040528015612f98576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612fcf57612fcf613685565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061303257613032613685565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600061306e846002613d3f565b613079906001613ee2565b90505b6001811115613116577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106130ba576130ba613685565b1a60f81b8282815181106130d0576130d0613685565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361310f81613f24565b905061307c565b508315612032576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161097c565b60006020828403121561319157600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461203257600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461179157600080fd5b6000806000606084860312156131f857600080fd5b8335613203816131c1565b92506020840135613213816131c1565b929592945050506040919091013590565b8035801515811461323457600080fd5b919050565b60006020828403121561324b57600080fd5b61203282613224565b60006020828403121561326657600080fd5b5035919050565b6000806020838503121561328057600080fd5b823567ffffffffffffffff8082111561329857600080fd5b818501915085601f8301126132ac57600080fd5b8135818111156132bb57600080fd5b8660208260051b85010111156132d057600080fd5b60209290920196919550909350505050565b600080604083850312156132f557600080fd5b823591506020830135613307816131c1565b809150509250929050565b803563ffffffff8116811461323457600080fd5b803567ffffffffffffffff8116811461323457600080fd5b60008083601f84011261335057600080fd5b50813567ffffffffffffffff81111561336857600080fd5b60208301915083602082850101111561338057600080fd5b9250929050565b60008060008060006080868803121561339f57600080fd5b6133a886613312565b94506133b660208701613326565b935060408601356133c6816131c1565b9250606086013567ffffffffffffffff8111156133e257600080fd5b6133ee8882890161333e565b969995985093965092949392505050565b6000806040838503121561341257600080fd5b823561341d816131c1565b915061342b60208401613224565b90509250929050565b6000806020838503121561344757600080fd5b823567ffffffffffffffff8082111561345f57600080fd5b818501915085601f83011261347357600080fd5b81358181111561348257600080fd5b8660208260071b85010111156132d057600080fd5b803561ffff8116811461323457600080fd5b600080600080608085870312156134bf57600080fd5b6134c885613497565b93506134d660208601613497565b92506134e460408601613326565b915060608501356134f4816131c1565b939692955090935050565b60006020828403121561351157600080fd5b8135612032816131c1565b60006020828403121561352e57600080fd5b61203282613326565b60006020828403121561354957600080fd5b61203282613312565b60008060008060006080868803121561356a57600080fd5b8535613575816131c1565b9450602086013567ffffffffffffffff81111561359157600080fd5b61359d8882890161333e565b909550935050604086013591506135b660608701613326565b90509295509295909350565b6000602082840312156135d457600080fd5b61203282613497565b6000806000604084860312156135f257600080fd5b83359250602084013567ffffffffffffffff81111561361057600080fd5b61361c8682870161333e565b9497909650939450505050565b6000806000806060858703121561363f57600080fd5b843561364a816131c1565b9350602085013567ffffffffffffffff81111561366657600080fd5b6136728782880161333e565b9598909750949560400135949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126136e857600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261372757600080fd5b83018035915067ffffffffffffffff82111561374257600080fd5b60200191503681900382131561338057600080fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156137975780818660040360031b1b83161692505b505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126137d457600080fd5b830160208101925035905067ffffffffffffffff8111156137f457600080fd5b80360382131561338057600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000833561385d816131c1565b73ffffffffffffffffffffffffffffffffffffffff166040830152613885602085018561379f565b6080606085015261389a60c085018284613803565b915050604085013560808401526138b4606086018661379f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08584030160a08601526138e9838284613803565b93505050508260208301529392505050565b8183823760009101908152919050565b60005b8381101561392657818101518382015260200161390e565b50506000910152565b6000815180845261394781602086016020860161390b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b828152604060208201526000613992604083018461392f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139fa576139fa61399a565b5060010190565b6000610140613a79838873ffffffffffffffffffffffffffffffffffffffff80825116835263ffffffff6020830151166020840152604082015167ffffffffffffffff808216604086015282606085015116606086015280608085015116608086015250505061ffff60a08201511660a08301525050565b613aba60c08401875467ffffffffffffffff81168252604081811c61ffff16602084015260509190911c6fffffffffffffffffffffffffffffffff16910152565b8061012084015261166f8184018587613803565b600060208284031215613ae057600080fd5b5051919050565b80356fffffffffffffffffffffffffffffffff8116811461323457600080fd5b600060208284031215613b1957600080fd5b61203282613ae7565b6020808252818101839052600090604080840186845b87811015613bb35763ffffffff613b4e83613312565b16835267ffffffffffffffff613b65868401613326565b168584015261ffff613b78858401613497565b168484015260606fffffffffffffffffffffffffffffffff613b9b828501613ae7565b16908401526080928301929190910190600101613b38565b5090979650505050505050565b6000610140613c38838773ffffffffffffffffffffffffffffffffffffffff80825116835263ffffffff6020830151166020840152604082015167ffffffffffffffff808216604086015282606085015116606086015280608085015116608086015250505061ffff60a08201511660a08301525050565b613c7960c08401865467ffffffffffffffff81168252604081811c61ffff16602084015260509190911c6fffffffffffffffffffffffffffffffff16910152565b80610120840152613c8c8184018561392f565b9695505050505050565b606081526000613caa606083018688613803565b905083602083015267ffffffffffffffff8316604083015295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b604081526000613d0e604083018587613803565b9050826020830152949350505050565b600060208284031215613d3057600080fd5b81516004811061203257600080fd5b80820281158282048414176108a2576108a261399a565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b16815283601482015281836034830137600091016034019081529392505050565b600067ffffffffffffffff808316818103613db957613db961399a565b6001019392505050565b67ffffffffffffffff828116828216039080821115613de457613de461399a565b5092915050565b67ffffffffffffffff818116838216019080821115613de457613de461399a565b600067ffffffffffffffff821680613e2657613e2661399a565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613e8681601785016020880161390b565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613ec381602884016020880161390b565b01602801949350505050565b602081526000612032602083018461392f565b808201808211156108a2576108a261399a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081613f3357613f3361399a565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea2646970667358221220bc695a5c9982d5ee84f109dacb8905ea40b0310ee8de48cafae38d0f679ac15564736f6c63430008130033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "assignJob(uint16,uint16,uint64,address)": {
        "details": "to support ULNv2verifier network can reject job from _sender by adding/removing them from allowlist/denylist",
        "params": {
          "": "//_outboundProofType outbound proof type",
          "_confirmations": "block confirmations",
          "_dstEid": "destination EndpointId",
          "_sender": "message sender address"
        }
      },
      "assignJob(uint32,uint64,address,bytes)": {
        "details": "for ULN301, ULN302 and more to assign jobverifier network can reject job from _sender by adding/removing them from allowlist/denylist",
        "params": {
          "_confirmations": "block confirmations",
          "_dstEid": "destination EndpointId",
          "_options": "verifier options",
          "_sender": "message sender address"
        }
      },
      "constructor": {
        "details": "VerifierNetwork doesn't have a roleAdmin (address(0x0))Supports all of ULNv2, ULN301, ULN302 and more",
        "params": {
          "_admins": "array of admin addresses that are granted the ADMIN_ROLE",
          "_messageLibs": "array of message lib addresses that are granted the MESSAGE_LIB_ROLE",
          "_priceFeed": "price feed address",
          "_quorum": "quorum for multisig",
          "_signers": "array of signer addresses for multisig"
        }
      },
      "execute((address,bytes,uint256,bytes)[])": {
        "details": "takes a list of instructions and executes them in orderif any of the instructions fail, it will emit an error event and continue to execute the rest of the instructions",
        "params": {
          "_params": "array of ExecuteParam, includes target, callData, expiration, signatures"
        }
      },
      "getFee(uint16,uint16,uint64,address)": {
        "details": "to support ULNv2getFee can revert if _sender doesn't pass ACL",
        "params": {
          "": "//_outboundProofType outbound proof type",
          "_confirmations": "block confirmations",
          "_dstEid": "destination EndpointId",
          "_sender": "message sender address"
        }
      },
      "getFee(uint32,uint64,address,bytes)": {
        "details": "getFee can revert if _sender doesn't pass ACL",
        "params": {
          "_confirmations": "block confirmations",
          "_dstEid": "destination EndpointId",
          "_options": "verifier options",
          "_sender": "message sender address"
        },
        "returns": {
          "fee": "fee in native amount"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "overrides AccessControl to allow self/admin to grant role'",
        "params": {
          "_account": "account to grant role to",
          "_role": "role to grant"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hashCallData(address,bytes,uint256)": {
        "params": {
          "_callData": "call data",
          "_expiration": "expiration timestamp",
          "_target": "target address"
        },
        "returns": {
          "_0": "hash of above"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "overrides AccessControl to disable renouncing of roles"
      },
      "revokeRole(bytes32,address)": {
        "details": "overrides AccessControl to allow self/admin to revoke role",
        "params": {
          "_account": "account to revoke role from",
          "_role": "role to revoke"
        }
      },
      "setDefaultMultiplierBps(uint16)": {
        "params": {
          "_multiplierBps": "default multiplier for worker fee"
        }
      },
      "setDstConfig((uint32,uint64,uint16,uint128)[])": {
        "params": {
          "_params": "array of DstConfigParam"
        }
      },
      "setPaused(bool)": {
        "details": "flag to pause execution of workers (if used with whenNotPaused modifier)",
        "params": {
          "_paused": "true to pause, false to unpause"
        }
      },
      "setPriceFeed(address)": {
        "params": {
          "_priceFeed": "price feed address"
        }
      },
      "setQuorum(uint64)": {
        "details": "set quorum for multisig",
        "params": {
          "_quorum": "to set"
        }
      },
      "setSigner(address,bool)": {
        "details": "set signers for multisig",
        "params": {
          "_active": "true to add, false to remove",
          "_signer": "signer address"
        }
      },
      "setWorkerFeeLib(address)": {
        "params": {
          "_workerFeeLib": "worker fee lib address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "verifyAndDeliver(address,bytes,bytes32,uint64)": {
        "details": "one function to verify and deliver to ULN302 and more (does not support ULN301)",
        "params": {
          "_confirmations": "block confirmations",
          "_packetHeader": "packet header",
          "_payloadHash": "payload hash",
          "_uln": "IUltraLightNode compatible contract"
        }
      },
      "withdrawFee(address,address,uint256)": {
        "details": "supports withdrawing fee from ULN301, ULN302 and more",
        "params": {
          "_amount": "amount to withdraw",
          "_lib": "message lib address",
          "_to": "address to withdraw fee to"
        }
      },
      "withdrawFeeFromUlnV2(address,address,uint256)": {
        "details": "to support ULNv2",
        "params": {
          "_amount": "amount to withdraw",
          "_lib": "message lib address",
          "_to": "address to withdraw to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4798,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4793_storage)"
      },
      {
        "astId": 12738,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "workerFeeLib",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12740,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "allowlistSize",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 12742,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "defaultMultiplierBps",
        "offset": 28,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 12744,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12746,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "paused",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 13369,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "signers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13371,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "signerSize",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 13373,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "quorum",
        "offset": 8,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 15704,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "dstConfig",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_struct(DstConfig)16590_storage)"
      },
      {
        "astId": 15708,
        "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
        "label": "usedHashes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4793_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4793_storage"
      },
      "t_mapping(t_uint32,t_struct(DstConfig)16590_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IVerifier.DstConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(DstConfig)16590_storage"
      },
      "t_struct(DstConfig)16590_storage": {
        "encoding": "inplace",
        "label": "struct IVerifier.DstConfig",
        "members": [
          {
            "astId": 16585,
            "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
            "label": "gas",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 16587,
            "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
            "label": "multiplierBps",
            "offset": 8,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 16589,
            "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
            "label": "floorMarginUSD",
            "offset": 10,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)4793_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4790,
            "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4792,
            "contract": "contracts/uln/VerifierNetwork.sol:VerifierNetwork",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}