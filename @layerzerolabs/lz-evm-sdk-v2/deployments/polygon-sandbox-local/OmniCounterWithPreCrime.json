{
  "address": "0xef11D1c2aA48826D4c41e54ab82D1Ff5Ad8A64Ca",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "code",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "SimulateRevert",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SetPeer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CODE_MISS_SIMULATE_RESULT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_PACKETS_OVERSIZE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_PACKETS_UNSORTED",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_PRECRIME_FAILURE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CODE_SUCCESS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_VERSION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECRIME_VERSION",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcEid",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sender",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "message",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ILayerZeroReceiver.MessagingContext",
              "name": "context",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "_packets",
          "type": "tuple[]"
        }
      ],
      "name": "_simulateAndRevert",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "assertPeer",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_types",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_options",
          "type": "bytes[]"
        }
      ],
      "name": "batchIncrement",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "brokenIncrement",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "composedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcEid",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sender",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "message",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ILayerZeroReceiver.MessagingContext",
              "name": "context",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "_packets",
          "type": "tuple[]"
        }
      ],
      "name": "getPrecrimeConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "inboundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "increment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "isPeer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "lzCompose",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct ILayerZeroReceiver.MessagingContext",
          "name": "_context",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callerParams",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "maxNonceByPath",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderedNonce",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "outboundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pMaxBatchSize",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcEid",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sender",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "message",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ILayerZeroReceiver.MessagingContext",
              "name": "context",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "_packets",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_simulation",
          "type": "bytes[]"
        }
      ],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "code",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "precrimeEidToPeer",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "precrimeEids",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "precrimePeers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrimeVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_type",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageLib",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        }
      ],
      "name": "resetConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "safeGetPeer",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageLib",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_orderedNonce",
          "type": "bool"
        }
      ],
      "name": "setOrderedNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setPrecrimeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_maxBatchSize",
          "type": "uint64"
        }
      ],
      "name": "setPrecrimeMaxBatchSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_peers",
          "type": "bytes32[]"
        }
      ],
      "name": "setPrecrimePeers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newLib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setReceiveMessageLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_lib",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeout",
          "type": "uint256"
        }
      ],
      "name": "setReceiveMessageLibTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_newLib",
          "type": "address"
        }
      ],
      "name": "setSendMessageLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcEid",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sender",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "message",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ILayerZeroReceiver.MessagingContext",
              "name": "context",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "_packets",
          "type": "tuple[]"
        }
      ],
      "name": "simulate",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "code",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "srcEid",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sender",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "message",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                }
              ],
              "internalType": "struct ILayerZeroReceiver.MessagingContext",
              "name": "context",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "callParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPreCrime.Packet[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "name": "simulateView",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "skipInboundNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageLib",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        }
      ],
      "name": "snapshotConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc6a5bbad07c8fe2a705a0f3b110852b8c3bcbe22ca66e666ef848be64cdab62e",
  "receipt": {
    "to": null,
    "from": "0x14dC79964da2C08b23698B3D3cc7Ca32193d9955",
    "contractAddress": "0xef11D1c2aA48826D4c41e54ab82D1Ff5Ad8A64Ca",
    "transactionIndex": 0,
    "gasUsed": "5341982",
    "logsBloom": "0x
    "blockHash": "0x45752cb38adbeabae9303081c3fefba482c0964417e7bcbe054b19733acdc500",
    "transactionHash": "0xc6a5bbad07c8fe2a705a0f3b110852b8c3bcbe22ca66e666ef848be64cdab62e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 141,
        "transactionHash": "0xc6a5bbad07c8fe2a705a0f3b110852b8c3bcbe22ca66e666ef848be64cdab62e",
        "address": "0xef11D1c2aA48826D4c41e54ab82D1Ff5Ad8A64Ca",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000014dc79964da2c08b23698b3d3cc7ca32193d9955"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x45752cb38adbeabae9303081c3fefba482c0964417e7bcbe054b19733acdc500"
      }
    ],
    "blockNumber": 141,
    "cumulativeGasUsed": "5341982",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x71C95911E9a5D330f4D621842EC243EE1343292e"
  ],
  "numDeployments": 1,
  "solcInputHash": "c8b47804361e5cf76333cc7a8dd4cabc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"code\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"SimulateRevert\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SetPeer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CODE_MISS_SIMULATE_RESULT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_PACKETS_OVERSIZE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_PACKETS_UNSORTED\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_PRECRIME_FAILURE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CODE_SUCCESS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECRIME_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct ILayerZeroReceiver.MessagingContext\",\"name\":\"context\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"}],\"name\":\"_simulateAndRevert\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"assertPeer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_types\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_options\",\"type\":\"bytes[]\"}],\"name\":\"batchIncrement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"brokenIncrement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"composedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct ILayerZeroReceiver.MessagingContext\",\"name\":\"context\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"}],\"name\":\"getPrecrimeConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"inboundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"isPeer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"lzCompose\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct ILayerZeroReceiver.MessagingContext\",\"name\":\"_context\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callerParams\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"maxNonceByPath\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderedNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"outboundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pMaxBatchSize\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct ILayerZeroReceiver.MessagingContext\",\"name\":\"context\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_simulation\",\"type\":\"bytes[]\"}],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"code\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"precrimeEidToPeer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"precrimeEids\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"precrimePeers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrimeVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageLib\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"}],\"name\":\"resetConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"safeGetPeer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageLib\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_orderedNonce\",\"type\":\"bool\"}],\"name\":\"setOrderedNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setPrecrimeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_maxBatchSize\",\"type\":\"uint64\"}],\"name\":\"setPrecrimeMaxBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_peers\",\"type\":\"bytes32[]\"}],\"name\":\"setPrecrimePeers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setReceiveMessageLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lib\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setReceiveMessageLibTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_newLib\",\"type\":\"address\"}],\"name\":\"setSendMessageLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct ILayerZeroReceiver.MessagingContext\",\"name\":\"context\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"}],\"name\":\"simulate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"code\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct ILayerZeroReceiver.MessagingContext\",\"name\":\"context\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"callParams\",\"type\":\"bytes\"}],\"internalType\":\"struct IPreCrime.Packet[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"simulateView\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"skipInboundNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageLib\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"}],\"name\":\"snapshotConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setConfig(address,uint32,uint32,bytes)\":{\"notice\":\"----------------------------- UA Config Functions -----------------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/examples/OmniCounterWithPrecrime.sol\":\"OmniCounterWithPrecrime\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroComposer {\\n    function lzCompose(\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _caller,\\n        bytes calldata _callerParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x6d6c8228020e75f08e2c4d4fb3e3e270eedf7508e9371955a971bec9f3e6f6c1\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMessageLibManager.sol\\\";\\nimport \\\"./IMessagingComposer.sol\\\";\\nimport \\\"./ILayerZeroReceiver.sol\\\";\\n\\ninterface ILayerZeroEndpoint is IMessageLibManager, IMessagingComposer {\\n    struct MessagingParams {\\n        uint32 dstEid;\\n        bytes32 receiver;\\n        bytes message;\\n        bytes options;\\n    }\\n\\n    struct MessagingReceipt {\\n        bytes32 guid;\\n        uint64 nonce;\\n        MessagingFee fee;\\n    }\\n\\n    struct MessagingFee {\\n        uint nativeFee;\\n        uint lzTokenFee;\\n    }\\n\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketDelivered(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address receiveLibrary\\n    );\\n\\n    event PacketReceived(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address caller\\n    );\\n\\n    event LzReceiveFailed(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address caller,\\n        bytes reason\\n    );\\n\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n\\n    event FeePaid(address sender, uint nativeOrAltTokenFee, uint lzTokenFee);\\n\\n    event LayerZeroTokenSet(address token);\\n\\n    function quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        bytes calldata _message,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        address payable _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function sendWithAlt(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        uint _altTokenFee\\n    ) external returns (MessagingReceipt memory);\\n\\n    function deliver(uint32 _srcEid, bytes32 _sender, address _receiver, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function lzReceive(\\n        address _receiver,\\n        ILayerZeroReceiver.MessagingContext calldata context,\\n        bytes32 _guid,\\n        bytes calldata _callerParams,\\n        bool _tryCatch\\n    ) external payable;\\n\\n    function clear(\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message\\n    ) external returns (bytes32 payloadHash);\\n\\n    function skip(uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function eid() external view returns (uint32);\\n\\n    function setLayerZeroToken(address _layerZeroToken) external;\\n\\n    function layerZeroToken() external view returns (address);\\n\\n    function altFeeToken() external view returns (address);\\n\\n    function getInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function getOutboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function getInboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32, address);\\n\\n    function isReceivingMessage() external view returns (bool);\\n\\n    function getReceiveContext() external view returns (uint32, address);\\n}\\n\",\"keccak256\":\"0xe8b085dc50842437d42c572eef893642b05b3766cd53c22e61c2471799b028ed\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroReceiver {\\n    struct MessagingContext {\\n        uint32 srcEid;\\n        bytes32 sender;\\n        bytes message;\\n        uint64 nonce;\\n    }\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        MessagingContext calldata _context,\\n        bytes32 _guid,\\n        address _executor,\\n        bytes calldata _callerParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x2364fd4a99d178bb5ee34b4fb1e8062f9e0dcd855ed5c72988241695e5eae0ef\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address oldLib, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address oldLib, address newLib);\\n    event ReceiveLibraryTimoutSet(address receiver, uint32 eid, address oldLib, uint timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function defaultConfig(address _messageLib, uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibrary(uint32 _eid, address _newLib, uint _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(uint32 _eid, address _lib, uint _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function setConfig(address _messageLib, uint32 _eid, uint32 _configType, bytes calldata _config) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _messageLib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function snapshotConfig(address _messageLib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _messageLib, uint32[] calldata _eids) external;\\n}\\n\",\"keccak256\":\"0x349e667ea1885307c0323e84805372ce323bd7b0195aa0a2f9a6f0b41bee968f\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposedMessageDelivered(address receiver, address composer, bytes32 guid, bytes message);\\n    event ComposedMessageReceived(\\n        address receiver,\\n        address composer,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller\\n    );\\n    event LzComposeFailed(\\n        address sender,\\n        address receiver,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller,\\n        bytes reason\\n    );\\n\\n    function deliverComposedMessage(address _composer, bytes32 _guid, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _receiver,\\n        address _composer,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _callerParams,\\n        bool _tryCatch\\n    ) external payable;\\n\\n    function isComposingMessage() external view returns (bool);\\n\\n    function getComposeContext() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5b0c911c9386259ceb30e62be24057a85d3e15c5568fa4fc9aab04c890d4c756\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/Options.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nlibrary Options {\\n    using BytesLib for bytes;\\n\\n    struct WorkerOptions {\\n        uint16 workerId;\\n        bytes options;\\n    }\\n\\n    struct Option {\\n        uint16 optionType;\\n        bytes params;\\n    }\\n\\n    uint16 public constant RELAYER_WORKER_ID = 1; // matches RelayerOptions WORKER_ID\\n\\n    uint16 public constant TYPE_1 = 1; // simple option type 1\\n    uint16 public constant TYPE_2 = 2; // simple option type 2\\n    uint16 public constant TYPE_3 = 3; // cannot overlap with simple option types\\n\\n    /// ======================= Decoding Functions =======================\\n    function decodeOptions(bytes memory _options) internal pure returns (WorkerOptions[] memory) {\\n        uint16 formatType = _options.toUint16(0);\\n        if (formatType == TYPE_1 || formatType == TYPE_2) {\\n            WorkerOptions[] memory options = _convert(formatType, _options);\\n            return options;\\n        }\\n\\n        // new format type 3\\n        // [type3][numWorkers][workerOps][workerOps]...\\n        // [workerOps] -> [workerId][size][options]\\n        if (formatType == 3) {\\n            uint16 numWorkers = _options.toUint16(2);\\n            WorkerOptions[] memory options = new WorkerOptions[](numWorkers);\\n\\n            // parse options for each worker\\n            uint cursor = 4;\\n            uint16 lastWorkerId;\\n            for (uint i = 0; i < uint(numWorkers); i++) {\\n                // must be ascending order\\n                uint16 workerId = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // no duplicated worker id, and the first worker id can be 0 because of enum type\\n                require(i == 0 || workerId > lastWorkerId, \\\"LZ10006\\\");\\n                lastWorkerId = workerId;\\n\\n                // option size\\n                uint16 size = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                options[i] = WorkerOptions(workerId, _options.slice(cursor, size));\\n                cursor += size;\\n            }\\n            require(cursor == _options.length, \\\"LZ10009\\\");\\n            return options;\\n        }\\n\\n        revert(\\\"LZC0000\\\");\\n    }\\n\\n    /// @dev decode worker options\\n    function decodeWorkerOptions(bytes memory _options) internal pure returns (Option[] memory) {\\n        uint cursor = 0;\\n        uint16 numOptions = _options.toUint16(cursor);\\n        cursor += 2;\\n\\n        Option[] memory options = new Option[](numOptions);\\n        uint16 lastOptionType;\\n        for (uint16 i = 0; i < numOptions; i++) {\\n            uint16 optionType = _options.toUint16(cursor);\\n            cursor += 2;\\n            // no duplicated option type\\n            require(optionType > lastOptionType, \\\"LZ10006\\\");\\n            lastOptionType = optionType;\\n\\n            uint16 paramSize = _options.toUint16(cursor);\\n            cursor += 2;\\n\\n            bytes memory param = _options.slice(cursor, paramSize);\\n            cursor += paramSize;\\n            options[i] = Option(optionType, param);\\n        }\\n        return options;\\n    }\\n\\n    // relayer only\\n    // legacy type 1\\n    // bytes  [32      ]\\n    // fields [extraGas]\\n    // legacy type 2\\n    // bytes  [32        32            bytes[]         ]\\n    // fields [extraGas  dstNativeAmt  dstNativeAddress]\\n    function _convert(\\n        uint _optionType,\\n        bytes memory _options\\n    ) private pure returns (WorkerOptions[] memory workerOptions) {\\n        workerOptions = new WorkerOptions[](1);\\n        bytes memory options;\\n\\n        if (_optionType == TYPE_1) {\\n            require(_options.length == 34, \\\"LZ10009\\\");\\n\\n            // execution gas\\n            uint executionGas = _options.toUint256(2);\\n            require(executionGas <= type(uint128).max, \\\"LZ10009\\\");\\n\\n            options = abi.encodePacked(uint16(1)); // option num\\n            options = abi.encodePacked(options, TYPE_1, uint16(16), uint128(executionGas));\\n        } else if (_optionType == TYPE_2) {\\n            require(_options.length > 66 && _options.length <= 98, \\\"LZ10009\\\");\\n\\n            // execution gas\\n            uint executionGas = _options.toUint256(2);\\n            require(executionGas <= type(uint128).max, \\\"LZ10009\\\");\\n\\n            // airdrop (amount + receiver)\\n            uint amount = _options.toUint256(34);\\n            require(amount <= type(uint128).max, \\\"LZ10009\\\");\\n\\n            uint receiverLen = _options.length - 66;\\n            bytes32 receiver = bytes32(_options.slice(66, receiverLen));\\n            receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\\n            bytes memory airdrop = abi.encodePacked(uint128(amount), receiver);\\n\\n            options = abi.encodePacked(uint16(2)); // option num\\n            options = abi.encodePacked(options, TYPE_1, uint16(16), uint128(executionGas));\\n            options = abi.encodePacked(options, TYPE_2, uint16(airdrop.length), airdrop);\\n        } else {\\n            revert(\\\"LZC0000\\\");\\n        }\\n\\n        workerOptions[0] = WorkerOptions(RELAYER_WORKER_ID, options);\\n    }\\n\\n    /// ======================= Encoding Functions =======================\\n\\n    function encodeWorkerOptions(Option memory _option) internal pure returns (bytes memory) {\\n        Option[] memory options = new Option[](1);\\n        options[0] = _option;\\n        return encodeWorkerOptions(options);\\n    }\\n\\n    function encodeWorkerOptions(Option[] memory _options) internal pure returns (bytes memory) {\\n        require(_options.length > 0, \\\"LZ10009\\\");\\n        uint16 numOptions = _safeToUint16(_options.length);\\n        bytes memory options = abi.encodePacked(numOptions);\\n\\n        uint16 lastOptionType;\\n        for (uint i = 0; i < numOptions; i++) {\\n            // no duplicated option type\\n            uint16 optionType = _options[i].optionType;\\n            require(i == 0 || optionType > lastOptionType, \\\"LZ10006\\\");\\n            lastOptionType = optionType;\\n\\n            uint16 paramSize = _safeToUint16(_options[i].params.length);\\n            bytes memory option = abi.encodePacked(_options[i].optionType, paramSize, _options[i].params);\\n\\n            options = options.concat(option);\\n        }\\n\\n        return options;\\n    }\\n\\n    function encodeOptions(WorkerOptions[] memory _workerOptions) internal pure returns (bytes memory) {\\n        uint16 numWorkers = _safeToUint16(_workerOptions.length);\\n        bytes memory options = abi.encodePacked(TYPE_3, numWorkers);\\n\\n        uint16 lastWorkerId;\\n        for (uint i = 0; i < numWorkers; i++) {\\n            uint16 workerId = uint16(_workerOptions[i].workerId);\\n            // prevent duplicated worker id\\n            require(i == 0 || workerId > lastWorkerId, \\\"LZ10006\\\");\\n\\n            uint16 optionSize = _safeToUint16(_workerOptions[i].options.length);\\n            options = abi.encodePacked(options, workerId, optionSize, _workerOptions[i].options);\\n\\n            lastWorkerId = workerId;\\n        }\\n\\n        return options;\\n    }\\n\\n    function encodeSimpleOptionsType1(uint256 _executionGas) internal pure returns (bytes memory) {\\n        require(_executionGas <= type(uint128).max, \\\"LZ10009\\\");\\n        return abi.encodePacked(TYPE_1, _executionGas);\\n    }\\n\\n    function encodeSimpleOptionsType2(\\n        uint256 _executionGas,\\n        uint256 _amount,\\n        bytes32 _receiver\\n    ) internal pure returns (bytes memory) {\\n        require(_executionGas <= type(uint128).max && _amount <= type(uint128).max, \\\"LZ10009\\\");\\n        return abi.encodePacked(TYPE_2, _executionGas, _amount, _receiver);\\n    }\\n\\n    /// ======================= Getter Functions =======================\\n\\n    function getWorkerOptionsByWorkerId(\\n        WorkerOptions[] memory _workerOptions,\\n        uint16 _workerId\\n    ) internal pure returns (bool, uint, bytes memory) {\\n        for (uint i = 0; i < _workerOptions.length; i++) {\\n            if (_workerOptions[i].workerId == _workerId) {\\n                return (true, i, _workerOptions[i].options);\\n            }\\n        }\\n        return (false, 0, bytes(\\\"\\\"));\\n    }\\n\\n    function getOptionByOptionType(\\n        Option[] memory _options,\\n        uint16 _optionType\\n    ) internal pure returns (bool, uint, bytes memory) {\\n        for (uint i = 0; i < _options.length; i++) {\\n            if (_options[i].optionType == _optionType) {\\n                return (true, i, _options[i].params);\\n            }\\n        }\\n        return (false, 0, bytes(\\\"\\\"));\\n    }\\n\\n    function getOptionByWorkerIdAndOptionType(\\n        WorkerOptions[] memory _workerOptions,\\n        uint16 _workerId,\\n        uint16 _optionType\\n    ) internal pure returns (bool, bytes memory) {\\n        (bool found, , bytes memory options) = getWorkerOptionsByWorkerId(_workerOptions, _workerId);\\n        if (!found) {\\n            return (false, bytes(\\\"\\\"));\\n        }\\n\\n        (found, , options) = getOptionByOptionType(decodeWorkerOptions(options), _optionType);\\n        return (found, options);\\n    }\\n\\n    function _safeToUint16(uint _value) private pure returns (uint16) {\\n        require(_value <= type(uint16).max, \\\"LZ10009\\\");\\n        return uint16(_value);\\n    }\\n}\\n\",\"keccak256\":\"0xbe0e01a6cee250828a058200a572f65f2189b9448af8c8e8553186cd0e11afe3\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/RelayerOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"./Options.sol\\\";\\n\\nlibrary RelayerOptions {\\n    using BytesLib for bytes;\\n\\n    uint16 public constant WORKER_ID = 1;\\n\\n    uint16 public constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint16 public constant OPTION_TYPE_AIRDROP = 2;\\n    uint16 public constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint16 public constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    function decodeLzReceiveParams(bytes memory _params) internal pure returns (uint gas, uint value) {\\n        require(_params.length == 16 || _params.length == 32, \\\"LZ10009\\\");\\n        gas = _params.toUint128(0);\\n        value = _params.length == 32 ? _params.toUint128(16) : 0;\\n    }\\n\\n    function decodeAirdropParams(bytes memory _params) internal pure returns (uint amount, bytes32 receiver) {\\n        require(_params.length == 48, \\\"LZ10009\\\");\\n        amount = _params.toUint128(0);\\n        receiver = _params.toBytes32(16);\\n    }\\n\\n    function decodeLzComposeParams(bytes memory _params) internal pure returns (uint gas, uint value) {\\n        require(_params.length == 32, \\\"LZ10009\\\");\\n        gas = _params.toUint128(0);\\n        value = _params.toUint128(16);\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (Options.Option memory) {\\n        bytes memory params = _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n        return Options.Option(OPTION_TYPE_LZRECEIVE, params);\\n    }\\n\\n    function encodeAirdropOption(uint128 _amount, bytes32 _receiver) internal pure returns (Options.Option memory) {\\n        return Options.Option(OPTION_TYPE_AIRDROP, abi.encodePacked(_amount, _receiver));\\n    }\\n\\n    function encodeLzComposeOption(uint128 _gas, uint128 _value) internal pure returns (Options.Option memory) {\\n        return Options.Option(OPTION_TYPE_LZCOMPOSE, abi.encodePacked(_gas, _value));\\n    }\\n\\n    function encodeOrderedExecutionOption() internal pure returns (Options.Option memory) {\\n        return Options.Option(OPTION_TYPE_ORDERED_EXECUTION, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x14d10fc9f507b3cc7fd32c29e2e13b2aee6c01f334a580797a2ef18383a48eb6\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/Options.sol\\\";\\n\\nimport \\\"./Peer.sol\\\";\\nimport \\\"./interfaces/IOApp.sol\\\";\\n\\nabstract contract OApp is Peer, IOApp {\\n    uint public version = 1;\\n    ILayerZeroEndpoint public immutable endpoint;\\n\\n    constructor(address _endpoint) {\\n        endpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function _quote(\\n        uint32 _eid,\\n        bytes memory _message,\\n        bool _useZro,\\n        bytes memory _options\\n    ) internal view returns (uint nativeFee, uint zroFee) {\\n        ILayerZeroEndpoint.MessagingFee memory fee = endpoint.quote(address(this), _eid, _message, _useZro, _options);\\n        return (fee.nativeFee, fee.lzTokenFee);\\n    }\\n\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        ILayerZeroEndpoint.MessagingFee memory _fee,\\n        address payable _refundAddress\\n    ) internal virtual returns (ILayerZeroEndpoint.MessagingReceipt memory) {\\n        bytes32 dstAddress = safeGetPeer(_dstEid);\\n        ILayerZeroEndpoint.MessagingReceipt memory receipt = endpoint.send{value: _fee.nativeFee}(\\n            ILayerZeroEndpoint.MessagingParams(_dstEid, dstAddress, _message, _options),\\n            _fee.lzTokenFee,\\n            _refundAddress\\n        );\\n        return receipt;\\n    }\\n\\n    function lzReceive(\\n        MessagingContext calldata _context,\\n        bytes32 _guid,\\n        address _executor,\\n        bytes calldata _callerParams\\n    ) public payable virtual override {\\n        // check if the message is from the endpoint or self. If it's from self, it's a call for gas estimation\\n        require(address(endpoint) == msg.sender, \\\"OApp: endpoint only\\\");\\n        assertPeer(_context.srcEid, _context.sender);\\n        _acceptNonce(_context.srcEid, _context.sender, _context.nonce);\\n        _lzReceive(_context, _guid, _executor, _callerParams);\\n    }\\n\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual override returns (uint64) {\\n        return 0; // path nonce starts from 1. if 0 it means that there is no specific nonce enforcement\\n    }\\n\\n    function _acceptNonce(uint32 _srcEid, bytes32 _sender, uint64 _nonce) internal virtual {\\n        // do nth by default\\n    }\\n\\n    // burn message\\n    function burn(\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message\\n    ) public virtual onlyOwner {\\n        endpoint.clear(_srcEid, _sender, _nonce, _guid, _message);\\n        assertPeer(_srcEid, _sender);\\n        /// oapp should override burn if they want to partially apply the message\\n    }\\n\\n    function skipInboundNonce(uint32 _srcEid, bytes32 _sender, uint64 _nonce) public virtual onlyOwner {\\n        endpoint.skip(_srcEid, _sender, _nonce);\\n    }\\n\\n    function _lzReceive(\\n        MessagingContext calldata _context,\\n        bytes32 _guid,\\n        address _executor,\\n        bytes calldata _callerParams\\n    ) internal virtual;\\n\\n    /// receive ETH from lz endpoint when multiSend\\n    receive() external payable virtual {}\\n\\n    /// ----------------------------- UA Config Functions -----------------------------\\n    function setConfig(\\n        address _messageLib,\\n        uint32 _eid,\\n        uint32 _configType,\\n        bytes calldata _config\\n    ) public virtual onlyOwner {\\n        endpoint.setConfig(_messageLib, _eid, _configType, _config);\\n    }\\n\\n    function snapshotConfig(address _messageLib, uint32[] calldata _eids) public virtual onlyOwner {\\n        endpoint.snapshotConfig(_messageLib, _eids);\\n    }\\n\\n    function resetConfig(address _messageLib, uint32[] calldata _eids) public virtual onlyOwner {\\n        endpoint.resetConfig(_messageLib, _eids);\\n    }\\n\\n    function setSendMessageLib(uint32 _eid, address _newLib) public virtual onlyOwner {\\n        endpoint.setSendLibrary(_eid, _newLib);\\n    }\\n\\n    function setReceiveMessageLib(uint32 _eid, address _newLib, uint _gracePeriod) public virtual onlyOwner {\\n        endpoint.setReceiveLibrary(_eid, _newLib, _gracePeriod);\\n    }\\n\\n    function setReceiveMessageLibTimeout(uint32 _eid, address _lib, uint _timeout) public virtual onlyOwner {\\n        endpoint.setReceiveLibraryTimeout(_eid, _lib, _timeout);\\n    }\\n}\\n\",\"keccak256\":\"0x03e83db2ce0383cacefb801fb79c81965963ff25fb8035a0ab44c1f159dfba9a\",\"license\":\"MIT\"},\"contracts/Peer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @notice Remote manages the remote UAs on other chains. There is a single remote UA per chain.\\n/// If several remote contracts need to be called, they can be called from a single remote UA,\\nabstract contract Peer is Ownable {\\n    mapping(uint32 => bytes32) public peers;\\n\\n    event SetPeer(uint32 eid, bytes32 peer, bool active);\\n\\n    function setPeer(uint32 _eid, bytes32 _peer, bool _active) public virtual onlyOwner {\\n        bool currentlyActive = peers[_eid] != bytes32(0);\\n        require(currentlyActive != _active, \\\"Peer: invalid state\\\");\\n        peers[_eid] = _peer;\\n        emit SetPeer(_eid, _peer, _active);\\n    }\\n\\n    // override this function for lzReceive/burn if app has multiple peers\\n    function assertPeer(uint32 _eid, bytes32 _peer) public view virtual {\\n        require(isPeer(_eid, _peer), \\\"Peer: invalid peer\\\");\\n    }\\n\\n    function isPeer(uint32 _eid, bytes32 _peer) public view virtual returns (bool) {\\n        return peers[_eid] == _peer;\\n    }\\n\\n    function safeGetPeer(uint32 _eid) public view virtual returns (bytes32 peer) {\\n        peer = peers[_eid];\\n        require(peer != bytes32(0), \\\"Peer: peer not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd30ef82b2ab0b2498a534ee9da80d74c18c0e6c7b0066de3cf02ab14b4ffd3fa\",\"license\":\"MIT\"},\"contracts/PreCrime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./PreCrimeBase.sol\\\";\\n\\nabstract contract PreCrime is PreCrimeBase {\\n    error SimulateRevert(uint16 code, bytes message);\\n\\n    constructor(address _endpoint) PreCrimeBase(_endpoint) {}\\n\\n    function simulate(Packet[] calldata _packets) external payable override returns (uint16 code, bytes memory data) {\\n        require(tx.origin == msg.sender, \\\"only EOA can call simulate\\\");\\n\\n        (code, data) = _checkPacketsMaxSizeAndNonceOrder(_packets);\\n        if (code != CODE_SUCCESS) {\\n            return (code, data);\\n        }\\n\\n        (bool success, bytes memory result) = address(this).call{value: msg.value}(\\n            abi.encodeWithSelector(this._simulateAndRevert.selector, _packets)\\n        );\\n        // refund for those who send eth to simulate accidentally\\n        if (msg.value > 0) {\\n            payable(msg.sender).transfer(msg.value);\\n        }\\n        // the _simulateAndRevert will never return success\\n        require(!success, \\\"simulate should never return success\\\");\\n\\n        (code, data) = _parseRevertResult(result);\\n        if (code == CODE_SUCCESS) {\\n            data = abi.encode(localEid, data); // add localEid to the header\\n        }\\n    }\\n\\n    function simulateView(\\n        Packet[] calldata /*_packets*/\\n    ) external pure override returns (uint16 /*code*/, bytes memory /*result*/) {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    function _parseRevertResult(bytes memory result) internal pure returns (uint16 code, bytes memory data) {\\n        if (bytes4(result) != SimulateRevert.selector) {\\n            assembly {\\n                revert(add(result, 0x20), mload(result))\\n            }\\n        }\\n        // parse code and result\\n        assembly {\\n            // Slice the sighash. Remove the selector which is the first 4 bytes\\n            result := add(result, 0x04)\\n        }\\n        return abi.decode(result, (uint16, bytes));\\n    }\\n\\n    function _simulateAndRevert(Packet[] calldata _packets) external payable {\\n        require(msg.sender == address(this), \\\"Precrime: only self\\\");\\n        (uint16 code, bytes memory result) = _simulate(_packets);\\n        revert SimulateRevert(code, result);\\n    }\\n\\n    // ----------------- to be implemented -----------------\\n    function _simulate(Packet[] calldata _packets) internal virtual returns (uint16 code, bytes memory result);\\n}\\n\",\"keccak256\":\"0xf3191dc2fd61ee5e5fdca9468a9705ea987b087685d14e4ba1f187386ca1f9fd\",\"license\":\"MIT\"},\"contracts/PreCrimeBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"./interfaces/IPreCrime.sol\\\";\\n\\nabstract contract PreCrimeBase is IPreCrime {\\n    uint16 public constant PRECRIME_VERSION = 1;\\n    uint16 public constant CONFIG_VERSION = 1;\\n\\n    //---------------- error code ----------------------\\n    // --- UA scope code ---\\n    uint16 public constant CODE_SUCCESS = 0; // success\\n    uint16 public constant CODE_PRECRIME_FAILURE = 1; // !!! crimes found\\n\\n    // --- protocol scope error code ---\\n    // simualte\\n    uint16 public constant CODE_PACKETS_OVERSIZE = 400; // packets number bigger then max size\\n    uint16 public constant CODE_PACKETS_UNSORTED = 401; // packets are unsorted, need backfill and keep order\\n    // precrime\\n    uint16 public constant CODE_MISS_SIMULATE_RESULT = 402; // miss simulation result\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    uint32 public localEid;\\n\\n    address public pAdmin;\\n\\n    uint64 public pMaxBatchSize;\\n    uint32[] public precrimeEids;\\n    bytes32[] public precrimePeers;\\n    mapping(uint32 => bytes32) public precrimeEidToPeer;\\n\\n    modifier onlyPrecrimeAdmin() {\\n        require(msg.sender == pAdmin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n        localEid = lzEndpoint.eid();\\n        pAdmin = msg.sender;\\n    }\\n\\n    // ----------------- admin functions -----------------\\n    function setPrecrimeAdmin(address _admin) external onlyPrecrimeAdmin {\\n        pAdmin = _admin;\\n    }\\n\\n    function setPrecrimeMaxBatchSize(uint64 _maxBatchSize) external onlyPrecrimeAdmin {\\n        pMaxBatchSize = _maxBatchSize;\\n    }\\n\\n    function setPrecrimePeers(uint32[] memory _eids, bytes32[] memory _peers) external onlyPrecrimeAdmin {\\n        precrimeEids = _eids;\\n        precrimePeers = _peers;\\n        for (uint i = 0; i < _eids.length; i++) {\\n            precrimeEidToPeer[_eids[i]] = _peers[i];\\n        }\\n    }\\n\\n    // ----------------- view functions -----------------\\n\\n    function getPrecrimeConfig(Packet[] calldata _packets) external view virtual override returns (bytes memory) {\\n        (uint32[] memory eids, bytes32[] memory peers) = _getPrecrimePeers(_packets);\\n        return\\n            abi.encodePacked(\\n                CONFIG_VERSION,\\n                //---- max packets size for simulate batch ---\\n                pMaxBatchSize,\\n                //------------- peer precrimes -------------\\n                eids.length,\\n                eids,\\n                peers\\n            );\\n    }\\n\\n    function precrime(\\n        Packet[] calldata _packets,\\n        bytes[] calldata _simulation\\n    ) external view override returns (uint16 code, bytes memory reason) {\\n        bytes[] memory originSimulateResult = new bytes[](_simulation.length);\\n        uint32[] memory eids = new uint32[](_simulation.length);\\n        for (uint256 i = 0; i < _simulation.length; i++) {\\n            (uint32 eid, bytes memory simulateResult) = abi.decode(_simulation[i], (uint32, bytes));\\n            eids[i] = eid;\\n            originSimulateResult[i] = simulateResult;\\n        }\\n\\n        (code, reason) = _checkResultsCompleteness(_packets, eids);\\n        if (code != CODE_SUCCESS) {\\n            return (code, reason);\\n        }\\n\\n        (code, reason) = _precrime(originSimulateResult);\\n    }\\n\\n    function precrimeVersion() external pure override returns (uint16) {\\n        return PRECRIME_VERSION;\\n    }\\n\\n    function _checkResultsCompleteness(\\n        Packet[] calldata _packets,\\n        uint32[] memory _resultEids\\n    ) internal view returns (uint16 code, bytes memory reason) {\\n        // check if all peers result included\\n        if (_packets.length > 0) {\\n            (uint32[] memory eids, ) = _getPrecrimePeers(_packets);\\n            for (uint256 i = 0; i < eids.length; i++) {\\n                bool resultEidChecked;\\n                for (uint256 j = 0; j < _resultEids.length; j++) {\\n                    if (_resultEids[j] == eids[i]) {\\n                        resultEidChecked = true;\\n                        break;\\n                    }\\n                }\\n                if (!resultEidChecked) {\\n                    return (CODE_MISS_SIMULATE_RESULT, \\\"missing peer simulation result\\\");\\n                }\\n            }\\n        }\\n        // check if local resut included\\n        bool localEidResultChecked;\\n        for (uint256 j = 0; j < _resultEids.length; j++) {\\n            if (_resultEids[j] == localEid) {\\n                localEidResultChecked = true;\\n                break;\\n            }\\n        }\\n        if (!localEidResultChecked) {\\n            return (CODE_MISS_SIMULATE_RESULT, \\\"missing local simulation result\\\");\\n        }\\n\\n        return (CODE_SUCCESS, \\\"\\\");\\n    }\\n\\n    function _checkPacketsMaxSizeAndNonceOrder(\\n        Packet[] calldata _packets\\n    ) internal view returns (uint16 code, bytes memory reason) {\\n        if (_packets.length > pMaxBatchSize) {\\n            return (\\n                CODE_PACKETS_OVERSIZE,\\n                abi.encodePacked(\\\"packets size exceed limited \\\", Strings.toString(uint256(pMaxBatchSize)))\\n            );\\n        }\\n\\n        // check packets nonce, sequence order\\n        // packets should group by srcEid and sender, then sort by nonce ascending\\n        if (_packets.length > 0) {\\n            uint32 srcEid;\\n            bytes32 sender;\\n            uint64 nonce;\\n            for (uint256 i = 0; i < _packets.length; i++) {\\n                Packet memory packet = _packets[i];\\n                // start from a new chain packet or a new source UA\\n                if (packet.context.srcEid != srcEid || packet.context.sender != sender) {\\n                    srcEid = packet.context.srcEid;\\n                    sender = packet.context.sender;\\n                    nonce = packet.context.nonce;\\n                    uint64 nextInboundNonce = lzEndpoint.getInboundNonce(_receiver(), srcEid, sender) + 1;\\n                    // the first packet's nonce must equal to dst InboundNonce+1\\n                    if (nonce != nextInboundNonce) {\\n                        return (\\n                            CODE_PACKETS_UNSORTED,\\n                            abi.encodePacked(\\\"skipped inboundNonce, packet index: \\\", Strings.toString(i))\\n                        );\\n                    }\\n                } else {\\n                    // the following packet's nonce add 1 in order\\n                    if (packet.context.nonce != ++nonce) {\\n                        return (\\n                            CODE_PACKETS_UNSORTED,\\n                            abi.encodePacked(\\\"unsorted packets, packet index: \\\", Strings.toString(i))\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n        return (CODE_SUCCESS, \\\"\\\");\\n    }\\n\\n    function _getPrecrimePeers(Packet[] calldata _packets) internal view returns (uint32[] memory, bytes32[] memory) {\\n        if (_packets.length == 0) {\\n            return (precrimeEids, precrimePeers);\\n        }\\n\\n        // only return related peers\\n        return _filterByPackets(_packets);\\n    }\\n\\n    function _filterByPackets(\\n        Packet[] calldata _packets\\n    ) internal view returns (uint32[] memory eids, bytes32[] memory peers) {\\n        uint16 size;\\n        for (uint i = 0; i < _packets.length; i++) {\\n            if (precrimeEidToPeer[_packets[i].context.srcEid] != bytes32(0x0)) {\\n                size++;\\n            }\\n        }\\n\\n        eids = new uint32[](size);\\n        peers = new bytes32[](size);\\n        for (uint i = 0; i < _packets.length; i++) {\\n            bytes32 peer = precrimeEidToPeer[_packets[i].context.srcEid];\\n            if (peer != bytes32(0x0)) {\\n                eids[i] = _packets[i].context.srcEid;\\n                peers[i] = peer;\\n            }\\n        }\\n        return (eids, peers);\\n    }\\n\\n    // ----------------- to be implemented -----------------\\n    function _receiver() internal view virtual returns (address);\\n\\n    function _precrime(bytes[] memory _simulation) internal view virtual returns (uint16 code, bytes memory reason);\\n}\\n\",\"keccak256\":\"0x0fa50eeb06f1af5f45ac0c6798cf2fa48aac3e0ff661bf2fa40f17fc35733e5d\",\"license\":\"MIT\"},\"contracts/examples/OmniCounter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../OApp.sol\\\";\\nimport \\\"../libs/OptionsBuilder.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroComposer.sol\\\";\\n\\nlibrary MsgCodec {\\n    uint8 public constant VANILLA_TYPE = 1;\\n    uint8 public constant COMPOSED_TYPE = 2;\\n    uint8 public constant ABA_TYPE = 3;\\n    uint8 public constant COMPOSED_ABA_TYPE = 4;\\n\\n    uint8 public constant MSG_TYPE_OFFSET = 0;\\n    uint8 public constant SRC_EID_OFFSET = 1;\\n\\n    function encode(uint8 _type, uint32 _srcEid) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_type, _srcEid);\\n    }\\n\\n    function msgType(bytes calldata _message) internal pure returns (uint8) {\\n        return uint8(bytes1(_message[MSG_TYPE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[SRC_EID_OFFSET:]));\\n    }\\n}\\n\\ncontract OmniCounter is ILayerZeroComposer, OApp {\\n    using MsgCodec for bytes;\\n    using OptionsBuilder for bytes;\\n\\n    uint public count;\\n    uint public composedCount;\\n\\n    address public admin;\\n    uint32 public eid;\\n\\n    mapping(uint32 => mapping(bytes32 => uint64)) public maxNonceByPath;\\n    bool public orderedNonce;\\n\\n    // for global assertions\\n    mapping(uint32 => uint) public inboundCount;\\n    mapping(uint32 => uint) public outboundCount;\\n\\n    constructor(address _endpoint) OApp(_endpoint) {\\n        admin = msg.sender;\\n        eid = endpoint.eid();\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin\\\");\\n        _;\\n    }\\n\\n    // -------------------------------\\n    // Only Admin\\n    function setAdmin(address _admin) external onlyAdmin {\\n        admin = _admin;\\n    }\\n\\n    function withdraw(address payable _to, uint _amount) external onlyAdmin {\\n        _to.transfer(_amount);\\n    }\\n\\n    // -------------------------------\\n    // Send\\n    function increment(uint32 _eid, uint8 _type, bytes calldata _options) external payable {\\n        bytes memory message = MsgCodec.encode(_type, eid);\\n        _lzSend(_eid, message, _options, ILayerZeroEndpoint.MessagingFee(msg.value, 0), payable(msg.sender));\\n        _incrementOutbound(_eid);\\n    }\\n\\n    // this is a broken function to skip incrementing outbound count\\n    // so that precrime will fail\\n    function brokenIncrement(uint32 _eid, uint8 _type, bytes calldata _options) external payable onlyAdmin {\\n        bytes memory message = MsgCodec.encode(_type, eid);\\n        _lzSend(_eid, message, _options, ILayerZeroEndpoint.MessagingFee(msg.value, 0), payable(msg.sender));\\n    }\\n\\n    function batchIncrement(\\n        uint32[] calldata _eids,\\n        uint8[] calldata _types,\\n        bytes[] calldata _options\\n    ) external payable {\\n        require(_eids.length == _options.length && _eids.length == _types.length, \\\"OmniCounter: length mismatch\\\");\\n\\n        ILayerZeroEndpoint.MessagingReceipt memory receipt;\\n        uint providedFee = msg.value;\\n        for (uint i = 0; i < _eids.length; i++) {\\n            address refundAddress = i == _eids.length - 1 ? msg.sender : address(this);\\n            bytes memory message = MsgCodec.encode(_types[i], eid);\\n            receipt = _lzSend(\\n                _eids[i],\\n                message,\\n                _options[i],\\n                ILayerZeroEndpoint.MessagingFee(providedFee, 0),\\n                payable(refundAddress)\\n            );\\n            _incrementOutbound(_eids[i]);\\n            providedFee -= receipt.fee.nativeFee;\\n        }\\n    }\\n\\n    // -------------------------------\\n    // View\\n    function quote(\\n        uint32 _eid,\\n        uint8 _type,\\n        bytes calldata _options\\n    ) public view returns (uint nativeFee, uint zroFee) {\\n        return _quote(_eid, MsgCodec.encode(_type, eid), false, _options);\\n    }\\n\\n    // -------------------------------\\n    // Receive\\n    function _lzReceive(\\n        MessagingContext calldata _context,\\n        bytes32 _guid,\\n        address /*_executor*/,\\n        bytes calldata\\n    ) internal override {\\n        uint8 messageType = _context.message.msgType();\\n\\n        if (messageType == MsgCodec.VANILLA_TYPE) {\\n            count++;\\n            _incrementInbound(_context.srcEid);\\n        } else if (messageType == MsgCodec.COMPOSED_TYPE || messageType == MsgCodec.COMPOSED_ABA_TYPE) {\\n            count++;\\n            _incrementInbound(_context.srcEid);\\n            endpoint.deliverComposedMessage(address(this), _guid, _context.message);\\n        } else if (messageType == MsgCodec.ABA_TYPE) {\\n            count++;\\n            _incrementInbound(_context.srcEid);\\n\\n            // send back to the sender\\n            _incrementOutbound(_context.srcEid);\\n            bytes memory options = OptionsBuilder.newOptions().addRelayerLzReceiveOption(200000, 0);\\n            _lzSend(\\n                _context.srcEid,\\n                MsgCodec.encode(MsgCodec.VANILLA_TYPE, eid),\\n                options,\\n                ILayerZeroEndpoint.MessagingFee(msg.value, 0),\\n                payable(address(this))\\n            );\\n        } else {\\n            revert(\\\"invalid message type\\\");\\n        }\\n    }\\n\\n    function _incrementInbound(uint32 _eid) internal {\\n        inboundCount[_eid]++;\\n    }\\n\\n    function _incrementOutbound(uint32 _eid) internal {\\n        outboundCount[_eid]++;\\n    }\\n\\n    function lzCompose(\\n        address /*_oapp*/,\\n        bytes32 /*_guid*/,\\n        bytes calldata _message,\\n        address,\\n        bytes calldata\\n    ) external payable override {\\n        require(msg.sender == address(endpoint), \\\"!endpoint\\\");\\n\\n        uint8 msgType = _message.msgType();\\n        if (msgType == MsgCodec.COMPOSED_TYPE) {\\n            composedCount += 1;\\n        } else if (msgType == MsgCodec.COMPOSED_ABA_TYPE) {\\n            composedCount += 1;\\n\\n            uint32 srcEid = _message.srcEid();\\n            _incrementOutbound(srcEid);\\n            bytes memory options = OptionsBuilder.newOptions().addRelayerLzReceiveOption(200000, 0);\\n            _lzSend(\\n                srcEid,\\n                MsgCodec.encode(MsgCodec.VANILLA_TYPE, eid),\\n                options,\\n                ILayerZeroEndpoint.MessagingFee(msg.value, 0),\\n                payable(address(this))\\n            );\\n        } else {\\n            revert(\\\"invalid message type\\\");\\n        }\\n    }\\n\\n    // -------------------------------\\n    // Ordered OApp\\n    // this demonstrates how to build an app that requires execution nonce ordering\\n    // normally an app should decide ordered or not on contract construction\\n    // this is just a demo\\n    function setOrderedNonce(bool _orderedNonce) external onlyOwner {\\n        orderedNonce = _orderedNonce;\\n    }\\n\\n    function _acceptNonce(uint32 _srcEid, bytes32 _sender, uint64 _nonce) internal virtual override {\\n        uint64 currentNonce = maxNonceByPath[_srcEid][_sender];\\n        if (orderedNonce) {\\n            require(_nonce == currentNonce + 1, \\\"OApp: invalid nonce\\\");\\n        }\\n        // update the max nonce anyway. once the ordered mode is turned on, missing early nonces will be rejected\\n        if (_nonce > currentNonce) {\\n            maxNonceByPath[_srcEid][_sender] = _nonce;\\n        }\\n    }\\n\\n    function nextNonce(uint32 _srcEid, bytes32 _sender) public view virtual override returns (uint64) {\\n        if (orderedNonce) {\\n            return maxNonceByPath[_srcEid][_sender] + 1;\\n        } else {\\n            return 0; // path nonce starts from 1. if 0 it means that there is no specific nonce enforcement\\n        }\\n    }\\n\\n    // a governance function to skip nonce\\n    function skipInboundNonce(uint32 _srcEid, bytes32 _sender, uint64 _nonce) public virtual override onlyOwner {\\n        endpoint.skip(_srcEid, _sender, _nonce);\\n        if (orderedNonce) {\\n            maxNonceByPath[_srcEid][_sender]++;\\n        }\\n    }\\n\\n    // be able to receive ether\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x27965e3fb647c0775296cba5234f6379af7b22314a49fdebb6678d26a5d21d1b\",\"license\":\"MIT\"},\"contracts/examples/OmniCounterWithPrecrime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../PreCrime.sol\\\";\\nimport \\\"./OmniCounter.sol\\\";\\n\\nabstract contract OmniCounterPreCrime is PreCrime {\\n    constructor(address _endpoint) PreCrime(_endpoint) {}\\n\\n    struct Count {\\n        uint32 eid;\\n        uint inboundCount;\\n        uint outboundCount;\\n    }\\n\\n    struct SimulationResult {\\n        uint32 eid;\\n        Count[] counts;\\n    }\\n\\n    // -------------------------------\\n    // Internal\\n    function _findCounts(SimulationResult memory _result, uint32 _eid) internal pure returns (uint, uint) {\\n        for (uint i = 0; i < _result.counts.length; i++) {\\n            if (_result.counts[i].eid == _eid) {\\n                return (_result.counts[i].inboundCount, _result.counts[i].outboundCount);\\n            }\\n        }\\n        return (0, 0);\\n    }\\n\\n    // -------------------------------\\n    // Precrime\\n    function _receiver() internal view override returns (address) {\\n        return address(this);\\n    }\\n\\n    // outboundCount >= inboundCount\\n    function _precrime(bytes[] memory _simulation) internal view override returns (uint16 code, bytes memory reason) {\\n        SimulationResult memory localResult;\\n        // decode results\\n        SimulationResult[] memory results = new SimulationResult[](_simulation.length);\\n        for (uint i = 0; i < _simulation.length; i++) {\\n            results[i] = abi.decode(_simulation[i], (SimulationResult));\\n\\n            if (results[i].eid == localEid) {\\n                localResult = results[i];\\n            }\\n        }\\n\\n        // check results\\n        for (uint i = 0; i < results.length; i++) {\\n            (uint _inboundCount, ) = _findCounts(localResult, results[i].eid);\\n            (, uint _outboundCount) = _findCounts(results[i], localEid);\\n\\n            if (_inboundCount > _outboundCount) {\\n                return (CODE_PRECRIME_FAILURE, \\\"OmniCounterPreCrime: inboundCount > outboundCount\\\");\\n            }\\n        }\\n        return (CODE_SUCCESS, \\\"\\\");\\n    }\\n\\n    function _simulate(Packet[] calldata _packets) internal override returns (uint16, bytes memory) {\\n        for (uint i = 0; i < _packets.length; i++) {\\n            _lzReceiveByPacket(_packets[i]);\\n        }\\n\\n        Count[] memory counts = new Count[](precrimeEids.length);\\n        for (uint i = 0; i < precrimeEids.length; i++) {\\n            uint32 remoteEid = precrimeEids[i];\\n            counts[i] = Count(remoteEid, _getInboundCount(remoteEid), _getOutboundCount(remoteEid));\\n        }\\n        return (CODE_SUCCESS, abi.encode(SimulationResult(localEid, counts)));\\n    }\\n\\n    //    // temporary function to get simulation\\n    //    function simulateNow(Packet[] calldata _packets) public returns (bytes memory) {\\n    //        (uint16 code, bytes memory data) = _simulate(_packets);\\n    //        return abi.encode(localEid, data);\\n    //    }\\n\\n    function _lzReceiveByPacket(Packet calldata _packet) internal virtual;\\n\\n    function _getInboundCount(uint32 _eid) internal view virtual returns (uint);\\n\\n    function _getOutboundCount(uint32 _eid) internal view virtual returns (uint);\\n}\\n\\ncontract OmniCounterWithPrecrime is OmniCounter, OmniCounterPreCrime {\\n    constructor(address _endpoint) OmniCounter(_endpoint) OmniCounterPreCrime(_endpoint) {}\\n\\n    // -------------------------------\\n    // Precrime\\n\\n    function _lzReceiveByPacket(Packet calldata _packet) internal override {\\n        bool isTrustedRemote = peers[_packet.context.srcEid] == _packet.context.sender;\\n        if (isTrustedRemote) {\\n            _lzReceive(_packet.context, _packet.guid, msg.sender, _packet.callParams);\\n        }\\n    }\\n\\n    function _getInboundCount(uint32 _eid) internal view override returns (uint) {\\n        return inboundCount[_eid];\\n    }\\n\\n    function _getOutboundCount(uint32 _eid) internal view override returns (uint) {\\n        return outboundCount[_eid];\\n    }\\n}\\n\",\"keccak256\":\"0xf5b4c04178606dc6972b4c570c0004a6724153d42022d84232fd9ebda6a75d69\",\"license\":\"MIT\"},\"contracts/interfaces/IOApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOApp is ILayerZeroReceiver {\\n    function setConfig(address _messageLib, uint32 _eid, uint32 _configType, bytes calldata _config) external;\\n\\n    function snapshotConfig(address _messageLib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _messageLib, uint32[] calldata _eids) external;\\n\\n    function setSendMessageLib(uint32 _eid, address _newLib) external;\\n\\n    function setReceiveMessageLib(uint32 _eid, address _newLib, uint _gracePeriod) external;\\n\\n    function setReceiveMessageLibTimeout(uint32 _eid, address _lib, uint _timeout) external;\\n\\n    function version() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x5dc273217c0acc959ca677877502f20024a23bb8bffd86474aa7a1c36eedabdc\",\"license\":\"MIT\"},\"contracts/interfaces/IPreCrime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IPreCrime {\\n    struct Packet {\\n        ILayerZeroReceiver.MessagingContext context;\\n        bytes32 guid;\\n        bytes callParams;\\n    }\\n\\n    function getPrecrimeConfig(Packet[] calldata _packets) external view returns (bytes memory);\\n\\n    function precrime(\\n        Packet[] calldata _packets,\\n        bytes[] calldata _simulation\\n    ) external view returns (uint16 code, bytes memory reason);\\n\\n    function precrimeVersion() external view returns (uint16);\\n\\n    function simulate(Packet[] calldata _packets) external payable returns (uint16 code, bytes memory result);\\n\\n    function simulateView(Packet[] calldata _packets) external view returns (uint16 code, bytes memory result);\\n}\\n\",\"keccak256\":\"0xdef10db605bc0b40ceee2e39a6cbeca5c1c909fcaae6c967c82d448f591687ea\",\"license\":\"MIT\"},\"contracts/libs/OptionsBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/Options.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/RelayerOptions.sol\\\";\\n\\nlibrary OptionsBuilder {\\n    using BytesLib for bytes;\\n\\n    modifier onlyType3(bytes memory _options) {\\n        require(_options.toUint16(0) == Options.TYPE_3, \\\"OptionsBuilder: invalid options type\\\");\\n        _;\\n    }\\n\\n    function newOptions() internal pure returns (bytes memory) {\\n        return Options.encodeOptions(new Options.WorkerOptions[](0));\\n    }\\n\\n    function addRelayerLzReceiveOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure returns (bytes memory) {\\n        Options.Option memory option = RelayerOptions.encodeLzReceiveOption(_gas, _value);\\n        return addOption(_options, RelayerOptions.WORKER_ID, option);\\n    }\\n\\n    function addRelayerAirdropOption(\\n        bytes memory _options,\\n        uint128 _amount,\\n        bytes32 _receiver\\n    ) internal pure returns (bytes memory) {\\n        Options.Option memory option = RelayerOptions.encodeAirdropOption(_amount, _receiver);\\n        return addOption(_options, RelayerOptions.WORKER_ID, option);\\n    }\\n\\n    function addRelayerLzComposeOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure returns (bytes memory) {\\n        Options.Option memory option = RelayerOptions.encodeLzComposeOption(_gas, _value);\\n        return addOption(_options, RelayerOptions.WORKER_ID, option);\\n    }\\n\\n    function addRelayerOrderedExecutionOption(bytes memory _options) internal pure returns (bytes memory) {\\n        Options.Option memory option = RelayerOptions.encodeOrderedExecutionOption();\\n        return addOption(_options, RelayerOptions.WORKER_ID, option);\\n    }\\n\\n    function addOption(\\n        bytes memory _options,\\n        uint16 _workerId,\\n        Options.Option memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        Options.WorkerOptions[] memory allWorkerOptions = Options.decodeOptions(_options);\\n        (bool found, uint index, bytes memory workerOptions) = Options.getWorkerOptionsByWorkerId(\\n            allWorkerOptions,\\n            _workerId\\n        );\\n        if (found) {\\n            Options.Option[] memory options = Options.decodeWorkerOptions(workerOptions);\\n            options = _insertNewOption(options, _option);\\n            allWorkerOptions[index].options = Options.encodeWorkerOptions(options);\\n        } else {\\n            // the only one relayer option\\n            bytes memory options = Options.encodeWorkerOptions(_option);\\n            Options.WorkerOptions memory newWorkerOptions = Options.WorkerOptions(_workerId, options);\\n            allWorkerOptions = _insertNewWorkerOptions(allWorkerOptions, newWorkerOptions);\\n        }\\n\\n        return Options.encodeOptions(allWorkerOptions);\\n    }\\n\\n    /// @dev insert a new worker options into worker options array and sort by worker id\\n    function _insertNewWorkerOptions(\\n        Options.WorkerOptions[] memory _workerOptions,\\n        Options.WorkerOptions memory _newOptions\\n    ) private pure returns (Options.WorkerOptions[] memory) {\\n        Options.WorkerOptions[] memory newWorkerOptions = new Options.WorkerOptions[](_workerOptions.length + 1);\\n        if (newWorkerOptions.length == 1) {\\n            newWorkerOptions[0] = _newOptions;\\n            return newWorkerOptions;\\n        }\\n\\n        for (uint i = 0; i < _workerOptions.length; i++) {\\n            require(_workerOptions[i].workerId != _newOptions.workerId, \\\"OptionsBuilder: worker id already exists\\\");\\n\\n            if (_workerOptions[i].workerId < _newOptions.workerId) {\\n                newWorkerOptions[i] = _workerOptions[i];\\n            } else {\\n                newWorkerOptions[i] = _newOptions;\\n                for (uint j = i; j < _workerOptions.length; j++) {\\n                    newWorkerOptions[j + 1] = _workerOptions[j];\\n                }\\n                break;\\n            }\\n\\n            if (i == _workerOptions.length - 1) {\\n                newWorkerOptions[i + 1] = _newOptions;\\n            }\\n        }\\n        return newWorkerOptions;\\n    }\\n\\n    /// @dev insert a new option into options array and sort by option type\\n    function _insertNewOption(\\n        Options.Option[] memory _options,\\n        Options.Option memory _newOption\\n    ) private pure returns (Options.Option[] memory) {\\n        Options.Option[] memory newAllOptions = new Options.Option[](_options.length + 1);\\n        if (newAllOptions.length == 1) {\\n            newAllOptions[0] = _newOption;\\n            return newAllOptions;\\n        }\\n\\n        for (uint i = 0; i < _options.length; i++) {\\n            require(_options[i].optionType != _newOption.optionType, \\\"OptionsBuilder: option type already exists\\\");\\n\\n            if (_options[i].optionType < _newOption.optionType) {\\n                newAllOptions[i] = _options[i];\\n            } else {\\n                newAllOptions[i] = _newOption;\\n                for (uint j = i; j < _options.length; j++) {\\n                    newAllOptions[j + 1] = _options[j];\\n                }\\n                break;\\n            }\\n\\n            if (i == _options.length - 1) {\\n                newAllOptions[i + 1] = _newOption;\\n            }\\n        }\\n        return newAllOptions;\\n    }\\n}\\n\",\"keccak256\":\"0x0b9f6c39c5527dcff0eaabb3602a53df536e288fba1760bfb8443c1de4b23f76\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setConfig(address,uint32,uint32,bytes)": {
        "notice": "----------------------------- UA Config Functions -----------------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1857,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3566,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 3197,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4798,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "count",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4800,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "composedCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4802,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "admin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4804,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "eid",
        "offset": 20,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 4810,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "maxNonceByPath",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64))"
      },
      {
        "astId": 4812,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "orderedNonce",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 4816,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "inboundCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 4820,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "outboundCount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 3921,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "localEid",
        "offset": 0,
        "slot": "10",
        "type": "t_uint32"
      },
      {
        "astId": 3923,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "pAdmin",
        "offset": 4,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3925,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "pMaxBatchSize",
        "offset": 24,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 3928,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "precrimeEids",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 3931,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "precrimePeers",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3935,
        "contract": "contracts/examples/OmniCounterWithPrecrime.sol:OmniCounterWithPrecrime",
        "label": "precrimeEidToPeer",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint64))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint64)"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}