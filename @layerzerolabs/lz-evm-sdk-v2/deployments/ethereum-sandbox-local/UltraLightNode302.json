{
  "address": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryGasCap",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ulnConfig",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ExecutorFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lzToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LzTokenFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeOrAltTokenFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofHash",
          "type": "bytes32"
        }
      ],
      "name": "PayloadSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "verifiers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "optionalVerifiers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        }
      ],
      "name": "VerifierFeePaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        }
      ],
      "name": "defaultOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "option",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "deliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "deliverable",
      "outputs": [
        {
          "internalType": "enum DeliveryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getDefaultConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "confirmations",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "isSupportedEid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "internalType": "struct PacketForQuote",
          "name": "_packet",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        }
      ],
      "name": "resetConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "receiver",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "internalType": "struct Packet",
          "name": "_packet",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "send",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "configType",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "config",
              "type": "bytes"
            }
          ],
          "internalType": "struct SetConfigParam[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "setDefaultOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        }
      ],
      "name": "snapshotConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_requiredConfirmation",
          "type": "uint64"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "inboundConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "useCustomVerifiers",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useCustomOptionalVerifiers",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "verifierCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "optionalVerifierThreshold",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "verifiers",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalVerifiers",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfigStruct",
          "name": "_config",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_headerHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "verifyConditionMet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "major",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "minor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "endpointVersion",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLzTokenFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x274f93a0552c51ce53794797069f8673da2596e948624d632f62bc6b4b17183b",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
    "transactionIndex": 0,
    "gasUsed": "4965795",
    "logsBloom": "0x
    "blockHash": "0xbec259fc54fce81f7cc94c440a4a58e7dd19da9e03c5c4064ce8f8ecba98fae0",
    "transactionHash": "0x274f93a0552c51ce53794797069f8673da2596e948624d632f62bc6b4b17183b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 135,
        "transactionHash": "0x274f93a0552c51ce53794797069f8673da2596e948624d632f62bc6b4b17183b",
        "address": "0x0f5D1ef48f12b6f691401bfe88c2037c690a6afe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbec259fc54fce81f7cc94c440a4a58e7dd19da9e03c5c4064ce8f8ecba98fae0"
      }
    ],
    "blockNumber": 135,
    "cumulativeGasUsed": "4965795",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1275D096B9DBf2347bD2a131Fb6BDaB0B4882487",
    100000,
    "0x0b48aF34f4c854F5ae1A3D587da471FeA45bAD52"
  ],
  "numDeployments": 1,
  "solcInputHash": "5ca99727c7fedfa1f4b820c3cc1e8e86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryGasCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ulnConfig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ExecutorFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lzToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LzTokenFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeOrAltTokenFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofHash\",\"type\":\"bytes32\"}],\"name\":\"PayloadSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"VerifierFeePaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"}],\"name\":\"defaultOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"option\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"deliverable\",\"outputs\":[{\"internalType\":\"enum DeliveryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getDefaultConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"confirmations\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"isSupportedEid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct PacketForQuote\",\"name\":\"_packet\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"}],\"name\":\"resetConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct Packet\",\"name\":\"_packet\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"}],\"internalType\":\"struct SetConfigParam[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"setDefaultOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"}],\"name\":\"snapshotConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_requiredConfirmation\",\"type\":\"uint64\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"useCustomVerifiers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useCustomOptionalVerifiers\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"verifierCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"optionalVerifierThreshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalVerifiers\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfigStruct\",\"name\":\"_config\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"verifyConditionMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endpointVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLzTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deliver(bytes,bytes32)\":{\"details\":\"dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable.\"},\"deliverable(bytes,bytes32)\":{\"details\":\"a deliverable message requires it to be endpoint deliverable and ULN deliverable\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)\":{\"details\":\"requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed\"},\"withdrawFee(address,uint256)\":{\"details\":\"E2 only\"},\"withdrawLzTokenFee(address,address,uint256)\":{\"details\":\"_lzToken is a user-supplied value because lzToken might change in the endpoint before all lzToken can be taken outE2 onlytreasury only function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uln/uln302/UltraLightNode302.sol\":\"UltraLightNode302\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nstruct PacketForQuote {\\n    address sender;\\n    uint32 dstEid;\\n    bytes message;\\n}\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\",\"keccak256\":\"0x8a4a8eba63ff7313aee2d476b643fd05ec13e91fa0a7cea1b9af0f0d04aee645\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMessageLibManager.sol\\\";\\nimport \\\"./IMessagingComposer.sol\\\";\\nimport \\\"./IMessagingChannel.sol\\\";\\nimport \\\"./IMessagingContext.sol\\\";\\nimport {Origin} from \\\"../MessagingStructs.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint nativeFee;\\n    uint lzTokenFee;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketDelivered(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketReceived(Origin origin, address receiver);\\n\\n    event LzReceiveFailed(Origin origin, address receiver, bytes reason);\\n\\n    event FeePaid(MessagingFee fee);\\n\\n    event LayerZeroTokenSet(address token);\\n\\n    function quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        bytes calldata _message,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        address payable _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function sendWithAlt(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        uint _altTokenFee\\n    ) external returns (MessagingReceipt memory);\\n\\n    function deliver(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function deliverable(Origin calldata _origin, address _receiveLib, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable returns (bool, bytes memory);\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are delivered in order\\n    function clear(Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLayerZeroToken(address _layerZeroToken) external;\\n\\n    function layerZeroToken() external view returns (address);\\n\\n    function altFeeToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd28654aeb9c0baf8ca04418b0e5af31a4d1b6e7a3d59ad54e57919bb241dffb3\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {MessagingFee, MessagingReceipt, SetConfigParam} from \\\"./ILayerZeroEndpointV2.sol\\\";\\nimport {Packet, PacketForQuote} from \\\"../MessagingStructs.sol\\\";\\n\\ninterface IMessageLib is IERC165 {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (MessagingReceipt memory, bytes memory encodedPacket, bytes memory options);\\n\\n    function quote(\\n        PacketForQuote calldata _packet,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function setConfig(address _oapp, uint32 _eid, SetConfigParam[] calldata _config) external;\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function withdrawFee(address _to, uint _amount) external;\\n\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint _amount) external;\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n}\\n\",\"keccak256\":\"0xf799ddaa287f61d59c7158b40ea62a975cf942697afdc126fc233d40d24e5612\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address oldLib, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address oldLib, address newLib);\\n    event ReceiveLibraryTimoutSet(address receiver, uint32 eid, address oldLib, uint timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function defaultConfig(address _lib, uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(uint32 _eid, address _newLib, uint _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(uint32 _eid, address _lib, uint _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function setConfig(address _lib, uint32 _eid, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function snapshotConfig(address _lib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _lib, uint32[] calldata _eids) external;\\n}\\n\",\"keccak256\":\"0xf5a21fd6499c96c7cd5998a3c4cb6bea41ff3ec1be212dfdac368d428803091f\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message can not be delivered for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function hasPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe9c180ca201e8af11747079224729e0552addf70d65c60e7a61a4624a28d4e5c\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposedMessageDelivered(address receiver, address composer, bytes32 guid, bytes message);\\n    event ComposedMessageReceived(\\n        address receiver,\\n        address composer,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller\\n    );\\n    event LzComposeFailed(\\n        address sender,\\n        address receiver,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller,\\n        bytes reason\\n    );\\n\\n    function deliverComposedMessage(address _composer, bytes32 _guid, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _receiver,\\n        address _composer,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable returns (bool, bytes memory);\\n}\\n\",\"keccak256\":\"0x3993726690a51a8660c2145d3d1483e03d93de7a578afc4130467bf6804f6896\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32, address);\\n}\\n\",\"keccak256\":\"0x6af87d5d41d060363fe554ff0ce9138f1ad8e20c1aaeec777d4132fc505e74e8\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary AddressCast {\\n    function toBytes32(bytes calldata _addressBytes) internal pure returns (bytes32 result) {\\n        require(_addressBytes.length <= 32, Errors.INVALID_SIZE);\\n        result = bytes32(_addressBytes);\\n        unchecked {\\n            uint offset = 32 - _addressBytes.length;\\n            result = result >> (offset * 8);\\n        }\\n    }\\n\\n    function toBytes32(address _address) internal pure returns (bytes32 result) {\\n        result = bytes32(uint(uint160(_address)));\\n    }\\n\\n    function toBytes(bytes32 _addressBytes32, uint _size) internal pure returns (bytes memory result) {\\n        require(_size > 0 && _size <= 32, Errors.INVALID_SIZE);\\n        bytes memory data = abi.encodePacked(_addressBytes32); // copy to memory\\n        result = new bytes(_size);\\n        unchecked {\\n            uint offset = 64 - _size; // 32 + 32\\n            assembly {\\n                mstore(add(result, 32), mload(add(data, offset)))\\n            }\\n        }\\n    }\\n\\n    function toAddress(bytes32 _addressBytes32) internal pure returns (address result) {\\n        result = address(uint160(uint(_addressBytes32)));\\n    }\\n\\n    function toAddress(bytes calldata _addressBytes) internal pure returns (address result) {\\n        require(_addressBytes.length == 20, Errors.INVALID_SIZE);\\n        result = address(bytes20(_addressBytes));\\n    }\\n}\\n\",\"keccak256\":\"0xadbb76b8bf7515cfe6e9cf5c0d0345926dd504999494bf5b23200f505398790c\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint _start) internal pure returns (address) {\\n        unchecked {\\n            uint end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6984a7e7f292ec4533ac684583e5d0505bee3bc4348776072413ceb521a6acc8\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // Invalid Argument (http: 400)\\n    string internal constant INVALID_ARGUMENT = \\\"LZ10000\\\";\\n    string internal constant ONLY_REGISTERED = \\\"LZ10001\\\";\\n    string internal constant ONLY_REGISTERED_OR_DEFAULT = \\\"LZ10002\\\";\\n    string internal constant INVALID_AMOUNT = \\\"LZ10003\\\";\\n    string internal constant INVALID_NONCE = \\\"LZ10004\\\";\\n    string internal constant SAME_VALUE = \\\"LZ10005\\\";\\n    string internal constant UNSORTED = \\\"LZ10006\\\";\\n    string internal constant INVALID_VERSION = \\\"LZ10007\\\";\\n    string internal constant INVALID_EID = \\\"LZ10008\\\";\\n    string internal constant INVALID_SIZE = \\\"LZ10009\\\";\\n    string internal constant ONLY_NON_DEFAULT = \\\"LZ10010\\\";\\n    string internal constant INVALID_VERIFIERS = \\\"LZ10011\\\";\\n    string internal constant DUPLICATED = \\\"LZ10012\\\";\\n    string internal constant INVALID_WORKER_ID = \\\"LZ10013\\\";\\n\\n    // Out of Range (http: 400)\\n    string internal constant OUT_OF_RANGE = \\\"LZ20000\\\";\\n\\n    // Invalid State (http: 400)\\n    string internal constant INVALID_STATE = \\\"LZ30000\\\";\\n    string internal constant SEND_REENTRANCY = \\\"LZ30001\\\";\\n    string internal constant RECEIVE_REENTRANCY = \\\"LZ30002\\\";\\n    string internal constant COMPOSE_REENTRANCY = \\\"LZ30003\\\";\\n\\n    // Permission Denied (http: 403)\\n    string internal constant PERMISSION_DENIED = \\\"LZ50000\\\";\\n\\n    // Not Found (http: 404)\\n    string internal constant NOT_FOUND = \\\"LZ60000\\\";\\n\\n    // Already Exists (http: 409)\\n    string internal constant ALREADY_EXISTS = \\\"LZ80000\\\";\\n\\n    // Not Implemented (http: 501)\\n    string internal constant NOT_IMPLEMENTED = \\\"LZC0000\\\";\\n    string internal constant UNSUPPORTED_INTERFACE = \\\"LZC0001\\\";\\n\\n    // Unavailable (http: 503)\\n    string internal constant UNAVAILABLE = \\\"LZD0000\\\";\\n    string internal constant NATIVE_COIN_UNAVAILABLE = \\\"LZD0001\\\";\\n    string internal constant TOKEN_UNAVAILABLE = \\\"LZD0002\\\";\\n    string internal constant DEFAULT_LIBRARY_UNAVAILABLE = \\\"LZD0003\\\";\\n    string internal constant VERIFIERS_UNAVAILABLE = \\\"LZD0004\\\";\\n}\\n\",\"keccak256\":\"0x00c68dee6968a14fa9a120a7447a3f568379c86f2a59d363e902128d4f361a6e\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.19;\\n\\nlibrary BitMaps {\\n    type BitMap256 is uint;\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << (index & 0xff);\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << (index & 0xff);\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0x29b1fb7dda9d3d6a699938da8610c0aa58d2eeb4244c6889a657eaf24117ac8e\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libs/Errors.sol\\\";\\nimport \\\"../../libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_AIRDROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint startCursor = cursor + 1; // skip option type and verifier_idx\\n            uint endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_SIZE);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeAirdropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        require(_option.length == 48, Errors.INVALID_SIZE);\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        require(_option.length == 16 || _option.length == 32, Errors.INVALID_SIZE);\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeAirdropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x2d317c33c60f628c83625a2622a76891789b7388b06596564bd08ae6af11058a\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../libs/AddressCast.sol\\\";\\nimport {Packet} from \\\"../../MessagingStructs.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    using AddressCast for address;\\n    using AddressCast for bytes32;\\n\\n    // header (version + nonce + path)\\n    // version\\n    uint private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint private constant SRC_EID_OFFSET = 9;\\n    uint private constant SENDER_OFFSET = 13;\\n    uint private constant DST_EID_OFFSET = 45;\\n    uint private constant RECEIVER_OFFSET = 49;\\n    // payload (guid + message)\\n    uint private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(uint8 _version, Packet calldata _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            _version,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function encode2(uint8 _version, Packet memory _packet) internal pure returns (bytes memory encodedPacket) {\\n        encodedPacket = abi.encodePacked(\\n            _version,\\n            _packet.nonce,\\n            _packet.srcEid,\\n            _packet.sender.toBytes32(),\\n            _packet.dstEid,\\n            _packet.receiver,\\n            _packet.guid,\\n            _packet.message\\n        );\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return sender(_packet).toAddress();\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return receiver(_packet).toAddress();\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function payloadHash(bytes calldata _packet) internal pure returns (bytes32) {\\n        return keccak256(payload(_packet));\\n    }\\n}\\n\",\"keccak256\":\"0x34a85bfba2d04d7d8919647031f8fffec4e10837544fec7862b1fe0de426a28f\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/MessageLibBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroExecutor.sol\\\";\\nimport \\\"./interfaces/ILayerZeroTreasury.sol\\\";\\n\\nstruct WorkerOptions {\\n    uint8 workerId;\\n    bytes options;\\n}\\n\\nenum DeliveryState {\\n    Signing,\\n    Deliverable,\\n    Delivered,\\n    Waiting\\n}\\n\\nabstract contract MessageLibBase is Ownable {\\n    address internal immutable endpoint;\\n    uint32 internal immutable localEid;\\n    uint8 internal immutable packetVersion;\\n    uint internal immutable treasuryGasCap;\\n\\n    // config\\n    address public treasury;\\n    mapping(uint32 dstEid => bytes option) public defaultOptions;\\n\\n    // accumulated fees for workers and treasury\\n    mapping(address worker => uint) public fees;\\n\\n    event ExecutorFeePaid(address executor, uint fee);\\n\\n    // only the endpoint can call SEND() and setConfig()\\n    modifier onlyEndpoint() {\\n        require(endpoint == msg.sender, Errors.PERMISSION_DENIED);\\n        _;\\n    }\\n\\n    constructor(address _endpoint, uint32 _localEid, uint8 _packetVersion, uint _treasuryGasCap) {\\n        endpoint = _endpoint;\\n        localEid = _localEid;\\n        packetVersion = _packetVersion;\\n        treasuryGasCap = _treasuryGasCap;\\n    }\\n\\n    // ======================= OnlyOwner =======================\\n    function setDefaultOptions(uint32 _dstEid, bytes calldata _options) external onlyOwner {\\n        defaultOptions[_dstEid] = _options;\\n    }\\n\\n    // ======================= Internal =======================\\n    function _assertMessageSize(uint _actual, uint _max) internal pure {\\n        require(_actual <= _max, Errors.INVALID_SIZE);\\n    }\\n\\n    function _sendToExecutor(\\n        address _executor,\\n        uint32 _dstEid,\\n        address _sender,\\n        uint _msgSize,\\n        bytes memory _executorOptions\\n    ) internal returns (uint executorFee) {\\n        executorFee = ILayerZeroExecutor(_executor).assignJob(_dstEid, _sender, _msgSize, _executorOptions);\\n        if (executorFee > 0) {\\n            fees[_executor] += executorFee;\\n        }\\n        emit ExecutorFeePaid(_executor, executorFee);\\n    }\\n\\n    function _sendToTreasury(\\n        address _sender,\\n        uint32 _dstEid,\\n        uint _totalNativeFee,\\n        bool _payInLzToken\\n    ) internal returns (uint treasuryNativeFee, uint lzTokenFee) {\\n        // fee should be in lzTokenFee if payInLzToken, otherwise in native\\n        (treasuryNativeFee, lzTokenFee) = _quoteTreasuryFee(_sender, _dstEid, _totalNativeFee, _payInLzToken);\\n        // if payInLzToken, handle in messagelib / endpoint\\n        if (treasuryNativeFee > 0) {\\n            fees[treasury] += treasuryNativeFee;\\n        }\\n    }\\n\\n    function _getWorkerOptions(\\n        uint32 _dstEid,\\n        bytes calldata _options\\n    )\\n        internal\\n        view\\n        returns (bytes memory options, bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions)\\n    {\\n        // use default if no option provided\\n        if (_options.length == 0) {\\n            options = defaultOptions[_dstEid];\\n        } else {\\n            options = _options;\\n        }\\n\\n        // split options by worker type\\n        if (options.length > 0) (executorOptions, otherWorkerOptions) = _getExecutorOptions(options);\\n    }\\n\\n    function _quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        uint _msgSize,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) internal view returns (uint, uint) {\\n        (, bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions) = _getWorkerOptions(\\n            _dstEid,\\n            _options\\n        );\\n\\n        // quote other workers\\n        (uint nativeFee, address executor, uint maxMsgSize) = _quoteWorkers(_sender, _dstEid, otherWorkerOptions);\\n\\n        // assert msg size\\n        _assertMessageSize(_msgSize, maxMsgSize);\\n\\n        // quote executor\\n        nativeFee += ILayerZeroExecutor(executor).getFee(_dstEid, _sender, _msgSize, executorOptions);\\n\\n        // quote treasury\\n        (uint treasuryNativeFee, uint lzTokenFee) = _quoteTreasuryFee(_sender, _dstEid, nativeFee, _payInLzToken);\\n        if (treasuryNativeFee > 0) {\\n            nativeFee += treasuryNativeFee;\\n        }\\n\\n        return (nativeFee, lzTokenFee);\\n    }\\n\\n    function _quoteTreasuryFee(\\n        address _sender,\\n        uint32 _eid,\\n        uint _totalFee,\\n        bool _payInLzToken\\n    ) internal view returns (uint nativeFee, uint lzTokenFee) {\\n        if (treasury != address(0x0)) {\\n            try ILayerZeroTreasury(treasury).getFee(_sender, _eid, _totalFee, _payInLzToken) returns (\\n                uint treasuryFee\\n            ) {\\n                // success\\n                if (_payInLzToken) {\\n                    lzTokenFee = treasuryFee;\\n                } else {\\n                    // pay in native, make sure that the treasury fee is not higher than the cap\\n                    uint gasFeeEstimate = tx.gasprice * treasuryGasCap;\\n                    // cap is the max of total fee and gasFeeEstimate. this is to prevent apps from forcing the cap to 0.\\n                    uint nativeFeeCap = _totalFee > gasFeeEstimate ? _totalFee : gasFeeEstimate;\\n                    // to prevent the treasury from returning an overly high value to break the path\\n                    nativeFee = treasuryFee > nativeFeeCap ? nativeFeeCap : treasuryFee;\\n                }\\n            } catch {\\n                // failure, something wrong with treasury contract, charge nothing and continue\\n            }\\n        }\\n    }\\n\\n    function _transferNative(address _to, uint _amount) internal {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, Errors.INVALID_STATE);\\n    }\\n\\n    // for msg.sender only\\n    function _assertAndDebitAmount(address _to, uint _amount) internal {\\n        require(_to != address(0x0) && _amount <= fees[msg.sender], Errors.INVALID_ARGUMENT);\\n        fees[msg.sender] -= _amount;\\n    }\\n\\n    // ======================= Virtual =======================\\n    // For implementation to override\\n    function _quoteWorkers(\\n        address _oapp,\\n        uint32 _eid,\\n        WorkerOptions[] memory _options\\n    ) internal view virtual returns (uint, address, uint);\\n\\n    function _getExecutorOptions(\\n        bytes memory _options\\n    ) internal view virtual returns (bytes memory executorOptions, WorkerOptions[] memory otherWorkerOptions);\\n}\\n\",\"keccak256\":\"0xae762395ed46d89e1cf69abab0b92f5ddbd220d4aa7afdb5249f33977e15178e\",\"license\":\"BUSL-1.1\"},\"contracts/MessageLibBaseE2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {Origin} from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroExecutor.sol\\\";\\nimport \\\"./MessageLibBase.sol\\\";\\n\\n/// the base contract for msglib on Endpoint V2\\nabstract contract MessageLibBaseE2 is MessageLibBase, ERC165, IMessageLib {\\n    using SafeERC20 for IERC20;\\n    using PacketV1Codec for bytes;\\n\\n    event NativeOrAltTokenFeeWithdrawn(address worker, address receiver, uint amount);\\n    event LzTokenFeeWithdrawn(address lzToken, address receiver, uint amount);\\n\\n    constructor(\\n        address _endpoint,\\n        uint8 _packetVersion,\\n        uint _treasuryGasCap\\n    ) MessageLibBase(_endpoint, ILayerZeroEndpointV2(_endpoint).eid(), _packetVersion, _treasuryGasCap) {}\\n\\n    function supportsInterface(bytes4 _interfaceId) public view override(ERC165, IERC165) returns (bool) {\\n        return _interfaceId == type(IMessageLib).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    // ========================= OnlyEndpoint =========================\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external onlyEndpoint returns (MessagingReceipt memory, bytes memory, bytes memory) {\\n        (bytes memory options, bytes memory encodedPacket, uint totalNativeFee) = _sendToWorkers(_packet, _options);\\n\\n        // a hook to run local tests. in the implementation it should be empty\\n        _handleMessagingParamsHook(encodedPacket, options);\\n\\n        (uint treasuryNativeFee, uint lzTokenFee) = _sendToTreasury(\\n            _packet.sender,\\n            _packet.dstEid,\\n            totalNativeFee,\\n            _payInLzToken\\n        );\\n        totalNativeFee += treasuryNativeFee;\\n\\n        MessagingReceipt memory receipt = MessagingReceipt(\\n            _packet.guid,\\n            _packet.nonce,\\n            MessagingFee(totalNativeFee, lzTokenFee)\\n        );\\n        return (receipt, encodedPacket, options);\\n    }\\n\\n    // ========================= OnlyOnwer =========================\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    // ========================= External =========================\\n    /// @dev E2 only\\n    function withdrawFee(address _to, uint _amount) external {\\n        _assertAndDebitAmount(_to, _amount);\\n\\n        address altTokenAddr = ILayerZeroEndpointV2(endpoint).altFeeToken();\\n        bool isAltToken = altTokenAddr != address(0x0);\\n\\n        if (isAltToken) {\\n            IERC20(altTokenAddr).safeTransfer(_to, _amount);\\n        } else {\\n            _transferNative(_to, _amount);\\n        }\\n        emit NativeOrAltTokenFeeWithdrawn(msg.sender, _to, _amount);\\n    }\\n\\n    /// @dev _lzToken is a user-supplied value because lzToken might change in the endpoint before all lzToken can be taken out\\n    /// @dev E2 only\\n    /// @dev treasury only function\\n    function withdrawLzTokenFee(address _lzToken, address _to, uint _amount) external {\\n        require(msg.sender == treasury, Errors.PERMISSION_DENIED);\\n\\n        // lz token cannot be alt token\\n        require(\\n            ILayerZeroEndpointV2(endpoint).altFeeToken() != _lzToken && _to != address(0x0),\\n            Errors.INVALID_ARGUMENT\\n        );\\n\\n        IERC20(_lzToken).safeTransfer(_to, _amount);\\n        emit LzTokenFeeWithdrawn(_lzToken, _to, _amount);\\n    }\\n\\n    // ========================= View =========================\\n    function quote(\\n        PacketForQuote calldata _packet,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory) {\\n        (uint nativeFee, uint lzTokenFee) = _quote(\\n            _packet.sender,\\n            _packet.dstEid,\\n            _packet.message.length,\\n            _payInLzToken,\\n            _options\\n        );\\n        return MessagingFee(nativeFee, lzTokenFee);\\n    }\\n\\n    // ========================= Internal =========================\\n    function _sendToWorkers(\\n        Packet calldata _packet,\\n        bytes calldata _options\\n    ) internal returns (bytes memory options, bytes memory encodedPacket, uint totalNativeFee) {\\n        encodedPacket = PacketV1Codec.encode(packetVersion, _packet);\\n\\n        bytes memory executorOptions;\\n        WorkerOptions[] memory otherWorkerOptions;\\n        (options, executorOptions, otherWorkerOptions) = _getWorkerOptions(_packet.dstEid, _options);\\n\\n        (uint otherWorkerFeeds, address executor, uint maxMsgSize) = _send(_packet, otherWorkerOptions);\\n        totalNativeFee += otherWorkerFeeds;\\n\\n        uint msgSize = _packet.message.length;\\n        _assertMessageSize(msgSize, maxMsgSize);\\n\\n        totalNativeFee += _sendToExecutor(executor, _packet.dstEid, _packet.sender, msgSize, executorOptions);\\n    }\\n\\n    function _endpointDeliverable(\\n        uint32 _srcEid,\\n        address _receiver,\\n        bytes calldata _packetHeader\\n    ) internal view returns (DeliveryState) {\\n        // 1. check endpoint deliverable\\n        // not checking in the internal function as it would be checked by the endpoint\\n        Origin memory origin = Origin(_srcEid, _packetHeader.sender(), _packetHeader.nonce());\\n\\n        // if endpoint didnot revert on deliverable check, it will return true if the message is deliverable. false if the message has been delivered\\n        bool endpointDeliverable = ILayerZeroEndpointV2(endpoint).deliverable(origin, address(this), _receiver);\\n        if (!endpointDeliverable) return DeliveryState.Delivered;\\n\\n        // 2. check if has payload\\n        // endpoint allows redelivery, check if it has already been delivered\\n        bool hasPayload = ILayerZeroEndpointV2(endpoint).hasPayloadHash(\\n            _receiver,\\n            origin.srcEid,\\n            origin.sender,\\n            origin.nonce\\n        );\\n        if (hasPayload) return DeliveryState.Delivered;\\n\\n        return DeliveryState.Deliverable;\\n    }\\n\\n    // ======================= Virtual =======================\\n    // For implementation to override\\n    function _send(\\n        Packet calldata _packet,\\n        WorkerOptions[] memory _options\\n    ) internal virtual returns (uint, address, uint);\\n\\n    function _handleMessagingParamsHook(bytes memory _encodedPacket, bytes memory _options) internal virtual {}\\n\\n    // receive native token from endpoint\\n    receive() external payable virtual {}\\n}\\n\",\"keccak256\":\"0x803499696362916b63ca7045a15938f8d958c0ab50052e5a137f29b3b5083132\",\"license\":\"BUSL-1.1\"},\"contracts/OutboundConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"./interfaces/ILayerZeroExecutor.sol\\\";\\n\\nstruct OutboundConfigStruct {\\n    uint32 maxMessageSize;\\n    uint64 outboundConfirmations;\\n    address executor;\\n}\\n\\n/// extract it because it might be reused by future non-ULN msglibs\\ncontract OutboundConfig {\\n    // Derived MessageLibs should never use this as config type\\n    uint32 internal constant CONFIG_TYPE_MAX_MESSAGE_SIZE = 1;\\n    uint32 internal constant CONFIG_TYPE_OUTBOUND_CONFIRMATIONS = 2;\\n    uint32 internal constant CONFIG_TYPE_EXECUTOR = 3;\\n\\n    mapping(uint32 dstEid => OutboundConfigStruct) public defaultOutboundConfig;\\n    mapping(address oapp => mapping(uint32 dstEid => OutboundConfigStruct)) public outboundConfig;\\n\\n    // ============================ View ===================================\\n    function getOutboundConfigByType(\\n        uint32 _eid,\\n        address _oapp,\\n        uint _configType\\n    ) public view returns (bytes memory, bool) {\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n            if (config.maxMessageSize == 0) {\\n                OutboundConfigStruct storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.maxMessageSize), true);\\n            }\\n            return (abi.encode(config.maxMessageSize), false);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n            if (config.outboundConfirmations == 0) {\\n                OutboundConfigStruct storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.outboundConfirmations), true);\\n            }\\n            return (abi.encode(config.outboundConfirmations), false);\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n            if (config.executor == address(0x0)) {\\n                OutboundConfigStruct storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.executor), true);\\n            }\\n            return (abi.encode(config.executor), false);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    function getDefaultOutboundConfigByType(uint32 _eid, uint32 _configType) public view returns (bytes memory) {\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.maxMessageSize);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.outboundConfirmations);\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.executor);\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    function getOutboundConfig(address _oapp, uint32 _dstEid) public view returns (OutboundConfigStruct memory) {\\n        OutboundConfigStruct memory config = outboundConfig[_oapp][_dstEid];\\n        OutboundConfigStruct memory defaultConfig = defaultOutboundConfig[_dstEid];\\n        require(defaultConfig.maxMessageSize > 0, Errors.INVALID_EID); // available remote eid\\n\\n        if (config.maxMessageSize == 0) {\\n            config.maxMessageSize = defaultConfig.maxMessageSize;\\n        }\\n        if (config.outboundConfirmations == 0) {\\n            config.outboundConfirmations = defaultConfig.outboundConfirmations;\\n        }\\n        if (config.executor == address(0x0)) {\\n            config.executor = defaultConfig.executor;\\n        }\\n        return config;\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _setDefaultOutboundConfig(uint32 _eid, OutboundConfigStruct calldata _config) internal {\\n        require(_config.outboundConfirmations > 0 && _config.executor != address(0x0), Errors.INVALID_ARGUMENT);\\n        require(_config.maxMessageSize > 0, Errors.INVALID_SIZE);\\n\\n        OutboundConfigStruct storage config = defaultOutboundConfig[_eid];\\n        config.executor = _config.executor;\\n        config.maxMessageSize = _config.maxMessageSize;\\n        config.outboundConfirmations = _config.outboundConfirmations;\\n    }\\n\\n    function _setOutboundConfigByType(address _oapp, uint32 _eid, uint32 _configType, bytes calldata _config) internal {\\n        OutboundConfigStruct storage config = outboundConfig[_oapp][_eid];\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            uint32 maxMessageSize = abi.decode(_config, (uint32));\\n            config.maxMessageSize = maxMessageSize;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            uint64 outboundConfirmations = abi.decode(_config, (uint64));\\n            config.outboundConfirmations = outboundConfirmations;\\n        } else if (_configType == CONFIG_TYPE_EXECUTOR) {\\n            address executor = abi.decode(_config, (address));\\n            config.executor = executor;\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n\\n    function _snapshotOutboundConfig(uint32 _eid, address _oapp) internal {\\n        outboundConfig[_oapp][_eid] = getOutboundConfig(_oapp, _eid);\\n    }\\n\\n    function _resetOutboundConfig(uint32 _eid, address _oapp) internal {\\n        delete outboundConfig[_oapp][_eid];\\n    }\\n}\\n\",\"keccak256\":\"0x1e325445c96141785106ee0211c0cbbfb0d474b53900478d3bf6273216d3e11d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroExecutor {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint _calldataSize,\\n        bytes calldata _options\\n    ) external payable returns (uint price);\\n\\n    // @notice query the executor price for relaying the payload and its proof to the destination chain\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _sender - the source sending contract address. executors may apply price discrimination to senders\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint32 _dstEid,\\n        address _sender,\\n        uint _calldataSize,\\n        bytes calldata _options\\n    ) external view returns (uint price);\\n}\\n\",\"keccak256\":\"0x66a3a562e86d3c78c3b4d940a7c8ba57be12abe38fb423d8134a104ba3a830f6\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroTreasury {\\n    function getFee(address _sender, uint32 _eid, uint _totalFee, bool _payInLzToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x3977765950cf0bde199f7119d195f32d89a3d1b343b92e05f71531f85217f25d\",\"license\":\"BUSL-1.1\"},\"contracts/uln/UlnBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport {OutboundConfigStruct} from \\\"../OutboundConfig.sol\\\";\\nimport {IUlnConfig, UlnConfigStruct} from \\\"./interfaces/IUlnConfig.sol\\\";\\nimport \\\"./interfaces/ILayerZeroVerifier.sol\\\";\\nimport \\\"./libs/UlnOptions.sol\\\";\\nimport {WorkerOptions} from \\\"../MessageLibBase.sol\\\";\\n\\n/// @dev includes the utility functions for checking ULN states and logics\\ncontract UlnBase {\\n    mapping(bytes32 headerHash => mapping(bytes32 payloadHash => mapping(address verifier => uint64 confirmations)))\\n        public hashLookup;\\n    IUlnConfig internal immutable ulnConfig;\\n\\n    event PayloadSigned(address verifier, bytes header, uint confirmations, bytes32 proofHash);\\n    event VerifierFeePaid(address[] verifiers, address[] optionalVerifiers, uint[] fees);\\n\\n    constructor(address _ulnConfig) {\\n        ulnConfig = IUlnConfig(_ulnConfig);\\n    }\\n\\n    // ============================ View ===================================\\n    function verified(\\n        address _verifier,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash,\\n        uint64 _requiredConfirmation\\n    ) public view returns (bool) {\\n        uint64 verifiedConfirmations = hashLookup[_headerHash][_payloadHash][_verifier];\\n        // return true if the verifier has signed enough confirmations\\n        return verifiedConfirmations >= _requiredConfirmation;\\n    }\\n\\n    /// @dev requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed\\n    function verifyConditionMet(\\n        UlnConfigStruct memory _config,\\n        bytes32 _headerHash,\\n        bytes32 _payloadHash\\n    ) public view returns (bool) {\\n        uint64 requiredConfirmations = _config.inboundConfirmations;\\n        // iterate the must-have verifiers\\n        unchecked {\\n            for (uint i = 0; i < _config.verifierCount; ++i) {\\n                if (!verified(_config.verifiers[i], _headerHash, _payloadHash, requiredConfirmations)) {\\n                    // return false if any of the must-have verifiers haven't signed\\n                    return false;\\n                }\\n            }\\n\\n            if (_config.verifierCount > 0 && _config.optionalVerifierCount == 0) {\\n                // returns true if all must-have verifiers have signed and there are no optional verifiers\\n                return true;\\n            } else {\\n                // then the optional ones\\n                uint optionalCount = 0;\\n                for (uint i = 0; i < _config.optionalVerifierCount; ++i) {\\n                    if (verified(_config.optionalVerifiers[i], _headerHash, _payloadHash, requiredConfirmations)) {\\n                        // increment the optional count if the optional verifier has signed\\n                        ++optionalCount;\\n                        if (optionalCount >= _config.optionalVerifierThreshold) {\\n                            // early return if the optional threshold has hit\\n                            return true;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        // return false by default as a catch-all\\n        return false;\\n    }\\n\\n    // ============================ Internal ===================================\\n    function _getVerifierFees(\\n        UlnConfigStruct memory _config,\\n        uint32 _dstEid,\\n        uint64 _outboundConfirmations,\\n        address _sender,\\n        bytes[] memory _optionsArray,\\n        uint8[] memory _verifierIds\\n    ) internal view returns (uint totalFee) {\\n        uint8 verifiersLength = _config.verifierCount + _config.optionalVerifierCount;\\n        for (uint i = 0; i < verifiersLength; ) {\\n            address verifier;\\n            bytes memory options;\\n            unchecked {\\n                verifier = i < _config.verifierCount\\n                    ? _config.verifiers[i]\\n                    : _config.optionalVerifiers[i - _config.verifierCount];\\n\\n                for (uint j = 0; j < _verifierIds.length; ++j) {\\n                    if (_verifierIds[j] == i) {\\n                        options = _optionsArray[j];\\n                        break;\\n                    }\\n                }\\n            }\\n            totalFee += ILayerZeroVerifier(verifier).getFee(_dstEid, _outboundConfirmations, _sender, options);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _assignJobToVerifiers(\\n        mapping(address => uint) storage _fees,\\n        UlnConfigStruct memory _config,\\n        uint32 _dstEid,\\n        uint64 _outboundConfirmations,\\n        address _sender,\\n        bytes[] memory _optionsArray,\\n        uint8[] memory _verifierIds\\n    ) internal returns (uint totalFee, uint[] memory verifierFees) {\\n        uint8 verifiersLength = _config.verifierCount + _config.optionalVerifierCount;\\n        verifierFees = new uint[](verifiersLength);\\n        uint j = 0;\\n        for (uint i = 0; i < verifiersLength; ) {\\n            address verifier;\\n            bytes memory options;\\n            unchecked {\\n                verifier = i < _config.verifierCount\\n                    ? _config.verifiers[i]\\n                    : _config.optionalVerifiers[i - _config.verifierCount];\\n                if (_verifierIds.length > 0 && i == _verifierIds[j]) {\\n                    options = _optionsArray[j++];\\n                }\\n            }\\n\\n            verifierFees[i] = ILayerZeroVerifier(verifier).assignJob(_dstEid, _outboundConfirmations, _sender, options);\\n            if (verifierFees[i] > 0) {\\n                _fees[verifier] += verifierFees[i];\\n                totalFee += verifierFees[i];\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _getExecutorOptionsInternal(\\n        bytes memory _options\\n    ) internal pure returns (bytes memory, WorkerOptions[] memory) {\\n        (bytes memory executorOpts, bytes memory verifierOpts) = UlnOptions.decode(_options);\\n\\n        if (verifierOpts.length == 0) {\\n            return (executorOpts, new WorkerOptions[](0));\\n        }\\n\\n        WorkerOptions[] memory workerOpts = new WorkerOptions[](1);\\n        workerOpts[0] = WorkerOptions(VerifierOptions.WORKER_ID, verifierOpts);\\n        return (executorOpts, workerOpts);\\n    }\\n\\n    function _ulnSend(\\n        mapping(address => uint) storage _fees,\\n        WorkerOptions[] memory _options,\\n        address _sender,\\n        uint32 _dstEid\\n    ) internal returns (uint totalFee, address executor, uint maxMsgSize) {\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            _sender,\\n            _dstEid\\n        );\\n        executor = outboundConfig.executor;\\n        maxMsgSize = outboundConfig.maxMessageSize;\\n\\n        // if options is not empty, it must be verifier options\\n        bytes memory verifierOptions = _options.length == 0 ? bytes(\\\"\\\") : _options[0].options;\\n        (bytes[] memory optionsArray, uint8[] memory verifierIndices) = VerifierOptions.groupVerifierOptionsByIdx(\\n            verifierOptions\\n        );\\n\\n        uint[] memory verifierFees;\\n        (totalFee, verifierFees) = _assignJobToVerifiers(\\n            _fees,\\n            config,\\n            _dstEid,\\n            outboundConfig.outboundConfirmations,\\n            _sender,\\n            optionsArray,\\n            verifierIndices\\n        );\\n\\n        emit VerifierFeePaid(config.verifiers, config.optionalVerifiers, verifierFees);\\n    }\\n\\n    function _quoteUlnWorkers(\\n        address _sender,\\n        uint32 _dstEid,\\n        WorkerOptions[] memory _options\\n    ) internal view returns (uint totalFee, address executor, uint maxMsgSize) {\\n        (UlnConfigStruct memory config, OutboundConfigStruct memory outboundConfig) = ulnConfig.getUlnAndOutboundConfig(\\n            _sender,\\n            _dstEid\\n        );\\n        executor = outboundConfig.executor;\\n        maxMsgSize = outboundConfig.maxMessageSize;\\n\\n        // if options is not empty, it must be verifier options\\n        bytes memory verifierOptions = _options.length == 0 ? bytes(\\\"\\\") : _options[0].options;\\n        (bytes[] memory optionsArray, uint8[] memory verifierIndices) = VerifierOptions.groupVerifierOptionsByIdx(\\n            verifierOptions\\n        );\\n\\n        totalFee = _getVerifierFees(\\n            config,\\n            _dstEid,\\n            outboundConfig.outboundConfirmations,\\n            _sender,\\n            optionsArray,\\n            verifierIndices\\n        );\\n    }\\n\\n    function _verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) internal {\\n        hashLookup[keccak256(_packetHeader)][_payloadHash][msg.sender] = _confirmations;\\n        emit PayloadSigned(msg.sender, _packetHeader, _confirmations, _payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x8979791dac80ffa843dad548aa0a3b0f1379672b4593e6707ecbb1d674070053\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/ILayerZeroVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroVerifier {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function assignJob(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external payable returns (uint fee);\\n\\n    // @notice query the verifier fee for relaying block information to the destination chain\\n    // @param _dstEid the destination endpoint identifier\\n    // @param _confirmations - block confirmation delay before relaying blocks\\n    // @param _sender - the source sending contract address\\n    // @param _options - options\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _confirmations,\\n        address _sender,\\n        bytes calldata _options\\n    ) external view returns (uint fee);\\n}\\n\",\"keccak256\":\"0x1b67dc834fa9d7148bc6a7261c14ab50cb70dd3fbf34191cfefdb747bfcb4f28\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/IUlnConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport {OutboundConfigStruct} from \\\"../../OutboundConfig.sol\\\";\\n\\nstruct SetDefaultConfigParam {\\n    uint32 eid;\\n    OutboundConfigStruct outboundConfig;\\n    uint64 inboundConfirmations;\\n    address[] verifiers;\\n    address[] optionalVerifiers;\\n    uint8 optionalVerifierThreshold;\\n}\\n\\nstruct UlnConfigStruct {\\n    uint64 inboundConfirmations;\\n    bool useCustomVerifiers; // unused for default config\\n    bool useCustomOptionalVerifiers; // unused for default config\\n    uint8 verifierCount;\\n    uint8 optionalVerifierCount;\\n    uint8 optionalVerifierThreshold;\\n    address[] verifiers; // allowed overlap with optionalVerifiers\\n    address[] optionalVerifiers; // allowed overlap with verifiers\\n}\\n\\ninterface IUlnConfig {\\n    function setConfigByType(uint32 _remoteEid, address _oapp, uint32 _configType, bytes calldata _config) external;\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function isSupportedEid(uint32 _remoteEid) external view returns (bool);\\n\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) external view returns (UlnConfigStruct memory);\\n\\n    function getUlnAndOutboundConfig(\\n        address _oapp,\\n        uint32 _remoteEid\\n    ) external view returns (UlnConfigStruct memory, OutboundConfigStruct memory);\\n\\n    function getConfigByType(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory, bool);\\n\\n    function getDefaultConfigByType(uint32 _remoteEid, uint32 _configType) external view returns (bytes memory);\\n\\n    function setDefaultConfig(SetDefaultConfigParam[] calldata _params) external;\\n}\\n\",\"keccak256\":\"0x0d936967be7325cb89e2be087baa624a6b83b92ae5a7913e6b93aef85be7cfd3\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/IUltraLightNode.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport {DeliveryState} from \\\"../../MessageLibBase.sol\\\";\\n\\ninterface IUltraLightNode {\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external;\\n\\n    function deliver(bytes calldata _packetHeader, bytes32 _payloadHash) external;\\n\\n    function deliverable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (DeliveryState);\\n}\\n\",\"keccak256\":\"0x71e19eb74a6e82d80f5006abdf51fae5553c3f4a204c4d7d7a11122d7252b271\",\"license\":\"BUSL-1.1\"},\"contracts/uln/libs/UlnOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/ExecutorOptions.sol\\\";\\nimport \\\"./VerifierOptions.sol\\\";\\n\\nlibrary UlnOptions {\\n    using BytesLib for bytes;\\n    using SafeCast for uint;\\n\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    // todo: need another decode function for calldata options?\\n    /// @dev decode the options into executorOptions and verifierOptions\\n    /// @param _options the options can be either legacy options (type 1 or 2) or type 3 options\\n    /// @return executorOptions the executor options, share the same format of type 3 options\\n    /// @return verifierOptions the verifier options, share the same format of type 3 options\\n    function decode(\\n        bytes memory _options\\n    ) internal pure returns (bytes memory executorOptions, bytes memory verifierOptions) {\\n        uint16 optionsType = _options.toUint16(0);\\n        uint cursor = 2;\\n\\n        // type3 options: [worker_option][worker_option]...\\n        // worker_option: [worker_id][option_size][option]\\n        // worker_id: uint8, option_size: uint16, option: bytes\\n        if (optionsType == TYPE_3) {\\n            unchecked {\\n                uint start = cursor;\\n                uint8 lastWorkerId; // worker_id starts from 1, so 0 is an invalid worker_id\\n\\n                // heuristic: we assume that the options are mostly EXECUTOR options only\\n                // checking the workerID can reduce gas usage for most cases\\n                while (cursor < _options.length) {\\n                    uint8 workerId = _options.toUint8(cursor);\\n                    if (lastWorkerId == 0) {\\n                        lastWorkerId = workerId;\\n                    }\\n\\n                    // workerId must equal to the lastWorkerId for the first option\\n                    // so it is always skipped in the first option\\n                    // this operation slices out options whenever the the scan finds a different workerId\\n                    if (workerId != lastWorkerId) {\\n                        bytes memory op = _options.slice(start, cursor - start); // slice out the last worker's options\\n                        (executorOptions, verifierOptions) = _insertWorkerOptions(\\n                            executorOptions,\\n                            verifierOptions,\\n                            lastWorkerId,\\n                            op\\n                        );\\n\\n                        // reset the start cursor and lastWorkerId\\n                        start = cursor;\\n                        lastWorkerId = workerId;\\n                    }\\n\\n                    ++cursor; // for workerId\\n\\n                    uint16 size = _options.toUint16(cursor);\\n                    require(size > 0, Errors.INVALID_SIZE);\\n                    cursor += size + 2;\\n\\n                    // if we have reached the end of the options, we need to process the last worker's options\\n                    if (cursor == _options.length) {\\n                        bytes memory op = _options.slice(start, cursor - start);\\n                        (executorOptions, verifierOptions) = _insertWorkerOptions(\\n                            executorOptions,\\n                            verifierOptions,\\n                            workerId,\\n                            op\\n                        );\\n                    }\\n                }\\n                // the options length must be the same as the cursor at the end\\n                require(cursor == _options.length, Errors.INVALID_SIZE);\\n            }\\n        } else {\\n            executorOptions = decodeLegacyOptions(optionsType, _options);\\n        }\\n    }\\n\\n    function _insertWorkerOptions(\\n        bytes memory _executorOptions,\\n        bytes memory _verifierOptions,\\n        uint8 _workerId,\\n        bytes memory _newOptions\\n    ) private pure returns (bytes memory, bytes memory) {\\n        if (_workerId == ExecutorOptions.WORKER_ID) {\\n            _executorOptions = _executorOptions.length == 0\\n                ? _newOptions\\n                : abi.encodePacked(_executorOptions, _newOptions);\\n        } else if (_workerId == VerifierOptions.WORKER_ID) {\\n            _verifierOptions = _verifierOptions.length == 0\\n                ? _newOptions\\n                : abi.encodePacked(_verifierOptions, _newOptions);\\n        } else {\\n            revert(Errors.INVALID_WORKER_ID);\\n        }\\n        return (_executorOptions, _verifierOptions);\\n    }\\n\\n    /// @dev decode the legacy options (type 1 or 2) into executorOptions\\n    /// @param _optionType the legacy option type\\n    /// @param _options the legacy options, which still has the option type in the first 2 bytes\\n    /// @return executorOptions the executor options, share the same format of type 3 options\\n    /// Data format:\\n    /// legacy type 1: [extraGas]\\n    /// legacy type 2: [extraGas][dstNativeAmt][dstNativeAddress]\\n    /// extraGas: uint256, dstNativeAmt: uint256, dstNativeAddress: bytes\\n    function decodeLegacyOptions(\\n        uint16 _optionType,\\n        bytes memory _options\\n    ) internal pure returns (bytes memory executorOptions) {\\n        if (_optionType == TYPE_1) {\\n            require(_options.length == 34, Errors.INVALID_SIZE);\\n\\n            // execution gas\\n            uint128 executionGas = _options.toUint256(2).toUint128();\\n\\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\\n            // the result is a lzReceive option: [executor_id][option_size][option_type][execution_gas]\\n            // option_type: uint8, executionGas: uint128\\n            // option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\\n            executorOptions = abi.encodePacked(\\n                ExecutorOptions.WORKER_ID,\\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\\n                executionGas\\n            );\\n        } else if (_optionType == TYPE_2) {\\n            // receiver size <= 32\\n            require(_options.length > 66 && _options.length <= 98, Errors.INVALID_SIZE);\\n\\n            // execution gas\\n            uint128 executionGas = _options.toUint256(2).toUint128();\\n\\n            // airdrop (amount + receiver)\\n            uint128 amount = _options.toUint256(34).toUint128(); // offset 2 + 32\\n            bytes32 receiver;\\n            unchecked {\\n                uint receiverLen = _options.length - 66; // offset 2 + 32 + 32\\n                receiver = bytes32(_options.slice(66, receiverLen));\\n                receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\\n            }\\n\\n            // dont use the encode function in the ExecutorOptions lib for saving gas by calling abi.encodePacked once\\n            // the result has one lzReceive option and one airdrop option:\\n            //      [executor_id][lzReceive_option_size][option_type][execution_gas] +\\n            //      [executor_id][airdrop_option_size][option_type][airdrop_amount][receiver]\\n            // option_type: uint8, execution_gas: uint128, airdrop_amount: uint128, receiver: bytes32\\n            // lzReceive_option_size = len(option_type) + len(execution_gas) = 1 + 16 = 17\\n            // airdrop_option_size = len(option_type) + len(airdrop_amount) + len(receiver) = 1 + 16 + 32 = 49\\n            executorOptions = abi.encodePacked(\\n                ExecutorOptions.WORKER_ID,\\n                uint16(17), // 16 + 1, 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_LZRECEIVE,\\n                executionGas,\\n                ExecutorOptions.WORKER_ID,\\n                uint16(49), // 48 + 1, 32 + 16 for option_length, + 1 for option_type\\n                ExecutorOptions.OPTION_TYPE_AIRDROP,\\n                amount,\\n                receiver\\n            );\\n        } else {\\n            revert(Errors.NOT_IMPLEMENTED);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ec2a3ccc350fcd6265b3fe9607ff62b9eab51e0e0f276b02e4045b554ea916c\",\"license\":\"BUSL-1.1\"},\"contracts/uln/libs/VerifierOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary VerifierOptions {\\n    using BitMaps for BitMaps.BitMap256;\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    /// @dev group verifier options by its idx\\n    /// @param _options [verifier_id][verifier_option][verifier_id][verifier_option]...\\n    ///        verifier_option = [option_size][verifier_idx][option_type][option]\\n    ///        option_size = len(verifier_idx) + len(option_type) + len(option)\\n    ///        verifier_id: uint8, verifier_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return verifierOptions the grouped options, still share the same format of _options\\n    /// @return verifierIndices the verifier indices\\n    function groupVerifierOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory verifierOptions, uint8[] memory verifierIndices) {\\n        if (_options.length == 0) return (verifierOptions, verifierIndices);\\n\\n        uint8 numVerifiers = getNumVerifiers(_options);\\n\\n        // if there is only 1 verifier, we can just return the whole options\\n        if (numVerifiers == 1) {\\n            verifierOptions = new bytes[](1);\\n            verifierOptions[0] = _options;\\n\\n            verifierIndices = new uint8[](1);\\n            verifierIndices[0] = _options.toUint8(3); // verifier idx\\n            return (verifierOptions, verifierIndices);\\n        }\\n\\n        // otherwise, we need to group the options by verifier_idx\\n        verifierIndices = new uint8[](numVerifiers);\\n        verifierOptions = new bytes[](numVerifiers);\\n        unchecked {\\n            uint cursor;\\n            uint start;\\n            uint8 lastVerifierIdx = 255; // 255 is an invalid verifier_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                require(optionLength >= 2, Errors.INVALID_SIZE); // at least 1 byte for option_type and 1 byte for verifier_idx\\n\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                if (lastVerifierIdx == 255) {\\n                    lastVerifierIdx = verifierIdx;\\n                }\\n\\n                // verifierIdx must equal to the lastVerifierIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the the scan finds a different lastVerifierIdx\\n                if (verifierIdx != lastVerifierIdx) {\\n                    uint size = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory op = _options.slice(start, size);\\n                    _insertVerifierOptions(verifierOptions, verifierIndices, lastVerifierIdx, op);\\n\\n                    // reset the start and lastVerifierIdx\\n                    start += size;\\n                    lastVerifierIdx = verifierIdx;\\n                }\\n\\n                cursor += optionLength;\\n\\n                // if we have reached the end of the options, we need to process the last verifier\\n                if (cursor == _options.length) {\\n                    uint size = cursor - start;\\n                    bytes memory op = _options.slice(start, size);\\n                    _insertVerifierOptions(verifierOptions, verifierIndices, verifierIdx, op);\\n                }\\n            }\\n            require(cursor == _options.length, Errors.INVALID_SIZE);\\n\\n            // revert verifierIndices to start from 0\\n            for (uint8 i = 0; i < numVerifiers; ++i) {\\n                --verifierIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertVerifierOptions(\\n        bytes[] memory _verifierOptions,\\n        uint8[] memory _verifierIndices,\\n        uint8 _verifierIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // verifierIdx starts from 0 but default value of verifierIndices is 0, so we tell if the slot is empty by adding 1 to verifierIdx\\n        require(_verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n        uint8 verifierIdxAdj = _verifierIdx + 1;\\n\\n        for (uint8 j = 0; j < _verifierIndices.length; ++j) {\\n            uint8 index = _verifierIndices[j];\\n            if (verifierIdxAdj == index) {\\n                _verifierOptions[j] = abi.encodePacked(_verifierOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this verifier\\n                _verifierIndices[j] = verifierIdxAdj;\\n                _verifierOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique verifiers\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    function getNumVerifiers(bytes memory _options) internal pure returns (uint8 numVerifiers) {\\n        uint cursor;\\n        BitMaps.BitMap256 bitmap;\\n\\n        // find number of unique verifier_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                require(optionLength >= 2, Errors.INVALID_SIZE); // at least 1 byte for verifier_idx and 1 byte for option_type\\n\\n                uint8 verifierIdx = _options.toUint8(cursor);\\n\\n                // verifierIdx starts from 0, add one for bitmap check/set\\n                require(verifierIdx < 255, Errors.INVALID_VERIFIERS);\\n                uint8 verifierIdxAdj = verifierIdx + 1;\\n\\n                // if verifierIdx is not set, increment numVerifiers\\n                if (!bitmap.get(verifierIdxAdj)) {\\n                    ++numVerifiers;\\n                    bitmap = bitmap.set(verifierIdxAdj);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        require(cursor == _options.length, Errors.INVALID_SIZE);\\n    }\\n\\n    /// @dev decode the next verifier option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupVerifierOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextVerifierOption(\\n        bytes calldata _options,\\n        uint _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip verifier_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint startCursor = cursor + 2; // skip option type and verifier_idx\\n            uint endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x64ce5ceb89a26cdcddd34f2d90838cc41de88beb510c810247648de085492b31\",\"license\":\"BUSL-1.1\"},\"contracts/uln/uln302/UltraLightNode302.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport \\\"../interfaces/IUltraLightNode.sol\\\";\\nimport {UlnConfigStruct} from \\\"../interfaces/IUlnConfig.sol\\\";\\nimport {OutboundConfigStruct} from \\\"../../OutboundConfig.sol\\\";\\n\\nimport \\\"../../MessageLibBaseE2.sol\\\";\\nimport \\\"../UlnBase.sol\\\";\\n\\ncontract UltraLightNode302 is IUltraLightNode, UlnBase, MessageLibBaseE2 {\\n    using PacketV1Codec for bytes;\\n\\n    constructor(\\n        address _endpoint,\\n        uint _treasuryGasCap,\\n        address _ulnConfig\\n    ) MessageLibBaseE2(_endpoint, 1, _treasuryGasCap) UlnBase(_ulnConfig) {}\\n\\n    // ============================ OnlyEndpoint ===================================\\n\\n    function setConfig(address _oapp, uint32 _eid, SetConfigParam[] calldata _params) external override onlyEndpoint {\\n        for (uint i = 0; i < _params.length; i++) {\\n            SetConfigParam calldata param = _params[i];\\n            ulnConfig.setConfigByType(_eid, _oapp, param.configType, param.config);\\n        }\\n    }\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external override onlyEndpoint {\\n        ulnConfig.snapshotConfig(_eids, _oapp);\\n    }\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external override onlyEndpoint {\\n        ulnConfig.resetConfig(_eids, _oapp);\\n    }\\n\\n    // ============================ External ===================================\\n\\n    /// @dev dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable.\\n    function deliver(bytes calldata _packetHeader, bytes32 _payloadHash) external {\\n        UlnConfigStruct memory config = ulnConfig.getUlnConfig(_packetHeader.receiverB20(), _packetHeader.srcEid());\\n        require(\\n            _deliverable(config, _packetHeader, _payloadHash) == DeliveryState.Deliverable,\\n            Errors.INVALID_ARGUMENT\\n        );\\n\\n        Origin memory origin = Origin(_packetHeader.srcEid(), _packetHeader.sender(), _packetHeader.nonce());\\n        ILayerZeroEndpointV2(endpoint).deliver(origin, _packetHeader.receiverB20(), _payloadHash);\\n    }\\n\\n    // ============================ View ===================================\\n\\n    function getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view override returns (bytes memory, bool) {\\n        return ulnConfig.getConfigByType(_eid, _oapp, _configType);\\n    }\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view override returns (bytes memory) {\\n        return ulnConfig.getDefaultConfigByType(_eid, _configType);\\n    }\\n\\n    function isSupportedEid(uint32 _eid) external view override returns (bool) {\\n        return ulnConfig.isSupportedEid(_eid);\\n    }\\n\\n    function version() external pure override returns (uint64 major, uint8 minor, uint8 endpointVersion) {\\n        return (3, 0, 2);\\n    }\\n\\n    /// @dev a deliverable message requires it to be endpoint deliverable and ULN deliverable\\n    function deliverable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (DeliveryState) {\\n        address receiver = _packetHeader.receiverB20();\\n        uint32 srcEid = _packetHeader.srcEid();\\n\\n        DeliveryState endpointStatus = _endpointDeliverable(srcEid, receiver, _packetHeader);\\n        if (endpointStatus != DeliveryState.Deliverable) {\\n            return endpointStatus;\\n        }\\n\\n        // check verifier deliverable\\n        UlnConfigStruct memory config = ulnConfig.getUlnConfig(receiver, srcEid);\\n        return _deliverable(config, _packetHeader, _payloadHash);\\n    }\\n\\n    // ============================ Internal ===================================\\n\\n    function _quoteWorkers(\\n        address _sender,\\n        uint32 _dstEid,\\n        WorkerOptions[] memory _options\\n    ) internal view override returns (uint, address, uint) {\\n        return _quoteUlnWorkers(_sender, _dstEid, _options);\\n    }\\n\\n    function _send(\\n        Packet calldata _packet,\\n        WorkerOptions[] memory _options\\n    ) internal override returns (uint, address, uint) {\\n        return _ulnSend(fees, _options, _packet.sender, _packet.dstEid);\\n    }\\n\\n    function _deliverable(\\n        UlnConfigStruct memory _config,\\n        bytes calldata _packetHeader,\\n        bytes32 _payloadHash\\n    ) internal view returns (DeliveryState) {\\n        // assert packet header is of right size 81\\n        require(_packetHeader.length == 81, Errors.INVALID_SIZE);\\n        // assert packet header version is the same as ULN\\n        require(_packetHeader.version() == packetVersion, Errors.INVALID_VERSION);\\n        // assert the packet is for this endpoint\\n        require(_packetHeader.dstEid() == localEid, Errors.INVALID_EID);\\n\\n        bool signed = verifyConditionMet(_config, keccak256(_packetHeader), _payloadHash);\\n        if (signed) {\\n            return DeliveryState.Deliverable;\\n        } else {\\n            return DeliveryState.Signing;\\n        }\\n    }\\n\\n    function verify(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external {\\n        _verify(_packetHeader, _payloadHash, _confirmations);\\n    }\\n\\n    function _getExecutorOptions(\\n        bytes memory _options\\n    ) internal pure override returns (bytes memory, WorkerOptions[] memory) {\\n        return _getExecutorOptionsInternal(_options);\\n    }\\n}\\n\",\"keccak256\":\"0xc98120d5cf715456ecba1d12c3d906680d86a6cd1fed61a240c4fa6397867044\",\"license\":\"BUSL-1.1\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101a55760003560e01c80637c0cf763116100e1578063d2d287f01161008a578063f0f4426011610064578063f0f4426014610593578063f2fde38b146105b3578063faaebd21146105d3578063fd9be5221461060e57600080fd5b8063d2d287f014610533578063df1e309f14610553578063e9817f341461057357600080fd5b8063a5972ec5116100bb578063a5972ec51461048b578063b8007ff6146104ab578063c7734173146104cb57600080fd5b80637c0cf763146104055780638da5cb5b146104325780639c33abf71461045d57600080fd5b80634389e58f1161014e57806361d027b31161012857806361d027b3146103515780636750cd4c146103a3578063690c6555146103c3578063715018a6146103f057600080fd5b80634389e58f146102d557806354fd4d50146103045780635ed31c591461033157600080fd5b80631c63e3b61161017f5780631c63e3b614610235578063200175f7146102555780633c782a521461027557600080fd5b806301ffc9a7146101b15780630223536e146101e657806307d7b2f91461020857600080fd5b366101ac57005b600080fd5b3480156101bd57600080fd5b506101d16101cc36600461428b565b61062e565b60405190151581526020015b60405180910390f35b3480156101f257600080fd5b5061020661020136600461433c565b6106c7565b005b34801561021457600080fd5b506102286102233660046143b4565b6106d9565b6040516101dd9190614437565b34801561024157600080fd5b506102066102503660046144b5565b610746565b34801561026157600080fd5b5061020661027036600461450c565b610887565b34801561028157600080fd5b506102bc61029036600461454d565b6000602081815293815260408082208552928152828120909352825290205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101dd565b3480156102e157600080fd5b506102f56102f036600461457b565b610aa7565b6040516101dd93929190614644565b34801561031057600080fd5b506040805160038152600060208201526002918101919091526060016101dd565b34801561033d57600080fd5b5061020661034c3660046146ab565b610bfc565b34801561035d57600080fd5b5060025461037e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101dd565b3480156103af57600080fd5b506101d16103be366004614709565b610ea5565b3480156103cf57600080fd5b506103e36103de366004614726565b610f5c565b6040516101dd919061475f565b3480156103fc57600080fd5b50610206611026565b34801561041157600080fd5b506104256104203660046146ab565b61103a565b6040516101dd91906147a1565b34801561043e57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff1661037e565b34801561046957600080fd5b5061047d6104783660046147e2565b611169565b6040516101dd929190614822565b34801561049757600080fd5b506101d16104a6366004614982565b611244565b3480156104b757600080fd5b506102066104c6366004614a8b565b6113c6565b3480156104d757600080fd5b506101d16104e6366004614ae4565b60009283526020838152604080852093855292815282842073ffffffffffffffffffffffffffffffffffffffff9590951684529390935290205467ffffffffffffffff9182169116101590565b34801561053f57600080fd5b5061020661054e3660046144b5565b611548565b34801561055f57600080fd5b5061020661056e366004614b23565b611649565b34801561057f57600080fd5b506103e361058e366004614709565b611671565b34801561059f57600080fd5b506102066105ae366004614b78565b61170b565b3480156105bf57600080fd5b506102066105ce366004614b78565b61175a565b3480156105df57600080fd5b506106006105ee366004614b78565b60046020526000908152604090205481565b6040519081526020016101dd565b34801561061a57600080fd5b50610206610629366004614b95565b6117f7565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fd913d0cd0000000000000000000000000000000000000000000000000000000014806106c157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6106d384848484611940565b50505050565b60408051808201909152600080825260208201526000806107276107006020890189614b78565b61071060408a0160208b01614709565b61071d60408b018b614bc1565b90508989896119f0565b604080518082019091529182526020820152925050505b949350505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146107d95760405162461bcd60e51b81526004016107d0919061475f565b60405180910390fd5b506040517f1c63e3b600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631c63e3b69061085090869086908690600401614c26565b600060405180830381600087803b15801561086a57600080fd5b505af115801561087e573d6000803e3d6000fd5b50505050505050565b60025460408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1633146108f45760405162461bcd60e51b81526004016107d0919061475f565b508273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f936112b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190614c90565b73ffffffffffffffffffffffffffffffffffffffff16141580156109d4575073ffffffffffffffffffffffffffffffffffffffff821615155b6040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610a285760405162461bcd60e51b81526004016107d0919061475f565b50610a4a73ffffffffffffffffffffffffffffffffffffffff84168383611aee565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527fe081464b7278501267de69fa85b7b9560b0ae05d5fbfaab9b1986c70356e2efe9060600160405180910390a1505050565b610aaf614243565b60408051808201909152600781527f4c5a353030303000000000000000000000000000000000000000000000000000602082015260609081907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610b3e5760405162461bcd60e51b81526004016107d0919061475f565b506000806000610b4f8a8a8a611b80565b925092509250600080610b85610b6b60608e0160408f01614b78565b8d6060016020810190610b7e9190614709565b858c611c5e565b9092509050610b948284614cdc565b9250600060405180606001604052808e60a0013581526020018e6000016020810190610bc09190614cef565b67ffffffffffffffff1681526040805180820190915295865260208087019490945292909201939093529b929a50929850909650505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343ea4fa9610c448686611cbe565b610c4e8787611cd0565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015263ffffffff166024820152604401600060405180830381865afa158015610cc2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cea9190810190614e67565b90506001610cfa82868686611cf3565b6003811115610d0b57610d0b614772565b146040518060400160405280600781526020017f4c5a31303030300000000000000000000000000000000000000000000000000081525090610d605760405162461bcd60e51b81526004016107d0919061475f565b5060006040518060600160405280610d788787611cd0565b63ffffffff168152602001610d8d8787611ea0565b8152602001610d9c8787611eb9565b67ffffffffffffffff169052905073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166345c6dcc482610df18888611cbe565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b168152835163ffffffff1660048201526020840151602482015292015167ffffffffffffffff16604483015273ffffffffffffffffffffffffffffffffffffffff1660648201526084810186905260a401600060405180830381600087803b158015610e8657600080fd5b505af1158015610e9a573d6000803e3d6000fd5b505050505050505050565b6040517f6750cd4c00000000000000000000000000000000000000000000000000000000815263ffffffff821660048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636750cd4c90602401602060405180830381865afa158015610f38573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c19190614e9c565b6040517f560042df00000000000000000000000000000000000000000000000000000000815263ffffffff8084166004830152821660248201526060907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063560042df90604401600060405180830381865afa158015610ff7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261101f9190810190614f1d565b9392505050565b61102e611edc565b6110386000611f43565b565b6000806110478585611cbe565b905060006110558686611cd0565b9050600061106582848989611fba565b9050600181600381111561107b5761107b614772565b1461108a57925061101f915050565b6040517f43ea4fa900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff841660248301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906343ea4fa990604401600060405180830381865afa158015611127573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261114f9190810190614e67565b905061115d81898989611cf3565b98975050505050505050565b6040517f8fd061fc00000000000000000000000000000000000000000000000000000000815263ffffffff808516600483015273ffffffffffffffffffffffffffffffffffffffff848116602484015290831660448301526060916000917f00000000000000000000000000000000000000000000000000000000000000001690638fd061fc90606401600060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112389190810190614f52565b91509150935093915050565b8251600090815b856060015160ff168110156112df576112c88660c00151828151811061127357611273614f99565b60209081029190910181015160008881528083526040808220898352845280822073ffffffffffffffffffffffffffffffffffffffff90931682529190925290205467ffffffffffffffff8085169116101590565b6112d75760009250505061101f565b60010161124b565b506000856060015160ff161180156112fc5750608085015160ff16155b1561130b57600191505061101f565b6000805b866080015160ff168110156113b95761138c8760e00151828151811061133757611337614f99565b602090810291909101810151600089815280835260408082208a8352845280822073ffffffffffffffffffffffffffffffffffffffff90931682529190925290205467ffffffffffffffff8086169116101590565b156113b1578160010191508660a0015160ff1682106113b1576001935050505061101f565b60010161130f565b5060009695505050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146114505760405162461bcd60e51b81526004016107d0919061475f565b5060005b81811015611541573683838381811061146f5761146f614f99565b90506020028101906114819190614fc8565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d59104ed86886114ce6020860186614709565b6114db6020870187614bc1565b6040518663ffffffff1660e01b81526004016114fb959493929190615031565b600060405180830381600087803b15801561151557600080fd5b505af1158015611529573d6000803e3d6000fd5b5050505050808061153990615077565b915050611454565b5050505050565b60408051808201909152600781527f4c5a35303030300000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633146115d25760405162461bcd60e51b81526004016107d0919061475f565b506040517fd2d287f000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d2d287f09061085090869086908690600401614c26565b611651611edc565b63ffffffff831660009081526003602052604090206106d3828483615148565b6003602052600090815260409020805461168a906150af565b80601f01602080910402602001604051908101604052809291908181526020018280546116b6906150af565b80156117035780601f106116d857610100808354040283529160200191611703565b820191906000526020600020905b8154815290600101906020018083116116e657829003601f168201915b505050505081565b611713611edc565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b611762611edc565b73ffffffffffffffffffffffffffffffffffffffff81166117eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107d0565b6117f481611f43565b50565b61180182826121f3565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f936112b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561186e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118929190614c90565b905073ffffffffffffffffffffffffffffffffffffffff8116158015906118d9576118d473ffffffffffffffffffffffffffffffffffffffff83168585611aee565b6118e3565b6118e384846122a4565b6040805133815273ffffffffffffffffffffffffffffffffffffffff861660208201529081018490527fb41e4a699a31f6278037fa278d73d6618985e1568fb5cfa02c743e48c965a751906060015b60405180910390a150505050565b806000808686604051611954929190615244565b604080519182900390912082526020808301939093529081016000908120868252835281812033808352935281902080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff949094169390931790925590517fd57606ee258836ec1b40f83a128d2b514581eaf4f71801fbed3bc94b5358ecc091611932918790879086908890615254565b600080600080611a0189878761235c565b92509250506000806000611a168d8d86612467565b925092509250611a268b82612486565b8173ffffffffffffffffffffffffffffffffffffffff1663709eb6648d8f8e896040518563ffffffff1660e01b8152600401611a6594939291906152a2565b602060405180830381865afa158015611a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa691906152e3565b611ab09084614cdc565b9250600080611ac18f8f878f6124db565b90925090508115611ad957611ad68286614cdc565b94505b939e939d50929b505050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611b7b908490612617565b505050565b6060806000611baf7f00000000000000000000000000000000000000000000000000000000000000008761270c565b9150606080611bcd611bc660808a018a8401614709565b888861235c565b9196509250905060008080611be28b856127ae565b91945092509050611bf38387614cdc565b95506000611c0460c08d018d614bc1565b90509050611c128183612486565b611c43838d6060016020810190611c299190614709565b8e6040016020810190611c3c9190614b78565b848a6127ea565b611c4d9088614cdc565b965050505050505093509350939050565b600080611c6d868686866124db565b90925090508115611cb55760025473ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604081208054849290611caf908490614cdc565b90915550505b94509492505050565b600061101f611ccd8484612923565b90565b6000611ce0600d600984866152fc565b611ce991615326565b60e01c9392505050565b60408051808201909152600781527f4c5a313030303900000000000000000000000000000000000000000000000000602082015260009060518414611d4b5760405162461bcd60e51b81526004016107d0919061475f565b507f000000000000000000000000000000000000000000000000000000000000000060ff16611d7a8585612933565b60ff16146040518060400160405280600781526020017f4c5a31303030370000000000000000000000000000000000000000000000000081525090611dd25760405162461bcd60e51b81526004016107d0919061475f565b507f000000000000000000000000000000000000000000000000000000000000000063ffffffff16611e048585612955565b63ffffffff16146040518060400160405280600781526020017f4c5a31303030380000000000000000000000000000000000000000000000000081525090611e5f5760405162461bcd60e51b81526004016107d0919061475f565b506000611e84868686604051611e76929190615244565b604051809103902085611244565b90508015611e9657600191505061073e565b600091505061073e565b6000611eb0602d600d84866152fc565b61101f9161536e565b6000611ec96009600184866152fc565b611ed2916153aa565b60c01c9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d0565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060405180606001604052808763ffffffff168152602001611fde8686611ea0565b8152602001611fed8686611eb9565b67ffffffffffffffff908116909152604080517f418ba351000000000000000000000000000000000000000000000000000000008152835163ffffffff1660048201526020840151602482015290830151909116604482015230606482015273ffffffffffffffffffffffffffffffffffffffff87811660848301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063418ba3519060a401602060405180830381865afa1580156120b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120dc9190614e9c565b9050806120ee5760029250505061073e565b8151602083015160408085015190517fe361b59c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015263ffffffff9094166024820152604481019290925267ffffffffffffffff1660648201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e361b59c90608401602060405180830381865afa1580156121ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d19190614e9c565b905080156121e5576002935050505061073e565b506001979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216158015906122275750336000908152600460205260409020548111155b6040518060400160405280600781526020017f4c5a3130303030000000000000000000000000000000000000000000000000008152509061227b5760405162461bcd60e51b81526004016107d0919061475f565b50336000908152600460205260408120805483929061229b9084906153f0565b90915550505050565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146122fe576040519150601f19603f3d011682016040523d82523d6000602084013e612303565b606091505b50509050806040518060400160405280600781526020017f4c5a333030303000000000000000000000000000000000000000000000000000815250906106d35760405162461bcd60e51b81526004016107d0919061475f565b60608080600084900361240e5763ffffffff861660009081526003602052604090208054612389906150af565b80601f01602080910402602001604051908101604052809291908181526020018280546123b5906150af565b80156124025780601f106123d757610100808354040283529160200191612402565b820191906000526020600020905b8154815290600101906020018083116123e557829003601f168201915b50505050509250612448565b84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050505b82511561245e5761245883612965565b90925090505b93509350939050565b600080600061247786868661297a565b92509250925093509350939050565b60408051808201909152600781527f4c5a313030303900000000000000000000000000000000000000000000000000602082015281831115611b7b5760405162461bcd60e51b81526004016107d0919061475f565b600254600090819073ffffffffffffffffffffffffffffffffffffffff1615611cb5576002546040517fd424422100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015263ffffffff881660248301526044820187905285151560648301529091169063d424422190608401602060405180830381865afa9250505080156125a5575060408051601f3d908101601f191682019092526125a2918101906152e3565b60015b15611cb55783156125b85780915061260d565b60006125e47f00000000000000000000000000000000000000000000000000000000000000003a615403565b905060008187116125f557816125f7565b865b90508083116126065782612608565b805b945050505b5094509492505050565b6000612679826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612ad39092919063ffffffff16565b905080516000148061269a57508080602001905181019061269a9190614e9c565b611b7b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107d0565b60608261271c6020840184614cef565b61272c6040850160208601614709565b61275861273f6060870160408801614b78565b73ffffffffffffffffffffffffffffffffffffffff1690565b6127686080870160608801614709565b608087013560a088013561277f60c08a018a614bc1565b6040516020016127979998979695949392919061541a565b604051602081830303815290604052905092915050565b600080806127dd6004856127c86060890160408a01614b78565b6127d860808a0160608b01614709565b612ae2565b9250925092509250925092565b6040517f717e8a4200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff87169063717e8a42906128459088908890889088906004016152a2565b6020604051808303816000875af1158015612864573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288891906152e3565b905080156128cb5773ffffffffffffffffffffffffffffffffffffffff8616600090815260046020526040812080548392906128c5908490614cdc565b90915550505b6040805173ffffffffffffffffffffffffffffffffffffffff88168152602081018390527f61ed099e74a97a1d7f8bb0952a88ca8b7b8ebd00c126ea04671f92a81213318a910160405180910390a195945050505050565b6000611eb06051603184866152fc565b600061294260018284866152fc565b61294b916154d7565b60f81c9392505050565b6000611ce06031602d84866152fc565b60608061297183612c87565b91509150915091565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015263ffffffff8416602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612a1f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a47919081019061551d565b9150915080604001519350806000015163ffffffff16925060008651600014612a8e5786600081518110612a7d57612a7d614f99565b602002602001015160200151612a9f565b604051806020016040528060008152505b9050600080612aad83612d72565b91509150612ac3858b86602001518e86866130d2565b9750505050505093509350939050565b606061073e848460008561326f565b6040517f3563876b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015263ffffffff8316602483015260009182918291829182917f000000000000000000000000000000000000000000000000000000000000000090911690633563876b90604401600060405180830381865afa158015612b87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612baf919081019061551d565b9150915080604001519350806000015163ffffffff16925060008851600014612bf65788600081518110612be557612be5614f99565b602002602001015160200151612c07565b604051806020016040528060008152505b9050600080612c1583612d72565b915091506060612c2e8d878c88602001518f888861336e565b60c088015160e0890151604051939c509193507f4ec2ac8fdaa552cf8e85ded259f20fa01c58d98ceaf21c87f6db54dad6d4ec4992612c6f9290859061561e565b60405180910390a15050505050509450945094915050565b606080600080612c968561361d565b915091508051600003612cee57604080516000808252602082019092528391612ce2565b604080518082019091526000815260606020820152815260200190600190039081612cba5790505b50935093505050915091565b604080516001808252818301909252600091816020015b604080518082019091526000815260606020820152815260200190600190039081612d055790505090506040518060400160405280600260ff1681526020018381525081600081518110612d5b57612d5b614f99565b602090810291909101015291959194509092505050565b6060808251600003612d8357915091565b6000612d8e846137e2565b90508060ff16600103612e405760408051600180825281830190925290816020015b6060815260200190600190039081612db05790505092508383600081518110612ddb57612ddb614f99565b602090810291909101015260408051600180825281830190925290816020016020820280368337019050509150612e13846003613964565b82600081518110612e2657612e26614f99565b602002602001019060ff16908160ff168152505050915091565b8060ff1667ffffffffffffffff811115612e5c57612e5c614846565b604051908082528060200260200182016040528015612e85578160200160208202803683370190505b5091508060ff1667ffffffffffffffff811115612ea457612ea4614846565b604051908082528060200260200182016040528015612ed757816020015b6060815260200190600190039081612ec25790505b50925060008060ff5b865183101561300e576001909201916000612efb88856139ca565b905060028401935060028161ffff1610156040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090612f605760405162461bcd60e51b81526004016107d0919061475f565b506000612f6d8986613964565b90508260ff1660ff03612f7e578092505b8260ff168160ff1614612fd5577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd848603016000612fbd8b8784613a30565b9050612fcb8a8a8784613b58565b5093909301929150815b8161ffff168501945088518503613007578385036000612ff68b8784613a30565b90506130048a8a8584613b58565b50505b5050612ee0565b865183146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906130665760405162461bcd60e51b81526004016107d0919061475f565b5060005b8460ff168160ff1610156130c857858160ff168151811061308d5761308d614f99565b6020908102919091010180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff16905260010161306a565b5050505050915091565b600080876080015188606001516130e99190615687565b905060005b8160ff1681101561326357600060608a6060015160ff168310613137578a60e001518b6060015160ff1684038151811061312a5761312a614f99565b6020026020010151613156565b8a60c00151838151811061314d5761314d614f99565b60200260200101515b915060005b86518110156131b0578387828151811061317757613177614f99565b602002602001015160ff16036131a85787818151811061319957613199614f99565b602002602001015191506131b0565b60010161315b565b506040517f30bb3aac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906330bb3aac90613209908d908d908d9087906004016156a0565b602060405180830381865afa158015613226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324a91906152e3565b6132549086614cdc565b945082600101925050506130ee565b50509695505050505050565b6060824710156132e75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107d0565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161331091906156eb565b60006040518083038185875af1925050503d806000811461334d576040519150601f19603f3d011682016040523d82523d6000602084013e613352565b606091505b509150915061336387838387613cc4565b979650505050505050565b600060606000886080015189606001516133889190615687565b90508060ff1667ffffffffffffffff8111156133a6576133a6614846565b6040519080825280602002602001820160405280156133cf578160200160208202803683370190505b5091506000805b8260ff1681101561360e57600060608c6060015160ff16831061341f578c60e001518d6060015160ff1684038151811061341257613412614f99565b602002602001015161343e565b8c60c00151838151811061343557613435614f99565b60200260200101515b91506000885111801561346c575087848151811061345e5761345e614f99565b602002602001015160ff1683145b1561349357885160018501948a91811061348857613488614f99565b602002602001015190505b6040517fe4fbd90300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063e4fbd903906134eb908f908f908f9087906004016156a0565b6020604051808303816000875af115801561350a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352e91906152e3565b86848151811061354057613540614f99565b602002602001018181525050600086848151811061356057613560614f99565b602002602001015111156136045785838151811061358057613580614f99565b60200260200101518e60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546135d59190614cdc565b925050819055508583815181106135ee576135ee614f99565b6020026020010151876136019190614cdc565b96505b50506001016133d6565b50505097509795505050505050565b606080600061362c84826139ca565b905060027ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd61ffff8316016137ce578060005b865183101561376e5760006136748885613964565b90508160ff16600003613685578091505b8160ff168160ff16146136be5760006136a18985808803613a30565b90506136af88888584613d4a565b90985096508493509091508190505b60019093019260006136d089866139ca565b905060008161ffff16116040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061372e5760405162461bcd60e51b81526004016107d0919061475f565b508060020161ffff1685019450885185036137675760006137528a86808903613a30565b905061376089898584613d4a565b9099509750505b505061365f565b865183146040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906137c65760405162461bcd60e51b81526004016107d0919061475f565b5050506137db565b6137d88286613e64565b93505b5050915091565b60008060005b835182101561390457600190910190600061380385846139ca565b905060028301925060028161ffff1610156040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906138685760405162461bcd60e51b81526004016107d0919061475f565b5060006138758685613964565b905060ff8160ff16106040518060400160405280600781526020017f4c5a313030313100000000000000000000000000000000000000000000000000815250906138d25760405162461bcd60e51b81526004016107d0919061475f565b5060018181019060ff82161b84166138f45760019586019560ff82161b841793505b505061ffff1691909101906137e8565b835182146040518060400160405280600781526020017f4c5a3130303039000000000000000000000000000000000000000000000000008152509061395c5760405162461bcd60e51b81526004016107d0919061475f565b505050919050565b6000613971826001614cdc565b835110156139c15760405162461bcd60e51b815260206004820152601360248201527f746f55696e74385f6f75744f66426f756e64730000000000000000000000000060448201526064016107d0565b50016001015190565b60006139d7826002614cdc565b83511015613a275760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e647300000000000000000000000060448201526064016107d0565b50016002015190565b606081613a3e81601f614cdc565b1015613a8c5760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016107d0565b613a968284614cdc565b84511015613ae65760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016107d0565b606082158015613b055760405191506000825260208201604052613b4f565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613b3e578051835260209283019201613b26565b5050858452601f01601f1916604052505b50949350505050565b60408051808201909152600781527f4c5a313030313100000000000000000000000000000000000000000000000000602082015260ff83811610613baf5760405162461bcd60e51b81526004016107d0919061475f565b506000613bbd836001615687565b905060005b84518160ff161015613cbc576000858260ff1681518110613be557613be5614f99565b602002602001015190508060ff168360ff1603613c6057868260ff1681518110613c1157613c11614f99565b602002602001015184604051602001613c2b9291906156fd565b604051602081830303815290604052878360ff1681518110613c4f57613c4f614f99565b602002602001018190525050613cbc565b8060ff16600003613cab5782868360ff1681518110613c8157613c81614f99565b602002602001019060ff16908160ff168152505083878360ff1681518110613c4f57613c4f614f99565b50613cb58161572c565b9050613bc2565b505050505050565b60608315613d40578251600003613d395773ffffffffffffffffffffffffffffffffffffffff85163b613d395760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107d0565b508161073e565b61073e8383614127565b6060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff851601613dae57855115613da5578583604051602001613d919291906156fd565b604051602081830303815290604052613da7565b825b9550613e5a565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60ff851601613e0f57845115613e06578483604051602001613df29291906156fd565b604051602081830303815290604052613e08565b825b9450613e5a565b604080518082018252600781527f4c5a3130303133000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b81526107d0919060040161475f565b5093949293505050565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff841601613f9e5781516022146040518060400160405280600781526020017f4c5a31303030390000000000000000000000000000000000000000000000000081525090613eea5760405162461bcd60e51b81526004016107d0919061475f565b506000613f00613efb846002614151565b6141b7565b6040517f0100000000000000000000000000000000000000000000000000000000000000602082018190527e11000000000000000000000000000000000000000000000000000000000000602183015260238201527fffffffffffffffffffffffffffffffff00000000000000000000000000000000608083901b1660248201529091506034016040516020818303038152906040529150506106c1565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe61ffff8416016140dc5760428251118015613fdc57506062825111155b6040518060400160405280600781526020017f4c5a313030303900000000000000000000000000000000000000000000000000815250906140305760405162461bcd60e51b81526004016107d0919061475f565b506000614041613efb846002614151565b90506000614053613efb856022614151565b84519091506000907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe0161408986604283613a30565b6140929061574b565b60405160086020938403029190911c92506140c3916001916011918391889183916031916002918b918b910161578d565b60405160208183030381529060405293505050506106c1565b604080518082018252600781527f4c5a4330303030000000000000000000000000000000000000000000000000006020820152905162461bcd60e51b81526107d0919060040161475f565b8151156141375781518083602001fd5b8060405162461bcd60e51b81526004016107d0919061475f565b600061415e826020614cdc565b835110156141ae5760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e6473000000000000000000000060448201526064016107d0565b50016020015190565b60006fffffffffffffffffffffffffffffffff82111561423f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016107d0565b5090565b604051806060016040528060008019168152602001600067ffffffffffffffff168152602001614286604051806040016040528060008152602001600081525090565b905290565b60006020828403121561429d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461101f57600080fd5b60008083601f8401126142df57600080fd5b50813567ffffffffffffffff8111156142f757600080fd5b60208301915083602082850101111561430f57600080fd5b9250929050565b67ffffffffffffffff811681146117f457600080fd5b803561433781614316565b919050565b6000806000806060858703121561435257600080fd5b843567ffffffffffffffff81111561436957600080fd5b614375878288016142cd565b90955093505060208501359150604085013561439081614316565b939692955090935050565b80151581146117f457600080fd5b80356143378161439b565b600080600080606085870312156143ca57600080fd5b843567ffffffffffffffff808211156143e257600080fd5b90860190606082890312156143f657600080fd5b9094506020860135906144088261439b565b9093506040860135908082111561441e57600080fd5b5061442b878288016142cd565b95989497509550505050565b8151815260208083015190820152604081016106c1565b60008083601f84011261446057600080fd5b50813567ffffffffffffffff81111561447857600080fd5b6020830191508360208260051b850101111561430f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146117f457600080fd5b6000806000604084860312156144ca57600080fd5b833567ffffffffffffffff8111156144e157600080fd5b6144ed8682870161444e565b909450925050602084013561450181614493565b809150509250925092565b60008060006060848603121561452157600080fd5b833561452c81614493565b9250602084013561453c81614493565b929592945050506040919091013590565b60008060006060848603121561456257600080fd5b8335925060208401359150604084013561450181614493565b6000806000806060858703121561459157600080fd5b843567ffffffffffffffff808211156145a957600080fd5b9086019060e082890312156145bd57600080fd5b909450602086013590808211156145d357600080fd5b506145e0878288016142cd565b90945092505060408501356143908161439b565b60005b8381101561460f5781810151838201526020016145f7565b50506000910152565b600081518084526146308160208601602086016145f4565b601f01601f19169290920160200192915050565b8351815267ffffffffffffffff60208501511660208201526000604085015161467a604084018280518252602090810151910152565b5060c0608083015261468f60c0830185614618565b82810360a08401526146a18185614618565b9695505050505050565b6000806000604084860312156146c057600080fd5b833567ffffffffffffffff8111156146d757600080fd5b6146e3868287016142cd565b909790965060209590950135949350505050565b63ffffffff811681146117f457600080fd5b60006020828403121561471b57600080fd5b813561101f816146f7565b6000806040838503121561473957600080fd5b8235614744816146f7565b91506020830135614754816146f7565b809150509250929050565b60208152600061101f6020830184614618565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208101600483106147dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000806000606084860312156147f757600080fd5b8335614802816146f7565b9250602084013561481281614493565b91506040840135614501816146f7565b6040815260006148356040830185614618565b905082151560208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff8111828210171561489957614899614846565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156148c8576148c8614846565b604052919050565b60ff811681146117f457600080fd5b8035614337816148d0565b600067ffffffffffffffff82111561490457614904614846565b5060051b60200190565b600082601f83011261491f57600080fd5b8135602061493461492f836148ea565b61489f565b82815260059290921b8401810191818101908684111561495357600080fd5b8286015b8481101561497757803561496a81614493565b8352918301918301614957565b509695505050505050565b60008060006060848603121561499757600080fd5b833567ffffffffffffffff808211156149af57600080fd5b9085019061010082880312156149c457600080fd5b6149cc614875565b6149d58361432c565b81526149e3602084016143a9565b60208201526149f4604084016143a9565b6040820152614a05606084016148df565b6060820152614a16608084016148df565b6080820152614a2760a084016148df565b60a082015260c083013582811115614a3e57600080fd5b614a4a8982860161490e565b60c08301525060e083013582811115614a6257600080fd5b614a6e8982860161490e565b60e083015250976020870135975060409096013595945050505050565b60008060008060608587031215614aa157600080fd5b8435614aac81614493565b93506020850135614abc816146f7565b9250604085013567ffffffffffffffff811115614ad857600080fd5b61442b8782880161444e565b60008060008060808587031215614afa57600080fd5b8435614b0581614493565b93506020850135925060408501359150606085013561439081614316565b600080600060408486031215614b3857600080fd5b8335614b43816146f7565b9250602084013567ffffffffffffffff811115614b5f57600080fd5b614b6b868287016142cd565b9497909650939450505050565b600060208284031215614b8a57600080fd5b813561101f81614493565b60008060408385031215614ba857600080fd5b8235614bb381614493565b946020939093013593505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614bf657600080fd5b83018035915067ffffffffffffffff821115614c1157600080fd5b60200191503681900382131561430f57600080fd5b6040808252810183905260008460608301825b86811015614c66578235614c4c816146f7565b63ffffffff16825260209283019290910190600101614c39565b50809250505073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b600060208284031215614ca257600080fd5b815161101f81614493565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156106c1576106c1614cad565b600060208284031215614d0157600080fd5b813561101f81614316565b805161433781614316565b80516143378161439b565b8051614337816148d0565b600082601f830112614d3e57600080fd5b81516020614d4e61492f836148ea565b82815260059290921b84018101918181019086841115614d6d57600080fd5b8286015b84811015614977578051614d8481614493565b8352918301918301614d71565b60006101008284031215614da457600080fd5b614dac614875565b9050614db782614d0c565b8152614dc560208301614d17565b6020820152614dd660408301614d17565b6040820152614de760608301614d22565b6060820152614df860808301614d22565b6080820152614e0960a08301614d22565b60a082015260c082015167ffffffffffffffff80821115614e2957600080fd5b614e3585838601614d2d565b60c084015260e0840151915080821115614e4e57600080fd5b50614e5b84828501614d2d565b60e08301525092915050565b600060208284031215614e7957600080fd5b815167ffffffffffffffff811115614e9057600080fd5b61073e84828501614d91565b600060208284031215614eae57600080fd5b815161101f8161439b565b600082601f830112614eca57600080fd5b815167ffffffffffffffff811115614ee457614ee4614846565b614ef76020601f19601f8401160161489f565b818152846020838601011115614f0c57600080fd5b61073e8260208301602087016145f4565b600060208284031215614f2f57600080fd5b815167ffffffffffffffff811115614f4657600080fd5b61073e84828501614eb9565b60008060408385031215614f6557600080fd5b825167ffffffffffffffff811115614f7c57600080fd5b614f8885828601614eb9565b92505060208301516147548161439b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112614ffc57600080fd5b9190910192915050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b600063ffffffff808816835273ffffffffffffffffffffffffffffffffffffffff8716602084015280861660408401525060806060830152613363608083018486615006565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036150a8576150a8614cad565b5060010190565b600181811c908216806150c357607f821691505b6020821081036150fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115611b7b57600081815260208120601f850160051c810160208610156151295750805b601f850160051c820191505b81811015613cbc57828155600101615135565b67ffffffffffffffff83111561516057615160614846565b6151748361516e83546150af565b83615102565b6000601f8411600181146151c657600085156151905750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611541565b600083815260209020601f19861690835b828110156151f757868501358255602094850194600190920191016151d7565b5086821015615232577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b73ffffffffffffffffffffffffffffffffffffffff86168152608060208201526000615284608083018688615006565b67ffffffffffffffff94909416604083015250606001529392505050565b63ffffffff8516815273ffffffffffffffffffffffffffffffffffffffff841660208201528260408201526080606082015260006146a16080830184614618565b6000602082840312156152f557600080fd5b5051919050565b6000808585111561530c57600080fd5b8386111561531957600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156153665780818660040360031b1b83161692505b505092915050565b803560208310156106c1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156153665760089490940360031b84901b1690921692915050565b818103818111156106c1576106c1614cad565b80820281158282048414176106c1576106c1614cad565b7fff000000000000000000000000000000000000000000000000000000000000008a60f81b1681527fffffffffffffffff0000000000000000000000000000000000000000000000008960c01b16600182015260007fffffffff00000000000000000000000000000000000000000000000000000000808a60e01b16600984015288600d840152808860e01b16602d8401525085603183015284605183015282846071840137506000910160710190815298975050505050505050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156153665760019490940360031b84901b1690921692915050565b600080828403608081121561553157600080fd5b835167ffffffffffffffff8082111561554957600080fd5b61555587838801614d91565b94506060601f198401121561556957600080fd5b6040519250606083019150828210818311171561558857615588614846565b50604052602084015161559a816146f7565b815260408401516155aa81614316565b602082015260608401516155bd81614493565b6040820152919491935090915050565b600081518084526020808501945080840160005b8381101561561357815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016155e1565b509495945050505050565b60608152600061563160608301866155cd565b60208382038185015261564482876155cd565b8481036040860152855180825282870193509082019060005b818110156156795784518352938301939183019160010161565d565b509098975050505050505050565b60ff81811683821601908111156106c1576106c1614cad565b63ffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260006146a16080830184614618565b60008251614ffc8184602087016145f4565b6000835161570f8184602088016145f4565b8351908301906157238183602088016145f4565b01949350505050565b600060ff821660ff810361574257615742614cad565b60010192915050565b805160208083015191908110156150fc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b60007fff00000000000000000000000000000000000000000000000000000000000000808c60f81b1683527fffff000000000000000000000000000000000000000000000000000000000000808c60f01b166001850152818b60f81b1660038501527fffffffffffffffffffffffffffffffff000000000000000000000000000000008a60801b166004850152818960f81b166014850152808860f01b16601585015250808660f81b1660178401525061586e601883018560801b7fffffffffffffffffffffffffffffffff00000000000000000000000000000000169052565b5060288101919091526048019897505050505050505056fea2646970667358221220f718ee2704c32ab2f19d2bbbc1a167efed3f3f80338184604e4d43c69202ce7164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deliver(bytes,bytes32)": {
        "details": "dont need to check endpoint deliverable here to save gas, as it will reverts if not deliverable."
      },
      "deliverable(bytes,bytes32)": {
        "details": "a deliverable message requires it to be endpoint deliverable and ULN deliverable"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "verifyConditionMet((uint64,bool,bool,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)": {
        "details": "requires that the MUST-Verifiers have signed the payload and there is enough OPTIONAL-Verifiers signed"
      },
      "withdrawFee(address,uint256)": {
        "details": "E2 only"
      },
      "withdrawLzTokenFee(address,address,uint256)": {
        "details": "_lzToken is a user-supplied value because lzToken might change in the endpoint before all lzToken can be taken outE2 onlytreasury only function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13715,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "hashLookup",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))"
      },
      {
        "astId": 5168,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10253,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10257,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "defaultOptions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_bytes_storage)"
      },
      {
        "astId": 10261,
        "contract": "contracts/uln/uln302/UltraLightNode302.sol:UltraLightNode302",
        "label": "fees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint64)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(address => uint64)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))"
      },
      "t_mapping(t_uint32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}