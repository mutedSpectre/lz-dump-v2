{
  "address": "0x712516e61C8B383dF4A63CFe83d7701Bce54B03e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "InvalidEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InvalidMessageSize",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "oracles",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "fees",
          "type": "uint256[]"
        }
      ],
      "name": "OracleFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "confirmations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proofHash",
          "type": "bytes32"
        }
      ],
      "name": "PayloadSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "RelayerFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "inboundBlockConfirm",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "oracles",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "optionalOracles",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "optionalOraclesThreshold",
          "type": "uint16"
        }
      ],
      "name": "SetDefaultConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oapp",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "configType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newConfig",
          "type": "bytes"
        }
      ],
      "name": "UlnConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "entered",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WorkerEntered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_INBOUND_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_MAX_MESSAGE_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_OPTIONAL_ORACLES",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_ORACLES",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_OUTBOUND_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONFIG_TYPE_RELAYER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "defaultOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "defaultOutboundConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "maxMessageSize",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "outboundConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "defaultUlnConfig",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "inboundConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "useCustomOracles",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "useCustomOptionalOracles",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "oraclesCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "optionalOraclesCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "optionalOraclesThreshold",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "deliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "deliverable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        }
      ],
      "name": "getDefaultConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        }
      ],
      "name": "getOutboundConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "maxMessageSize",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "outboundConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            }
          ],
          "internalType": "struct MessageLibBase.OutboundConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_remoteEid",
          "type": "uint32"
        }
      ],
      "name": "getUlnConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "inboundConfirmations",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "useCustomOracles",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "useCustomOptionalOracles",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "oraclesCount",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "optionalOraclesCount",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "optionalOraclesThreshold",
              "type": "uint16"
            },
            {
              "internalType": "address[]",
              "name": "oracles",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "optionalOracles",
              "type": "address[]"
            }
          ],
          "internalType": "struct UlnConfig.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hashLookup",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enter",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "notice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_packetHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_confirmations",
          "type": "uint64"
        }
      ],
      "name": "oracleSign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "outboundConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "maxMessageSize",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "outboundConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "packetVersion",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPacket.PacketForQuote",
          "name": "_packet",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILayerZeroEndpoint.MessagingFee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_totalFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lzTokenFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        }
      ],
      "name": "resetConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "receiver",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "internalType": "struct IPacket.Packet",
          "name": "_packet",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "send",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ILayerZeroEndpoint.MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct ILayerZeroEndpoint.MessagingReceipt",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_configType",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_inboundConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_optionalOracles",
          "type": "address[]"
        },
        {
          "internalType": "uint16",
          "name": "_optionalOraclesThreshold",
          "type": "uint16"
        }
      ],
      "name": "setDefaultConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "setDefaultOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_maxMessageSize",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "_outboundConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "setDefaultOutboundConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_eids",
          "type": "uint32[]"
        },
        {
          "internalType": "address",
          "name": "_oapp",
          "type": "address"
        }
      ],
      "name": "snapshotConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryGasCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "ulnConfig",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "inboundConfirmations",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "useCustomOracles",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "useCustomOptionalOracles",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "oraclesCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "optionalOraclesCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "optionalOraclesThreshold",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "major",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "minor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "endpointVersion",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLzTokenFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf32b3a96212ce6ae155c6ed6e672ddc238b8cf9be18923263dc0ebbb874979a2",
  "receipt": {
    "to": null,
    "from": "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "contractAddress": "0x712516e61C8B383dF4A63CFe83d7701Bce54B03e",
    "transactionIndex": 0,
    "gasUsed": "5116797",
    "logsBloom": "0x000000000000000000020040000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000008000a0000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000001000000000000000000000000000000",
    "blockHash": "0xc8e9bab9ddc24d72b1f2a67ee9d7e81fb904f724cd308c35fdc5df7c4b1c034f",
    "transactionHash": "0xf32b3a96212ce6ae155c6ed6e672ddc238b8cf9be18923263dc0ebbb874979a2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 77,
        "transactionHash": "0xf32b3a96212ce6ae155c6ed6e672ddc238b8cf9be18923263dc0ebbb874979a2",
        "address": "0x712516e61C8B383dF4A63CFe83d7701Bce54B03e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc8e9bab9ddc24d72b1f2a67ee9d7e81fb904f724cd308c35fdc5df7c4b1c034f"
      }
    ],
    "blockNumber": 77,
    "cumulativeGasUsed": "5116797",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x71C95911E9a5D330f4D621842EC243EE1343292e",
    21000
  ],
  "numDeployments": 1,
  "solcInputHash": "a1699b89151ee3964af3797073a66e1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"InvalidEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InvalidMessageSize\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"OracleFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proofHash\",\"type\":\"bytes32\"}],\"name\":\"PayloadSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RelayerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"inboundBlockConfirm\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"optionalOracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"optionalOraclesThreshold\",\"type\":\"uint16\"}],\"name\":\"SetDefaultConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oapp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newConfig\",\"type\":\"bytes\"}],\"name\":\"UlnConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"entered\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WorkerEntered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_INBOUND_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_MAX_MESSAGE_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_OPTIONAL_ORACLES\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_ORACLES\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_OUTBOUND_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONFIG_TYPE_RELAYER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"defaultOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"defaultOutboundConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maxMessageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"outboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"defaultUlnConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"useCustomOracles\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useCustomOptionalOracles\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"oraclesCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"optionalOraclesCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"optionalOraclesThreshold\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"deliverable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"}],\"name\":\"getDefaultConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"}],\"name\":\"getOutboundConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxMessageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"outboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"internalType\":\"struct MessageLibBase.OutboundConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_remoteEid\",\"type\":\"uint32\"}],\"name\":\"getUlnConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"useCustomOracles\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useCustomOptionalOracles\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"oraclesCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"optionalOraclesCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"optionalOraclesThreshold\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"optionalOracles\",\"type\":\"address[]\"}],\"internalType\":\"struct UlnConfig.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hashLookup\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enter\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"notice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_packetHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_confirmations\",\"type\":\"uint64\"}],\"name\":\"oracleSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"outboundConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maxMessageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"outboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packetVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct IPacket.PacketForQuote\",\"name\":\"_packet\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ILayerZeroEndpoint.MessagingFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_totalFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"}],\"name\":\"resetConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"receiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct IPacket.Packet\",\"name\":\"_packet\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ILayerZeroEndpoint.MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct ILayerZeroEndpoint.MessagingReceipt\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_configType\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_optionalOracles\",\"type\":\"address[]\"},{\"internalType\":\"uint16\",\"name\":\"_optionalOraclesThreshold\",\"type\":\"uint16\"}],\"name\":\"setDefaultConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"setDefaultOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxMessageSize\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"_outboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"setDefaultOutboundConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_eids\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"_oapp\",\"type\":\"address\"}],\"name\":\"snapshotConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryGasCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"ulnConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"inboundConfirmations\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"useCustomOracles\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useCustomOptionalOracles\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"oraclesCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"optionalOraclesCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"optionalOraclesThreshold\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"minor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"endpointVersion\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLzTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"notice(bool,uint256)\":{\"notice\":\"---------------------- PUBLIC FUNCTIONS ----------------------\"},\"quote((address,uint32,bytes),bool,bytes)\":{\"notice\":\"---------------------- VIEW FUNCTIONS ----------------------\"},\"send((uint64,uint32,address,uint32,bytes32,bytes),bytes,bool)\":{\"notice\":\"---------------------- ONLY ENDPOINT ----------------------\"},\"setTreasury(address)\":{\"notice\":\"---------------------- ONLY OWNER ----------------------\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/uln/UltraLightNode302.sol\":\"UltraLightNode302\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMessageLibManager.sol\\\";\\nimport \\\"./IMessagingComposer.sol\\\";\\n\\ninterface ILayerZeroEndpoint is IMessageLibManager, IMessagingComposer {\\n    struct MessagingParams {\\n        uint32 dstEid;\\n        bytes32 receiver;\\n        bytes message;\\n        bytes options;\\n    }\\n\\n    struct MessagingReceipt {\\n        bytes32 guid;\\n        uint64 nonce;\\n        MessagingFee fee;\\n    }\\n\\n    struct MessagingFee {\\n        uint nativeFee;\\n        uint lzTokenFee;\\n    }\\n\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketDelivered(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address receiveLibrary\\n    );\\n\\n    event PacketReceived(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address caller\\n    );\\n\\n    event LzReceiveFailed(\\n        uint32 srcEid,\\n        bytes32 sender,\\n        address receiver,\\n        uint64 nonce,\\n        bytes32 payloadHash,\\n        address caller,\\n        bytes reason\\n    );\\n\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n\\n    event FeePaid(address sender, uint nativeOrAltTokenFee, uint lzTokenFee);\\n\\n    event LayerZeroTokenSet(address token);\\n\\n    function quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        bytes calldata _message,\\n        bool _payInZro,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        address payable _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function sendWithAlt(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        uint _altTokenFee\\n    ) external returns (MessagingReceipt memory);\\n\\n    function deliver(uint32 _srcEid, bytes32 _sender, address _receiver, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function lzReceive(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _callerParams,\\n        bool _tryCatch\\n    ) external payable;\\n\\n    function clear(\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes32 _guid,\\n        bytes calldata _message\\n    ) external returns (bytes32 payloadHash);\\n\\n    function skip(uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function eid() external view returns (uint32);\\n\\n    function setLayerZeroToken(address _layerZeroToken) external;\\n\\n    function layerZeroToken() external view returns (address);\\n\\n    function altFeeToken() external view returns (address);\\n\\n    function getInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function getOutboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function getInboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32, address);\\n\\n    function isReceivingMessage() external view returns (bool);\\n\\n    function getReceiveContext() external view returns (uint32, address);\\n}\\n\",\"keccak256\":\"0x97a6887bc26a0f2a842b2a65d85f6059c5eabad75ce06dae72b9e2c8266e599b\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./ILayerZeroEndpoint.sol\\\";\\nimport \\\"./IPacket.sol\\\";\\n\\ninterface IMessageLib is IERC165, IPacket {\\n    function send(\\n        Packet calldata _packet,\\n        bytes calldata _options,\\n        bool _payInLzToken\\n    ) external returns (ILayerZeroEndpoint.MessagingReceipt memory, bytes memory encodedPacket, bytes memory options);\\n\\n    function quote(\\n        PacketForQuote calldata _packet,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (ILayerZeroEndpoint.MessagingFee memory);\\n\\n    function setTreasury(address _treasury) external;\\n\\n    function treasury() external view returns (address);\\n\\n    function setConfig(uint32 _eid, address _oapp, uint32 _configType, bytes calldata _config) external;\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external;\\n\\n    function getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function withdrawFee(address _to, uint _amount) external;\\n\\n    function withdrawLzTokenFee(address _to, uint _amount) external;\\n\\n    // message libs of same major version are compatible\\n    function version() external view returns (uint64 major, uint8 minor, uint8 endpointVersion);\\n}\\n\",\"keccak256\":\"0xb7c491a347dc7e84af0f1023359109c1f02f048e3019e76dbdb229d77fd234d7\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address oldLib, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address oldLib, address newLib);\\n    event ReceiveLibraryTimoutSet(address receiver, uint32 eid, address oldLib, uint timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function defaultConfig(address _messageLib, uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibrary(uint32 _eid, address _newLib, uint _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(uint32 _eid, address _lib, uint _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function setConfig(address _messageLib, uint32 _eid, uint32 _configType, bytes calldata _config) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _messageLib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function snapshotConfig(address _messageLib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _messageLib, uint32[] calldata _eids) external;\\n}\\n\",\"keccak256\":\"0x349e667ea1885307c0323e84805372ce323bd7b0195aa0a2f9a6f0b41bee968f\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposedMessageDelivered(address receiver, address composer, bytes32 guid, bytes message);\\n    event ComposedMessageReceived(\\n        address receiver,\\n        address composer,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller\\n    );\\n    event LzComposeFailed(\\n        address sender,\\n        address receiver,\\n        bytes32 guid,\\n        bytes32 messageHash,\\n        address caller,\\n        bytes reason\\n    );\\n\\n    function deliverComposedMessage(address _composer, bytes32 _guid, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _receiver,\\n        address _composer,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _callerParams,\\n        bool _tryCatch\\n    ) external payable;\\n\\n    function isComposingMessage() external view returns (bool);\\n\\n    function getComposeContext() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5b0c911c9386259ceb30e62be24057a85d3e15c5568fa4fc9aab04c890d4c756\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IPacket.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPacket {\\n    struct PacketForQuote {\\n        address sender;\\n        uint32 dstEid;\\n        bytes message;\\n    }\\n\\n    struct Packet {\\n        uint64 nonce;\\n        uint32 srcEid;\\n        address sender;\\n        uint32 dstEid;\\n        bytes32 receiver;\\n        bytes message;\\n    }\\n}\\n\",\"keccak256\":\"0xb4b6970f4d5baecb84b9c12653a166cf7c682a133b48f0359a9b69ccb013118f\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/Options.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nlibrary Options {\\n    using BytesLib for bytes;\\n\\n    struct WorkerOptions {\\n        uint16 workerId;\\n        bytes options;\\n    }\\n\\n    struct Option {\\n        uint16 optionType;\\n        bytes params;\\n    }\\n\\n    uint16 public constant RELAYER_WORKER_ID = 1; // matches RelayerOptions WORKER_ID\\n\\n    uint16 public constant TYPE_1 = 1; // simple option type 1\\n    uint16 public constant TYPE_2 = 2; // simple option type 2\\n    uint16 public constant TYPE_3 = 3; // cannot overlap with simple option types\\n\\n    /// ======================= Decoding Functions =======================\\n    function decodeOptions(bytes memory _options) internal pure returns (WorkerOptions[] memory) {\\n        uint16 formatType = _options.toUint16(0);\\n        if (formatType == TYPE_1 || formatType == TYPE_2) {\\n            WorkerOptions[] memory options = _convert(formatType, _options);\\n            return options;\\n        }\\n\\n        // new format type 3\\n        // [type3][numWorkers][workerOps][workerOps]...\\n        // [workerOps] -> [workerId][size][options]\\n        if (formatType == 3) {\\n            uint16 numWorkers = _options.toUint16(2);\\n            WorkerOptions[] memory options = new WorkerOptions[](numWorkers);\\n\\n            // parse options for each worker\\n            uint cursor = 4;\\n            uint16 lastWorkerId;\\n            for (uint i = 0; i < uint(numWorkers); i++) {\\n                // must be ascending order\\n                uint16 workerId = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // no duplicated worker id, and the first worker id can be 0 because of enum type\\n                require(i == 0 || workerId > lastWorkerId, \\\"LZ10006\\\");\\n                lastWorkerId = workerId;\\n\\n                // option size\\n                uint16 size = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                options[i] = WorkerOptions(workerId, _options.slice(cursor, size));\\n                cursor += size;\\n            }\\n            require(cursor == _options.length, \\\"LZ10009\\\");\\n            return options;\\n        }\\n\\n        revert(\\\"LZC0000\\\");\\n    }\\n\\n    /// @dev decode worker options\\n    function decodeWorkerOptions(bytes memory _options) internal pure returns (Option[] memory) {\\n        uint cursor = 0;\\n        uint16 numOptions = _options.toUint16(cursor);\\n        cursor += 2;\\n\\n        Option[] memory options = new Option[](numOptions);\\n        uint16 lastOptionType;\\n        for (uint16 i = 0; i < numOptions; i++) {\\n            uint16 optionType = _options.toUint16(cursor);\\n            cursor += 2;\\n            // no duplicated option type\\n            require(optionType > lastOptionType, \\\"LZ10006\\\");\\n            lastOptionType = optionType;\\n\\n            uint16 paramSize = _options.toUint16(cursor);\\n            cursor += 2;\\n\\n            bytes memory param = _options.slice(cursor, paramSize);\\n            cursor += paramSize;\\n            options[i] = Option(optionType, param);\\n        }\\n        return options;\\n    }\\n\\n    // relayer only\\n    // legacy type 1\\n    // bytes  [32      ]\\n    // fields [extraGas]\\n    // legacy type 2\\n    // bytes  [32        32            bytes[]         ]\\n    // fields [extraGas  dstNativeAmt  dstNativeAddress]\\n    function _convert(\\n        uint _optionType,\\n        bytes memory _options\\n    ) private pure returns (WorkerOptions[] memory workerOptions) {\\n        workerOptions = new WorkerOptions[](1);\\n        bytes memory options;\\n\\n        if (_optionType == TYPE_1) {\\n            require(_options.length == 34, \\\"LZ10009\\\");\\n\\n            // execution gas\\n            uint executionGas = _options.toUint256(2);\\n\\n            options = abi.encodePacked(uint16(1)); // option num\\n            options = abi.encodePacked(options, TYPE_1, uint16(32), executionGas);\\n        } else if (_optionType == TYPE_2) {\\n            require(_options.length > 66 && _options.length <= 98, \\\"LZ10009\\\");\\n\\n            // execution gas\\n            uint executionGas = _options.toUint256(2);\\n\\n            // airdrop (amount + receiver)\\n            uint amount = _options.toUint256(34);\\n            uint receiverLen = _options.length - 66;\\n            bytes32 receiver = bytes32(_options.slice(66, receiverLen));\\n            receiver = receiver >> (8 * (32 - receiverLen)); // padding 0 to the left\\n            bytes memory airdrop = abi.encodePacked(amount, receiver);\\n\\n            options = abi.encodePacked(uint16(2)); // option num\\n            options = abi.encodePacked(options, TYPE_1, uint16(32), executionGas);\\n            options = abi.encodePacked(options, TYPE_2, uint16(airdrop.length), airdrop);\\n        } else {\\n            revert(\\\"LZC0000\\\");\\n        }\\n\\n        workerOptions[0] = WorkerOptions(RELAYER_WORKER_ID, options);\\n    }\\n\\n    /// ======================= Encoding Functions =======================\\n\\n    function encodeWorkerOptions(Option memory _option) internal pure returns (bytes memory) {\\n        Option[] memory options = new Option[](1);\\n        options[0] = _option;\\n        return encodeWorkerOptions(options);\\n    }\\n\\n    function encodeWorkerOptions(Option[] memory _options) internal pure returns (bytes memory) {\\n        require(_options.length > 0, \\\"LZ10009\\\");\\n        uint16 numOptions = _safeToUint16(_options.length);\\n        bytes memory options = abi.encodePacked(numOptions);\\n\\n        uint16 lastOptionType;\\n        for (uint i = 0; i < numOptions; i++) {\\n            // no duplicated option type\\n            uint16 optionType = _options[i].optionType;\\n            require(i == 0 || optionType > lastOptionType, \\\"LZ10006\\\");\\n            lastOptionType = optionType;\\n\\n            uint16 paramSize = _safeToUint16(_options[i].params.length);\\n            bytes memory option = abi.encodePacked(_options[i].optionType, paramSize, _options[i].params);\\n\\n            options = options.concat(option);\\n        }\\n\\n        return options;\\n    }\\n\\n    function encodeOptions(WorkerOptions[] memory _workerOptions) internal pure returns (bytes memory) {\\n        uint16 numWorkers = _safeToUint16(_workerOptions.length);\\n        bytes memory options = abi.encodePacked(TYPE_3, numWorkers);\\n\\n        uint16 lastWorkerId;\\n        for (uint i = 0; i < numWorkers; i++) {\\n            uint16 workerId = uint16(_workerOptions[i].workerId);\\n            // prevent duplicated worker id\\n            require(i == 0 || workerId > lastWorkerId, \\\"LZ10006\\\");\\n\\n            uint16 optionSize = _safeToUint16(_workerOptions[i].options.length);\\n            options = abi.encodePacked(options, workerId, optionSize, _workerOptions[i].options);\\n\\n            lastWorkerId = workerId;\\n        }\\n\\n        return options;\\n    }\\n\\n    function encodeSimpleOptionsType1(uint _executionGas) internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_1, _executionGas);\\n    }\\n\\n    function encodeSimpleOptionsType2(\\n        uint _executionGas,\\n        uint _amount,\\n        bytes32 _receiver\\n    ) internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_2, _executionGas, _amount, _receiver);\\n    }\\n\\n    /// ======================= Getter Functions =======================\\n\\n    function getWorkerOptionsByWorkerId(\\n        WorkerOptions[] memory _workerOptions,\\n        uint16 _workerId\\n    ) internal pure returns (bool, uint, bytes memory) {\\n        for (uint i = 0; i < _workerOptions.length; i++) {\\n            if (_workerOptions[i].workerId == _workerId) {\\n                return (true, i, _workerOptions[i].options);\\n            }\\n        }\\n        return (false, 0, bytes(\\\"\\\"));\\n    }\\n\\n    function getOptionByOptionType(\\n        Option[] memory _options,\\n        uint16 _optionType\\n    ) internal pure returns (bool, uint, bytes memory) {\\n        for (uint i = 0; i < _options.length; i++) {\\n            if (_options[i].optionType == _optionType) {\\n                return (true, i, _options[i].params);\\n            }\\n        }\\n        return (false, 0, bytes(\\\"\\\"));\\n    }\\n\\n    function getOptionByWorkerIdAndOptionType(\\n        WorkerOptions[] memory _workerOptions,\\n        uint16 _workerId,\\n        uint16 _optionType\\n    ) internal pure returns (bool, bytes memory) {\\n        (bool found, , bytes memory options) = getWorkerOptionsByWorkerId(_workerOptions, _workerId);\\n        if (!found) {\\n            return (false, bytes(\\\"\\\"));\\n        }\\n\\n        (found, , options) = getOptionByOptionType(decodeWorkerOptions(options), _optionType);\\n        return (found, options);\\n    }\\n\\n    function _safeToUint16(uint _value) private pure returns (uint16) {\\n        require(_value <= type(uint16).max, \\\"LZ10009\\\");\\n        return uint16(_value);\\n    }\\n}\\n\",\"keccak256\":\"0xce60119d3aab135c174c03a81517a8e6cc326dd2cd00adf99497807d3f76fea8\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../interfaces/IPacket.sol\\\";\\n\\nlibrary PacketV1Codec {\\n    // header (version + nonce + path)\\n    // version\\n    uint private constant PACKET_VERSION_OFFSET = 0;\\n    //    nonce\\n    uint private constant NONCE_OFFSET = 1;\\n    //    path\\n    uint private constant SRC_EID_OFFSET = 9;\\n    uint private constant SRC_ADDRESS_OFFSET = 13;\\n    uint private constant DST_EID_OFFSET = 45;\\n    uint private constant DST_ADDRESS_OFFSET = 49;\\n    // payload (guid + message)\\n    uint private constant GUID_OFFSET = 81; // keccak256(nonce + path)\\n    uint private constant MESSAGE_OFFSET = 113;\\n\\n    function encode(\\n        uint8 _version,\\n        IPacket.Packet calldata _packet\\n    ) internal pure returns (bytes32 id, bytes memory encodedPacket) {\\n        bytes memory nonceAndPath = abi.encodePacked(_packet.nonce, encodePath(_packet));\\n        id = keccak256(nonceAndPath);\\n        encodedPacket = abi.encodePacked(_version, nonceAndPath, id, _packet.message);\\n    }\\n\\n    function encodePath(IPacket.Packet calldata _packet) internal pure returns (bytes memory path) {\\n        path = abi.encodePacked(_packet.srcEid, addressToBytes32(_packet.sender), _packet.dstEid, _packet.receiver);\\n    }\\n\\n    function header(bytes calldata _packet) internal pure returns (bytes memory) {\\n        return _packet[0:GUID_OFFSET];\\n    }\\n\\n    function version(bytes calldata _packet) internal pure returns (uint8) {\\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SRC_ADDRESS_OFFSET]));\\n    }\\n\\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[SRC_ADDRESS_OFFSET:DST_EID_OFFSET]);\\n    }\\n\\n    function senderAddressB20(bytes calldata _packet) internal pure returns (address) {\\n        return bytes32ToAddress(sender(_packet));\\n    }\\n\\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\\n        return uint32(bytes4(_packet[DST_EID_OFFSET:DST_ADDRESS_OFFSET]));\\n    }\\n\\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[DST_ADDRESS_OFFSET:GUID_OFFSET]);\\n    }\\n\\n    function receiverB20(bytes calldata _packet) internal pure returns (address) {\\n        return bytes32ToAddress(receiver(_packet));\\n    }\\n\\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\\n    }\\n\\n    function message(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[MESSAGE_OFFSET:]);\\n    }\\n\\n    function payload(bytes calldata _packet) internal pure returns (bytes calldata) {\\n        return bytes(_packet[GUID_OFFSET:]);\\n    }\\n\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint(uint160(_addr)));\\n    }\\n\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0xccaf35d405c41ab519c8aa48e352c993ee6e7eda7e7d4f80a5fb9abfa8c39b33\",\"license\":\"BUSL-1.1\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/RelayerOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"./Options.sol\\\";\\n\\nlibrary RelayerOptions {\\n    using BytesLib for bytes;\\n\\n    uint16 public constant WORKER_ID = 1;\\n\\n    uint16 public constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint16 public constant OPTION_TYPE_AIRDROP = 2;\\n    uint16 public constant OPTION_TYPE_LZCOMPOSE = 3;\\n\\n    function decodeLzReceiveParams(bytes memory _params) internal pure returns (uint gas, uint value) {\\n        require(_params.length == 32 || _params.length == 64, \\\"LZ10009\\\");\\n        gas = _params.toUint256(0);\\n        value = _params.length == 64 ? _params.toUint256(32) : 0;\\n    }\\n\\n    function decodeAirdropParams(bytes memory _params) internal pure returns (uint amount, bytes32 receiver) {\\n        require(_params.length == 64, \\\"LZ10009\\\");\\n        amount = _params.toUint256(0);\\n        receiver = _params.toBytes32(32);\\n    }\\n\\n    function decodeLzComposeParams(bytes memory _params) internal pure returns (uint gas, uint value) {\\n        require(_params.length == 64, \\\"LZ10009\\\");\\n        gas = _params.toUint256(0);\\n        value = _params.toUint256(32);\\n    }\\n\\n    function encodeLzReceiveOption(uint _gas, uint _value) internal pure returns (Options.Option memory) {\\n        bytes memory params = _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n        return Options.Option(OPTION_TYPE_LZRECEIVE, params);\\n    }\\n\\n    function encodeAirdropOption(uint _amount, bytes32 _receiver) internal pure returns (Options.Option memory) {\\n        return Options.Option(OPTION_TYPE_AIRDROP, abi.encodePacked(_amount, _receiver));\\n    }\\n\\n    function encodeLzComposeOption(uint _gas, uint _value) internal pure returns (Options.Option memory) {\\n        return Options.Option(OPTION_TYPE_LZCOMPOSE, abi.encodePacked(_gas, _value));\\n    }\\n}\\n\",\"keccak256\":\"0x133bd50ed93293cce6988d20251081c756aa65302b002aff2c9c36ae7cace770\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MessageLibBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLib.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/Options.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/RelayerOptions.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroRelayer.sol\\\";\\nimport \\\"./interfaces/ILayerZeroTreasury.sol\\\";\\n\\nabstract contract MessageLibBase is ERC165, IMessageLib, Ownable {\\n    using SafeERC20 for IERC20;\\n    using PacketV1Codec for bytes;\\n\\n    // Derived MessageLibs should never use this as config type\\n    uint32 public constant CONFIG_TYPE_MAX_MESSAGE_SIZE = 1;\\n    uint32 public constant CONFIG_TYPE_OUTBOUND_CONFIRMATIONS = 2;\\n    uint32 public constant CONFIG_TYPE_RELAYER = 3;\\n\\n    address public immutable endpoint;\\n    uint32 public immutable localEid;\\n    uint8 public immutable packetVersion;\\n    uint public immutable treasuryGasCap;\\n\\n    // config\\n    address public override treasury;\\n    mapping(uint32 => OutboundConfig) public defaultOutboundConfig;\\n    mapping(address => mapping(uint32 => OutboundConfig)) public outboundConfig;\\n    mapping(uint32 => bytes) public defaultOptions;\\n\\n    // accumulated fees for workers and treasury\\n    mapping(address => uint) public fees;\\n\\n    struct OutboundConfig {\\n        uint32 maxMessageSize;\\n        uint64 outboundConfirmations;\\n        address relayer;\\n    }\\n\\n    event RelayerFee(address relayer, uint fee);\\n    event WithdrawFee(address indexed user, address receiver, uint amount);\\n    event WorkerEntered(address indexed worker, bool entered, uint timestamp);\\n\\n    error InvalidEndpoint(address expected, address actual);\\n    error InvalidMessageSize(uint max, uint actual);\\n\\n    // only the endpoint can call SEND() and setConfig()\\n    modifier onlyEndpoint() {\\n        if (endpoint != msg.sender) {\\n            revert InvalidEndpoint(endpoint, msg.sender);\\n        }\\n        _;\\n    }\\n\\n    constructor(address _endpoint, uint8 _packetVersion, uint _treasuryGasCap) {\\n        require(_endpoint != address(0x0), \\\"LZ10000\\\");\\n        endpoint = _endpoint;\\n        localEid = ILayerZeroEndpoint(_endpoint).eid();\\n        packetVersion = _packetVersion;\\n        treasuryGasCap = _treasuryGasCap;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IMessageLib).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// ---------------------- ONLY ENDPOINT ----------------------\\n    function send(\\n        Packet calldata _packet,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) external override onlyEndpoint returns (ILayerZeroEndpoint.MessagingReceipt memory, bytes memory, bytes memory) {\\n        uint32 dstEid = _packet.dstEid;\\n        address oapp = _packet.sender;\\n\\n        uint totalNativeFee = 0;\\n        {\\n            if (_options.length == 0) {\\n                _options = defaultOptions[dstEid];\\n            }\\n\\n            Options.WorkerOptions[] memory workerOptions;\\n            bytes memory relayerOptions;\\n            if (_options.length > 0) {\\n                workerOptions = Options.decodeOptions(_options);\\n                if (workerOptions[0].workerId == RelayerOptions.WORKER_ID) {\\n                    relayerOptions = workerOptions[0].options;\\n                }\\n            }\\n\\n            // assert msg size\\n            OutboundConfig memory config = getOutboundConfig(oapp, dstEid);\\n            uint msgSize = _packet.message.length;\\n            _assertMessageSize(msgSize, config.maxMessageSize);\\n\\n            totalNativeFee = ILayerZeroRelayer(config.relayer).assignJob(dstEid, oapp, msgSize, relayerOptions);\\n            if (totalNativeFee > 0) {\\n                fees[config.relayer] += totalNativeFee;\\n            }\\n            emit RelayerFee(config.relayer, totalNativeFee);\\n\\n            totalNativeFee += _send(_packet, workerOptions, config.outboundConfirmations);\\n        }\\n\\n        (bytes32 guid, bytes memory encodedPacket) = PacketV1Codec.encode(packetVersion, _packet);\\n\\n        _handleMessagingParamsHook(encodedPacket, _options);\\n\\n        ILayerZeroEndpoint.MessagingReceipt memory receipt;\\n        {\\n            uint64 nonce = _packet.nonce;\\n            bool payInLzToken = _payInLzToken;\\n            (uint treasuryNativeFee, uint lzTokenFee) = quoteTreasuryFee(oapp, dstEid, totalNativeFee, payInLzToken);\\n            // if payInLzToken, payment handled in endpoint\\n            if (treasuryNativeFee > 0) {\\n                fees[treasury] += treasuryNativeFee;\\n                totalNativeFee += treasuryNativeFee;\\n            }\\n            receipt = ILayerZeroEndpoint.MessagingReceipt(\\n                guid,\\n                nonce,\\n                ILayerZeroEndpoint.MessagingFee(totalNativeFee, lzTokenFee)\\n            );\\n        }\\n\\n        return (receipt, encodedPacket, _options);\\n    }\\n\\n    function setConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType,\\n        bytes calldata _config\\n    ) external override onlyEndpoint {\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            uint32 maxMessageSize = abi.decode(_config, (uint32));\\n            OutboundConfig storage config = outboundConfig[_oapp][_eid];\\n            config.maxMessageSize = maxMessageSize;\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            uint64 outboundConfirmations = abi.decode(_config, (uint64));\\n            OutboundConfig storage config = outboundConfig[_oapp][_eid];\\n            config.outboundConfirmations = outboundConfirmations;\\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\\n            address relayer = abi.decode(_config, (address));\\n            OutboundConfig storage config = outboundConfig[_oapp][_eid];\\n            config.relayer = relayer;\\n        } else {\\n            _setConfig(_eid, _oapp, _configType, _config);\\n        }\\n    }\\n\\n    function snapshotConfig(uint32[] calldata _eids, address _oapp) external override onlyEndpoint {\\n        _snapshotOutboundConfig(_eids, _oapp);\\n        _snapshotConfig(_eids, _oapp);\\n    }\\n\\n    function resetConfig(uint32[] calldata _eids, address _oapp) external override onlyEndpoint {\\n        _resetOutboundConfig(_eids, _oapp);\\n        _resetConfig(_eids, _oapp);\\n    }\\n\\n    /// ---------------------- ONLY OWNER ----------------------\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(IERC165(_treasury).supportsInterface(type(ILayerZeroTreasury).interfaceId), \\\"LZC0001\\\");\\n        treasury = _treasury;\\n    }\\n\\n    function setDefaultOutboundConfig(\\n        uint32 _eid,\\n        uint32 _maxMessageSize,\\n        uint64 _outboundConfirmations,\\n        address _relayer\\n    ) public onlyOwner {\\n        require(_outboundConfirmations > 0 && _relayer != address(0x0), \\\"LZ10000\\\");\\n        require(_maxMessageSize > 0, \\\"LZ10009\\\");\\n\\n        OutboundConfig storage config = defaultOutboundConfig[_eid];\\n        config.relayer = _relayer;\\n        config.maxMessageSize = _maxMessageSize;\\n        config.outboundConfirmations = _outboundConfirmations;\\n    }\\n\\n    function setDefaultOptions(uint32 _eid, bytes calldata _options) external onlyOwner {\\n        defaultOptions[_eid] = _options;\\n    }\\n\\n    /// ---------------------- PUBLIC FUNCTIONS ----------------------\\n    function notice(bool _enter, uint _timestamp) external {\\n        emit WorkerEntered(msg.sender, _enter, _timestamp);\\n    }\\n\\n    function withdrawFee(address _to, uint _amount) external override {\\n        require(_to != address(0x0), \\\"LZ10000\\\");\\n        require(_amount <= fees[msg.sender], \\\"LZ10003\\\");\\n\\n        address altTokenAddr = ILayerZeroEndpoint(endpoint).altFeeToken();\\n        bool isAltToken = altTokenAddr != address(0x0);\\n\\n        fees[msg.sender] -= _amount;\\n        if (isAltToken) {\\n            IERC20(altTokenAddr).transfer(_to, _amount);\\n        } else {\\n            payable(_to).transfer(_amount);\\n        }\\n        emit WithdrawFee(msg.sender, _to, _amount);\\n    }\\n\\n    function withdrawLzTokenFee(address _to, uint _amount) external override {\\n        require(msg.sender == treasury, \\\"LZ50000\\\");\\n        require(_to != address(0x0), \\\"LZ10000\\\");\\n\\n        address lzToken = ILayerZeroEndpoint(endpoint).layerZeroToken();\\n        require(lzToken != address(0x0), \\\"LZD0003\\\");\\n\\n        IERC20(lzToken).transfer(_to, _amount);\\n    }\\n\\n    /// ---------------------- VIEW FUNCTIONS ----------------------\\n    function quote(\\n        PacketForQuote calldata _packet,\\n        bool _payInLzToken,\\n        bytes memory _options\\n    ) external view override returns (ILayerZeroEndpoint.MessagingFee memory) {\\n        address oapp = _packet.sender;\\n        OutboundConfig memory config = getOutboundConfig(oapp, _packet.dstEid);\\n\\n        uint msgSize = _packet.message.length;\\n        _assertMessageSize(msgSize, config.maxMessageSize);\\n\\n        if (_options.length == 0) {\\n            _options = defaultOptions[_packet.dstEid];\\n        }\\n\\n        Options.WorkerOptions[] memory workerOptions;\\n        bytes memory relayerOptions;\\n        if (_options.length > 0) {\\n            workerOptions = Options.decodeOptions(_options);\\n            if (workerOptions[0].workerId == RelayerOptions.WORKER_ID) {\\n                relayerOptions = workerOptions[0].options;\\n            }\\n        }\\n\\n        uint totalNativeFee = 0;\\n        totalNativeFee += ILayerZeroRelayer(config.relayer).getFee(_packet.dstEid, oapp, msgSize, relayerOptions);\\n        totalNativeFee += _quoteWorkers(oapp, _packet.dstEid, workerOptions, config.outboundConfirmations);\\n\\n        bool payInLzToken = _payInLzToken;\\n        (uint treasuryNativeFee, uint lzTokenFee) = quoteTreasuryFee(\\n            oapp,\\n            _packet.dstEid,\\n            totalNativeFee,\\n            payInLzToken\\n        );\\n        if (treasuryNativeFee > 0) {\\n            totalNativeFee += treasuryNativeFee;\\n        }\\n\\n        return ILayerZeroEndpoint.MessagingFee(totalNativeFee, lzTokenFee);\\n    }\\n\\n    function quoteTreasuryFee(\\n        address _oapp,\\n        uint32 _eid,\\n        uint _totalFee,\\n        bool _payInLzToken\\n    ) public view returns (uint nativeFee, uint lzTokenFee) {\\n        if (treasury != address(0x0)) {\\n            try ILayerZeroTreasury(treasury).getFees(_oapp, _eid, _totalFee, _payInLzToken) returns (uint treasuryFee) {\\n                // success\\n                if (_payInLzToken) {\\n                    lzTokenFee = treasuryFee;\\n                } else {\\n                    // pay in native, make sure that the treasury fee is not higher than the cap\\n                    uint gasFeeEstimate = tx.gasprice * treasuryGasCap;\\n                    // cap is the max of total fee and gasFeeEstimate. this is to prevent apps from forcing the cap to 0.\\n                    uint nativeFeeCap = _totalFee > gasFeeEstimate ? _totalFee : gasFeeEstimate;\\n                    // to prevent the treasury from returning an overly high value to break the path\\n                    nativeFee = treasuryFee > nativeFeeCap ? nativeFeeCap : treasuryFee;\\n                }\\n            } catch {\\n                // failure, something wrong with treasury contract, charge nothing and continue\\n            }\\n        }\\n    }\\n\\n    function getOutboundConfig(address _oapp, uint32 _eid) public view returns (OutboundConfig memory) {\\n        OutboundConfig memory config = outboundConfig[_oapp][_eid];\\n        OutboundConfig memory defaultConfig = defaultOutboundConfig[_eid];\\n        if (config.maxMessageSize == 0) {\\n            config.maxMessageSize = defaultConfig.maxMessageSize;\\n        }\\n        if (config.outboundConfirmations == 0) {\\n            config.outboundConfirmations = defaultConfig.outboundConfirmations;\\n        }\\n        if (config.relayer == address(0x0)) {\\n            config.relayer = defaultConfig.relayer;\\n        }\\n        return config;\\n    }\\n\\n    function getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) external view override returns (bytes memory, bool) {\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            OutboundConfig storage config = outboundConfig[_oapp][_eid];\\n            if (config.maxMessageSize == 0) {\\n                OutboundConfig storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.maxMessageSize), true);\\n            }\\n            return (abi.encode(config.maxMessageSize), false);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            OutboundConfig storage config = outboundConfig[_oapp][_eid];\\n            if (config.outboundConfirmations == 0) {\\n                OutboundConfig storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.outboundConfirmations), true);\\n            }\\n            return (abi.encode(config.outboundConfirmations), false);\\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\\n            OutboundConfig storage config = outboundConfig[_oapp][_eid];\\n            if (config.relayer == address(0x0)) {\\n                OutboundConfig storage defaultConfig = defaultOutboundConfig[_eid];\\n                return (abi.encode(defaultConfig.relayer), true);\\n            }\\n            return (abi.encode(config.relayer), false);\\n        } else {\\n            return _getConfig(_eid, _oapp, _configType);\\n        }\\n    }\\n\\n    function getDefaultConfig(uint32 _eid, uint32 _configType) external view returns (bytes memory) {\\n        if (_configType == CONFIG_TYPE_MAX_MESSAGE_SIZE) {\\n            OutboundConfig storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.maxMessageSize);\\n        } else if (_configType == CONFIG_TYPE_OUTBOUND_CONFIRMATIONS) {\\n            OutboundConfig storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.outboundConfirmations);\\n        } else if (_configType == CONFIG_TYPE_RELAYER) {\\n            OutboundConfig storage config = defaultOutboundConfig[_eid];\\n            return abi.encode(config.relayer);\\n        } else {\\n            return _defaultConfig(_eid, _configType);\\n        }\\n    }\\n\\n    /// ---------------------- INTERNAL OR VIRTUAL FUNCTIONS ----------------------\\n    function _snapshotOutboundConfig(uint32[] calldata _eids, address _oapp) internal {\\n        for (uint i = 0; i < _eids.length; i++) {\\n            uint32 eid = _eids[i];\\n            OutboundConfig memory config = getOutboundConfig(_oapp, eid);\\n            outboundConfig[_oapp][eid] = config;\\n        }\\n    }\\n\\n    function _resetOutboundConfig(uint32[] calldata _eids, address _oapp) internal {\\n        for (uint i = 0; i < _eids.length; i++) {\\n            uint32 eid = _eids[i];\\n            delete outboundConfig[_oapp][eid];\\n        }\\n    }\\n\\n    function _assertMessageSize(uint actual, uint max) internal pure {\\n        if (actual > max) {\\n            revert InvalidMessageSize(max, actual);\\n        }\\n    }\\n\\n    function _quoteWorkers(\\n        address _oapp,\\n        uint32 _eid,\\n        Options.WorkerOptions[] memory _options,\\n        uint64 _outboundConfirmations\\n    ) internal view virtual returns (uint);\\n\\n    function _send(\\n        Packet calldata _packet,\\n        Options.WorkerOptions[] memory _options,\\n        uint64 _outboundConfirmations\\n    ) internal virtual returns (uint);\\n\\n    function _setConfig(uint32 _eid, address _oapp, uint32 _configType, bytes calldata _config) internal virtual;\\n\\n    function _getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) internal view virtual returns (bytes memory, bool);\\n\\n    function _snapshotConfig(uint32[] calldata _eids, address _oapp) internal virtual;\\n\\n    function _resetConfig(uint32[] calldata _eids, address _oapp) internal virtual;\\n\\n    function _defaultConfig(uint32 _eid, uint32 _configType) internal view virtual returns (bytes memory);\\n\\n    function _handleMessagingParamsHook(bytes memory _encodedPacket, bytes memory _options) internal virtual {}\\n\\n    // receive native token from endpoint\\n    receive() external payable virtual {}\\n}\\n\",\"keccak256\":\"0xfd550eae4ab95347401721c3759ebc031c282ff58c0860ed4b1330830b9e2d32\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroRelayer {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _oapp - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint32 _dstEid,\\n        address _oapp,\\n        uint _calldataSize,\\n        bytes calldata _options\\n    ) external payable returns (uint price);\\n\\n    // @notice query the relayer price for relaying the payload and its proof to the destination chain\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _oapp - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _calldataSize - dynamic data size of message + caller params\\n    // @param _options - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint32 _dstEid,\\n        address _oapp,\\n        uint _calldataSize,\\n        bytes calldata _options\\n    ) external view returns (uint price);\\n}\\n\",\"keccak256\":\"0xf8254219311f68816d617099c152ab5837868a283fca0d255f90c2131a9dac70\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ILayerZeroTreasury {\\n    function getFees(address _oapp, uint32 _eid, uint _totalFee, bool _payInZro) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc2cea405faf61c5dee41da345d9406d8d1582d458f19c508e11def3dee44e516\",\"license\":\"BUSL-1.1\"},\"contracts/libs/OracleOptions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary OracleOptions {\\n    uint16 public constant WORKER_ID = 2;\\n}\\n\",\"keccak256\":\"0xde43910f8b1439d1d5845d5d563c2209d41e690f64ffdaf792c0eee43f710519\",\"license\":\"BUSL-1.1\"},\"contracts/uln/UlnConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract UlnConfig is Ownable {\\n    struct Config {\\n        uint64 inboundConfirmations;\\n        bool useCustomOracles; // unused for default config\\n        bool useCustomOptionalOracles; // unused for default config\\n        uint16 oraclesCount;\\n        uint16 optionalOraclesCount;\\n        uint16 optionalOraclesThreshold;\\n        address[] oracles; // allowed overlap with optionalOracles\\n        address[] optionalOracles; // allowed overlap with oracles\\n    }\\n\\n    event SetDefaultConfig(\\n        uint32 indexed eid,\\n        uint64 inboundBlockConfirm,\\n        address[] oracles,\\n        address[] optionalOracles,\\n        uint16 optionalOraclesThreshold\\n    );\\n    event UlnConfigUpdated(address indexed oapp, uint indexed configType, bytes newConfig);\\n\\n    // Application config, extending from MessageLibBase\\n    uint32 public constant CONFIG_TYPE_INBOUND_CONFIRMATIONS = 4;\\n    uint32 public constant CONFIG_TYPE_ORACLES = 5;\\n    uint32 public constant CONFIG_TYPE_OPTIONAL_ORACLES = 6;\\n\\n    // [oapp][eid] => UlnConfig\\n    mapping(address => mapping(uint32 => Config)) public ulnConfig;\\n    // [eid] => UlnConfig\\n    mapping(uint32 => Config) public defaultUlnConfig;\\n\\n    function getUlnConfig(address _oapp, uint32 _remoteEid) public view returns (Config memory) {\\n        Config memory config = ulnConfig[_oapp][_remoteEid];\\n        Config storage defaultConfig = defaultUlnConfig[_remoteEid];\\n        require(defaultConfig.inboundConfirmations > 0, \\\"LZ10008\\\");\\n\\n        if (config.inboundConfirmations == 0) {\\n            config.inboundConfirmations = defaultConfig.inboundConfirmations;\\n        }\\n\\n        if (!config.useCustomOracles) {\\n            config.oracles = defaultConfig.oracles;\\n            config.oraclesCount = defaultConfig.oraclesCount;\\n        }\\n\\n        if (!config.useCustomOptionalOracles) {\\n            config.optionalOracles = defaultConfig.optionalOracles;\\n            config.optionalOraclesCount = defaultConfig.optionalOraclesCount;\\n            config.optionalOraclesThreshold = defaultConfig.optionalOraclesThreshold;\\n        }\\n\\n        require(config.oraclesCount > 0 || config.optionalOraclesThreshold > 0, \\\"LZD0005\\\");\\n\\n        return config;\\n    }\\n\\n    function _setUlnConfig(uint32 _remoteEid, address _oapp, uint32 _configType, bytes calldata _config) internal {\\n        Config storage config = ulnConfig[_oapp][_remoteEid];\\n        if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            uint64 blockConfirmations = abi.decode(_config, (uint64));\\n            config.inboundConfirmations = blockConfirmations;\\n        } else if (_configType == CONFIG_TYPE_ORACLES) {\\n            // oracles list must be sorted by ascending order and contain no duplicates\\n            (bool useCustomOracles, address[] memory oracles) = abi.decode(_config, (bool, address[]));\\n\\n            uint oracleCount = oracles.length;\\n            bool isValidCount = useCustomOracles ? oracleCount <= 65535 : oracleCount == 0;\\n            require(isValidCount, \\\"LZ10009\\\");\\n            _assertNoDuplicates(oracles, oracleCount);\\n\\n            config.oraclesCount = uint16(oracleCount);\\n            config.oracles = oracles;\\n            config.useCustomOracles = useCustomOracles;\\n\\n            getUlnConfig(_oapp, _remoteEid); // validate the latest config by getting it\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_ORACLES) {\\n            // oracles list must be sorted by ascending order and contain no duplicates\\n            (bool useCustomOptionalOracles, address[] memory optionalOracles, uint16 threshold) = abi.decode(\\n                _config,\\n                (bool, address[], uint16)\\n            );\\n\\n            uint optionalOraclesCount = optionalOracles.length;\\n            bool isValidCount = useCustomOptionalOracles ? optionalOraclesCount <= 65535 : optionalOraclesCount == 0;\\n            require(isValidCount, \\\"LZ10009\\\");\\n            require(threshold <= optionalOraclesCount, \\\"LZ10003\\\");\\n            _assertNoDuplicates(optionalOracles, optionalOraclesCount);\\n\\n            config.optionalOraclesCount = uint16(optionalOraclesCount);\\n            config.optionalOracles = optionalOracles;\\n            config.optionalOraclesThreshold = threshold;\\n            config.useCustomOptionalOracles = useCustomOptionalOracles;\\n\\n            getUlnConfig(_oapp, _remoteEid); // validate the latest config by getting it\\n        } else {\\n            revert(\\\"LZC0000\\\");\\n        }\\n\\n        emit UlnConfigUpdated(_oapp, _configType, _config);\\n    }\\n\\n    function _getUlnConfig(\\n        uint32 _remoteEid,\\n        address _oapp,\\n        uint _configType\\n    ) internal view returns (bytes memory, bool) {\\n        Config storage config = ulnConfig[_oapp][_remoteEid];\\n        Config storage defaultConfig = defaultUlnConfig[_remoteEid];\\n\\n        if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            if (config.inboundConfirmations == 0) {\\n                return (abi.encode(defaultConfig.inboundConfirmations), true);\\n            }\\n            return (abi.encode(config.inboundConfirmations), false);\\n        } else if (_configType == CONFIG_TYPE_ORACLES) {\\n            if (config.useCustomOracles) {\\n                return (abi.encode(config.oracles), false);\\n            }\\n            return (abi.encode(defaultConfig.oracles), true);\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_ORACLES) {\\n            if (config.useCustomOptionalOracles) {\\n                return (abi.encode(config.optionalOracles, config.optionalOraclesThreshold), false);\\n            }\\n            return (abi.encode(defaultConfig.optionalOracles, defaultConfig.optionalOraclesThreshold), true);\\n        } else {\\n            revert(\\\"LZC0000\\\");\\n        }\\n    }\\n\\n    function _getDefaultUlnConfig(uint32 _remoteEid, uint _configType) internal view returns (bytes memory) {\\n        Config storage config = defaultUlnConfig[_remoteEid];\\n\\n        if (_configType == CONFIG_TYPE_INBOUND_CONFIRMATIONS) {\\n            return abi.encode(config.inboundConfirmations);\\n        } else if (_configType == CONFIG_TYPE_ORACLES) {\\n            return abi.encode(config.oracles);\\n        } else if (_configType == CONFIG_TYPE_OPTIONAL_ORACLES) {\\n            return abi.encode(config.optionalOracles, config.optionalOraclesThreshold);\\n        } else {\\n            revert(\\\"LZC0000\\\");\\n        }\\n    }\\n\\n    function _snapshotUlnConfig(uint32[] calldata _eids, address _oapp) internal {\\n        for (uint i = 0; i < _eids.length; i++) {\\n            uint32 eid = _eids[i];\\n            Config memory config = getUlnConfig(_oapp, eid);\\n            ulnConfig[_oapp][eid] = config;\\n        }\\n    }\\n\\n    function _resetUlnConfig(uint32[] calldata _eids, address _oapp) internal {\\n        for (uint i = 0; i < _eids.length; i++) {\\n            uint32 eid = _eids[i];\\n            delete ulnConfig[_oapp][eid];\\n        }\\n    }\\n\\n    function setDefaultConfig(\\n        uint32 _eid,\\n        uint64 _inboundConfirmations,\\n        address[] calldata _oracles,\\n        address[] calldata _optionalOracles,\\n        uint16 _optionalOraclesThreshold\\n    ) external onlyOwner {\\n        uint oracleCount = _oracles.length;\\n        uint optionalOracleCount = _optionalOracles.length;\\n\\n        require(_inboundConfirmations > 0, \\\"LZ10000\\\");\\n        require(\\n            oracleCount <= 65535 && optionalOracleCount <= 65535 && _optionalOraclesThreshold <= optionalOracleCount,\\n            \\\"LZ10009\\\"\\n        );\\n        require(oracleCount > 0 || _optionalOraclesThreshold > 0, \\\"LZ10011\\\");\\n        _assertNoDuplicates(_oracles, oracleCount);\\n        _assertNoDuplicates(_optionalOracles, optionalOracleCount);\\n\\n        defaultUlnConfig[_eid] = Config(\\n            _inboundConfirmations,\\n            false, // unused for default config\\n            false, // unused for default config\\n            uint16(oracleCount),\\n            uint16(optionalOracleCount),\\n            _optionalOraclesThreshold,\\n            _oracles,\\n            _optionalOracles\\n        );\\n\\n        emit SetDefaultConfig(_eid, _inboundConfirmations, _oracles, _optionalOracles, _optionalOraclesThreshold);\\n    }\\n\\n    function _assertNoDuplicates(address[] memory _oracles, uint _oracleCount) internal pure {\\n        address lastOracle = address(0);\\n        for (uint i = 0; i < _oracleCount; i++) {\\n            address oracle = _oracles[i];\\n            require(oracle > lastOracle, \\\"LZ10006\\\"); // to ensure no duplicates\\n            lastOracle = oracle;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf0f1d3390760e25f96503f573e6cb6c242088d0cee3affbcc7c042a2f196ece2\",\"license\":\"BUSL-1.1\"},\"contracts/uln/UltraLightNode302.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroOracle.sol\\\";\\n\\nimport \\\"./UlnConfig.sol\\\";\\nimport \\\"../MessageLibBase.sol\\\";\\nimport \\\"../libs/OracleOptions.sol\\\";\\n\\ncontract UltraLightNode302 is MessageLibBase, UlnConfig {\\n    using PacketV1Codec for bytes;\\n    // header hash => message hash => confirmations\\n    mapping(bytes32 => mapping(bytes32 => mapping(address => uint64))) public hashLookup;\\n\\n    event PayloadSigned(address oracle, bytes header, uint confirmations, bytes32 proofHash);\\n    event OracleFee(address[] oracles, uint[] fees);\\n\\n    constructor(address _endpoint, uint _baseGasEstimate) MessageLibBase(_endpoint, 1, _baseGasEstimate) {}\\n\\n    function _quoteWorkers(\\n        address _oapp,\\n        uint32 _dstEid,\\n        Options.WorkerOptions[] memory _options,\\n        uint64 _outboundConfirmations\\n    ) internal view override returns (uint totalFee) {\\n        Config memory config = getUlnConfig(_oapp, _dstEid);\\n\\n        (, , bytes memory oracleOptions) = Options.getWorkerOptionsByWorkerId(_options, OracleOptions.WORKER_ID);\\n        // quote the oracles\\n        totalFee += _quoteOracles(\\n            config.oracles,\\n            config.oraclesCount,\\n            _oapp,\\n            _dstEid,\\n            oracleOptions,\\n            _outboundConfirmations\\n        );\\n        // quote the optional oracles\\n        totalFee += _quoteOracles(\\n            config.optionalOracles,\\n            config.optionalOraclesCount,\\n            _oapp,\\n            _dstEid,\\n            oracleOptions,\\n            _outboundConfirmations\\n        );\\n    }\\n\\n    function _quoteOracles(\\n        address[] memory _oracles,\\n        uint16 _oracleCount,\\n        address _oapp,\\n        uint32 _dstEid,\\n        bytes memory _options,\\n        uint64 _outboundConfirmations\\n    ) internal view returns (uint256 totalFee) {\\n        for (uint i = 0; i < _oracleCount; i++) {\\n            totalFee += ILayerZeroOracle(_oracles[i]).getFee(_dstEid, _outboundConfirmations, _oapp, _options);\\n        }\\n    }\\n\\n    function _send(\\n        Packet calldata _packet,\\n        Options.WorkerOptions[] memory _options,\\n        uint64 _outboundConfirmations\\n    ) internal virtual override returns (uint totalFee) {\\n        // assert payload size restriction\\n        address oapp = _packet.sender;\\n        Config memory config = getUlnConfig(oapp, _packet.dstEid);\\n\\n        // oracle fees\\n        (, , bytes memory oracleOptions) = Options.getWorkerOptionsByWorkerId(_options, OracleOptions.WORKER_ID);\\n        totalFee += _payOracles(\\n            config.oracles,\\n            config.oraclesCount,\\n            oapp,\\n            _packet.dstEid,\\n            oracleOptions,\\n            _outboundConfirmations\\n        );\\n        totalFee += _payOracles(\\n            config.optionalOracles,\\n            config.optionalOraclesCount,\\n            oapp,\\n            _packet.dstEid,\\n            oracleOptions,\\n            _outboundConfirmations\\n        );\\n    }\\n\\n    function _payOracles(\\n        address[] memory _oracles,\\n        uint16 _oracleCount,\\n        address _oapp,\\n        uint32 _dstEid,\\n        bytes memory _options,\\n        uint64 _outboundConfirmations\\n    ) internal returns (uint totalFee) {\\n        uint[] memory oracleFees = new uint[](_oracleCount);\\n        for (uint i = 0; i < _oracleCount; i++) {\\n            uint oracleFee = ILayerZeroOracle(_oracles[i]).assignJob(_dstEid, _outboundConfirmations, _oapp, _options);\\n            oracleFees[i] = oracleFee;\\n\\n            if (oracleFee > 0) {\\n                fees[_oracles[i]] += oracleFee;\\n                totalFee += oracleFee;\\n            }\\n        }\\n\\n        emit OracleFee(_oracles, oracleFees);\\n    }\\n\\n    function _snapshotConfig(uint32[] calldata _eids, address _oapp) internal override {\\n        _snapshotUlnConfig(_eids, _oapp);\\n    }\\n\\n    function _setConfig(uint32 _eid, address _oapp, uint32 _configType, bytes calldata _config) internal override {\\n        _setUlnConfig(_eid, _oapp, _configType, _config);\\n    }\\n\\n    function _resetConfig(uint32[] calldata _eids, address _oapp) internal override {\\n        _resetUlnConfig(_eids, _oapp);\\n    }\\n\\n    function _getConfig(\\n        uint32 _eid,\\n        address _oapp,\\n        uint32 _configType\\n    ) internal view override returns (bytes memory, bool) {\\n        return _getUlnConfig(_eid, _oapp, _configType);\\n    }\\n\\n    function _defaultConfig(uint32 _eid, uint32 _configType) internal view override returns (bytes memory) {\\n        return _getDefaultUlnConfig(_eid, _configType);\\n    }\\n\\n    function deliver(bytes calldata _packetHeader, bytes32 _payloadHash) external {\\n        Config memory config = getUlnConfig(_packetHeader.receiverB20(), _packetHeader.srcEid());\\n        require(_deliverable(config, _packetHeader, _payloadHash), \\\"LZ10000\\\");\\n\\n        ILayerZeroEndpoint(endpoint).deliver(\\n            _packetHeader.srcEid(),\\n            _packetHeader.sender(),\\n            _packetHeader.receiverB20(),\\n            _packetHeader.nonce(),\\n            _payloadHash\\n        );\\n    }\\n\\n    function oracleSign(bytes calldata _packetHeader, bytes32 _payloadHash, uint64 _confirmations) external {\\n        hashLookup[keccak256(_packetHeader)][_payloadHash][msg.sender] = _confirmations;\\n        emit PayloadSigned(msg.sender, _packetHeader, _confirmations, _payloadHash);\\n    }\\n\\n    function version() external pure override returns (uint64 major, uint8 minor, uint8 endpointVersion) {\\n        return (3, 0, 2);\\n    }\\n\\n    function deliverable(bytes calldata _packetHeader, bytes32 _payloadHash) external view returns (bool) {\\n        Config memory config = getUlnConfig(_packetHeader.receiverB20(), _packetHeader.srcEid());\\n        return _deliverable(config, _packetHeader, _payloadHash);\\n    }\\n\\n    function _deliverable(\\n        Config memory _config,\\n        bytes calldata _packetHeader,\\n        bytes32 _payloadHash\\n    ) internal view returns (bool) {\\n        require(_packetHeader.length == 81, \\\"LZ10009\\\");\\n        require(_packetHeader.version() == packetVersion, \\\"LZ10007\\\");\\n        require(_packetHeader.dstEid() == localEid, \\\"LZ10008\\\");\\n\\n        bytes32 _headerHash = keccak256(_packetHeader);\\n        uint64 requiredConfirmations = _config.inboundConfirmations;\\n        // iterate the must-have oracles\\n        for (uint i = 0; i < _config.oraclesCount; i++) {\\n            address oracle = _config.oracles[i];\\n            uint64 confirmations = hashLookup[_headerHash][_payloadHash][oracle];\\n            if (confirmations < requiredConfirmations) {\\n                // return false if any of the must-have oracles haven't signed\\n                return false;\\n            }\\n        }\\n\\n        if (_config.oraclesCount > 0 && _config.optionalOraclesCount == 0) {\\n            return true;\\n        } else {\\n            // then the optional ones\\n            uint optionalCount = 0;\\n            for (uint i = 0; i < _config.optionalOraclesCount; i++) {\\n                address oracle = _config.optionalOracles[i];\\n                uint64 confirmations = hashLookup[_headerHash][_payloadHash][oracle];\\n\\n                if (confirmations >= requiredConfirmations) {\\n                    optionalCount++;\\n                    if (optionalCount >= _config.optionalOraclesThreshold) {\\n                        return true;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // return false by default as a catch-all\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x553d02f9f69c9a0496b12f58df918a1043ad99804ce87539abf46e561d906241\",\"license\":\"BUSL-1.1\"},\"contracts/uln/interfaces/ILayerZeroOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroOracle {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstEid - the destination endpoint identifier\\n    // @param _outboundBlockConfirmation - block confirmation delay before relaying blocks\\n    // @param _oapp - the source sending contract address\\n    // @param _options - options\\n    function assignJob(\\n        uint32 _dstEid,\\n        uint64 _outboundBlockConfirmation,\\n        address _oapp,\\n        bytes calldata _options\\n    ) external payable returns (uint price);\\n\\n    // @notice query the oracle price for relaying block information to the destination chain\\n    // @param _dstEid the destination endpoint identifier\\n    // @param _outboundBlockConfirmation - block confirmation delay before relaying blocks\\n    // @param _oapp - the source sending contract address\\n    // @param _options - options\\n    function getFee(\\n        uint32 _dstEid,\\n        uint64 _outboundBlockConfirmation,\\n        address _oapp,\\n        bytes calldata _options\\n    ) external view returns (uint price);\\n}\\n\",\"keccak256\":\"0x304016faa6566681d07d138e75d43ef158b414612b726ed16168bb6a60d47a5c\",\"license\":\"BUSL-1.1\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102e05760003560e01c80637c0cf76311610184578063d2d287f0116100d6578063ee4478ab1161008a578063f921b71f11610064578063f921b71f14610b01578063faaebd2114610b16578063fd9be52214610b4357600080fd5b8063ee4478ab14610a7f578063f0f4426014610ac1578063f2fde38b14610ae157600080fd5b8063e22670ed116100bb578063e22670ed14610a35578063e9817f3414610a4a578063eb53479c14610a6a57600080fd5b8063d2d287f0146109f5578063df1e309f14610a1557600080fd5b80639c33abf711610138578063c4c3724611610112578063c4c37246146108f8578063c57d1ab014610953578063d18404bb1461097357600080fd5b80639c33abf71461087b578063a9a41806146108a9578063bf45f3dd146108d857600080fd5b80638acb8054116101695780638acb8054146108285780638da5cb5b1461083d5780638f58aa7a1461085b57600080fd5b80637c0cf763146107e85780637e09a8d61461080857600080fd5b80634a575bb71161023d5780635ed31c59116101f1578063715018a6116101cb578063715018a614610747578063726075371461075c57806375b5152a1461079057600080fd5b80635ed31c59146106da57806361d027b3146106fa578063690c65551461071a57600080fd5b8063545d1efa11610222578063545d1efa146105ca57806354fd4d50146106615780635e280f111461068e57600080fd5b80634a575bb7146104d85780634f8f455c146104f857600080fd5b80632cfacb061161029457806337d570ef1161027957806337d570ef1461042a5780633c782a521461044a57806343ea4fa9146104ab57600080fd5b80632cfacb06146103e05780632e8ea0a5146103f557600080fd5b806307d7b2f9116102c557806307d7b2f9146103675780631538bffa146103945780631c63e3b6146103be57600080fd5b806301ffc9a7146102ec5780630395b8da1461032157600080fd5b366102e757005b600080fd5b3480156102f857600080fd5b5061030c610307366004614900565b610b63565b60405190151581526020015b60405180910390f35b34801561032d57600080fd5b506103557f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610318565b34801561037357600080fd5b50610387610382366004614a07565b610bfc565b6040516103189190614a87565b3480156103a057600080fd5b506103a9600581565b60405163ffffffff9091168152602001610318565b3480156103ca57600080fd5b506103de6103d9366004614aff565b610ead565b005b3480156103ec57600080fd5b506103a9600381565b34801561040157600080fd5b50610415610410366004614b6f565b610f47565b60408051928352602083019190915201610318565b34801561043657600080fd5b506103de610445366004614c02565b61106a565b34801561045657600080fd5b50610492610465366004614c7a565b600860209081526000938452604080852082529284528284209052825290205467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610318565b3480156104b757600080fd5b506104cb6104c6366004614ca8565b611269565b6040516103189190614d21565b3480156104e457600080fd5b506103de6104f3366004614df6565b611629565b34801561050457600080fd5b50610585610513366004614ca8565b600660209081526000928352604080842090915290825290205467ffffffffffffffff81169060ff680100000000000000008204811691690100000000000000000081049091169061ffff6a01000000000000000000008204811691600160601b8104821691600160701b9091041686565b6040805167ffffffffffffffff909716875294151560208701529215159385019390935261ffff908116606085015291821660808401521660a082015260c001610318565b3480156105d657600080fd5b5061062d6105e5366004614ca8565b600360209081526000928352604080842090915290825290205463ffffffff811690640100000000810467ffffffffffffffff1690600160601b90046001600160a01b031683565b6040805163ffffffff909416845267ffffffffffffffff90921660208401526001600160a01b031690820152606001610318565b34801561066d57600080fd5b50604080516003815260006020820152600291810191909152606001610318565b34801561069a57600080fd5b506106c27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610318565b3480156106e657600080fd5b506103de6106f5366004614e98565b6119ff565b34801561070657600080fd5b506001546106c2906001600160a01b031681565b34801561072657600080fd5b5061073a610735366004614ee4565b611b54565b6040516103189190614f50565b34801561075357600080fd5b506103de611c4f565b34801561076857600080fd5b506103a97f000000000000000000000000000000000000000000000000000000000000000081565b34801561079c57600080fd5b5061062d6107ab366004614f63565b60026020526000908152604090205463ffffffff811690640100000000810467ffffffffffffffff1690600160601b90046001600160a01b031683565b3480156107f457600080fd5b5061030c610803366004614e98565b611c63565b34801561081457600080fd5b506103de610823366004614f7e565b611c94565b34801561083457600080fd5b506103a9600681565b34801561084957600080fd5b506000546001600160a01b03166106c2565b34801561086757600080fd5b506103de610876366004614fdb565b611d3c565b34801561088757600080fd5b5061089b610896366004615007565b611f44565b60405161031892919061504c565b3480156108b557600080fd5b506108c96108c4366004615070565b612179565b604051610318939291906150e5565b3480156108e457600080fd5b506103de6108f3366004615142565b612571565b34801561090457600080fd5b50610918610913366004614ca8565b61266a565b60408051825163ffffffff16815260208084015167ffffffffffffffff1690820152918101516001600160a01b031690820152606001610318565b34801561095f57600080fd5b506103de61096e36600461518d565b612781565b34801561097f57600080fd5b5061058561098e366004614f63565b60076020526000908152604090205467ffffffffffffffff81169060ff680100000000000000008204811691690100000000000000000081049091169061ffff6a01000000000000000000008204811691600160601b8104821691600160701b9091041686565b348015610a0157600080fd5b506103de610a10366004614aff565b6127c2565b348015610a2157600080fd5b506103de610a303660046151ab565b612852565b348015610a4157600080fd5b506103a9600181565b348015610a5657600080fd5b5061073a610a65366004614f63565b61287a565b348015610a7657600080fd5b506103a9600481565b348015610a8b57600080fd5b50610ab37f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610318565b348015610acd57600080fd5b506103de610adc3660046151fe565b612914565b348015610aed57600080fd5b506103de610afc3660046151fe565b612a38565b348015610b0d57600080fd5b506103a9600281565b348015610b2257600080fd5b50610ab3610b313660046151fe565b60056020526000908152604090205481565b348015610b4f57600080fd5b506103de610b5e366004614fdb565b612ac8565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f1532172f000000000000000000000000000000000000000000000000000000001480610bf657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60408051808201909152600080825260208201526000610c1f60208601866151fe565b90506000610c37826109136040890160208a01614f63565b90506000610c48604088018861521b565b90509050610c6081836000015163ffffffff16612d39565b8451600003610d235760046000610c7d60408a0160208b01614f63565b63ffffffff1663ffffffff1681526020019081526020016000208054610ca290615280565b80601f0160208091040260200160405190810160405280929190818152602001828054610cce90615280565b8015610d1b5780601f10610cf057610100808354040283529160200191610d1b565b820191906000526020600020905b815481529060010190602001808311610cfe57829003601f168201915b505050505094505b606080600087511115610d8b57610d3987612d81565b9150600161ffff1682600081518110610d5457610d546152ba565b60200260200101516000015161ffff1603610d8b5781600081518110610d7c57610d7c6152ba565b60200260200101516020015190505b600084604001516001600160a01b031663709eb6648b6020016020810190610db39190614f63565b8887866040518563ffffffff1660e01b8152600401610dd594939291906152d0565b602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190615304565b610e209082615333565b9050610e4186610e3660408d0160208e01614f63565b858860200151612ff4565b610e4b9082615333565b90506000899050600080610e73898e6020016020810190610e6c9190614f63565b8686610f47565b90925090508115610e8b57610e888285615333565b93505b60408051808201909152938452602084015250909a9950505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610f2c576040516387a6483960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201523360248201526044015b60405180910390fd5b610f37838383613061565b610f428383836130d4565b505050565b60015460009081906001600160a01b031615611061576001546040517f3e0132600000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015263ffffffff8816602483015260448201879052851515606483015290911690633e01326090608401602060405180830381865afa925050508015610ff7575060408051601f3d908101601f19168201909252610ff491810190615304565b60015b1561106157831561100a5780915061105f565b60006110367f00000000000000000000000000000000000000000000000000000000000000003a615346565b905060008187116110475781611049565b865b9050808311611058578261105a565b805b945050505b505b94509492505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146110e4576040516387a6483960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152336024820152604401610f23565b60001963ffffffff84160161115e57600061110182840184614f63565b6001600160a01b038616600090815260036020908152604080832063ffffffff808c16855292529091208054919092167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000090911617905550611262565b60011963ffffffff8416016111e957600061117b8284018461535d565b6001600160a01b038616600090815260036020908152604080832063ffffffff8b1684529091529020805467ffffffffffffffff909216640100000000027fffffffffffffffffffffffffffffffffffffffff0000000000000000ffffffff90921691909117905550611262565b60021963ffffffff841601611255576000611206828401846151fe565b6001600160a01b03808716600090815260036020908152604080832063ffffffff8c1684529091529020805491909216600160601b026bffffffffffffffffffffffff90911617905550611262565b61126285858585856130df565b5050505050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e08101919091526001600160a01b038316600090815260066020908152604080832063ffffffff861684528252808320815161010081018352815467ffffffffffffffff8116825260ff6801000000000000000082048116151583870152690100000000000000000082041615158285015261ffff6a0100000000000000000000820481166060840152600160601b820481166080840152600160701b9091041660a08201526001820180548451818702810187019095528085529194929360c08601939092908301828280156113a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611387575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561140757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113e9575b5050509190925250505063ffffffff8416600090815260076020526040902080549192509067ffffffffffffffff166114825760405162461bcd60e51b815260206004820152600760248201527f4c5a3130303038000000000000000000000000000000000000000000000000006044820152606401610f23565b815167ffffffffffffffff166000036114a457805467ffffffffffffffff1682525b8160200151611529578060010180548060200260200160405190810160405280929190818152602001828054801561150557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116114e7575b505050505060c083015280546a0100000000000000000000900461ffff1660608301525b81604001516115b6578060020180548060200260200160405190810160405280929190818152602001828054801561158a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161156c575b505050505060e0830152805461ffff600160601b820481166080850152600160701b9091041660a08301525b6000826060015161ffff1611806115d5575060008260a0015161ffff16115b6116215760405162461bcd60e51b815260206004820152600760248201527f4c5a4430303035000000000000000000000000000000000000000000000000006044820152606401610f23565b509392505050565b6116316130ec565b838267ffffffffffffffff88166116745760405162461bcd60e51b815260206004820152600760248201526604c5a31303030360cc1b6044820152606401610f23565b61ffff8211158015611688575061ffff8111155b80156116985750808361ffff1611155b6116ce5760405162461bcd60e51b81526020600482015260076024820152664c5a313030303960c81b6044820152606401610f23565b60008211806116e1575060008361ffff16115b61172d5760405162461bcd60e51b815260206004820152600760248201527f4c5a3130303131000000000000000000000000000000000000000000000000006044820152606401610f23565b61176b878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250869250613146915050565b6117a9858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250613146915050565b6040518061010001604052808967ffffffffffffffff1681526020016000151581526020016000151581526020018361ffff1681526020018261ffff1681526020018461ffff1681526020018888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908252506040805160208881028281018201909352888252928301929091899189918291850190849080828437600092018290525093909452505063ffffffff8c168152600760209081526040918290208451815486840151948701516060880151608089015160a08a015161ffff908116600160701b027fffffffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffff928216600160601b02929092167fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff919093166a0100000000000000000000026bffff0000000000000000000019941515690100000000000000000002949094166bffffff00000000000000000019991515680100000000000000000268ffffffffffffffffff1990961667ffffffffffffffff9097169690961794909417979097169390931717161792909217825560c0840151805192935061198c9260018501929190910190614817565b5060e082015180516119a8916002840191602090910190614817565b509050508863ffffffff167fcefc09e599b8a950c1c6a0e233dfd90adac40718fb137ced2ec19d472b8e2a208989898989896040516119ec969594939291906153b6565b60405180910390a2505050505050505050565b6000611a18611a0e85856131e5565b6104c686866131fe565b9050611a2681858585613221565b611a5c5760405162461bcd60e51b815260206004820152600760248201526604c5a31303030360cc1b6044820152606401610f23565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338d71486611a9586866131fe565b611a9f8787613514565b611aa988886131e5565b611ab3898961352d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815263ffffffff94909416600485015260248401929092526001600160a01b0316604483015267ffffffffffffffff1660648201526084810185905260a401600060405180830381600087803b158015611b3657600080fd5b505af1158015611b4a573d6000803e3d6000fd5b5050505050505050565b606060001963ffffffff831601611ba65763ffffffff8381166000908152600260209081526040918290208054835194169184019190915291015b604051602081830303815290604052915050610bf6565b60011963ffffffff831601611bf35763ffffffff83166000908152600260209081526040918290208054835164010000000090910467ffffffffffffffff16928101929092529101611b8f565b60021963ffffffff831601611c3e5763ffffffff831660009081526002602090815260409182902080548351600160601b9091046001600160a01b0316928101929092529101611b8f565b611c488383613550565b9050610bf6565b611c576130ec565b611c616000613562565b565b600080611c7d611c7386866131e5565b6104c687876131fe565b9050611c8b81868686613221565b95945050505050565b80600860008686604051611ca9929190615405565b6040805191829003909120825260208083019390935290810160009081208682528352818120338083529352819020805467ffffffffffffffff191667ffffffffffffffff949094169390931790925590517fd57606ee258836ec1b40f83a128d2b514581eaf4f71801fbed3bc94b5358ecc091611d2e918790879086908890615440565b60405180910390a150505050565b6001546001600160a01b03163314611d965760405162461bcd60e51b815260206004820152600760248201527f4c5a3530303030000000000000000000000000000000000000000000000000006044820152606401610f23565b6001600160a01b038216611dd65760405162461bcd60e51b815260206004820152600760248201526604c5a31303030360cc1b6044820152606401610f23565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166307b9ca7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5a9190615481565b90506001600160a01b038116611eb25760405162461bcd60e51b815260206004820152600760248201527f4c5a4430303033000000000000000000000000000000000000000000000000006044820152606401610f23565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905282169063a9059cbb906044016020604051808303816000875af1158015611f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3e919061549e565b50505050565b6060600060001963ffffffff841601612002576001600160a01b038416600090815260036020908152604080832063ffffffff808a168552925282208054909291169003611fd25763ffffffff8681166000908152600260209081526040918290208054835194169184019190915291015b6040516020818303038152906040526001935093505050612171565b80546040805163ffffffff9092166020830152015b60405160208183030381529060405260009250925050612171565b60011963ffffffff8416016120b9576001600160a01b038416600090815260036020908152604080832063ffffffff8916845290915281208054909164010000000090910467ffffffffffffffff1690036120955763ffffffff86166000908152600260209081526040918290208054835164010000000090910467ffffffffffffffff16928101929092529101611fb6565b80546040805164010000000090920467ffffffffffffffff16602083015201611fe7565b60021963ffffffff841601612161576001600160a01b03808516600090815260036020908152604080832063ffffffff8a168452909152902080549091600160601b9091041661213f5763ffffffff861660009081526002602090815260409182902080548351600160601b9091046001600160a01b0316928101929092529101611fb6565b805460408051600160601b9092046001600160a01b0316602083015201611fe7565b61216c8585856135bf565b915091505b935093915050565b612181614889565b6060807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146121fe576040516387a6483960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152336024820152604401610f23565b60006122106080880160608901614f63565b905060006122246060890160408a016151fe565b9050600087516000036122d25763ffffffff83166000908152600460205260409020805461225190615280565b80601f016020809104026020016040519081016040528092919081815260200182805461227d90615280565b80156122ca5780601f1061229f576101008083540402835291602001916122ca565b820191906000526020600020905b8154815290600101906020018083116122ad57829003601f168201915b505050505097505b60608060008a51111561233a576122e88a612d81565b9150600161ffff1682600081518110612303576123036152ba565b60200260200101516000015161ffff160361233a578160008151811061232b5761232b6152ba565b60200260200101516020015190505b6000612346858761266a565b9050600061235760a08e018e61521b565b9050905061236f81836000015163ffffffff16612d39565b81604001516001600160a01b031663717e8a42888884876040518563ffffffff1660e01b81526004016123a594939291906152d0565b6020604051808303816000875af11580156123c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e89190615304565b94508415612422576040808301516001600160a01b031660009081526005602052908120805487929061241c908490615333565b90915550505b60408083015181516001600160a01b039091168152602081018790527f489a11bf9dbfc4407f7d03d118ac6bc81743af9e1189f9d3dc336415fa49cc89910160405180910390a16124788d8584602001516135d4565b6124829086615333565b9450505050506000806124b57f00000000000000000000000000000000000000000000000000000000000000008c613671565b915091506124c1614889565b60006124d060208e018e61535d565b90508a6000806124e2898b8a86610f47565b9092509050811561252a576001546001600160a01b031660009081526005602052604081208054849290612517908490615333565b9091555061252790508289615333565b97505b6040805160608101825297885267ffffffffffffffff94909416602080890191909152845180860186529889528801525050830193909352909a9099509650505050505050565b6125796130ec565b60008267ffffffffffffffff1611801561259b57506001600160a01b03811615155b6125d15760405162461bcd60e51b815260206004820152600760248201526604c5a31303030360cc1b6044820152606401610f23565b60008363ffffffff16116126115760405162461bcd60e51b81526020600482015260076024820152664c5a313030303960c81b6044820152606401610f23565b63ffffffff938416600090815260026020526040902067ffffffffffffffff909216640100000000026001600160a01b03909116600160601b026bffffffffffffffffffffffff19169290931691909117919091179055565b6040805160608082018352600080835260208084018290528385018290526001600160a01b0387811683526003825285832063ffffffff88811680865291845287852088518088018a529054808316825267ffffffffffffffff640100000000808304821684890152600160601b928390048716848d0152948852600287528a88208b51998a018c52548085168a529485041695880195909552939091049091169584019590955280519394909316900361272a57805163ffffffff1682525b816020015167ffffffffffffffff166000036127555760208082015167ffffffffffffffff16908301525b60408201516001600160a01b0316611621576040908101516001600160a01b0316908201529392505050565b6040805183151581526020810183905233917ff70f667bf53155c301a4abbdadaabddfbd3afbabbefc7e7ca6ad37b81756c609910160405180910390a25050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331461283c576040516387a6483960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166004820152336024820152604401610f23565b6128478383836136f5565b610f428383836137d1565b61285a6130ec565b63ffffffff83166000908152600460205260409020611f3e828483615509565b6004602052600090815260409020805461289390615280565b80601f01602080910402602001604051908101604052809291908181526020018280546128bf90615280565b801561290c5780601f106128e15761010080835404028352916020019161290c565b820191906000526020600020905b8154815290600101906020018083116128ef57829003601f168201915b505050505081565b61291c6130ec565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f3e0132600000000000000000000000000000000000000000000000000000000060048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015612999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129bd919061549e565b612a095760405162461bcd60e51b815260206004820152600760248201527f4c5a4330303031000000000000000000000000000000000000000000000000006044820152606401610f23565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b612a406130ec565b6001600160a01b038116612abc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610f23565b612ac581613562565b50565b6001600160a01b038216612b085760405162461bcd60e51b815260206004820152600760248201526604c5a31303030360cc1b6044820152606401610f23565b33600090815260056020526040902054811115612b675760405162461bcd60e51b815260206004820152600760248201527f4c5a3130303033000000000000000000000000000000000000000000000000006044820152606401610f23565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f936112b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612beb9190615481565b33600090815260056020526040812080549293506001600160a01b038416151592859290612c1a9084906155c9565b90915550508015612cb7576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820185905283169063a9059cbb906044016020604051808303816000875af1158015612c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb1919061549e565b50612cef565b6040516001600160a01b0385169084156108fc029085906000818181858888f19350505050158015612ced573d6000803e3d6000fd5b505b604080516001600160a01b03861681526020810185905233917ff15a0a3784dea9b4fe33bc98e2450745e262d310237b2868ea8ef56967ff3ecb910160405180910390a250505050565b80821115612d7d576040517ff001cc650000000000000000000000000000000000000000000000000000000081526004810182905260248101839052604401610f23565b5050565b60606000612d8f83826137dc565b905061ffff811660011480612da8575061ffff81166002145b15612dc5576000612dbd8261ffff1685613842565b949350505050565b8061ffff16600303612fac576000612dde8460026137dc565b905060008161ffff1667ffffffffffffffff811115612dff57612dff614950565b604051908082528060200260200182016040528015612e4557816020015b604080518082019091526000815260606020820152815260200190600190039081612e1d5790505b50905060046000805b8461ffff16811015612f66576000612e6689856137dc565b9050612e73600285615333565b9350811580612e8957508261ffff168161ffff16115b612ed55760405162461bcd60e51b815260206004820152600760248201527f4c5a3130303036000000000000000000000000000000000000000000000000006044820152606401610f23565b9150816000612ee48a866137dc565b9050612ef1600286615333565b945060405180604001604052808361ffff168152602001612f21878461ffff168e613aeb9092919063ffffffff16565b815250868481518110612f3657612f366152ba565b6020908102919091010152612f4f61ffff821686615333565b945050508080612f5e906155dc565b915050612e4e565b5086518214612fa15760405162461bcd60e51b81526020600482015260076024820152664c5a313030303960c81b6044820152606401610f23565b509095945050505050565b60405162461bcd60e51b815260206004820152600760248201527f4c5a4330303030000000000000000000000000000000000000000000000000006044820152606401610f23565b6000806130018686611269565b90506000613010856002613c13565b9250505061302a8260c00151836060015189898589613cae565b6130349084615333565b925061304c8260e00151836080015189898589613cae565b6130569084615333565b979650505050505050565b60005b82811015611f3e576000848483818110613080576130806152ba565b90506020020160208101906130959190614f63565b6001600160a01b038416600090815260036020908152604080832063ffffffff90941683529290529081205550806130cc816155dc565b915050613064565b610f42838383613d73565b6112628585858585613e2a565b6000546001600160a01b03163314611c615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f23565b6000805b82811015611f3e576000848281518110613166576131666152ba565b60200260200101519050826001600160a01b0316816001600160a01b0316116131d15760405162461bcd60e51b815260206004820152600760248201527f4c5a3130303036000000000000000000000000000000000000000000000000006044820152606401610f23565b9150806131dd816155dc565b91505061314a565b60006131f76131f48484614176565b90565b9392505050565b600061320e600d600984866155f6565b61321791615620565b60e01c9392505050565b60006051831461325d5760405162461bcd60e51b81526020600482015260076024820152664c5a313030303960c81b6044820152606401610f23565b7f000000000000000000000000000000000000000000000000000000000000000060ff1661328b8585614186565b60ff16146132db5760405162461bcd60e51b815260206004820152600760248201527f4c5a3130303037000000000000000000000000000000000000000000000000006044820152606401610f23565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1661330c85856141a8565b63ffffffff161461335f5760405162461bcd60e51b815260206004820152600760248201527f4c5a3130303038000000000000000000000000000000000000000000000000006044820152606401610f23565b60008484604051613371929190615405565b604051908190039020865190915060005b876060015161ffff1681101561341c5760008860c0015182815181106133aa576133aa6152ba565b60209081029190910181015160008681526008835260408082208a835284528082206001600160a01b0384168352909352919091205490915067ffffffffffffffff90811690841681101561340757600095505050505050612dbd565b50508080613414906155dc565b915050613382565b506000876060015161ffff1611801561343b5750608087015161ffff16155b1561344b57600192505050612dbd565b6000805b886080015161ffff168110156135055760008960e001518281518110613477576134776152ba565b60209081029190910181015160008781526008835260408082208b835284528082206001600160a01b0384168352909352919091205490915067ffffffffffffffff90811690851681106134f057836134cf816155dc565b9450508a60a0015161ffff1684106134f05760019650505050505050612dbd565b505080806134fd906155dc565b91505061344f565b50600098975050505050505050565b6000613524602d600d84866155f6565b6131f791615668565b600061353d6009600184866155f6565b61354691615686565b60c01c9392505050565b60606131f7838363ffffffff166141b8565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600061216c85858563ffffffff1661423f565b6000806135e760608601604087016151fe565b905060006135ff826104c66080890160608a01614f63565b9050600061360e866002613c13565b9250505061363a8260c001518360600151858a60600160208101906136339190614f63565b858a61438f565b6136449085615333565b93506136678260e001518360800151858a60600160208101906136339190614f63565b6130569085615333565b6000606081613683602085018561535d565b61368c85614559565b60405160200161369d9291906156cc565b60408051601f1981840301815291905280516020820120935090508481846136c860a088018861521b565b6040516020016136dc959493929190615717565b6040516020818303038152906040529150509250929050565b60005b82811015611f3e576000848483818110613714576137146152ba565b90506020020160208101906137299190614f63565b90506000613737848361266a565b6001600160a01b03858116600090815260036020908152604080832063ffffffff978816845282529182902084518154928601519590930151909316600160601b026bffffffffffffffffffffffff67ffffffffffffffff909516640100000000026bffffffffffffffffffffffff19909216929096169190911717919091169290921790915550806137c9816155dc565b9150506136f8565b610f428383836145fd565b60006137e9826002615333565b835110156138395760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152606401610f23565b50016002015190565b604080516001808252818301909252606091816020015b604080518082019091526000815260606020820152815260200190600190039081613859579050509050606060001984016139455782516022146138c95760405162461bcd60e51b81526020600482015260076024820152664c5a313030303960c81b6044820152606401610f23565b60006138d68460026147b1565b6040517e010000000000000000000000000000000000000000000000000000000000006020820152909150602201604051602081830303815290604052915081600160208360405160200161392e949392919061577b565b604051602081830303815290604052915050613aac565b6001198401612fac576042835111801561396157506062835111155b6139975760405162461bcd60e51b81526020600482015260076024820152664c5a313030303960c81b6044820152606401610f23565b60006139a48460026147b1565b905060006139b38560226147b1565b90506000604286516139c591906155c9565b905060006139d587604284613aeb565b6139de906157d4565b90506139eb8260206155c9565b6139f6906008615346565b6040805160208082018790529390921c8282018190528151808403830181526060840183527e0200000000000000000000000000000000000000000000000000000000000060808501528251606281860301815260828501909352919750929091613a6b91889160019190899060a20161577b565b6040516020818303038152906040529550856002825183604051602001613a9594939291906157f8565b604051602081830303815290604052955050505050505b6040518060400160405280600161ffff1681526020018281525082600081518110613ad957613ad96152ba565b60200260200101819052505092915050565b606081613af981601f615333565b1015613b475760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610f23565b613b518284615333565b84511015613ba15760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610f23565b606082158015613bc05760405191506000825260208201604052613c0a565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015613bf9578051835260209283019201613be1565b5050858452601f01601f1916604052505b50949350505050565b600080606060005b8551811015613c8f578461ffff16868281518110613c3b57613c3b6152ba565b60200260200101516000015161ffff1603613c7d57600181878381518110613c6557613c656152ba565b60200260200101516020015193509350935050613ca7565b80613c87816155dc565b915050613c1b565b50506040805160208101909152600080825292508291505b9250925092565b6000805b8661ffff16811015613d6857878181518110613cd057613cd06152ba565b60200260200101516001600160a01b03166330bb3aac868589886040518563ffffffff1660e01b8152600401613d099493929190615865565b602060405180830381865afa158015613d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4a9190615304565b613d549083615333565b915080613d60816155dc565b915050613cb2565b509695505050505050565b60005b82811015611f3e576000848483818110613d9257613d926152ba565b9050602002016020810190613da79190614f63565b6001600160a01b038416600090815260066020908152604080832063ffffffff85168452909152812080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000168155919250613e0660018301826148d1565b613e146002830160006148d1565b5050508080613e22906155dc565b915050613d76565b6001600160a01b038416600090815260066020908152604080832063ffffffff8981168552925290912090841660031901613e90576000613e6d8385018561535d565b825467ffffffffffffffff191667ffffffffffffffff9190911617825550614124565b60041963ffffffff851601613f9257600080613eae84860186615921565b80519193509150600083613ec3578115613eca565b61ffff8211155b905080613f035760405162461bcd60e51b81526020600482015260076024820152664c5a313030303960c81b6044820152606401610f23565b613f0d8383613146565b84546bffff0000000000000000000019166a010000000000000000000061ffff8416021785558251613f489060018701906020860190614817565b5084547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff166801000000000000000085151502178555613f88898b611269565b5050505050614124565b60051963ffffffff851601612fac5760008080613fb185870187615971565b81519295509093509150600084613fc9578115613fd0565b61ffff8211155b9050806140095760405162461bcd60e51b81526020600482015260076024820152664c5a313030303960c81b6044820152606401610f23565b818361ffff16111561405d5760405162461bcd60e51b815260206004820152600760248201527f4c5a3130303033000000000000000000000000000000000000000000000000006044820152606401610f23565b6140678483613146565b85547fffffffffffffffffffffffffffffffffffff0000ffffffffffffffffffffffff16600160601b61ffff84160217865583516140ae9060028801906020870190614817565b5085547fffffffffffffffffffffffffffffffff0000ffffffff00ffffffffffffffffff16600160701b61ffff8516027fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff161769010000000000000000008615150217865561411d8a8c611269565b5050505050505b8363ffffffff16856001600160a01b03167f32a52e909bac91be27e4f3ddb96c51d9484dd2323a9f358d11ef8c35298196cc85856040516141669291906159c8565b60405180910390a3505050505050565b60006135246051603184866155f6565b600061419560018284866155f6565b61419e916159dc565b60f81c9392505050565b600061320e6031602d84866155f6565b63ffffffff8216600090815260076020526040902060609060031983016141f65780546040805167ffffffffffffffff909216602083015201611b8f565b60041983016142135780600101604051602001611b8f9190615a60565b6005198301612fac578054604051611b8f916002840191600160701b90910461ffff1690602001615a73565b6001600160a01b038216600090815260066020908152604080832063ffffffff87168452825280832060079092528220606092919060031985016142e257815467ffffffffffffffff166000036142ad5780546040805167ffffffffffffffff909216602083015201611fb6565b81546040805167ffffffffffffffff9092166020830152015b6040516020818303038152906040526000935093505050612171565b600419850161432957815468010000000000000000900460ff161561431557816001016040516020016142c69190615a60565b80600101604051602001611fb69190615a60565b6005198501612fac5781546901000000000000000000900460ff161561436c5781546040516142c6916002850191600160701b90910461ffff1690602001615a73565b8054604051611fb6916002840191600160701b90910461ffff1690602001615a73565b6000808661ffff1667ffffffffffffffff8111156143af576143af614950565b6040519080825280602002602001820160405280156143d8578160200160208202803683370190505b50905060005b8761ffff168110156145145760008982815181106143fe576143fe6152ba565b60200260200101516001600160a01b031663e4fbd90388878b8a6040518563ffffffff1660e01b81526004016144379493929190615865565b6020604051808303816000875af1158015614456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061447a9190615304565b90508083838151811061448f5761448f6152ba565b602090810291909101015280156145015780600560008c85815181106144b7576144b76152ba565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546144ee9190615333565b909155506144fe90508185615333565b93505b508061450c816155dc565b9150506143de565b507f4a4f9b55e84c19345500ad54202240b345f195977a3aa5cd6c4d108cf90f8f808882604051614546929190615a99565b60405180910390a1509695505050505050565b606061456b6040830160208401614f63565b61458a61457e60608501604086016151fe565b6001600160a01b031690565b61459a6080850160608601614f63565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e094851b811660208301526024820193909352921b166044820152608083013560488201526068016040516020818303038152906040529050919050565b60005b82811015611f3e57600084848381811061461c5761461c6152ba565b90506020020160208101906146319190614f63565b9050600061463f8483611269565b6001600160a01b038516600090815260066020908152604080832063ffffffff871684528252918290208351815483860151948601516060870151608088015160a089015161ffff908116600160701b027fffffffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffff928216600160601b02929092167fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff919093166a0100000000000000000000026bffff0000000000000000000019941515690100000000000000000002949094166bffffff00000000000000000019991515680100000000000000000268ffffffffffffffffff1990961667ffffffffffffffff9097169690961794909417979097169390931717161792909217825560c08301518051939450849361477c9260018501920190614817565b5060e08201518051614798916002840191602090910190614817565b50905050505080806147a9906155dc565b915050614600565b60006147be826020615333565b8351101561480e5760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e647300000000000000000000006044820152606401610f23565b50016020015190565b828054828255906000526020600020908101928215614879579160200282015b82811115614879578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190614837565b506148859291506148eb565b5090565b604051806060016040528060008019168152602001600067ffffffffffffffff1681526020016148cc604051806040016040528060008152602001600081525090565b905290565b5080546000825590600052602060002090810190612ac591905b5b8082111561488557600081556001016148ec565b60006020828403121561491257600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146131f757600080fd5b8015158114612ac557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561498f5761498f614950565b604052919050565b600082601f8301126149a857600080fd5b813567ffffffffffffffff8111156149c2576149c2614950565b6149d56020601f19601f84011601614966565b8181528460208386010111156149ea57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215614a1c57600080fd5b833567ffffffffffffffff80821115614a3457600080fd5b9085019060608288031215614a4857600080fd5b909350602085013590614a5a82614942565b90925060408501359080821115614a7057600080fd5b50614a7d86828701614997565b9150509250925092565b815181526020808301519082015260408101610bf6565b60008083601f840112614ab057600080fd5b50813567ffffffffffffffff811115614ac857600080fd5b6020830191508360208260051b8501011115614ae357600080fd5b9250929050565b6001600160a01b0381168114612ac557600080fd5b600080600060408486031215614b1457600080fd5b833567ffffffffffffffff811115614b2b57600080fd5b614b3786828701614a9e565b9094509250506020840135614b4b81614aea565b809150509250925092565b803563ffffffff81168114614b6a57600080fd5b919050565b60008060008060808587031215614b8557600080fd5b8435614b9081614aea565b9350614b9e60208601614b56565b9250604085013591506060850135614bb581614942565b939692955090935050565b60008083601f840112614bd257600080fd5b50813567ffffffffffffffff811115614bea57600080fd5b602083019150836020828501011115614ae357600080fd5b600080600080600060808688031215614c1a57600080fd5b614c2386614b56565b94506020860135614c3381614aea565b9350614c4160408701614b56565b9250606086013567ffffffffffffffff811115614c5d57600080fd5b614c6988828901614bc0565b969995985093965092949392505050565b600080600060608486031215614c8f57600080fd5b83359250602084013591506040840135614b4b81614aea565b60008060408385031215614cbb57600080fd5b8235614cc681614aea565b9150614cd460208401614b56565b90509250929050565b600081518084526020808501945080840160005b83811015614d165781516001600160a01b031687529582019590820190600101614cf1565b509495945050505050565b6020815267ffffffffffffffff825116602082015260006020830151614d4b604084018215159052565b506040830151801515606084015250606083015161ffff8116608084015250608083015161ffff811660a08401525060a083015161ffff811660c08401525060c08301516101008060e0850152614da6610120850183614cdd565b915060e0850151601f198584030182860152614dc28382614cdd565b9695505050505050565b803567ffffffffffffffff81168114614b6a57600080fd5b803561ffff81168114614b6a57600080fd5b600080600080600080600060a0888a031215614e1157600080fd5b614e1a88614b56565b9650614e2860208901614dcc565b9550604088013567ffffffffffffffff80821115614e4557600080fd5b614e518b838c01614a9e565b909750955060608a0135915080821115614e6a57600080fd5b50614e778a828b01614a9e565b9094509250614e8a905060808901614de4565b905092959891949750929550565b600080600060408486031215614ead57600080fd5b833567ffffffffffffffff811115614ec457600080fd5b614ed086828701614bc0565b909790965060209590950135949350505050565b60008060408385031215614ef757600080fd5b614cc683614b56565b60005b83811015614f1b578181015183820152602001614f03565b50506000910152565b60008151808452614f3c816020860160208601614f00565b601f01601f19169290920160200192915050565b6020815260006131f76020830184614f24565b600060208284031215614f7557600080fd5b6131f782614b56565b60008060008060608587031215614f9457600080fd5b843567ffffffffffffffff811115614fab57600080fd5b614fb787828801614bc0565b90955093505060208501359150614fd060408601614dcc565b905092959194509250565b60008060408385031215614fee57600080fd5b8235614ff981614aea565b946020939093013593505050565b60008060006060848603121561501c57600080fd5b61502584614b56565b9250602084013561503581614aea565b915061504360408501614b56565b90509250925092565b60408152600061505f6040830185614f24565b905082151560208301529392505050565b60008060006060848603121561508557600080fd5b833567ffffffffffffffff8082111561509d57600080fd5b9085019060c082880312156150b157600080fd5b909350602085013590808211156150c757600080fd5b506150d486828701614997565b9250506040840135614b4b81614942565b8351815267ffffffffffffffff60208501511660208201526000604085015161511b604084018280518252602090810151910152565b5060c0608083015261513060c0830185614f24565b82810360a0840152614dc28185614f24565b6000806000806080858703121561515857600080fd5b61516185614b56565b935061516f60208601614b56565b925061517d60408601614dcc565b91506060850135614bb581614aea565b600080604083850312156151a057600080fd5b8235614ff981614942565b6000806000604084860312156151c057600080fd5b6151c984614b56565b9250602084013567ffffffffffffffff8111156151e557600080fd5b6151f186828701614bc0565b9497909650939450505050565b60006020828403121561521057600080fd5b81356131f781614aea565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261525057600080fd5b83018035915067ffffffffffffffff82111561526b57600080fd5b602001915036819003821315614ae357600080fd5b600181811c9082168061529457607f821691505b6020821081036152b457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b63ffffffff851681526001600160a01b0384166020820152826040820152608060608201526000614dc26080830184614f24565b60006020828403121561531657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610bf657610bf661531d565b8082028115828204841417610bf657610bf661531d565b60006020828403121561536f57600080fd5b6131f782614dcc565b8183526000602080850194508260005b85811015614d1657813561539b81614aea565b6001600160a01b031687529582019590820190600101615388565b67ffffffffffffffff871681526080602082015260006153da608083018789615378565b82810360408401526153ed818688615378565b91505061ffff83166060830152979650505050505050565b8183823760009101908152919050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6001600160a01b0386168152608060208201526000615463608083018688615415565b67ffffffffffffffff94909416604083015250606001529392505050565b60006020828403121561549357600080fd5b81516131f781614aea565b6000602082840312156154b057600080fd5b81516131f781614942565b601f821115610f4257600081815260208120601f850160051c810160208610156154e25750805b601f850160051c820191505b81811015615501578281556001016154ee565b505050505050565b67ffffffffffffffff83111561552157615521614950565b6155358361552f8354615280565b836154bb565b6000601f84116001811461556957600085156155515750838201355b600019600387901b1c1916600186901b178355611262565b600083815260209020601f19861690835b8281101561559a578685013582556020948501946001909201910161557a565b50868210156155b75760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81810381811115610bf657610bf661531d565b600060001982036155ef576155ef61531d565b5060010190565b6000808585111561560657600080fd5b8386111561561357600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156156605780818660040360031b1b83161692505b505092915050565b80356020831015610bf657600019602084900360031b1b1692915050565b7fffffffffffffffff00000000000000000000000000000000000000000000000081358181169160088510156156605760089490940360031b84901b1690921692915050565b7fffffffffffffffff0000000000000000000000000000000000000000000000008360c01b16815260008251615709816008850160208701614f00565b919091016008019392505050565b7fff000000000000000000000000000000000000000000000000000000000000008660f81b16815260008551615754816001850160208a01614f00565b80830190508560018201528385602183013760009301602101928352509095945050505050565b6000855161578d818460208a01614f00565b7fffff00000000000000000000000000000000000000000000000000000000000060f096871b8116919093019081529390941b166002830152600482015260240192915050565b805160208083015191908110156152b45760001960209190910360031b1b16919050565b6000855161580a818460208a01614f00565b80830190507fffff000000000000000000000000000000000000000000000000000000000000808760f01b168252808660f01b166002830152508351615857816004840160208801614f00565b016004019695505050505050565b63ffffffff8516815267ffffffffffffffff841660208201526001600160a01b0383166040820152608060608201526000614dc26080830184614f24565b600082601f8301126158b457600080fd5b8135602067ffffffffffffffff8211156158d0576158d0614950565b8160051b6158df828201614966565b92835284810182019282810190878511156158f957600080fd5b83870192505b8483101561305657823561591281614aea565b825291830191908301906158ff565b6000806040838503121561593457600080fd5b823561593f81614942565b9150602083013567ffffffffffffffff81111561595b57600080fd5b615967858286016158a3565b9150509250929050565b60008060006060848603121561598657600080fd5b833561599181614942565b9250602084013567ffffffffffffffff8111156159ad57600080fd5b6159b9868287016158a3565b92505061504360408501614de4565b602081526000612dbd602083018486615415565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156156605760019490940360031b84901b1690921692915050565b6000815480845260208085019450836000528060002060005b83811015614d165781546001600160a01b031687529582019560019182019101615a3b565b6020815260006131f76020830184615a22565b604081526000615a866040830185615a22565b905061ffff831660208301529392505050565b604080825283519082018190526000906020906060840190828701845b82811015615adb5781516001600160a01b031684529284019290840190600101615ab6565b5050508381038285015284518082528583019183019060005b81811015615b1057835183529284019291840191600101615af4565b509097965050505050505056fea2646970667358221220030d76c9feb3a01e1419619b27cf7538cb753156109097806f5fd5100a6dae7364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "notice(bool,uint256)": {
        "notice": "---------------------- PUBLIC FUNCTIONS ----------------------"
      },
      "quote((address,uint32,bytes),bool,bytes)": {
        "notice": "---------------------- VIEW FUNCTIONS ----------------------"
      },
      "send((uint64,uint32,address,uint32,bytes32,bytes),bytes,bool)": {
        "notice": "---------------------- ONLY ENDPOINT ----------------------"
      },
      "setTreasury(address)": {
        "notice": "---------------------- ONLY OWNER ----------------------"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4328,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5756,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5761,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "defaultOutboundConfig",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_struct(OutboundConfig)5783_storage)"
      },
      {
        "astId": 5768,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "outboundConfig",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(OutboundConfig)5783_storage))"
      },
      {
        "astId": 5772,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "defaultOptions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_bytes_storage)"
      },
      {
        "astId": 5776,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "fees",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10481,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "ulnConfig",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Config)10443_storage))"
      },
      {
        "astId": 10486,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "defaultUlnConfig",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint32,t_struct(Config)10443_storage)"
      },
      {
        "astId": 11230,
        "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
        "label": "hashLookup",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Config)10443_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct UlnConfig.Config))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Config)10443_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(OutboundConfig)5783_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct MessageLibBase.OutboundConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(OutboundConfig)5783_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint64)"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_address,t_uint64)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => mapping(address => uint64)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_uint64))"
      },
      "t_mapping(t_uint32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint32,t_struct(Config)10443_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct UlnConfig.Config)",
        "numberOfBytes": "32",
        "value": "t_struct(Config)10443_storage"
      },
      "t_mapping(t_uint32,t_struct(OutboundConfig)5783_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct MessageLibBase.OutboundConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(OutboundConfig)5783_storage"
      },
      "t_struct(Config)10443_storage": {
        "encoding": "inplace",
        "label": "struct UlnConfig.Config",
        "members": [
          {
            "astId": 10426,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "inboundConfirmations",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 10428,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "useCustomOracles",
            "offset": 8,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10430,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "useCustomOptionalOracles",
            "offset": 9,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10432,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "oraclesCount",
            "offset": 10,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10434,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "optionalOraclesCount",
            "offset": 12,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10436,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "optionalOraclesThreshold",
            "offset": 14,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 10439,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "oracles",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10442,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "optionalOracles",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(OutboundConfig)5783_storage": {
        "encoding": "inplace",
        "label": "struct MessageLibBase.OutboundConfig",
        "members": [
          {
            "astId": 5778,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "maxMessageSize",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5780,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "outboundConfirmations",
            "offset": 4,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5782,
            "contract": "contracts/uln/UltraLightNode302.sol:UltraLightNode302",
            "label": "relayer",
            "offset": 12,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}