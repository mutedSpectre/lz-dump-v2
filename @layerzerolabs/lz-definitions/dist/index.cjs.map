{"version":3,"sources":["../src/enums/chain.ts","../src/enums/chain-type.ts","../src/enums/endpoint-id.ts","../src/enums/environment.ts","../src/enums/stage.ts","../src/enums/endpoint-version.ts","../src/enums/message-lib.ts","../src/enums/chain-key.ts","../src/constants/chainKey.ts","../src/constants/environment.ts","../src/constants/ulnv1.ts","../src/constants/stargate.ts","../src/utils/utils.ts"],"names":["Chain","ChainType","MainnetEndpointId","TestnetEndpointId","SandboxEndpointId","MainnetV2EndpointId","TestnetV2EndpointId","SandboxV2EndpointId","Environment","Stage","EndpointVersion","MessageLibVersionV2","MessageLibVersionV1","ChainKey","chain","stage"],"mappings":"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","sourcesContent":["export enum Chain {\n    ETHEREUM = 'ethereum',\n    BSC = 'bsc',\n    AVALANCHE = 'avalanche',\n    POLYGON = 'polygon',\n    ZKPOLYGON = 'zkpolygon',\n    ARBITRUM = 'arbitrum',\n    OPTIMISM = 'optimism',\n    FANTOM = 'fantom',\n    SWIMMER = 'swimmer',\n    DFK = 'dfk',\n    HARMONY = 'harmony',\n    ARCANA = 'arcana',\n    DEXALOT = 'dexalot',\n    CASTLECRUSH = 'castlecrush',\n    GNOSIS = 'gnosis',\n    CELO = 'celo',\n    MOONBEAM = 'moonbeam',\n    BOBA = 'boba',\n    PORTAL = 'portal',\n    AURORA = 'aurora',\n    INTAIN = 'intain',\n    FUSE = 'fuse',\n    ASTAR = 'astar',\n    ZKSYNC = 'zksync',\n    SHRAPNEL = 'shrapnel',\n    DOS = 'dos',\n    APTOS = 'aptos',\n    KLAYTN = 'klaytn',\n    METIS = 'metis',\n    COREDAO = 'coredao',\n    OKX = 'okx',\n    METER = 'meter',\n    GOERLI = 'goerli',\n    SOLANA = 'solana',\n    BASE = 'base',\n    ZKCONSENSYS = 'zkconsensys',\n    SEPOLIA = 'sepolia',\n    MOONRIVER = 'moonriver',\n    AAVEGOTCHI = 'aavegotchi',\n    SCROLL = 'scroll',\n    CATHAY = 'cathay',\n    KAVA = 'kava',\n    TENET = 'tenet',\n    CANTO = 'canto',\n    ORDERLY = 'orderly',\n    NOVA = 'nova',\n    BLOCKGEN = 'blockgen',\n    MERITCIRCLE = 'meritcircle',\n    MANTLE = 'mantle',\n    HUBBLE = 'hubble',\n}\n","export enum ChainType {\n    UNKNOWN = 'unknown',\n    EVM = 'evm',\n    APTOS = 'aptos',\n    SOLANA = 'solana',\n}\n","export enum MainnetEndpointId {\n    ETHEREUM_MAINNET = 101,\n    BSC_MAINNET = 102,\n    AVALANCHE_MAINNET = 106,\n    POLYGON_MAINNET = 109,\n    ARBITRUM_MAINNET = 110,\n    OPTIMISM_MAINNET = 111,\n    FANTOM_MAINNET = 112,\n    SWIMMER_MAINNET = 114,\n    DFK_MAINNET = 115,\n    HARMONY_MAINNET = 116,\n    DEXALOT_MAINNET = 118,\n    CELO_MAINNET = 125,\n    MOONBEAM_MAINNET = 126,\n    INTAIN_MAINNET = 152,\n    FUSE_MAINNET = 138,\n    GNOSIS_MAINNET = 145,\n    APTOS_MAINNET = 108,\n    KLAYTN_MAINNET = 150,\n    METIS_MAINNET = 151,\n    COREDAO_MAINNET = 153,\n    GOERLI_MAINNET = 154,\n    OKX_MAINNET = 155,\n    CANTO_MAINNET = 159,\n    ZKSYNC_MAINNET = 165,\n    SHRAPNEL_MAINNET = 148,\n    DOS_MAINNET = 149,\n    ZKPOLYGON_MAINNET = 158,\n    SEPOLIA_MAINNET = 161,\n    MOONRIVER_MAINNET = 167,\n    SOLANA_MAINNET = 168,\n    TENET_MAINNET = 173,\n    NOVA_MAINNET = 175,\n    METER_MAINNET = 176,\n    KAVA_MAINNET = 177,\n    MANTLE_MAINNET = 181,\n    HUBBLE_MAINNET = 182,\n    ZKCONSENSYS_MAINNET = 183,\n    BASE_MAINNET = 184,\n}\n\nexport enum TestnetEndpointId {\n    BSC_TESTNET = 10102,\n    AVALANCHE_TESTNET = 10106,\n    POLYGON_TESTNET = 10109,\n    FANTOM_TESTNET = 10112,\n    SWIMMER_TESTNET = 10130,\n    DFK_TESTNET = 10115,\n    HARMONY_TESTNET = 10133,\n    DEXALOT_TESTNET = 10118,\n    CELO_TESTNET = 10125,\n    MOONBEAM_TESTNET = 10126,\n    INTAIN_TESTNET = 10152,\n    ETHEREUM_TESTNET = 10121,\n    ARBITRUM_TESTNET = 10143,\n    OPTIMISM_TESTNET = 10132,\n    FUSE_TESTNET = 10138,\n    GNOSIS_TESTNET = 10145,\n    ZKSYNC_TESTNET = 10165,\n    SHRAPNEL_TESTNET = 10164,\n    DOS_TESTNET = 10162,\n    APTOS_TESTNET = 10108,\n    KLAYTN_TESTNET = 10150,\n    METIS_TESTNET = 10151,\n    COREDAO_TESTNET = 10153,\n    OKX_TESTNET = 10155,\n    METER_TESTNET = 10156,\n    ZKCONSENSYS_TESTNET = 10157, // later named: Linea\n    ZKPOLYGON_TESTNET = 10158,\n    CANTO_TESTNET = 10159,\n    BASE_TESTNET = 10160,\n    SEPOLIA_TESTNET = 10161,\n    // MOONRIVER_TESTNET = 10166,\n    SOLANA_TESTNET = 10168,\n    // AAVEGOTCHI_TESTNET = 10169,\n    SCROLL_TESTNET = 10170,\n    CATHAY_TESTNET = 10171,\n    KAVA_TESTNET = 10172,\n    TENET_TESTNET = 10173,\n    ORDERLY_TESTNET = 10174,\n    BLOCKGEN_TESTNET = 10177,\n    MERITCIRCLE_TESTNET = 10178,\n    // AAVEGOTCHI_TESTNET = 10180,\n    MANTLE_TESTNET = 10181,\n    HUBBLE_TESTNET = 10182,\n\n    AAVEGOTCHI_TESTNET = 10190,\n}\n\nexport enum SandboxEndpointId {\n    BSC_SANDBOX = 20102,\n    AVALANCHE_SANDBOX = 20106,\n    POLYGON_SANDBOX = 20109,\n    ETHEREUM_SANDBOX = 20121,\n    APTOS_SANDBOX = 20008,\n}\n\nexport enum MainnetV2EndpointId {\n    ETHEREUM_V2_MAINNET = 30101,\n\n    BSC_V2_MAINNET = 30102,\n    AVALANCHE_V2_MAINNET = 30106,\n    POLYGON_V2_MAINNET = 30109,\n    ARBITRUM_V2_MAINNET = 30110,\n    OPTIMISM_V2_MAINNET = 30111,\n    FANTOM_V2_MAINNET = 30112,\n    SWIMMER_V2_MAINNET = 30114,\n    DFK_V2_MAINNET = 30115,\n    HARMONY_V2_MAINNET = 30116,\n    DEXALOT_V2_MAINNET = 30118,\n    CELO_V2_MAINNET = 30125,\n    MOONBEAM_V2_MAINNET = 30126,\n    INTAIN_V2_MAINNET = 30152,\n    FUSE_V2_MAINNET = 30138,\n    GNOSIS_V2_MAINNET = 30145,\n    APTOS_V2_MAINNET = 30108,\n    KLAYTN_V2_MAINNET = 30150,\n    METIS_V2_MAINNET = 30151,\n    COREDAO_V2_MAINNET = 30153,\n    GOERLI_V2_MAINNET = 30154,\n    OKX_V2_MAINNET = 30155,\n    CANTO_V2_MAINNET = 30159,\n    ZKSYNC_V2_MAINNET = 30165,\n    SHRAPNEL_V2_MAINNET = 30148,\n    DOS_V2_MAINNET = 30149,\n    ZKPOLYGON_V2_MAINNET = 30158,\n    SEPOLIA_V2_MAINNET = 30161,\n    MOONRIVER_V2_MAINNET = 30167,\n    SOLANA_V2_MAINNET = 30168,\n    TENET_V2_MAINNET = 30173,\n    NOVA_V2_MAINNET = 30175,\n    METER_V2_MAINNET = 30176,\n    KAVA_V2_MAINNET = 30177,\n    MANTLE_V2_MAINNET = 30181,\n    HUBBLE_V2_MAINNET = 30182,\n    ZKCONSENSYS_V2_MAINNET = 30183, // Linea\n    BASE_V2_MAINNET = 30184,\n}\n\nexport enum TestnetV2EndpointId {\n    AVALANCHE_V2_TESTNET = 40106,\n    POLYGON_V2_TESTNET = 40109,\n    ETHEREUM_V2_TESTNET = 40121,\n    OPTIMISM_V2_TESTNET = 40132,\n    ARBITRUM_V2_TESTNET = 40143,\n    SOLANA_V2_TESTNET = 40168,\n\n    BSC_V2_TESTNET = 40102,\n    FANTOM_V2_TESTNET = 40112,\n    DFK_V2_TESTNET = 40115,\n    HARMONY_V2_TESTNET = 40133,\n    DEXALOT_V2_TESTNET = 40118,\n    CELO_V2_TESTNET = 40125,\n    MOONBEAM_V2_TESTNET = 40126,\n    FUSE_V2_TESTNET = 40138,\n    GNOSIS_V2_TESTNET = 40145,\n    ZKSYNC_V2_TESTNET = 40165,\n    SHRAPNEL_V2_TESTNET = 40164,\n    DOS_V2_TESTNET = 40162,\n    KLAYTN_V2_TESTNET = 40150,\n    METIS_V2_TESTNET = 40151,\n    COREDAO_V2_TESTNET = 40153,\n    OKX_V2_TESTNET = 40155,\n    METER_V2_TESTNET = 40156,\n    ZKCONSENSYS_V2_TESTNET = 40157,\n    ZKPOLYGON_V2_TESTNET = 40158,\n    CANTO_V2_TESTNET = 40159,\n    BASE_V2_TESTNET = 40160,\n    SEPOLIA_V2_TESTNET = 40161,\n    AAVEGOTCHI_V2_TESTNET = 40179,\n    SCROLL_V2_TESTNET = 40170,\n    CATHAY_V2_TESTNET = 40171,\n    KAVA_V2_TESTNET = 40172,\n    TENET_V2_TESTNET = 40173,\n    ORDERLY_V2_TESTNET = 40174,\n    BLOCKGEN_V2_TESTNET = 40177,\n    MERITCIRCLE_V2_TESTNET = 40178,\n    MANTLE_V2_TESTNET = 40181,\n    HUBBLE_V2_TESTNET = 40182,\n}\n\nexport enum SandboxV2EndpointId {\n    ETHEREUM_V2_SANDBOX = 50121,\n    POLYGON_V2_SANDBOX = 50109,\n    SOLANA_V2_SANDBOX = 50168,\n    BSC_V2_SANDBOX = 50102,\n    AVALANCHE_V2_SANDBOX = 50106,\n}\n\nexport const EndpointId = {\n    ...MainnetEndpointId,\n    ...TestnetEndpointId,\n    ...SandboxEndpointId,\n    ...MainnetV2EndpointId,\n    ...TestnetV2EndpointId,\n    ...SandboxV2EndpointId,\n}\nexport type EndpointId =\n    | MainnetEndpointId\n    | TestnetEndpointId\n    | SandboxEndpointId\n    | MainnetV2EndpointId\n    | TestnetV2EndpointId\n    | SandboxV2EndpointId\n","export enum Environment {\n    LOCAL = 'local',\n    DEVNET = 'devnet',\n    TESTNET = 'testnet',\n    MAINNET = 'mainnet',\n}\n","export enum Stage {\n    MAINNET = 'mainnet',\n    TESTNET = 'testnet',\n    SANDBOX = 'sandbox',\n}\n","export enum EndpointVersion {\n    V1 = 'v1',\n    V2 = 'v2',\n}\n","export enum MessageLibVersionV2 {\n    SIMPLE = '0.0.2',\n    ULTRA_LIGHT_NODE_302 = '3.0.2',\n}\n\nexport enum MessageLibVersionV1 {\n    ULTRA_LIGHT_NODE_301 = '3.0.1',\n    ULTRA_LIGHT_NODE_201 = '2.0.1',\n}\n\nexport type MessageLibVersion = MessageLibVersionV2 | MessageLibVersionV1\n","export enum ChainKey {\n    ETHEREUM = 'ethereum',\n    GOERLI = 'goerli',\n    SEPOLIA = 'sepolia',\n    BSC = 'bsc',\n    BSC_TESTNET = 'bsc-testnet',\n    AVALANCHE = 'avalanche',\n    FUJI = 'fuji',\n    POLYGON = 'polygon',\n    MUMBAI = 'mumbai',\n    ARBITRUM = 'arbitrum',\n    ARBITURM_GOERLI = 'arbitrum-goerli',\n    OPTIMISM = 'optimism',\n    OPTIMISM_GOERLI = 'optimism-goerli',\n    FANTOM = 'fantom',\n    FANTOM_TESTNET = 'fantom-testnet',\n    SWIMMER = 'swimmer',\n    SWIMMER_TESTNET = 'swimmer-testnet',\n    DFK = 'dfk',\n    DFK_TESTNET = 'dfk-testnet',\n    HARMONY = 'harmony',\n    HARMONY_TESTNET = 'harmony-testnet',\n    DEXALOT = 'dexalot',\n    DEVALOT_TESTNET = 'dexalot-testnet',\n    CELO = 'celo',\n    ALFAJORES = 'alfajores',\n    MOONBEAM = 'moonbeam',\n    MOONBASE = 'moonbase',\n    MOONRIVER = 'moonriver',\n    INTAIN = 'intain',\n    INTAIN_TESTNET = 'intain-testnet',\n    FUSE = 'fuse',\n    FUSESPARK = 'fusespark',\n    GNOSIS = 'gnosis',\n    CHIADO = 'chiado',\n    APTOS = 'aptos',\n    APTOS_TESTNET = 'aptos-testnet',\n    KLAYTN = 'klaytn',\n    KLAYTN_BAOBAB = 'klaytn-baobab',\n    METIS = 'metis',\n    METIS_GOERLI = 'metis-goerli',\n    COREDAO = 'coredao',\n    COREDAO_TESTNET = 'coredao-testnet',\n    METER = 'meter',\n    METER_TESTNET = 'meter-testnet',\n    OKX = 'okx',\n    OKX_TESTNET = 'okx-testnet',\n    ZKSYNC = 'zksync',\n    ZKSYNC_TESTNET = 'zksync-testnet',\n    SHRAPNEL = 'shrapnel',\n    SHRAPNEL_TESTNET = 'shrapnel-testnet',\n    DOS = 'dos',\n    DOS_TESTNET = 'dos-testnet',\n    ZKEVM = 'zkevm',\n    ZKEVM_TESTNET = 'zkevm-testnet',\n    NOVA = 'nova',\n    TENET = 'tenet',\n    TENET_TESTNET = 'tenet-testnet',\n    CANTO = 'canto',\n    CANTO_TESTNET = 'canto-testnet',\n    KAVA = 'kava',\n    KAVA_TESTNET = 'kava-testnet',\n    SOLANA = 'solana',\n    SOLANA_TESTNET = 'solana-testnet',\n    LINEA_GOERLI = 'linea-goerli',\n    BASE_GOERLI = 'base-goerli',\n    AAVEGOTCHI_TESTNET = 'aavegotchi-testnet',\n    SCROLL_TESTNET = 'scroll-testnet',\n    CATHAY_TESTNET = 'cathay-testnet',\n    ORDERLY_TESTNET = 'orderly-testnet',\n    BLOCKGEN_TESTNET = 'blockgen-testnet',\n    MERITCIRCLE_TESTNET = 'meritcircle-testnet',\n    MANTLE = 'mantle',\n    MANTLE_TESTNET = 'mantle-testnet',\n    HUBBLE = 'hubble',\n    HUBBLE_TESTNET = 'hubble-testnet',\n    ZKCONSENSYS = 'zkconsensys',\n    BASE = 'base',\n}\n","import { ChainKey, EndpointId } from '../enums'\n\nexport const CHAIN_KEY: { [endpointId in EndpointId]: ChainKey } = {\n    [EndpointId.ETHEREUM_MAINNET]: ChainKey.ETHEREUM,\n    [EndpointId.BSC_MAINNET]: ChainKey.BSC,\n    [EndpointId.AVALANCHE_MAINNET]: ChainKey.AVALANCHE,\n    [EndpointId.POLYGON_MAINNET]: ChainKey.POLYGON,\n    [EndpointId.ARBITRUM_MAINNET]: ChainKey.ARBITRUM,\n    [EndpointId.OPTIMISM_MAINNET]: ChainKey.OPTIMISM,\n    [EndpointId.FANTOM_MAINNET]: ChainKey.FANTOM,\n    [EndpointId.SWIMMER_MAINNET]: ChainKey.SWIMMER,\n    [EndpointId.DFK_MAINNET]: ChainKey.DFK,\n    [EndpointId.HARMONY_MAINNET]: ChainKey.HARMONY,\n    [EndpointId.DEXALOT_MAINNET]: ChainKey.DEXALOT,\n    [EndpointId.CELO_MAINNET]: ChainKey.CELO,\n    [EndpointId.MOONBEAM_MAINNET]: ChainKey.MOONBEAM,\n    [EndpointId.INTAIN_MAINNET]: ChainKey.INTAIN,\n    [EndpointId.FUSE_MAINNET]: ChainKey.FUSE,\n    [EndpointId.GNOSIS_MAINNET]: ChainKey.GNOSIS,\n    [EndpointId.APTOS_MAINNET]: ChainKey.APTOS,\n    [EndpointId.KLAYTN_MAINNET]: ChainKey.KLAYTN,\n    [EndpointId.METIS_MAINNET]: ChainKey.METIS,\n    [EndpointId.COREDAO_MAINNET]: ChainKey.COREDAO,\n    [EndpointId.METER_MAINNET]: ChainKey.METER,\n    [EndpointId.OKX_MAINNET]: ChainKey.OKX,\n    [EndpointId.GOERLI_MAINNET]: ChainKey.GOERLI,\n    [EndpointId.ZKSYNC_MAINNET]: ChainKey.ZKSYNC,\n    [EndpointId.SHRAPNEL_MAINNET]: ChainKey.SHRAPNEL,\n    [EndpointId.DOS_MAINNET]: ChainKey.DOS,\n    [EndpointId.ZKPOLYGON_MAINNET]: ChainKey.ZKEVM,\n    [EndpointId.SEPOLIA_MAINNET]: ChainKey.SEPOLIA,\n    [EndpointId.MOONRIVER_MAINNET]: ChainKey.MOONRIVER,\n    [EndpointId.NOVA_MAINNET]: ChainKey.NOVA,\n    [EndpointId.TENET_MAINNET]: ChainKey.TENET,\n    [EndpointId.CANTO_MAINNET]: ChainKey.CANTO,\n    [EndpointId.KAVA_MAINNET]: ChainKey.KAVA,\n    [EndpointId.MANTLE_MAINNET]: ChainKey.MANTLE,\n    [EndpointId.HUBBLE_MAINNET]: ChainKey.HUBBLE,\n    [EndpointId.ZKCONSENSYS_MAINNET]: ChainKey.ZKCONSENSYS,\n    [EndpointId.BASE_MAINNET]: ChainKey.BASE,\n    [EndpointId.SOLANA_MAINNET]: ChainKey.SOLANA,\n    // v2 mainnet\n    [EndpointId.ETHEREUM_V2_MAINNET]: ChainKey.ETHEREUM,\n    [EndpointId.BSC_V2_MAINNET]: ChainKey.BSC,\n    [EndpointId.AVALANCHE_V2_MAINNET]: ChainKey.AVALANCHE,\n    [EndpointId.POLYGON_V2_MAINNET]: ChainKey.POLYGON,\n    [EndpointId.ARBITRUM_V2_MAINNET]: ChainKey.ARBITRUM,\n    [EndpointId.OPTIMISM_V2_MAINNET]: ChainKey.OPTIMISM,\n    [EndpointId.FANTOM_V2_MAINNET]: ChainKey.FANTOM,\n    [EndpointId.SWIMMER_V2_MAINNET]: ChainKey.SWIMMER,\n    [EndpointId.DFK_V2_MAINNET]: ChainKey.DFK,\n    [EndpointId.HARMONY_V2_MAINNET]: ChainKey.HARMONY,\n    [EndpointId.DEXALOT_V2_MAINNET]: ChainKey.DEXALOT,\n    [EndpointId.CELO_V2_MAINNET]: ChainKey.CELO,\n    [EndpointId.MOONBEAM_V2_MAINNET]: ChainKey.MOONBEAM,\n    [EndpointId.INTAIN_V2_MAINNET]: ChainKey.INTAIN,\n    [EndpointId.FUSE_V2_MAINNET]: ChainKey.FUSE,\n    [EndpointId.GNOSIS_V2_MAINNET]: ChainKey.GNOSIS,\n    [EndpointId.APTOS_V2_MAINNET]: ChainKey.APTOS,\n    [EndpointId.KLAYTN_V2_MAINNET]: ChainKey.KLAYTN,\n    [EndpointId.METIS_V2_MAINNET]: ChainKey.METIS,\n    [EndpointId.COREDAO_V2_MAINNET]: ChainKey.COREDAO,\n    [EndpointId.GOERLI_V2_MAINNET]: ChainKey.GOERLI,\n    [EndpointId.OKX_V2_MAINNET]: ChainKey.OKX,\n    [EndpointId.CANTO_V2_MAINNET]: ChainKey.CANTO,\n    [EndpointId.ZKSYNC_V2_MAINNET]: ChainKey.ZKSYNC,\n    [EndpointId.SHRAPNEL_V2_MAINNET]: ChainKey.SHRAPNEL,\n    [EndpointId.DOS_V2_MAINNET]: ChainKey.DOS,\n    [EndpointId.ZKPOLYGON_V2_MAINNET]: ChainKey.ZKEVM,\n    [EndpointId.SEPOLIA_V2_MAINNET]: ChainKey.SEPOLIA,\n    [EndpointId.MOONRIVER_V2_MAINNET]: ChainKey.MOONRIVER,\n    [EndpointId.SOLANA_V2_MAINNET]: ChainKey.SOLANA,\n    [EndpointId.TENET_V2_MAINNET]: ChainKey.TENET,\n    [EndpointId.NOVA_V2_MAINNET]: ChainKey.NOVA,\n    [EndpointId.METER_V2_MAINNET]: ChainKey.METER,\n    [EndpointId.KAVA_V2_MAINNET]: ChainKey.KAVA,\n    [EndpointId.MANTLE_V2_MAINNET]: ChainKey.MANTLE,\n    [EndpointId.HUBBLE_V2_MAINNET]: ChainKey.HUBBLE,\n    [EndpointId.ZKCONSENSYS_V2_MAINNET]: ChainKey.ZKCONSENSYS,\n    [EndpointId.BASE_V2_MAINNET]: ChainKey.BASE,\n\n    // testnet\n    [EndpointId.ETHEREUM_TESTNET]: ChainKey.GOERLI,\n    [EndpointId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\n    [EndpointId.POLYGON_TESTNET]: ChainKey.MUMBAI,\n    [EndpointId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\n    [EndpointId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\n    [EndpointId.AVALANCHE_TESTNET]: ChainKey.FUJI,\n    [EndpointId.ARBITRUM_TESTNET]: ChainKey.ARBITURM_GOERLI,\n    [EndpointId.OPTIMISM_TESTNET]: ChainKey.OPTIMISM_GOERLI,\n    [EndpointId.DFK_TESTNET]: ChainKey.DFK_TESTNET,\n    [EndpointId.SWIMMER_TESTNET]: ChainKey.SWIMMER_TESTNET,\n    [EndpointId.DEXALOT_TESTNET]: ChainKey.DEVALOT_TESTNET,\n    [EndpointId.GNOSIS_TESTNET]: ChainKey.CHIADO,\n    [EndpointId.CELO_TESTNET]: ChainKey.ALFAJORES,\n    [EndpointId.APTOS_TESTNET]: ChainKey.APTOS_TESTNET,\n    [EndpointId.MOONBEAM_TESTNET]: ChainKey.MOONBASE,\n    [EndpointId.FUSE_TESTNET]: ChainKey.FUSESPARK,\n    [EndpointId.ZKSYNC_TESTNET]: ChainKey.ZKSYNC_TESTNET,\n    [EndpointId.SHRAPNEL_TESTNET]: ChainKey.SHRAPNEL_TESTNET,\n    [EndpointId.DOS_TESTNET]: ChainKey.DOS_TESTNET,\n    [EndpointId.KLAYTN_TESTNET]: ChainKey.KLAYTN_BAOBAB,\n    [EndpointId.METIS_TESTNET]: ChainKey.METIS_GOERLI,\n    [EndpointId.INTAIN_TESTNET]: ChainKey.INTAIN_TESTNET,\n    [EndpointId.COREDAO_TESTNET]: ChainKey.COREDAO_TESTNET,\n    [EndpointId.ZKPOLYGON_TESTNET]: ChainKey.ZKEVM_TESTNET,\n    [EndpointId.OKX_TESTNET]: ChainKey.OKX_TESTNET,\n    [EndpointId.SOLANA_TESTNET]: ChainKey.SOLANA_TESTNET,\n    [EndpointId.METER_TESTNET]: ChainKey.METER_TESTNET,\n    [EndpointId.ZKCONSENSYS_TESTNET]: ChainKey.LINEA_GOERLI,\n    [EndpointId.SEPOLIA_TESTNET]: ChainKey.SEPOLIA,\n    [EndpointId.BASE_TESTNET]: ChainKey.BASE_GOERLI,\n    [EndpointId.AAVEGOTCHI_TESTNET]: ChainKey.AAVEGOTCHI_TESTNET,\n    [EndpointId.SCROLL_TESTNET]: ChainKey.SCROLL_TESTNET,\n    [EndpointId.CATHAY_TESTNET]: ChainKey.CATHAY_TESTNET,\n    [EndpointId.KAVA_TESTNET]: ChainKey.KAVA_TESTNET,\n    [EndpointId.TENET_TESTNET]: ChainKey.TENET_TESTNET,\n    [EndpointId.CANTO_TESTNET]: ChainKey.CANTO_TESTNET,\n    [EndpointId.ORDERLY_TESTNET]: ChainKey.ORDERLY_TESTNET,\n    [EndpointId.BLOCKGEN_TESTNET]: ChainKey.BLOCKGEN_TESTNET,\n    [EndpointId.MERITCIRCLE_TESTNET]: ChainKey.MERITCIRCLE_TESTNET,\n    [EndpointId.MANTLE_TESTNET]: ChainKey.MANTLE_TESTNET,\n    [EndpointId.HUBBLE_TESTNET]: ChainKey.HUBBLE_TESTNET,\n    // v2 testnet\n    [EndpointId.ETHEREUM_V2_TESTNET]: ChainKey.GOERLI,\n    [EndpointId.POLYGON_V2_TESTNET]: ChainKey.MUMBAI,\n    [EndpointId.SOLANA_V2_TESTNET]: ChainKey.SOLANA_TESTNET,\n    [EndpointId.ARBITRUM_V2_TESTNET]: ChainKey.ARBITURM_GOERLI,\n    [EndpointId.OPTIMISM_V2_TESTNET]: ChainKey.OPTIMISM_GOERLI,\n    [EndpointId.AVALANCHE_V2_TESTNET]: ChainKey.FUJI,\n\n    [EndpointId.BSC_V2_TESTNET]: ChainKey.BSC_TESTNET,\n    [EndpointId.FANTOM_V2_TESTNET]: ChainKey.FANTOM_TESTNET,\n    [EndpointId.DFK_V2_TESTNET]: ChainKey.DFK_TESTNET,\n    [EndpointId.HARMONY_V2_TESTNET]: ChainKey.HARMONY_TESTNET,\n    [EndpointId.DEXALOT_V2_TESTNET]: ChainKey.DEVALOT_TESTNET,\n    [EndpointId.CELO_V2_TESTNET]: ChainKey.ALFAJORES,\n    [EndpointId.MOONBEAM_V2_TESTNET]: ChainKey.MOONBASE,\n    [EndpointId.FUSE_V2_TESTNET]: ChainKey.FUSESPARK,\n    [EndpointId.GNOSIS_V2_TESTNET]: ChainKey.CHIADO,\n    [EndpointId.ZKSYNC_V2_TESTNET]: ChainKey.ZKSYNC_TESTNET,\n    [EndpointId.SHRAPNEL_V2_TESTNET]: ChainKey.SHRAPNEL_TESTNET,\n    [EndpointId.DOS_V2_TESTNET]: ChainKey.DOS_TESTNET,\n    [EndpointId.KLAYTN_V2_TESTNET]: ChainKey.KLAYTN_BAOBAB,\n    [EndpointId.METIS_V2_TESTNET]: ChainKey.METIS_GOERLI,\n    [EndpointId.COREDAO_V2_TESTNET]: ChainKey.COREDAO_TESTNET,\n    [EndpointId.OKX_V2_TESTNET]: ChainKey.OKX_TESTNET,\n    [EndpointId.METER_V2_TESTNET]: ChainKey.METER_TESTNET,\n    [EndpointId.ZKCONSENSYS_V2_TESTNET]: ChainKey.LINEA_GOERLI,\n    [EndpointId.ZKPOLYGON_V2_TESTNET]: ChainKey.ZKEVM_TESTNET,\n    [EndpointId.CANTO_V2_TESTNET]: ChainKey.CANTO_TESTNET,\n    [EndpointId.BASE_V2_TESTNET]: ChainKey.BASE_GOERLI,\n    [EndpointId.SEPOLIA_V2_TESTNET]: ChainKey.SEPOLIA,\n    [EndpointId.AAVEGOTCHI_V2_TESTNET]: ChainKey.AAVEGOTCHI_TESTNET,\n    [EndpointId.SCROLL_V2_TESTNET]: ChainKey.SCROLL_TESTNET,\n    [EndpointId.CATHAY_V2_TESTNET]: ChainKey.CATHAY_TESTNET,\n    [EndpointId.KAVA_V2_TESTNET]: ChainKey.KAVA_TESTNET,\n    [EndpointId.TENET_V2_TESTNET]: ChainKey.TENET_TESTNET,\n    [EndpointId.ORDERLY_V2_TESTNET]: ChainKey.ORDERLY_TESTNET,\n    [EndpointId.BLOCKGEN_V2_TESTNET]: ChainKey.BLOCKGEN_TESTNET,\n    [EndpointId.MERITCIRCLE_V2_TESTNET]: ChainKey.MERITCIRCLE_TESTNET,\n    [EndpointId.MANTLE_V2_TESTNET]: ChainKey.MANTLE_TESTNET,\n    [EndpointId.HUBBLE_V2_TESTNET]: ChainKey.HUBBLE_TESTNET,\n    // sandbox\n    [EndpointId.ETHEREUM_SANDBOX]: ChainKey.GOERLI,\n    [EndpointId.BSC_SANDBOX]: ChainKey.BSC_TESTNET,\n    [EndpointId.POLYGON_SANDBOX]: ChainKey.MUMBAI,\n    [EndpointId.AVALANCHE_SANDBOX]: ChainKey.FUJI,\n    [EndpointId.APTOS_SANDBOX]: ChainKey.APTOS,\n    // v2 sandbox\n    [EndpointId.ETHEREUM_V2_SANDBOX]: ChainKey.GOERLI,\n    [EndpointId.POLYGON_V2_SANDBOX]: ChainKey.MUMBAI,\n    [EndpointId.SOLANA_V2_SANDBOX]: ChainKey.SOLANA_TESTNET,\n    [EndpointId.BSC_V2_SANDBOX]: ChainKey.BSC_TESTNET,\n    [EndpointId.AVALANCHE_V2_SANDBOX]: ChainKey.FUJI,\n}\n","import { EndpointId, Environment } from '../enums'\n\nexport const ENVIRONMENT: { [endpointId in EndpointId]: Environment } = {\n    [EndpointId.ETHEREUM_MAINNET]: Environment.MAINNET,\n    [EndpointId.BSC_MAINNET]: Environment.MAINNET,\n    [EndpointId.AVALANCHE_MAINNET]: Environment.MAINNET,\n    [EndpointId.POLYGON_MAINNET]: Environment.MAINNET,\n    [EndpointId.ARBITRUM_MAINNET]: Environment.MAINNET,\n    [EndpointId.OPTIMISM_MAINNET]: Environment.MAINNET,\n    [EndpointId.FANTOM_MAINNET]: Environment.MAINNET,\n    [EndpointId.SWIMMER_MAINNET]: Environment.MAINNET,\n    [EndpointId.DFK_MAINNET]: Environment.MAINNET,\n    [EndpointId.HARMONY_MAINNET]: Environment.MAINNET,\n    [EndpointId.DEXALOT_MAINNET]: Environment.MAINNET,\n    [EndpointId.CELO_MAINNET]: Environment.MAINNET,\n    [EndpointId.MOONBEAM_MAINNET]: Environment.MAINNET,\n    [EndpointId.INTAIN_MAINNET]: Environment.MAINNET,\n    [EndpointId.FUSE_MAINNET]: Environment.MAINNET,\n    [EndpointId.GNOSIS_MAINNET]: Environment.MAINNET,\n    [EndpointId.APTOS_MAINNET]: Environment.MAINNET,\n    [EndpointId.KLAYTN_MAINNET]: Environment.MAINNET,\n    [EndpointId.METIS_MAINNET]: Environment.MAINNET,\n    [EndpointId.COREDAO_MAINNET]: Environment.MAINNET,\n    [EndpointId.METER_MAINNET]: Environment.MAINNET,\n    [EndpointId.OKX_MAINNET]: Environment.MAINNET,\n    [EndpointId.GOERLI_MAINNET]: Environment.MAINNET,\n    [EndpointId.ZKSYNC_MAINNET]: Environment.MAINNET,\n    [EndpointId.SHRAPNEL_MAINNET]: Environment.MAINNET,\n    [EndpointId.DOS_MAINNET]: Environment.MAINNET,\n    [EndpointId.ZKPOLYGON_MAINNET]: Environment.MAINNET,\n    [EndpointId.SEPOLIA_MAINNET]: Environment.MAINNET,\n    [EndpointId.MOONRIVER_MAINNET]: Environment.MAINNET,\n    [EndpointId.NOVA_MAINNET]: Environment.MAINNET,\n    [EndpointId.TENET_MAINNET]: Environment.MAINNET,\n    [EndpointId.CANTO_MAINNET]: Environment.MAINNET,\n    [EndpointId.KAVA_MAINNET]: Environment.MAINNET,\n    [EndpointId.MANTLE_MAINNET]: Environment.MAINNET,\n    [EndpointId.HUBBLE_MAINNET]: Environment.MAINNET,\n    [EndpointId.ZKCONSENSYS_MAINNET]: Environment.MAINNET,\n    [EndpointId.BASE_MAINNET]: Environment.MAINNET,\n    [EndpointId.SOLANA_MAINNET]: Environment.MAINNET,\n    // v2 mainnet\n    [EndpointId.ETHEREUM_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.BSC_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.AVALANCHE_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.POLYGON_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.ARBITRUM_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.OPTIMISM_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.FANTOM_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.SWIMMER_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.DFK_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.HARMONY_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.DEXALOT_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.CELO_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.MOONBEAM_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.INTAIN_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.FUSE_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.GNOSIS_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.APTOS_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.KLAYTN_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.METIS_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.COREDAO_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.GOERLI_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.OKX_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.CANTO_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.ZKSYNC_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.SHRAPNEL_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.DOS_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.ZKPOLYGON_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.SEPOLIA_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.MOONRIVER_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.SOLANA_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.TENET_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.NOVA_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.METER_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.KAVA_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.MANTLE_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.HUBBLE_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.ZKCONSENSYS_V2_MAINNET]: Environment.MAINNET,\n    [EndpointId.BASE_V2_MAINNET]: Environment.MAINNET,\n    // testnet\n    [EndpointId.ETHEREUM_TESTNET]: Environment.TESTNET,\n    [EndpointId.BSC_TESTNET]: Environment.TESTNET,\n    [EndpointId.POLYGON_TESTNET]: Environment.TESTNET,\n    [EndpointId.FANTOM_TESTNET]: Environment.TESTNET,\n    [EndpointId.HARMONY_TESTNET]: Environment.TESTNET,\n    [EndpointId.AVALANCHE_TESTNET]: Environment.TESTNET,\n    [EndpointId.ARBITRUM_TESTNET]: Environment.TESTNET,\n    [EndpointId.OPTIMISM_TESTNET]: Environment.TESTNET,\n    [EndpointId.DFK_TESTNET]: Environment.TESTNET,\n    [EndpointId.SWIMMER_TESTNET]: Environment.TESTNET,\n    [EndpointId.DEXALOT_TESTNET]: Environment.TESTNET,\n    [EndpointId.GNOSIS_TESTNET]: Environment.TESTNET,\n    [EndpointId.CELO_TESTNET]: Environment.TESTNET,\n    [EndpointId.APTOS_TESTNET]: Environment.TESTNET,\n    [EndpointId.MOONBEAM_TESTNET]: Environment.TESTNET,\n    [EndpointId.FUSE_TESTNET]: Environment.TESTNET,\n    [EndpointId.ZKSYNC_TESTNET]: Environment.TESTNET,\n    [EndpointId.SHRAPNEL_TESTNET]: Environment.TESTNET,\n    [EndpointId.DOS_TESTNET]: Environment.TESTNET,\n    [EndpointId.KLAYTN_TESTNET]: Environment.TESTNET,\n    [EndpointId.METIS_TESTNET]: Environment.TESTNET,\n    [EndpointId.INTAIN_TESTNET]: Environment.TESTNET,\n    [EndpointId.COREDAO_TESTNET]: Environment.TESTNET,\n    [EndpointId.ZKPOLYGON_TESTNET]: Environment.TESTNET,\n    [EndpointId.OKX_TESTNET]: Environment.TESTNET,\n    [EndpointId.SOLANA_TESTNET]: Environment.TESTNET,\n    [EndpointId.METER_TESTNET]: Environment.TESTNET,\n    [EndpointId.ZKCONSENSYS_TESTNET]: Environment.TESTNET,\n    [EndpointId.SEPOLIA_TESTNET]: Environment.TESTNET,\n    [EndpointId.BASE_TESTNET]: Environment.TESTNET,\n    [EndpointId.AAVEGOTCHI_TESTNET]: Environment.TESTNET,\n    [EndpointId.SCROLL_TESTNET]: Environment.TESTNET,\n    [EndpointId.CATHAY_TESTNET]: Environment.TESTNET,\n    [EndpointId.KAVA_TESTNET]: Environment.TESTNET,\n    [EndpointId.TENET_TESTNET]: Environment.TESTNET,\n    [EndpointId.CANTO_TESTNET]: Environment.TESTNET,\n    [EndpointId.ORDERLY_TESTNET]: Environment.TESTNET,\n    [EndpointId.BLOCKGEN_TESTNET]: Environment.TESTNET,\n    [EndpointId.MERITCIRCLE_TESTNET]: Environment.TESTNET,\n    [EndpointId.MANTLE_TESTNET]: Environment.TESTNET,\n    [EndpointId.HUBBLE_TESTNET]: Environment.TESTNET,\n    // v2 testnet\n    [EndpointId.ETHEREUM_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.POLYGON_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.SOLANA_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.ARBITRUM_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.OPTIMISM_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.AVALANCHE_V2_TESTNET]: Environment.TESTNET,\n\n    [EndpointId.BSC_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.FANTOM_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.DFK_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.HARMONY_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.DEXALOT_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.CELO_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.MOONBEAM_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.FUSE_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.GNOSIS_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.ZKSYNC_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.SHRAPNEL_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.DOS_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.KLAYTN_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.METIS_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.COREDAO_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.OKX_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.METER_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.ZKCONSENSYS_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.ZKPOLYGON_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.CANTO_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.BASE_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.SEPOLIA_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.AAVEGOTCHI_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.SCROLL_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.CATHAY_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.KAVA_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.TENET_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.ORDERLY_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.BLOCKGEN_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.MERITCIRCLE_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.MANTLE_V2_TESTNET]: Environment.TESTNET,\n    [EndpointId.HUBBLE_V2_TESTNET]: Environment.TESTNET,\n\n    // sandbox\n    [EndpointId.ETHEREUM_SANDBOX]: Environment.TESTNET,\n    [EndpointId.BSC_SANDBOX]: Environment.TESTNET,\n    [EndpointId.POLYGON_SANDBOX]: Environment.TESTNET,\n    [EndpointId.AVALANCHE_SANDBOX]: Environment.TESTNET,\n    [EndpointId.APTOS_SANDBOX]: Environment.DEVNET,\n    // v2 sandbox\n    [EndpointId.ETHEREUM_V2_SANDBOX]: Environment.TESTNET,\n    [EndpointId.POLYGON_V2_SANDBOX]: Environment.DEVNET,\n    [EndpointId.SOLANA_V2_SANDBOX]: Environment.DEVNET,\n    [EndpointId.BSC_V2_SANDBOX]: Environment.DEVNET,\n    [EndpointId.AVALANCHE_V2_SANDBOX]: Environment.DEVNET,\n}\n","import { EndpointId } from '../enums'\n\nexport const ULN_V1_CHAINS = [\n    EndpointId.ETHEREUM_MAINNET,\n    EndpointId.ETHEREUM_TESTNET,\n    EndpointId.ETHEREUM_SANDBOX,\n    EndpointId.BSC_MAINNET,\n    EndpointId.BSC_TESTNET,\n    EndpointId.BSC_SANDBOX,\n    EndpointId.AVALANCHE_MAINNET,\n    EndpointId.AVALANCHE_TESTNET,\n    EndpointId.AVALANCHE_SANDBOX,\n    EndpointId.POLYGON_MAINNET,\n    EndpointId.POLYGON_TESTNET,\n    EndpointId.POLYGON_SANDBOX,\n    EndpointId.ARBITRUM_MAINNET,\n    EndpointId.OPTIMISM_MAINNET,\n    EndpointId.FANTOM_MAINNET,\n    EndpointId.FANTOM_TESTNET,\n    EndpointId.SWIMMER_MAINNET,\n    EndpointId.SWIMMER_TESTNET,\n    EndpointId.DFK_MAINNET,\n    EndpointId.DFK_TESTNET,\n    EndpointId.HARMONY_MAINNET,\n    EndpointId.HARMONY_TESTNET,\n    EndpointId.MOONBEAM_MAINNET,\n    EndpointId.MOONBEAM_TESTNET,\n    EndpointId.DEXALOT_TESTNET,\n    EndpointId.CELO_TESTNET,\n    EndpointId.INTAIN_TESTNET,\n]\n","// Stargate Bridge.sol addresses\nimport { EndpointId } from '../enums'\n\nexport const BRIDGE_ADDRESS: { [chainId: number]: string } = {\n    [EndpointId.ETHEREUM_MAINNET]: '0x296F55F8Fb28E498B858d0BcDA06D955B2Cb3f97',\n    [EndpointId.BSC_MAINNET]: '0x6694340fc020c5E6B96567843da2df01b2CE1eb6',\n    [EndpointId.BSC_TESTNET]: '0xa1E105511416aEc3200CcE7069548cF332c6DCA2',\n    [EndpointId.AVALANCHE_MAINNET]: '0x9d1B1669c73b033DFe47ae5a0164Ab96df25B944',\n    [EndpointId.AVALANCHE_TESTNET]: '0x29fBC4E4092Db862218c62a888a00F9521619230',\n    [EndpointId.POLYGON_MAINNET]: '0x9d1B1669c73b033DFe47ae5a0164Ab96df25B944',\n    [EndpointId.POLYGON_TESTNET]: '0x629B57D89b1739eE1C0c0fD9eab426306e11cF42',\n    [EndpointId.ARBITRUM_MAINNET]: '0x352d8275AAE3e0c2404d9f68f6cEE084B5bEB3DD',\n    [EndpointId.OPTIMISM_MAINNET]: '0x701a95707A0290AC8B90b3719e8EE5b210360883',\n    [EndpointId.FANTOM_MAINNET]: '0x45A01E4e04F14f7A4a6702c74187c5F6222033cd',\n    [EndpointId.FANTOM_TESTNET]: '0xb97948ad8805174e0CB27cAf0115e5eA5e02F3A7',\n    [EndpointId.METIS_MAINNET]: '0x45f1A95A4D3f3836523F5c83673c797f4d4d263B',\n}\n\n// StargateToken.sol instances\nexport const STG_ADDRESS: { [chainId: number]: string } = {\n    [EndpointId.ETHEREUM_MAINNET]: '0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6',\n    [EndpointId.BSC_MAINNET]: '0xB0D502E938ed5f4df2E681fE6E419ff29631d62b',\n    [EndpointId.BSC_TESTNET]: '0xcd2DBD80c15b1A3df37658e5656a87160969bE11',\n    [EndpointId.AVALANCHE_MAINNET]: '0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590',\n    [EndpointId.AVALANCHE_TESTNET]: '0xA6B23d4be9364398FB265c60588cdc4FB78314a0',\n    [EndpointId.POLYGON_MAINNET]: '0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590',\n    [EndpointId.POLYGON_TESTNET]: '0x9049D580A526871A1bD8d4348fFBA220F7Dd0563',\n    [EndpointId.ARBITRUM_MAINNET]: '0x6694340fc020c5E6B96567843da2df01b2CE1eb6',\n    [EndpointId.OPTIMISM_MAINNET]: '0x296F55F8Fb28E498B858d0BcDA06D955B2Cb3f97',\n    [EndpointId.FANTOM_MAINNET]: '0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590',\n    [EndpointId.FANTOM_TESTNET]: '0x8678A0cF61896CdAF4e3cD60c57D23d22B519B80',\n}\n","import invariant from 'tiny-invariant'\n\nimport { CHAIN_KEY, ENVIRONMENT, ULN_V1_CHAINS } from '../constants'\nimport { Chain, ChainKey, ChainType, EndpointId, EndpointVersion, Environment, Stage } from '../enums'\n\nexport function networkToEndpointId(network: string, version: EndpointVersion): number {\n    const name = network.replace('-local', '')\n    const [chain, stage] = name.split('-')\n\n    const key =\n        version === EndpointVersion.V1\n            ? `${chain.toUpperCase()}_${stage.toUpperCase()}`\n            : `${chain.toUpperCase()}_V2_${stage.toUpperCase()}`\n    invariant(key in EndpointId, `Invalid network name: ${network}, key: ${key}`)\n    return EndpointId[key as keyof typeof EndpointId] as EndpointId\n}\n\nexport function networkToEnv(network: string, version: EndpointVersion): Environment {\n    if (network.includes('local') || network === 'hardhat') {\n        return Environment.LOCAL\n    }\n    const endpointId = networkToEndpointId(network, version)\n    return ENVIRONMENT[endpointId as keyof typeof ENVIRONMENT]\n}\n\nexport function networkToStage(network: string): Stage {\n    const name = network.replace('-local', '')\n    const stage = name.split('-')[1]\n    return Stage[stage.toUpperCase() as keyof typeof Stage]\n}\n\nexport function endpointIdToNetwork(endpointId: number, env?: Environment): string {\n    const key = EndpointId[endpointId]\n    invariant(key, `Invalid endpointId: ${endpointId}`)\n    const network = key.toLowerCase().replace(/_/g, '-').replace('-v2', '')\n    if (env === Environment.LOCAL) {\n        return `${network}-local`\n    }\n    return network\n}\n\nexport function endpointIdToVersion(endpointId: number): EndpointVersion {\n    const key = EndpointId[endpointId]\n    invariant(key, `Invalid endpointId: ${endpointId}`)\n    return key.includes('V2') ? EndpointVersion.V2 : EndpointVersion.V1\n}\n\nexport function endpointIdToChainKey(endpointId: number): ChainKey {\n    const chainKey = CHAIN_KEY[endpointId as EndpointId]\n    invariant(chainKey, `No ChainKey for EndpointId: ${endpointId}`)\n    return chainKey\n}\n\nexport function chainAndStageToEndpointId(chain: Chain, stage: Stage, version: EndpointVersion): EndpointId {\n    const key =\n        version === EndpointVersion.V2\n            ? `${chain.toUpperCase()}_V2_${stage.toUpperCase()}`\n            : `${chain.toUpperCase()}_${stage.toUpperCase()}`\n    invariant(key in EndpointId, `Invalid key: ${key}`)\n    return EndpointId[key as keyof typeof EndpointId] as EndpointId\n}\n\n//todo: change function to take boolean env\nexport function chainAndStageToNetwork(chain: Chain, stage: Stage, env?: Environment): string {\n    if (env === Environment.LOCAL) {\n        return `${chain}-${stage}-local`\n    }\n    return `${chain}-${stage}`\n}\n\nexport function networkToChain(network: string): Chain {\n    return network.split('-')[0] as Chain\n}\n\nexport function networkToChainType(network: string): ChainType {\n    const chain = networkToChain(network)\n    return getChainType(chain)\n}\n\n/**\n * Returns the chain family for a given chain\n * @param chain\n */\nexport function getChainType(chain: Chain): ChainType {\n    switch (chain) {\n        case Chain.APTOS:\n            return ChainType.APTOS\n        case Chain.SOLANA:\n            return ChainType.SOLANA\n        default:\n            if (Object.values(Chain).includes(chain)) {\n                return ChainType.EVM\n            } else {\n                return ChainType.UNKNOWN\n            }\n    }\n}\n\nexport function endpointIdToChain(endpointId: number): Chain {\n    const key = EndpointId[endpointId]\n    invariant(key, `Invalid endpointId: ${endpointId}`)\n    return key.split('_')[0].toLowerCase() as Chain\n}\n\nexport function endpointIdToStage(endpointId: number): Stage {\n    let key = EndpointId[endpointId]\n    invariant(key, `Invalid endpointId: ${endpointId}`)\n    key = key.replace('_V2', '')\n    return key.split('_')[1].toLowerCase() as Stage\n}\n\nexport function endpointIdToChainType(endpointId: number): ChainType {\n    const chain = endpointIdToChain(endpointId)\n    return getChainType(chain)\n}\n\nexport function getNetworksForStage(stage: Stage) {\n    const networks: string[] = []\n    for (const key in EndpointId) {\n        if (Number(key) >= 0) {\n            const network = endpointIdToNetwork(Number(key))\n            const s = network.split('-')[1]\n            if (stage === s) {\n                networks.push(network)\n            }\n        }\n    }\n    return networks\n}\n\nconst ULN_V1_BIAS = 100\n\nexport const getEndpointVersionForUlnVersion = (ulnVersion: string): EndpointVersion => {\n    const [majorVerion, minorVersion, endpointVersion] = ulnVersion.split('.')\n    if (!endpointVersion) {\n        return EndpointVersion.V1\n    }\n    const version = {\n        '1': EndpointVersion.V1,\n        '2': EndpointVersion.V2,\n    }[endpointVersion]\n    if (!version) {\n        throw new Error(`Invalid ulnVersion: ${ulnVersion}`)\n    }\n    return version\n}\n\nexport function getChainIdForNetwork(chain: string, stage: string, ulnVersion: string): string {\n    const endpointId = chainAndStageToEndpointId(\n        chain as Chain,\n        stage as Stage,\n        getEndpointVersionForUlnVersion(ulnVersion)\n    )\n    return (ulnVersion == '1' ? endpointId - ULN_V1_BIAS : endpointId).toString()\n}\n\nexport function getNetworkForChainId(targetchainId: number) {\n    if (ULN_V1_CHAINS.includes(targetchainId + ULN_V1_BIAS)) {\n        const endpointId = targetchainId + ULN_V1_BIAS\n        const chain = endpointIdToChain(endpointId)\n        const stage = networkToStage(endpointIdToNetwork(endpointId))\n        return {\n            chainName: chain,\n            env: stage,\n            ulnVersion: '1',\n        }\n    }\n    const chain = endpointIdToChain(targetchainId)\n    const stage = networkToStage(endpointIdToNetwork(targetchainId))\n    return {\n        chainName: chain,\n        env: stage,\n        ulnVersion: '2',\n    }\n}\n"]}