{"version":3,"sources":["../src/network/evm.ts","../src/network/chainType.ts","../src/network/networks.ts","../src/currency/baseCurrency.ts","../src/currency/coin.ts","../src/currency/utils/validateAndParseAddress.ts","../src/currency/token.ts","../src/currency/utils/assertToken.ts","../src/network/chains.ts","../src/network/toULNv2.ts","../src/network/aptos.ts","../src/icon.ts","../src/fraction/fraction.ts","../src/fraction/constants.ts","../src/fraction/currencyAmount.ts","../src/fraction/percent.ts","../../../node_modules/tiny-invariant/dist/esm/tiny-invariant.js","../src/fraction/price.ts","../src/fraction/utils/bpToFraction.ts","../src/fraction/utils/castCurrencyAmountUnsafe.ts","../src/fraction/utils/formatAmount.ts","../src/fraction/utils/parseCurrencyAmount.ts","../src/fraction/utils/parseFraction.ts","../src/fraction/utils/sumUnsafe.ts","../src/fraction/utils/toBigNumber.ts","../src/fraction/utils/toCurrencyAmount.ts","../src/fraction/utils/removeDust.ts","../src/utils/waitFor.ts","../src/utils/getExpectedDate.ts","../src/utils/parseNumber.ts","../src/utils/convertToPaddedUint8Array.ts","../src/utils/interpolateString.ts","../src/providers/ResourceProvider__currency_evm.ts","../src/types/AdapterParams.ts"],"names":["ChainId","ChainStage","ChainType","utils","chainId","AptosChainId","SolanaChainId","IconTheme","Rounding","assert","_Big","toFormat","Big","BigNumber"],"mappings":"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","sourcesContent":["import {ChainId, ChainListId, ChainStage} from '@layerzerolabs/lz-sdk';\nimport {isEvmChainId} from './chainType';\nimport {isChainOnStage} from './networks';\n\nexport function toEvmChainId(chainId: ChainId): number {\n  const key = ChainId[chainId];\n  const evmChainId = ChainListId[key as any] as any as number;\n  if (!evmChainId) throw Error(`No ChainListId for ${key}, ${chainId}`);\n  return evmChainId;\n}\n\nexport function isSupportedEvmChainId(evmChainId: any) {\n  return evmChainId in ChainListId;\n}\n\n// if not sandbox then testnet\nexport function fromEvmChainId(evmChainId: number | string, sandbox = false): ChainId {\n  evmChainId = Number(evmChainId);\n  const matches: ChainId[] = [];\n  //@ts-ignore\n  for (const key in ChainListId) {\n    //@ts-ignore\n    const nativeChainId: number = ChainListId[key];\n    if (nativeChainId !== evmChainId) continue;\n    //@ts-ignore\n    const chainId: ChainId = ChainId[key];\n    if (!isFinite(chainId)) continue;\n    if (!isEvmChainId(chainId)) continue;\n    matches.push(chainId);\n  }\n  if (sandbox) {\n    const chainId = matches.find((i) => isChainOnStage(i, ChainStage.TESTNET_SANDBOX));\n    if (chainId) return chainId;\n  }\n  const chainId = matches[0];\n  if (chainId) return chainId;\n  throw new Error(`No ChainId for ${evmChainId}`);\n}\n\nexport function tryFromEvmChainId(\n  evmChainId: number | string,\n  sandbox = false,\n): ChainId | undefined {\n  try {\n    return fromEvmChainId(evmChainId, sandbox);\n  } catch {\n    return undefined;\n  }\n}\n","import {ChainId} from '@layerzerolabs/lz-sdk';\n\nexport enum ChainType {\n  EVM = 'EVM',\n  APTOS = 'APTOS',\n  SOLANA = 'SOLANA',\n}\n\n// don't list EVM - its easier to maintain non-evm list\nconst APTOS: ChainId[] = [ChainId.APTOS, ChainId.APTOS_TESTNET, ChainId.APTOS_TESTNET_SANDBOX];\nconst SOLANA: ChainId[] = [ChainId.SOLANA, ChainId.SOLANA_TESTNET];\n\nexport function isChainType(chainId: ChainId, chainType: ChainType): boolean {\n  if (chainType === ChainType.APTOS) return APTOS.includes(chainId);\n  if (chainType === ChainType.SOLANA) return SOLANA.includes(chainId);\n  // only EVM\n  if (SOLANA.includes(chainId)) return false;\n  if (APTOS.includes(chainId)) return false;\n  return true;\n}\n\nexport function getChainType(chainId: ChainId): ChainType {\n  if (isChainType(chainId, ChainType.APTOS)) return ChainType.APTOS;\n  if (isChainType(chainId, ChainType.SOLANA)) return ChainType.SOLANA;\n  return ChainType.EVM;\n}\n\nexport function isEvmChainId(chainId: ChainId) {\n  return isChainType(chainId, ChainType.EVM);\n}\n\nexport function isAptosChainId(chainId: ChainId) {\n  return isChainType(chainId, ChainType.APTOS);\n}\n\nexport function isSolanaChainId(chainId: ChainId) {\n  return isChainType(chainId, ChainType.SOLANA);\n}\n","import {ChainId, ChainStage, getChainStage} from '@layerzerolabs/lz-sdk';\nimport {utils} from 'ethers';\nimport {Coin, Currency, Token} from '../currency';\nimport {NETWORK_INFO} from './chains';\nimport {ChainType, isChainType} from './chainType';\nimport {toULNv2} from './toULNv2';\nimport {NetworkInfo, Network} from './types';\n\nfunction addSandboxNetworks(networks: NetworkInfo[]): NetworkInfo[] {\n  const result = networks.slice();\n  for (const network of networks) {\n    const networkSymbol = ChainId[network.chainId];\n    //@ts-ignore\n    const chainId: ChainId = ChainId[networkSymbol + '_SANDBOX'];\n    if (chainId) {\n      const sandbox: NetworkInfo = {\n        ...network,\n        chainId,\n      };\n      result.push(sandbox);\n    }\n  }\n  return result;\n}\n\nexport const NETWORKS: Network[] = addSandboxNetworks(NETWORK_INFO).map(\n  ({nativeCurrency, ...network}) => ({\n    ...network,\n    nativeCurrency: nativeCurrency.address\n      ? new Token(\n          network.chainId,\n          nativeCurrency.address,\n          nativeCurrency.decimals,\n          nativeCurrency.symbol,\n          nativeCurrency.name,\n        )\n      : new Coin(\n          network.chainId,\n          nativeCurrency.decimals,\n          nativeCurrency.symbol,\n          nativeCurrency.name,\n        ),\n  }),\n);\n\nexport const isEvmAddress = utils.isAddress;\n\nexport function getNetwork(chainId: ChainId) {\n  const network = tryGetNetwork(chainId);\n  if (!network) throw Error(`No NETWORK for ${chainId}`);\n  return network;\n}\n\nexport function tryGetNetwork(chainId?: ChainId) {\n  if (chainId === undefined) return undefined;\n  chainId = toULNv2(chainId);\n  return NETWORKS.find((i) => i.chainId === chainId);\n}\n\nexport function getNativeCurrency(chainId: ChainId) {\n  return getNetwork(chainId).nativeCurrency;\n}\n\nexport function isNativeCurrency(currency: Currency) {\n  const native = getNativeCurrency(currency.chainId);\n  return native.equals(currency);\n}\n\n// for compatibility\nexport {getChainStage};\n\nexport function isChainOnStage(chainId: ChainId, chainStage: ChainStage): boolean {\n  return getChainStage(chainId) === chainStage;\n}\n\nfunction getBlockExplorerUrl(chainId: ChainId) {\n  return tryGetBlockExplorer(chainId)?.url ?? '';\n}\n\nexport function getBlockLink(chainId: ChainId, blockOrHash: string | number) {\n  return getBlockExplorerUrl(chainId) + `/block/${blockOrHash}`;\n}\n\nexport function getAddressLink(chainId: ChainId, address: string) {\n  return getBlockExplorerUrl(chainId) + `/address/${address}`;\n}\n\nexport function getTransactionLink(chainId: ChainId, hash: string) {\n  const explorer = getBlockExplorerUrl(chainId);\n  if (isChainType(chainId, ChainType.APTOS)) {\n    const queryString =\n      chainId === ChainId.APTOS_TESTNET || chainId === ChainId.APTOS_TESTNET_SANDBOX\n        ? '?network=Testnet'\n        : '';\n    return explorer + '/txn/' + hash + queryString;\n  }\n  return explorer + '/tx/' + hash;\n}\n\nexport function getScanLink(chainId: ChainId, hash: string) {\n  const chainStage = getChainStage(chainId);\n  if (chainStage === ChainStage.MAINNET) {\n    return `https://layerzeroscan.com/tx/${hash}`;\n  }\n  if (chainStage === ChainStage.TESTNET) {\n    return `https://testnet.layerzeroscan.com/tx/${hash}`;\n  }\n  return `https://sandbox.layerzeroscan.com/tx/${hash}`;\n}\n\nexport function getBlockExplorer(chainId: ChainId) {\n  const explorer = tryGetBlockExplorer(chainId);\n  if (!explorer) throw new Error(`No BLOCK_EXPLORERS for ChainId ${chainId}`);\n  return explorer;\n}\n\nexport function tryGetBlockExplorer(chainId: ChainId) {\n  const network = tryGetNetwork(chainId);\n  return network?.blockExplorers.at(0);\n}\n","import {Currency} from './currency';\nimport assert from 'assert';\n\n/**\n * A currency is any fungible financial instrument, including all ERC20 tokens\n */\nexport abstract class BaseCurrency {\n  /**\n   * The layerzero chain ID on which this currency resides\n   */\n  public readonly chainId: number;\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number;\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol: string;\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string;\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol: string, name?: string) {\n    assert(Number.isSafeInteger(chainId), 'CHAIN_ID');\n    assert(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS');\n\n    this.chainId = chainId;\n    this.decimals = decimals;\n    // workaround\n    this.symbol = symbol;\n    this.name = name;\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean;\n}\n","import {BaseCurrency} from './baseCurrency';\nimport {Currency} from './currency';\n\n/**\n * Represents an Coin with some metadata.\n */\nexport class Coin extends BaseCurrency {\n  public constructor(chainId: number, decimals: number, symbol: string, name?: string) {\n    super(chainId, decimals, symbol, name);\n  }\n  /**\n   * Returns true if the two Coins are equivalent, i.e. have the same chainId\n   * @param other other currency to compare\n   */\n  public equals(other: Currency): boolean {\n    if (!(other instanceof Coin)) return false;\n    return this.chainId === other.chainId;\n  }\n\n  public static from(input: {chainId: number; decimals: number; symbol: string; name?: string}) {\n    return new Coin(input.chainId, input.decimals, input.symbol, input.name);\n  }\n}\n","import {utils} from 'ethers';\nimport {isEvmChainId} from '../../network/chainType';\n\nexport function validateAndParseAddress(address: string, chainId: number): string {\n  if (isEvmChainId(chainId)) {\n    return utils.getAddress(address);\n  }\n  return address;\n}\n","import {validateAndParseAddress} from './utils/validateAndParseAddress';\nimport {BaseCurrency} from './baseCurrency';\nimport {Currency} from './currency';\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string;\n\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol: string,\n    name?: string,\n  ) {\n    super(chainId, decimals, symbol, name);\n    this.address = validateAndParseAddress(address, chainId);\n  }\n\n  public static from(input: {\n    chainId: number;\n    address: string;\n    decimals: number;\n    symbol: string;\n    name?: string;\n  }) {\n    return new Token(input.chainId, input.address, input.decimals, input.symbol, input.name);\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    if (!(other instanceof Token)) return false;\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n}\n","import {Coin} from '../coin';\nimport {Currency} from '../currency';\nimport {Token} from '../token';\n\nexport function isToken(value: unknown): value is Token {\n  return value instanceof Token;\n}\n\nexport function assertToken(value: Currency, errorMessage?: string): asserts value is Token {\n  if (!isToken(value)) {\n    throw new Error(errorMessage ?? `Not a token (${value.symbol})`);\n  }\n}\n\nexport function isCoin(value: Currency): value is Coin {\n  return value instanceof Coin;\n}\n\nexport function isCurrency(value: unknown): value is Currency {\n  return value instanceof Token || value instanceof Coin;\n}\n","import type {NetworkInfo} from './types';\n// prettier-ignore\nexport const NETWORK_INFO: NetworkInfo[] = [\n  {\n    \"name\": \"Solana\",\n    \"symbol\": \"solana\",\n    \"chainId\": 168,\n    \"nativeChainId\": 1,\n    \"nativeCurrency\": {\n      \"name\": \"SOL\",\n      \"symbol\": \"SOL\",\n      \"decimals\": 9\n    },\n    \"blockExplorers\": [],\n    \"rpcs\": [\n      {\n        \"url\": \"https://api.mainnet-beta.solana.com\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Solana\",\n    \"symbol\": \"solana\",\n    \"chainId\": 10168,\n    \"nativeChainId\": 2,\n    \"nativeCurrency\": {\n      \"name\": \"SOL\",\n      \"symbol\": \"SOL\",\n      \"decimals\": 9\n    },\n    \"blockExplorers\": [],\n    \"rpcs\": [\n      {\n        \"url\": \"https://api.devnet.solana.com\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Ethereum\",\n    \"symbol\": \"Ethereum\",\n    \"chainId\": 101,\n    \"nativeChainId\": 1,\n    \"nativeCurrency\": {\n      \"name\": \"ETH\",\n      \"symbol\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"etherscan\",\n        \"url\": \"https://etherscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://eth-rpc.gateway.pokt.network\",\n        \"weight\": 1000000\n      },\n      {\n        \"url\": \"https://ethereum.publicnode.com\",\n        \"weight\": 1000000\n      },\n      {\n        \"url\": \"https://eth-mainnet.public.blastapi.io\",\n        \"weight\": 1000000\n      },\n      {\n        \"url\": \"https://cloudflare-eth.com\",\n        \"weight\": 1000\n      }\n    ]\n  },\n  {\n    \"name\": \"Rinkeby Testnet\",\n    \"symbol\": \"Rinkeby\",\n    \"chainId\": 10101,\n    \"nativeChainId\": 4,\n    \"nativeCurrency\": {\n      \"name\": \"ETH\",\n      \"symbol\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"etherscan-rinkeby\",\n        \"url\": \"https://rinkeby.etherscan.io\"\n      }\n    ],\n    \"rpcs\": []\n  },\n  {\n    \"name\": \"Goerli\",\n    \"symbol\": \"goerli\",\n    \"chainId\": 10121,\n    \"nativeChainId\": 5,\n    \"nativeCurrency\": {\n      \"name\": \"GoerliETH\",\n      \"symbol\": \"GoerliETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"etherscan-goerli\",\n        \"url\": \"https://goerli.etherscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"\n      }\n    ]\n  },\n  {\n    \"name\": \"BNB Chain\",\n    \"symbol\": \"BNB\",\n    \"chainId\": 102,\n    \"nativeChainId\": 56,\n    \"nativeCurrency\": {\n      \"symbol\": \"BNB\",\n      \"name\": \"BNB\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"bscscan\",\n        \"url\": \"https://bscscan.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://bscrpc.com\"\n      },\n      {\n        \"url\": \"https://binance.nodereal.io\"\n      },\n      {\n        \"url\": \"https://bsc-dataseed.binance.org\"\n      },\n      {\n        \"url\": \"https://bsc-dataseed1.binance.org\"\n      },\n      {\n        \"url\": \"https://bsc-dataseed2.binance.org\"\n      },\n      {\n        \"url\": \"https://bsc-dataseed3.binance.org\"\n      },\n      {\n        \"url\": \"https://bsc-dataseed4.binance.org\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Binance Test Chain\",\n    \"symbol\": \"BNB\",\n    \"chainId\": 10102,\n    \"nativeChainId\": 97,\n    \"nativeCurrency\": {\n      \"symbol\": \"BNB\",\n      \"name\": \"BNB\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"bscscan-testnet\",\n        \"url\": \"https://testnet.bscscan.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://data-seed-prebsc-1-s3.binance.org:8545\"\n      },\n      {\n        \"url\": \"https://data-seed-prebsc-2-s2.binance.org:8545\"\n      },\n      {\n        \"url\": \"https://data-seed-prebsc-1-s1.binance.org:8545\"\n      },\n      {\n        \"url\": \"https://data-seed-prebsc-1-s2.binance.org:8545\"\n      },\n      {\n        \"url\": \"https://data-seed-prebsc-2-s1.binance.org:8545\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Polygon\",\n    \"symbol\": \"Matic\",\n    \"chainId\": 109,\n    \"nativeChainId\": 137,\n    \"nativeCurrency\": {\n      \"name\": \"MATIC\",\n      \"symbol\": \"MATIC\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"polygonscan\",\n        \"url\": \"https://polygonscan.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://poly-rpc.gateway.pokt.network\",\n        \"weight\": 1000000\n      },\n      {\n        \"url\": \"https://matic-mainnet.chainstacklabs.com\",\n        \"weight\": 1000000\n      },\n      {\n        \"url\": \"https://polygon-rpc.com\",\n        \"weight\": 1000000\n      }\n    ]\n  },\n  {\n    \"name\": \"Mumbai\",\n    \"symbol\": \"Matic\",\n    \"chainId\": 10109,\n    \"nativeChainId\": 80001,\n    \"nativeCurrency\": {\n      \"symbol\": \"MATIC\",\n      \"name\": \"MATIC\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"polygonscan\",\n        \"url\": \"https://mumbai.polygonscan.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://matic-mumbai.chainstacklabs.com\"\n      },\n      {\"url\":\"https://rpc-mumbai.maticvigil.com\"},\n      {\"url\":\"https://endpoints.omniatech.io/v1/matic/mumbai/public\"},\n      {\"url\":\"https://rpc.ankr.com/polygon_mumbai\"}\n    ]\n  },\n  {\n    \"name\": \"Avalanche\",\n    \"symbol\": \"Avalanche\",\n    \"chainId\": 106,\n    \"nativeChainId\": 43114,\n    \"nativeCurrency\": {\n      \"name\": \"Avalanche Token\",\n      \"symbol\": \"AVAX\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"snowtrace\",\n        \"url\": \"https://snowtrace.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://api.avax.network/ext/bc/C/rpc\",\n        \"weight\": 1000000\n      },\n      {\"url\":\"https://avalanche-c-chain.publicnode.com\"}\n    ]\n  },\n  {\n    \"name\": \"Fuji\",\n    \"symbol\": \"Avalanche\",\n    \"chainId\": 10106,\n    \"nativeChainId\": 43113,\n    \"nativeCurrency\": {\n      \"name\": \"Avalanche Token\",\n      \"symbol\": \"AVAX\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"snowtrace\",\n        \"url\": \"https://testnet.snowtrace.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://api.avax-test.network/ext/bc/C/rpc\"\n      },\n      {\n        \"url\": \"https://rpc.ankr.com/avalanche_fuji\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Fantom\",\n    \"symbol\": \"Fantom\",\n    \"chainId\": 112,\n    \"nativeChainId\": 250,\n    \"nativeCurrency\": {\n      \"name\": \"Fantom\",\n      \"symbol\": \"FTM\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"ftmscan\",\n        \"url\": \"https://ftmscan.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.ftm.tools\",\n        \"weight\": 1000000\n      },\n      {\n        \"url\": \"https://rpc2.fantom.network\",\n        \"weight\": 100\n      },\n      {\n        \"url\": \"https://rpc3.fantom.network\",\n        \"weight\": 100\n      }\n    ]\n  },\n  {\n    \"name\": \"Fantom Testnet\",\n    \"symbol\": \"Fantom\",\n    \"chainId\": 10112,\n    \"nativeChainId\": 4002,\n    \"nativeCurrency\": {\n      \"name\": \"Fantom\",\n      \"symbol\": \"FTM\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"ftmscan\",\n        \"url\": \"https://testnet.ftmscan.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.testnet.fantom.network/\"\n      },\n      {\n        \"url\": \"https://rpc.ankr.com/fantom_testnet\"\n      },\n      {\n        \"url\": \"https://fantom-testnet.public.blastapi.io\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Arbitrum\",\n    \"symbol\": \"Arbitrum\",\n    \"chainId\": 110,\n    \"nativeChainId\": 42161,\n    \"nativeCurrency\": {\n      \"name\": \"ETH\",\n      \"symbol\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Arbiscan\",\n        \"url\": \"https://arbiscan.io\"\n      },\n      {\n        \"name\": \"Arbitrum Explorer\",\n        \"url\": \"https://explorer.arbitrum.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://arb1.arbitrum.io/rpc\",\n        \"weight\": 1000000\n      },\n      {\"url\":\"https://arbitrum-one.publicnode.com\"},\n      {\"url\":\"https://arbitrum.meowrpc.com\"}\n    ]\n  },\n  {\n    \"name\": \"Arbitrum Goerli\",\n    \"symbol\": \"Arbitrum\",\n    \"chainId\": 10143,\n    \"nativeChainId\": 421613,\n    \"nativeCurrency\": {\n      \"name\": \"ETH\",\n      \"symbol\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Arbitrum Goerli Rollup Explorer\",\n        \"url\": \"https://goerli-rollup-explorer.arbitrum.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://goerli-rollup.arbitrum.io/rpc\"\n      },\n      {\"url\":\"https://endpoints.omniatech.io/v1/arbitrum/goerli/public\"},\n      {\"url\":\"https://arbitrum-goerli.public.blastapi.io\"}\n    ]\n  },\n  {\n    \"name\": \"Arbitrum Rinkeby\",\n    \"symbol\": \"Arbitrum\",\n    \"chainId\": 10110,\n    \"nativeChainId\": 421611,\n    \"nativeCurrency\": {\n      \"name\": \"ETH\",\n      \"symbol\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"arbiscan-testnet\",\n        \"url\": \"https://testnet.arbiscan.io\"\n      },\n      {\n        \"name\": \"arbitrum-rinkeby\",\n        \"url\": \"https://rinkeby-explorer.arbitrum.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rinkeby.arbitrum.io/rpc\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Optimism\",\n    \"symbol\": \"Optimism\",\n    \"chainId\": 111,\n    \"nativeChainId\": 10,\n    \"nativeCurrency\": {\n      \"symbol\": \"ETH\",\n      \"name\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"etherscan\",\n        \"url\": \"https://optimistic.etherscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://mainnet.optimism.io\",\n        \"timeout\": 8000,\n        \"weight\": 1000000\n      },\n      {\n        \"url\": \"https://optimism.publicnode.com\"\n      },\n      {\"url\": \"https://rpc.ankr.com/optimism\"},\n      {\"url\":\"https://optimism-mainnet.public.blastapi.io\"}\n    ]\n  },\n  {\n    \"name\": \"Optimism Kovan\",\n    \"symbol\": \"Optimism\",\n    \"chainId\": 10111,\n    \"nativeChainId\": 69,\n    \"nativeCurrency\": {\n      \"symbol\": \"ETH\",\n      \"name\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"etherscan\",\n        \"url\": \"https://kovan-optimistic.etherscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://kovan.optimism.io/\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Optimism Goerli\",\n    \"symbol\": \"Optimism\",\n    \"chainId\": 10132,\n    \"nativeChainId\": 420,\n    \"nativeCurrency\": {\n      \"symbol\": \"ETH\",\n      \"name\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"url\": \"https://goerli-optimism.etherscan.io\",\n        \"name\": \"Optimism Goerli block explorer\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://goerli.optimism.io\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Swimmer\",\n    \"symbol\": \"swimmer\",\n    \"chainId\": 114,\n    \"nativeChainId\": 0,\n    \"nativeCurrency\": {\n      \"symbol\": \"TUS\",\n      \"name\": \"TUS\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [],\n    \"rpcs\": [\n      {\n        \"url\": \"https://avax-cra-rpc.gateway.pokt.network/\"\n      }\n    ]\n  },\n  {\n    \"name\": \"DFK\",\n    \"symbol\": \"dfk\",\n    \"chainId\": 115,\n    \"nativeChainId\": 53935,\n    \"nativeCurrency\": {\n      \"symbol\": \"JEWEL\",\n      \"name\": \"JEWEL\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"ethernal\",\n        \"url\": \"https://explorer.dfkchain.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Harmony\",\n    \"symbol\": \"harmony\",\n    \"chainId\": 116,\n    \"nativeChainId\": 1666600000,\n    \"nativeCurrency\": {\n      \"symbol\": \"ONE\",\n      \"name\": \"ONE\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Harmony Block Explorer\",\n        \"url\": \"https://explorer.harmony.one\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://harmony-mainnet.chainstacklabs.com\"\n      },\n      {\n        \"url\": \"https://api.harmony.one\"\n      },\n      {\n        \"url\": \"https://api.s0.t.hmny.io\"\n      },\n      {\n        \"url\": \"https://a.api.s0.t.hmny.io\"\n      },\n      {\n        \"url\": \"https://rpc.ankr.com/harmony\"\n      },\n      {\n        \"url\": \"https://harmony-0-rpc.gateway.pokt.network\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Aptos\",\n    \"symbol\": \"APTOS\",\n    \"chainId\": 108,\n    \"nativeChainId\": 1,\n    \"nativeCurrency\": {\n      \"symbol\": \"APT\",\n      \"name\": \"AptosCoin\",\n      \"decimals\": 8,\n      \"address\": \"0x1::aptos_coin::AptosCoin\"\n    },\n    \"blockExplorers\": [\n      {\n        \"url\": \"https://explorer.aptoslabs.com\",\n        \"name\": \"APTOS Testnet block explorer\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://api.mycryptoapi.com/eth\"\n      },\n      {\n        \"url\": \"https://cloudflare-eth.com\"\n      },\n      {\n        \"url\": \"https://ethereum.publicnode.com\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Aptos Testnet\",\n    \"symbol\": \"APTOS\",\n    \"chainId\": 10108,\n    \"nativeChainId\": 2,\n    \"nativeCurrency\": {\n      \"symbol\": \"APT\",\n      \"name\": \"AptosCoin\",\n      \"decimals\": 8,\n      \"address\": \"0x1::aptos_coin::AptosCoin\"\n    },\n    \"blockExplorers\": [\n      {\n        \"url\": \"https://explorer.aptoslabs.com\",\n        \"name\": \"APTOS Testnet block explorer\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://node.expanse.tech\"\n      }\n    ]\n  },\n  {\n    \"name\": \"MOONBEAM\",\n    \"symbol\": \"moonbeam\",\n    \"chainId\": 126,\n    \"nativeChainId\": 1284,\n    \"nativeCurrency\": {\n      \"symbol\": \"GLMR\",\n      \"name\": \"GLMR\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"moonscan\",\n        \"url\": \"https://moonbeam.moonscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.api.moonbeam.network\"\n      },\n      {\n        \"url\": \"wss://wss.api.moonbeam.network\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Metis\",\n    \"symbol\": \"Metis\",\n    \"chainId\": 151,\n    \"nativeChainId\": 1088,\n    \"nativeCurrency\": {\n      \"symbol\": \"METIS\",\n      \"name\": \"METIS\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"blockscout\",\n        \"url\": \"https://andromeda-explorer.metis.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://andromeda.metis.io/?owner=1088\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Metis\",\n    \"symbol\": \"Metis\",\n    \"chainId\": 10151,\n    \"nativeChainId\": 599,\n    \"nativeCurrency\": {\n      \"symbol\": \"METIS\",\n      \"name\": \"METIS\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"blockscout\",\n        \"url\": \"https://goerli.explorer.metisdevops.link\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://goerli.gateway.metisdevops.link\"\n      }\n    ]\n  },\n  {\n    \"name\": \"DFK Chain Test\",\n    \"symbol\": \"DFK\",\n    \"chainId\": 10115,\n    \"nativeChainId\": 335,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"JEWEL\",\n      \"name\": \"Jewel\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"ethernal\",\n        \"url\": \"https://explorer-test.dfkchain.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://subnets.avax.network/defi-kingdoms/dfk-chain-testnet/rpc\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Harmony Testnet Shard 0\",\n    \"symbol\": \"Harmony\",\n    \"chainId\": 10133,\n    \"nativeChainId\": 1666700000,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ONE\",\n      \"name\": \"ONE\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Harmony Testnet Block Explorer\",\n        \"url\": \"https://explorer.pops.one\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://api.s0.b.hmny.io\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Dexalot Subnet Testnet\",\n    \"symbol\": \"DEXALOT\",\n    \"chainId\": 10118,\n    \"nativeChainId\": 432201,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ALOT\",\n      \"name\": \"Dexalot\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Avalanche Subnet Testnet Explorer\",\n        \"url\": \"https://subnets-test.avax.network/dexalot\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://subnets.avax.network/dexalot/testnet/rpc\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Kovan\",\n    \"symbol\": \"kov\",\n    \"chainId\": 10120,\n    \"nativeChainId\": 42,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Kovan Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"etherscan\",\n        \"url\": \"https://kovan.etherscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://kovan.poa.network\"\n      },\n      {\n        \"url\": \"http://kovan.poa.network:8545\"\n      },\n      {\n        \"url\": \"ws://kovan.poa.network:8546\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Optimism on Gnosis\",\n    \"symbol\": \"OGC\",\n    \"chainId\": 10145,\n    \"nativeChainId\": 300,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"xDAI\",\n      \"name\": \"xDAI\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"blockscout\",\n        \"url\": \"https://blockscout.com/xdai/optimism\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://optimism.gnosischain.com\"\n      },\n      {\n        \"url\": \"wss://optimism.gnosischain.com/wss\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Celo Mainnet\",\n    \"symbol\": \"CELO\",\n    \"chainId\": 125,\n    \"nativeChainId\": 42220,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"CELO\",\n      \"name\": \"CELO\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Celoscan\",\n        \"url\": \"https://celoscan.io\"\n      },\n      {\n        \"name\": \"blockscout\",\n        \"url\": \"https://explorer.celo.org\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://forno.celo.org\"\n      },\n      {\n        \"url\": \"wss://forno.celo.org/ws\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Celo Alfajores Testnet\",\n    \"symbol\": \"CELO\",\n    \"chainId\": 10125,\n    \"nativeChainId\": 44787,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"CELO\",\n      \"name\": \"CELO\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Celoscan\",\n        \"url\": \"https://celoscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://alfajores-forno.celo-testnet.org\"\n      },\n      {\n        \"url\": \"wss://alfajores-forno.celo-testnet.org/ws\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Moonbase Alpha\",\n    \"symbol\": \"MOON\",\n    \"chainId\": 10126,\n    \"nativeChainId\": 1287,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"DEV\",\n      \"name\": \"Dev\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"moonscan\",\n        \"url\": \"https://moonbase.moonscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.api.moonbase.moonbeam.network\"\n      },\n      {\n        \"url\": \"wss://wss.api.moonbase.moonbeam.network\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Boba Network\",\n    \"symbol\": \"Boba\",\n    \"chainId\": 127,\n    \"nativeChainId\": 288,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Bobascan\",\n        \"url\": \"https://bobascan.com\"\n      },\n      {\n        \"name\": \"Blockscout\",\n        \"url\": \"https://blockexplorer.boba.network\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://mainnet.boba.network/\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Boba Network Rinkeby Testnet\",\n    \"symbol\": \"BobaRinkeby\",\n    \"chainId\": 10144,\n    \"nativeChainId\": 28,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Blockscout\",\n        \"url\": \"https://blockexplorer.rinkeby.boba.network\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rinkeby.boba.network/\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Portal Fantasy Chain Test\",\n    \"symbol\": \"PF\",\n    \"chainId\": 10128,\n    \"nativeChainId\": 808,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"PFT\",\n      \"name\": \"Portal Fantasy Token\"\n    },\n    \"blockExplorers\": [],\n    \"rpcs\": [\n      {\n        \"url\": \"https://subnets.avax.network/portal-fantasy/testnet/rpc\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Aurora Mainnet\",\n    \"symbol\": \"NEAR\",\n    \"chainId\": 129,\n    \"nativeChainId\": 1313161554,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"aurorascan.dev\",\n        \"url\": \"https://aurorascan.dev\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://mainnet.aurora.dev\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Aurora Testnet\",\n    \"symbol\": \"NEAR\",\n    \"chainId\": 10129,\n    \"nativeChainId\": 1313161555,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"aurorascan.dev\",\n        \"url\": \"https://testnet.aurorascan.dev\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://testnet.aurora.dev/\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Astar\",\n    \"symbol\": \"ASTR\",\n    \"chainId\": 146,\n    \"nativeChainId\": 592,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ASTR\",\n      \"name\": \"Astar\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"subscan\",\n        \"url\": \"https://astar.subscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.astar.network:8545\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Core Blockchain Mainnet\",\n    \"symbol\": \"Core\",\n    \"chainId\": 153,\n    \"nativeChainId\": 1116,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"CORE\",\n      \"name\": \"Core Blockchain Native Token\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Core Scan\",\n        \"url\": \"https://scan.coredao.org\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.coredao.org/\"\n      },\n      {\n        \"url\": \"https://rpc-core.icecreamswap.com\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Core Blockchain Testnet\",\n    \"symbol\": \"Core\",\n    \"chainId\": 10153,\n    \"nativeChainId\": 1115,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"tCORE\",\n      \"name\": \"Core Blockchain Testnet Native Token\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Core Scan Testnet\",\n        \"url\": \"https://scan.test.btcs.network\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.test.btcs.network/\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Dexalot Subnet\",\n    \"symbol\": \"DEXALOT\",\n    \"chainId\": 118,\n    \"nativeChainId\": 432204,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ALOT\",\n      \"name\": \"Dexalot\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Avalanche Subnet Explorer\",\n        \"url\": \"https://subnets.avax.network/dexalot\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://subnets.avax.network/dexalot/mainnet/rpc\"\n      }\n    ]\n  },\n  {\n    \"name\": \"DOS Chain\",\n    \"symbol\": \"DOS\",\n    \"chainId\": 149,\n    \"nativeChainId\": 7979,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"DOS\",\n      \"name\": \"DOS\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"DOScan\",\n        \"url\": \"https://doscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://main.doschain.com\"\n      }\n    ]\n  },\n  {\n    \"name\": \"DOS Tesnet\",\n    \"symbol\": \"DOS\",\n    \"chainId\": 10162,\n    \"nativeChainId\": 3939,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"DOS\",\n      \"name\": \"DOS\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"DOScan-Test\",\n        \"url\": \"https://test.doscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://test.doschain.com\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Fuse Mainnet\",\n    \"symbol\": \"FUSE\",\n    \"chainId\": 138,\n    \"nativeChainId\": 122,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"FUSE\",\n      \"name\": \"Fuse\"\n    },\n    \"blockExplorers\": [],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.fuse.io\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Gnosis\",\n    \"symbol\": \"GNO\",\n    \"chainId\": 145,\n    \"nativeChainId\": 100,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"xDAI\",\n      \"name\": \"xDAI\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"gnosisscan\",\n        \"url\": \"https://gnosisscan.io\"\n      },\n      {\n        \"name\": \"blockscout\",\n        \"url\": \"https://blockscout.com/xdai/mainnet\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.gnosischain.com\"\n      },\n      {\n        \"url\": \"https://rpc.ankr.com/gnosis\"\n      },\n      {\n        \"url\": \"https://gnosischain-rpc.gateway.pokt.network\"\n      },\n      {\n        \"url\": \"https://gnosis-mainnet.public.blastapi.io\"\n      },\n      {\n        \"url\": \"wss://rpc.gnosischain.com/wss\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Goerli\",\n    \"symbol\": \"gor\",\n    \"chainId\": 154,\n    \"nativeChainId\": 5,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Goerli Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"etherscan-goerli\",\n        \"url\": \"https://goerli.etherscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.goerli.mudit.blog/\"\n      },\n      {\"url\":\"https://rpc.ankr.com/eth_goerli\"},\n      {\"url\":\"https://eth-goerli.public.blastapi.io\"}\n    ]\n  },\n  {\n    \"name\": \"Klaytn Mainnet Cypress\",\n    \"symbol\": \"KLAY\",\n    \"chainId\": 150,\n    \"nativeChainId\": 8217,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"KLAY\",\n      \"name\": \"KLAY\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Klaytnscope\",\n        \"url\": \"https://scope.klaytn.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://public-node-api.klaytnapi.com/v1/cypress\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Klaytn Testnet Baobab\",\n    \"symbol\": \"KLAY\",\n    \"chainId\": 10150,\n    \"nativeChainId\": 1001,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"KLAY\",\n      \"name\": \"KLAY\"\n    },\n    \"blockExplorers\": [],\n    \"rpcs\": [\n      {\n        \"url\": \"https://api.baobab.klaytn.net:8651\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Meter Mainnet\",\n    \"symbol\": \"METER\",\n    \"chainId\": 156,\n    \"nativeChainId\": 82,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"MTR\",\n      \"name\": \"Meter\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Meter Mainnet Scan\",\n        \"url\": \"https://scan.meter.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.meter.io\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Meter Testnet\",\n    \"symbol\": \"METER Testnet\",\n    \"chainId\": 10156,\n    \"nativeChainId\": 83,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"MTR\",\n      \"name\": \"Meter\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Meter Testnet Scan\",\n        \"url\": \"https://scan-warringstakes.meter.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpctest.meter.io\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Moonriver\",\n    \"symbol\": \"MOON\",\n    \"chainId\": 167,\n    \"nativeChainId\": 1285,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"MOVR\",\n      \"name\": \"Moonriver\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"moonscan\",\n        \"url\": \"https://moonriver.moonscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.api.moonriver.moonbeam.network\"\n      },\n      {\n        \"url\": \"wss://wss.api.moonriver.moonbeam.network\"\n      }\n    ]\n  },\n  {\n    \"name\": \"OKXChain Mainnet\",\n    \"symbol\": \"okxchain\",\n    \"chainId\": 155,\n    \"nativeChainId\": 66,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"OKT\",\n      \"name\": \"OKXChain Global Utility Token\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"OKLink\",\n        \"url\": \"https://www.oklink.com/en/okc\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://exchainrpc.okex.org\"\n      },\n      {\n        \"url\": \"https://okc-mainnet.gateway.pokt.network/v1/lb/6275309bea1b320039c893ff\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Sepolia\",\n    \"symbol\": \"sep\",\n    \"chainId\": 161,\n    \"nativeChainId\": 11155111,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Sepolia Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"etherscan-sepolia\",\n        \"url\": \"https://sepolia.etherscan.io\"\n      },\n      {\n        \"name\": \"otterscan-sepolia\",\n        \"url\": \"https://sepolia.otterscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.sepolia.org\"\n      },\n      {\n        \"url\": \"https://rpc2.sepolia.org\"\n      },\n      {\n        \"url\": \"https://rpc-sepolia.rockx.com\"\n      }\n    ]\n  },\n  {\n    \"name\": \"zkSync Era Mainnet\",\n    \"symbol\": \"zksync\",\n    \"chainId\": 165,\n    \"nativeChainId\": 324,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"zkSync Era Block Explorer\",\n        \"url\": \"https://explorer.zksync.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://mainnet.era.zksync.io\"\n      }\n    ]\n  },\n  {\n    \"name\": \"zkSync Era Testnet\",\n    \"symbol\": \"zksync-goerli\",\n    \"chainId\": 10165,\n    \"nativeChainId\": 280,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"zkSync Era Block Explorer\",\n        \"url\": \"https://goerli.explorer.zksync.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://testnet.era.zksync.dev\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Base Testnet\",\n    \"symbol\": \"base\",\n    \"chainId\": 10160,\n    \"nativeChainId\": 84531,\n    \"nativeCurrency\": {\n      \"name\": \"Ether\",\n      \"symbol\": \"ETH\",\n      \"decimals\": 18\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"basescan\",\n        \"url\": \"https://goerli.basescan.org\"\n      },\n      {\n        \"name\": \"basescout\",\n        \"url\": \"https://base-goerli.blockscout.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://goerli.base.org\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Shrapnel Subnet\",\n    \"symbol\": \"Shrapnel\",\n    \"chainId\": 148,\n    \"nativeChainId\": 2044,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"SHRAPG\",\n      \"name\": \"Shrapnel Gas Token\"\n    },\n    \"blockExplorers\": [],\n    \"rpcs\": [\n      {\n        \"url\": \"https://subnets.avax.network/shrapnel/mainnet/rpc\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Tenet\",\n    \"symbol\": \"tenet\",\n    \"chainId\": 173,\n    \"nativeChainId\": 1559,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"TENET\",\n      \"name\": \"TENET\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"TenetScan Mainnet\",\n        \"url\": \"https://tenetscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.tenet.org\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Tenet Testnet\",\n    \"symbol\": \"tenet-testnet\",\n    \"chainId\": 10173,\n    \"nativeChainId\": 155,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"TENET\",\n      \"name\": \"TENET\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"TenetScan Testnet\",\n        \"url\": \"https://testnet.tenetscan.io\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.testnet.tenet.org\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Polygon zkEVM\",\n    \"symbol\": \"zkevm\",\n    \"chainId\": 158,\n    \"nativeChainId\": 1101,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"blockscout\",\n        \"url\": \"https://zkevm.polygonscan.com\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://zkevm-rpc.com\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Polygon zkEVM Testnet\",\n    \"symbol\": \"testnet-zkEVM-mango\",\n    \"chainId\": 10158,\n    \"nativeChainId\": 1442,\n    \"nativeCurrency\": {\n      \"decimals\": 18,\n      \"symbol\": \"ETH\",\n      \"name\": \"Ether\"\n    },\n    \"blockExplorers\": [\n      {\n        \"name\": \"Polygon zkEVM explorer\",\n        \"url\": \"https://explorer.public.zkevm-test.net\"\n      }\n    ],\n    \"rpcs\": [\n      {\n        \"url\": \"https://rpc.public.zkevm-test.net\"\n      }\n    ]\n  }\n]\n","import {ChainId} from '@layerzerolabs/lz-sdk';\n\nconst EXCEPTIONS: Set<number> = new Set([20008]);\n\nexport function toULNv2(chainId: ChainId): ChainId {\n  if (EXCEPTIONS.has(chainId)) return chainId;\n  if (chainId < 100) return chainId + 100;\n  if (chainId < 10000) return chainId;\n  if (chainId < 10100) return chainId + 100;\n  if (chainId < 20000) return chainId;\n  if (chainId < 20100) return chainId + 100;\n  return chainId;\n}\n","import {ChainId} from '@layerzerolabs/lz-sdk';\nexport enum AptosChainId {\n  TESTNET = 2,\n  MAINNET = 1,\n}\n\nexport enum SolanaChainId {\n  MAINNET = 1,\n  TESTNET = 2,\n}\n\nexport function fromAptosChainId(aptosChainId: number | string): ChainId | undefined {\n  aptosChainId = Number(aptosChainId);\n  if (aptosChainId === AptosChainId.MAINNET) return ChainId.APTOS;\n  if (aptosChainId === AptosChainId.TESTNET) {\n    return ChainId.APTOS_TESTNET;\n  }\n  return undefined;\n}\n","import {ChainId} from '@layerzerolabs/lz-sdk';\nimport {getNetwork} from './network';\n\nexport enum IconTheme {\n  LZ_DARK = 'lz-dark',\n  LZ_LIGHT = 'lz-light',\n  STG_LIGHT = 'stargate-light',\n}\n\nlet defaultTheme = IconTheme.LZ_DARK;\nconst baseUrl = 'https://icons-ckg.pages.dev';\n\nexport function getCurrencyIcon(symbol: string, theme = getCurrencyIcon.defaultTheme) {\n  return [baseUrl, theme, 'tokens', symbol.toLowerCase() + '.svg'].join('/');\n}\n\nexport function getNetworkIcon(\n  chainIdOrSymbol: ChainId | string,\n  theme = getNetworkIcon.defaultTheme,\n) {\n  const symbol =\n    typeof chainIdOrSymbol === 'string' ? chainIdOrSymbol : getNetwork(chainIdOrSymbol).symbol;\n\n  return [baseUrl, theme, 'networks', symbol.toLowerCase() + '.svg'].join('/');\n}\n\nexport function getWalletIcon(walletType: string, theme = getWalletIcon.defaultTheme) {\n  return [baseUrl, theme, 'wallets', walletType.toLowerCase() + '.svg'].join('/');\n}\n\ngetCurrencyIcon.defaultTheme = defaultTheme as IconTheme;\ngetNetworkIcon.defaultTheme = defaultTheme as IconTheme;\ngetWalletIcon.defaultTheme = defaultTheme as IconTheme;\n\nexport function setIconTheme(theme: typeof getCurrencyIcon.defaultTheme) {\n  getCurrencyIcon.defaultTheme = theme;\n  getNetworkIcon.defaultTheme = theme;\n  getWalletIcon.defaultTheme = theme;\n}\n","import _Decimal from 'decimal.js-light';\nimport _Big, {RoundingMode} from 'big.js';\nimport toFormat from 'toformat';\n\nimport {BigintIsh, Rounding} from './constants';\nimport assert from 'assert';\n\nconst Decimal = toFormat(_Decimal);\nconst Big = toFormat(_Big);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: 0 as RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: 1 as RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: 3 as RoundingMode.RoundUp,\n};\n\nexport class Fraction {\n  public readonly numerator: bigint;\n  public readonly denominator: bigint;\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = BigInt(1)) {\n    this.numerator = BigInt(numerator);\n    this.denominator = BigInt(denominator);\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string' ||\n      typeof fractionish === 'bigint'\n    )\n      return new Fraction(fractionish);\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;\n    throw new Error('Could not parse fraction');\n  }\n\n  // performs floor division\n  public get quotient(): bigint {\n    return this.numerator / this.denominator;\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(this.numerator % this.denominator, this.denominator);\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (this.denominator === otherParsed.denominator) {\n      return new Fraction(this.numerator + otherParsed.numerator, this.denominator);\n    }\n    return new Fraction(\n      this.numerator * otherParsed.denominator + otherParsed.numerator * this.denominator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (this.denominator === otherParsed.denominator) {\n      return new Fraction(this.numerator - otherParsed.numerator, this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator * otherParsed.denominator - otherParsed.numerator * this.denominator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return this.numerator * otherParsed.denominator < otherParsed.numerator * this.denominator;\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return this.numerator * otherParsed.denominator === otherParsed.numerator * this.denominator;\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return this.numerator * otherParsed.denominator > otherParsed.numerator * this.denominator;\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(\n      this.numerator * otherParsed.numerator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(\n      this.numerator * otherParsed.denominator,\n      this.denominator * otherParsed.numerator,\n    );\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = {groupSeparator: ''},\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    assert(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n    assert(significantDigits > 0, `${significantDigits} is not positive.`);\n\n    Decimal.set({precision: significantDigits + 1, rounding: toSignificantRounding[rounding]});\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = {groupSeparator: ''},\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    assert(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n    assert(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format);\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n}\n","// exports for external consumption\nexport type BigintIsh = string | number | bigint;\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n);\n","import {Currency} from '../currency/currency';\nimport {Fraction} from './fraction';\nimport _Big from 'big.js';\n\nimport toFormat from 'toformat';\nimport {BigintIsh, Rounding, MaxUint256} from './constants';\nimport assert from 'assert';\n\nconst Big = toFormat(_Big);\n\nexport class CurrencyAmount<T extends Currency = Currency> extends Fraction {\n  public readonly currency: T;\n  public readonly decimalScale: bigint;\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator);\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator);\n    assert(this.quotient <= MaxUint256, 'AMOUNT');\n    this.currency = currency;\n    this.decimalScale = BigInt(10) ** BigInt(currency.decimals);\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    assert(this.currency.equals(other.currency), 'CURRENCY');\n    const added = super.add(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    assert(this.currency.equals(other.currency), 'CURRENCY');\n    const subtracted = super.subtract(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      subtracted.numerator,\n      subtracted.denominator,\n    );\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      multiplied.numerator,\n      multiplied.denominator,\n    );\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      divided.numerator,\n      divided.denominator,\n    );\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    assert(decimalPlaces <= this.currency.decimals, 'DECIMALS');\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  }\n\n  public toExact(format: object = {groupSeparator: ''}): string {\n    Big.DP = this.currency.decimals;\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  }\n}\n","import {BigintIsh, Rounding} from './constants';\nimport {Fraction} from './fraction';\n\nconst ONE_HUNDRED = new Fraction(BigInt(100));\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true;\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other));\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other));\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other));\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other));\n  }\n\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding,\n  ): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n","import invariant from 'tiny-invariant';\n\nimport {BigintIsh, Rounding} from '../fraction/constants';\nimport {Currency} from '../currency';\nimport {Fraction} from '../fraction/fraction';\nimport {CurrencyAmount} from './currencyAmount';\n\nexport class Price<\n  TBase extends Currency = Currency,\n  TQuote extends Currency = Currency,\n> extends Fraction {\n  public readonly baseCurrency: TBase; // input i.e. denominator\n  public readonly quoteCurrency: TQuote; // output i.e. numerator\n  public readonly scalar: Fraction; // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote>}]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh;\n\n    if (args.length === 4) {\n      [baseCurrency, quoteCurrency, denominator, numerator] = args;\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount);\n      [baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ];\n    }\n    super(numerator, denominator);\n\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(\n      BigInt(10) ** BigInt(baseCurrency.decimals),\n      BigInt(10) ** BigInt(quoteCurrency.decimals),\n    );\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>,\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN');\n    const fraction = super.multiply(other);\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator,\n    );\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN');\n    const result = super.multiply(currencyAmount);\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator,\n    );\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar);\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding,\n  ): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import type {BigNumber} from 'ethers';\nimport {Fraction} from '../fraction';\n\nexport function bpToFraction(bp: BigNumber, decimals = 4) {\n  return new Fraction(bp.toNumber(), 10 ** decimals);\n}\n","import {Currency} from '../../currency';\nimport {CurrencyAmount} from '../currencyAmount';\n\nexport function castCurrencyAmountUnsafe(\n  input: CurrencyAmount,\n  dstCurrency: Currency,\n): CurrencyAmount {\n  const srcCurrency = input.currency;\n  if (srcCurrency.decimals === dstCurrency.decimals) {\n    return CurrencyAmount.fromRawAmount(dstCurrency, input.quotient);\n  }\n  return CurrencyAmount.fromRawAmount(dstCurrency, input.quotient)\n    .multiply(10 ** dstCurrency.decimals)\n    .divide(10 ** srcCurrency.decimals);\n}\n","import {CurrencyAmount} from '../currencyAmount';\nimport type {FiatAmount} from '../fiatAmount';\n\nexport function formatAmount(amount: FiatAmount | CurrencyAmount) {\n  if (amount instanceof CurrencyAmount) {\n    return formatCurrencyAmount(amount);\n  }\n}\n\nformatAmount.nice = (amount?: FiatAmount | CurrencyAmount) => {\n  if (amount instanceof CurrencyAmount) {\n    return formatCurrencyAmount.nice(amount);\n  }\n};\n\nexport function formatCurrencyAmount(value: CurrencyAmount) {\n  return value.toExact();\n}\n\nformatCurrencyAmount.short = (value?: CurrencyAmount, dp = 1) => {\n  if (!value) return '-';\n  const formatted = formatCurrencyAmount(value);\n  try {\n    const number = parseFloat(formatted);\n    if (number > 1e6) {\n      const m = number / 1e6;\n      return (\n        m.toLocaleString('en-US', {\n          maximumFractionDigits: dp,\n          minimumFractionDigits: 1,\n        }) + 'M'\n      );\n    }\n    return number.toLocaleString('en-US', {\n      maximumFractionDigits: dp,\n      minimumFractionDigits: 1,\n    });\n  } catch {\n    const [whole, rest = '0'] = formatted.split('.');\n    return whole + '.' + rest.substr(0, dp);\n  }\n};\n\nconst niceFormat = {groupSeparator: ','};\nformatCurrencyAmount.nice = (value?: CurrencyAmount, dp = 2) => {\n  if (!value) return '-';\n  // todo: workaround for serialization of tokens\n  if (!value.toFixed) return '-';\n  return value.toFixed(dp, niceFormat);\n};\n\nexport function formatFiatAmount(amount: FiatAmount) {\n  return amount.value.toLocaleString('en-US', {\n    currency: amount.currency,\n    style: 'currency',\n  });\n}\n\nformatFiatAmount.nice = (amount: FiatAmount | undefined) => {\n  if (!amount) return '-';\n  return formatFiatAmount(amount);\n};\n\nformatFiatAmount.short = (value: number, currency: string = 'USD') => {\n  if (value >= 1e6) {\n    const m = value / 1e6;\n    return (\n      m.toLocaleString('en-US', {\n        currency,\n        style: 'currency',\n        maximumFractionDigits: 1,\n      }) + 'M'\n    );\n  }\n  return value.toLocaleString('en-US', {\n    currency,\n    style: 'currency',\n  });\n};\n","import {utils} from 'ethers';\nimport {Currency} from '../../currency';\nimport {CurrencyAmount} from '../currencyAmount';\n\nexport function parseCurrencyAmount<T extends Currency>(\n  currency: T,\n  value: string,\n): CurrencyAmount<T> {\n  const typedValueParsed = utils.parseUnits(value, currency.decimals);\n  return CurrencyAmount.fromRawAmount(currency, typedValueParsed.toHexString());\n}\n\nexport function tryParseCurrencyAmount<T extends Currency>(\n  currency?: T,\n  value?: string,\n): CurrencyAmount<T> | undefined {\n  if (currency === undefined || value === undefined) return undefined;\n  try {\n    return parseCurrencyAmount(currency, value);\n  } catch {\n    //\n  }\n  return undefined;\n}\n","import {utils} from 'ethers';\nimport {Fraction} from '../fraction';\n\nexport function parseFraction(value: string, decimals: number): Fraction {\n  const parsed = utils.parseUnits(value, decimals);\n  const denominator = 10 ** decimals;\n  return new Fraction(parsed.toHexString(), denominator);\n}\n\nexport function tryParseFraction(value?: string, decimals: number = 4): Fraction | undefined {\n  if (value === undefined) return undefined;\n  try {\n    return parseFraction(value, decimals);\n  } catch {\n    //\n  }\n  return undefined;\n}\n","import {Currency} from '../../currency';\nimport {CurrencyAmount} from '../currencyAmount';\nimport {FiatAmount} from '../fiatAmount';\nimport {tryParseCurrencyAmount} from './parseCurrencyAmount';\n\nexport function sumUnsafe(amounts?: (CurrencyAmount | undefined)[], asCurrency?: Currency) {\n  if (!amounts || amounts.length === 0 || amounts.some((i) => !i)) {\n    return undefined;\n  }\n  asCurrency = asCurrency ?? amounts[0]!.currency;\n  let sum = 0;\n  for (let amount of amounts as CurrencyAmount[]) {\n    const float = parseFloat(amount.toExact());\n    sum += float;\n  }\n  if (!Number.isFinite(sum)) return undefined;\n  return tryParseCurrencyAmount(asCurrency, sum.toFixed(asCurrency.decimals));\n}\n\nexport function sumFiat(amounts?: (FiatAmount | undefined)[]): FiatAmount | undefined {\n  if (!amounts || amounts.length === 0) return undefined;\n  let sum = 0;\n  const currency = amounts[0]!.currency;\n  for (let amount of amounts) {\n    if (!amount) return undefined;\n    if (currency !== amount.currency) return undefined;\n    sum += amount.value;\n  }\n  if (!Number.isFinite(sum)) return undefined;\n  return {\n    currency,\n    value: sum,\n  };\n}\n","import {BigNumber} from 'ethers';\nimport {CurrencyAmount} from '../currencyAmount';\n\nexport function toBigNumber(amount: CurrencyAmount): BigNumber {\n  return BigNumber.from(amount.quotient.toString());\n}\n\nexport function toBigInt(amount: CurrencyAmount): bigint {\n  return BigInt(amount.quotient.toString());\n}\n","import {BigNumber} from 'ethers';\nimport {Currency} from '../../currency';\nimport {BigintIsh} from '../constants';\nimport {CurrencyAmount} from '../currencyAmount';\n\nexport function toCurrencyAmount<T extends Currency>(\n  token: T,\n  value: BigintIsh | BigNumber,\n): CurrencyAmount<T> {\n  if (BigNumber.isBigNumber(value)) value = value.toHexString();\n  return CurrencyAmount.fromRawAmount(token, value);\n}\n","import {CurrencyAmount} from '../currencyAmount';\n\nexport function removeDust(amount: CurrencyAmount, sharedDecimals: number) {\n  const localDecimals = amount.currency.decimals;\n  const diff = localDecimals - sharedDecimals;\n  if (diff > 0) {\n    return CurrencyAmount.fromRawAmount(\n      amount.currency,\n      amount.divide(10 ** diff).quotient,\n    ).multiply(10 ** diff);\n  }\n  return amount;\n}\n","interface WaitForPromise extends Promise<void> {\n  cancel(): void;\n}\n\nconst noop = () => {};\n\nexport function waitFor(\n  condition: () => boolean | undefined | null,\n  {timeout = 1000, interval = 100},\n): WaitForPromise {\n  let cancel: WaitForPromise['cancel'] = noop;\n  const promise: WaitForPromise = new Promise<void>((resolve, reject) => {\n    try {\n      if (condition()) {\n        resolve();\n        return;\n      }\n    } catch {\n      //pass\n    }\n\n    //\n    const id = setInterval(() => {\n      if (condition()) {\n        cancel();\n        resolve();\n      }\n    }, interval);\n\n    cancel = () => clearInterval(id);\n\n    setTimeout(() => {\n      cancel();\n      reject();\n    }, timeout);\n  }) as WaitForPromise;\n\n  promise.cancel = cancel;\n\n  return promise;\n}\n","import {ChainId, AVERAGE_BLOCK_TIME} from '@layerzerolabs/lz-sdk';\n\nexport const DEFAULT_BLOCK_TIME_SECONDS = 15.0;\nexport const DEFAULT_BLOCK_CONFIRMATIONS = 1;\n\nexport const BLOCK_CONFIRMATIONS = {\n  [ChainId.ETHEREUM]: 15,\n  [ChainId.AVALANCHE]: 12,\n  [ChainId.BSC]: 20,\n  [ChainId.POLYGON]: 512,\n  [ChainId.ARBITRUM]: 20,\n  [ChainId.OPTIMISM]: 20,\n  [ChainId.FANTOM]: 5,\n} as Record<ChainId, number>;\n\n/**\n *\n * @param chainId\n * @returns seconds\n */\nexport function getBlockTime(chainId: ChainId) {\n  return AVERAGE_BLOCK_TIME[chainId] ?? DEFAULT_BLOCK_TIME_SECONDS;\n}\n\nexport function getRequiredBlockConfirmations(chainId: ChainId) {\n  return BLOCK_CONFIRMATIONS[chainId] ?? DEFAULT_BLOCK_CONFIRMATIONS;\n}\n\n/**\n *\n * @param chainId\n * @returns seconds\n */\nexport function getEstimatedTransactionTime(chainId: ChainId) {\n  const confirmations = getRequiredBlockConfirmations(chainId);\n  const blockTime = getBlockTime(chainId);\n  const extraDelay = 10; // (mempool delay - depends on GAS)\n  return (confirmations + 1) * blockTime + extraDelay;\n}\n\nfunction getExpectedConfirmationDateSameChain(\n  chainId: ChainId,\n  nowTimestamp = timeStamp(),\n): number {\n  const delay = getEstimatedTransactionTime(chainId);\n  return nowTimestamp + delay;\n}\n\nexport function getDefaultMessageDuration(srcChainId: ChainId, dstChainId: ChainId): number {\n  const fromDelay = getBlockTime(srcChainId) * (1 + getRequiredBlockConfirmations(srcChainId));\n  const toDelay = 2 * getBlockTime(dstChainId);\n  const lambdaDelay = 15.0;\n  const extraDelay = 10.0;\n  return fromDelay + toDelay + lambdaDelay + extraDelay;\n}\n\nfunction getExpectedConfirmationDateBetweenChains(\n  srcChainId: ChainId,\n  dstChainId: ChainId,\n  nowTimestamp = timeStamp(),\n): number {\n  // todo: use actual values\n  if (srcChainId === ChainId.APTOS || srcChainId === ChainId.APTOS_TESTNET) {\n    return nowTimestamp + 3 * 24 * 3600;\n  }\n  const duration = getDefaultMessageDuration(srcChainId, dstChainId);\n  return nowTimestamp + duration;\n}\n\nexport function timeStamp() {\n  return Math.floor(Date.now() / 1000);\n}\n\n/**\n *\n * @param srcChainId\n * @param dstChainId\n * @param nowTimestamp\n * @returns seconds\n */\nexport function getExpectedDate(\n  srcChainId: ChainId,\n  dstChainId?: ChainId,\n  nowTimestamp = timeStamp(),\n) {\n  if (!dstChainId) return getExpectedConfirmationDateSameChain(srcChainId, nowTimestamp);\n  return getExpectedConfirmationDateBetweenChains(srcChainId, dstChainId, nowTimestamp);\n}\n","function formatUserInput(value: string) {\n  value = value.replace(/,/g, '.');\n  // if (value.startsWith(\"0\") && value[1] !== \".\") {\n  //   value = value.slice(1);\n  // }\n  return value;\n}\n\nexport const tryParseNumber = (value: string) => {\n  const nextUserInput = formatUserInput(value);\n  if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n    return nextUserInput;\n  }\n  return undefined;\n};\n\nexport const parseNumber = (value: string) => {\n  const number = tryParseNumber(value);\n  if (!number) throw new Error(`Value \"${value}\" is invalid number`);\n  return number;\n};\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`);\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","export function convertToPaddedUint8Array(str: string, length: number) {\n  const value = str\n    .replace(/^0x/i, '')\n    .match(/.{1,2}/g)!\n    .map((byte) => parseInt(byte, 16));\n  const result = Uint8Array.from([...new Array(length - value.length).fill(0), ...value]);\n  return result;\n}\n","export function interpolateString(str: string, variables: Record<string, string | number>) {\n  const regex = /\\${([a-zA-Z0-9_]+)}/g;\n  return str.replace(regex, (_, variable) => {\n    const value = variables[variable];\n    if (value === undefined) {\n      throw new Error(`Undefined environment variable: ${variable}`);\n    }\n    return String(value);\n  });\n}\n","import {Signer} from 'ethers';\nimport {Currency, isCurrency, isToken} from '../currency';\nimport {isEvmChainId} from '../network';\nimport {Transaction} from '../transaction';\nimport {ResourceProvider} from './ResourceProvider';\n\nexport class ResourceProvider__currency_evm implements ResourceProvider<Signer, Currency> {\n  supports(resource: unknown): resource is Currency {\n    if (!isCurrency(resource)) return false;\n    return isEvmChainId(resource.chainId);\n  }\n  register(resource: Currency): Promise<Transaction<Signer>> {\n    throw new Error('Method not supported.');\n  }\n  async isRegistered(resource: Currency, address: string): Promise<boolean> {\n    return true;\n  }\n  getType(resource: Currency): string {\n    return `${resource.chainId}:${resource.symbol}:${isToken(resource) ? resource.address : '0x'}`;\n  }\n}\n","import assert from 'assert';\nimport {CurrencyAmount} from '../fraction/currencyAmount';\n\nexport class AdapterParams {\n  private constructor(\n    public readonly version: number,\n    public readonly extraGas = 200_000,\n    public readonly dstNativeAmount?: CurrencyAmount,\n    public readonly dstNativeAddress?: string,\n  ) {}\n\n  static forV1(extraGas?: number): AdapterParams {\n    return new AdapterParams(1, extraGas);\n  }\n\n  static forV2(input: {\n    extraGas?: number;\n    dstNativeAmount: CurrencyAmount;\n    dstNativeAddress: string;\n  }): AdapterParams {\n    assert(input.dstNativeAmount);\n    assert(input.dstNativeAddress);\n    return new AdapterParams(2, input.extraGas, input.dstNativeAmount, input.dstNativeAddress);\n  }\n\n  create(input: {\n    extraGas?: number | undefined;\n    dstNativeAmount?: CurrencyAmount;\n    dstNativeAddress?: string;\n  }) {\n    if (input.dstNativeAmount?.greaterThan(1)) {\n      return AdapterParams.forV1(input.extraGas);\n    } else {\n      assert(input.dstNativeAddress);\n      assert(input.dstNativeAmount);\n      //@ts-ignore\n      return AdapterParams.forV2(input);\n    }\n  }\n}\n"]}